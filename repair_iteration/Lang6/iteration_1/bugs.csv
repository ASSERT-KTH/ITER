bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action1	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  [BUGGY]    System.arraycopy(translators,  0,  newArray,  1,  translators.length);  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	109	109	1	add	    System.arraycopy(translators,  0,  newArray,  1,  translators.length);		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	29	1	add
2	[BUG]  [BUGGY]    System.arraycopy(translators,  0,  newArray,  1,  translators.length);  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  [BUGGY]    System.arraycopy(translators,  0,  newArray,  1,  translators.length);  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	109	109	1	replace	    System.arraycopy(translators,  0,  newArray,  1,  translators.length);		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	29	1	add
11	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  [BUGGY]  newArray[0]  =  null;  [BUGGY]  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	109	109	1	add	newArray[0]  =  null;	newArray[0]  =  this;  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	28	1	replace
12	[BUG]  [BUGGY]  newArray[0]  =  null;  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  [BUGGY]  newArray[0]  =  null;  [BUGGY]  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	109	109	1	replace	newArray[0]  =  null;	newArray[0]  =  this;  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	28	1	replace
31	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]    input  =  input.toString();  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	58	58	1	add	    input  =  input.toString();		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	5	1	add
32	[BUG]  [BUGGY]    input  =  input.toString();  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]    input  =  input.toString();  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	58	58	1	replace	    input  =  input.toString();		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	5	1	add
42	[BUG]  [BUGGY]  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  [BUGGY]  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  *  1];  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	108	108	1	add	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  *  1];	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  	compilable	  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs	26	1	replace
43	[BUG]  [BUGGY]  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  *  1];  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  [BUGGY]  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  *  1];  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	108	108	1	replace	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  *  1];	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  	compilable	  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs	26	1	replace
43	[BUG]  [BUGGY]  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  [BUGGY]  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  -  1];  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	108	108	1	add	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  -  1];	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  	compilable	  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs	26	1	replace
44	[BUG]  [BUGGY]  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  -  1];  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  [BUGGY]  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  -  1];  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	108	108	1	replace	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  -  1];	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  	compilable	  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs	26	1	replace
44	[BUG]  [BUGGY]  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  [BUGGY]  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  /  1];  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	108	108	1	add	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  /  1];	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  	compilable	  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs	26	1	replace
45	[BUG]  [BUGGY]  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  /  1];  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  [BUGGY]  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  /  1];  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	108	108	1	replace	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  /  1];	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  	compilable	  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs	26	1	replace
52	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]  while(pos  >  len)  {  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	while(pos  >  len)  {	while  (pos  <  len)  {  	compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	16	1	replace
53	[BUG]  [BUGGY]  while(pos  >  len)  {  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]  while(pos  >  len)  {  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while(pos  >  len)  {	while  (pos  <  len)  {  	compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	16	1	replace
53	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]  while(pos+len  <  len)  {  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	while(pos+len  <  len)  {	while  (pos  <  len)  {  	compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	16	1	replace
54	[BUG]  [BUGGY]  while(pos+len  <  len)  {  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]  while(pos+len  <  len)  {  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while(pos+len  <  len)  {	while  (pos  <  len)  {  	compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	16	1	replace
82	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]  int  len  =  input.length()  -  1;  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	add	int  len  =  input.length()  -  1;	int  len  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	14	1	replace
83	[BUG]  [BUGGY]  int  len  =  input.length()  -  1;  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]  int  len  =  input.length()  -  1;  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	replace	int  len  =  input.length()  -  1;	int  len  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	14	1	replace
83	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]  int  len  =  input.length()  -  2;  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	add	int  len  =  input.length()  -  2;	int  len  =  input.length();  	compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	14	1	replace
84	[BUG]  [BUGGY]  int  len  =  input.length()  -  2;  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]  int  len  =  input.length()  -  2;  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	replace	int  len  =  input.length()  -  2;	int  len  =  input.length();  	compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	14	1	replace
84	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]  int  len  =  input.length()  -  pos;  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	add	int  len  =  input.length()  -  pos;	int  len  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	14	1	replace
85	[BUG]  [BUGGY]  int  len  =  input.length()  -  pos;  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]  int  len  =  input.length()  -  pos;  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	replace	int  len  =  input.length()  -  pos;	int  len  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	14	1	replace
101	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  [BUGGY]  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(input  ==  null  ||  out  ==  null)  {	if  (input  ==  null)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	10	1	replace
102	[BUG]  [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  [BUGGY]  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  out  ==  null)  {	if  (input  ==  null)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	10	1	replace
102	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]  if(input  ==  out)  {  [BUGGY]  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(input  ==  out)  {	if  (input  ==  null)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	10	1	replace
103	[BUG]  [BUGGY]  if(input  ==  out)  {  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]  if(input  ==  out)  {  [BUGGY]  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  out)  {	if  (input  ==  null)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	10	1	replace
171	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]    pos+=  input.length();  [BUGGY]  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	add	    pos+=  input.length();		compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	15	1	add
172	[BUG]  [BUGGY]    pos+=  input.length();  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]    pos+=  input.length();  [BUGGY]  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	replace	    pos+=  input.length();		compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	15	1	add
181	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length());  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	58	58	1	add	StringWriter  writer  =  new  StringWriter(input.length());	StringWriter  writer  =  new  StringWriter(input.length()  *  2);  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	4	1	replace
182	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length());  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length());  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	58	58	1	replace	StringWriter  writer  =  new  StringWriter(input.length());	StringWriter  writer  =  new  StringWriter(input.length()  *  2);  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	4	1	replace
183	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  +  2);  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	58	58	1	add	StringWriter  writer  =  new  StringWriter(input.length()  +  2);	StringWriter  writer  =  new  StringWriter(input.length()  *  2);  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	4	1	replace
184	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  +  2);  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  +  2);  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	58	58	1	replace	StringWriter  writer  =  new  StringWriter(input.length()  +  2);	StringWriter  writer  =  new  StringWriter(input.length()  *  2);  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	4	1	replace
192	[BUG]  [BUGGY]  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  newArray[0]  =  this;  [BUGGY]  System.arraycopy(translators,  0,  newArray,  1,  translators.length  +  1);  [BUGGY]  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	110	110	1	add	System.arraycopy(translators,  0,  newArray,  1,  translators.length  +  1);	System.arraycopy(translators,  0,  newArray,  1,  translators.length);  	compilable	  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs	30	1	replace
193	[BUG]  [BUGGY]  System.arraycopy(translators,  0,  newArray,  1,  translators.length  +  1);  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  newArray[0]  =  this;  [BUGGY]  System.arraycopy(translators,  0,  newArray,  1,  translators.length  +  1);  [BUGGY]  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	110	110	1	replace	System.arraycopy(translators,  0,  newArray,  1,  translators.length  +  1);	System.arraycopy(translators,  0,  newArray,  1,  translators.length);  	compilable	  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs	30	1	replace
193	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  newArray[0]  =  this;  [BUGGY]  System.arraycopy(translators,  0,  newArray,  1,  translators.length  -  1);  [BUGGY]  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	110	110	1	add	System.arraycopy(translators,  0,  newArray,  1,  translators.length  -  1);	System.arraycopy(translators,  0,  newArray,  1,  translators.length);  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	30	1	replace
194	[BUG]  [BUGGY]  System.arraycopy(translators,  0,  newArray,  1,  translators.length  -  1);  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  newArray[0]  =  this;  [BUGGY]  System.arraycopy(translators,  0,  newArray,  1,  translators.length  -  1);  [BUGGY]  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	110	110	1	replace	System.arraycopy(translators,  0,  newArray,  1,  translators.length  -  1);	System.arraycopy(translators,  0,  newArray,  1,  translators.length);  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	30	1	replace
202	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	54	54	1	add	if(input  ==  null  ||  input.length()  ==  0)  {	if  (input  ==  null)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	2	1	replace
203	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	54	54	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {	if  (input  ==  null)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	2	1	replace
203	[BUG]  [BUGGY]  [FE]  AssertionError  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  [BUGGY]  if(input  ==  null  ||  input.charAt(input.length()  -  1)!=  0)  {  [BUGGY]  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	54	54	1	add	if(input  ==  null  ||  input.charAt(input.length()  -  1)!=  0)  {	if  (input  ==  null)  {  	compilable	  [FE]  AssertionError  testEscapeSurrogatePairs	2	1	replace
204	[BUG]  [BUGGY]  if(input  ==  null  ||  input.charAt(input.length()  -  1)!=  0)  {  [FE]  AssertionError  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  [BUGGY]  if(input  ==  null  ||  input.charAt(input.length()  -  1)!=  0)  {  [BUGGY]  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	54	54	1	replace	if(input  ==  null  ||  input.charAt(input.length()  -  1)!=  0)  {	if  (input  ==  null)  {  	compilable	  [FE]  AssertionError  testEscapeSurrogatePairs	2	1	replace
204	[BUG]  [BUGGY]  [FE]  AssertionError  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  [BUGGY]  if(input  ==  null  ||  input.length()  ==  2)  {  [BUGGY]  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	54	54	1	add	if(input  ==  null  ||  input.length()  ==  2)  {	if  (input  ==  null)  {  	compilable	  [FE]  AssertionError  testEscapeSurrogatePairs	2	1	replace
205	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  2)  {  [FE]  AssertionError  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  [BUGGY]  if(input  ==  null  ||  input.length()  ==  2)  {  [BUGGY]  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(input.length()  *  2);  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	54	54	1	replace	if(input  ==  null  ||  input.length()  ==  2)  {	if  (input  ==  null)  {  	compilable	  [FE]  AssertionError  testEscapeSurrogatePairs	2	1	replace
271	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [BUGGY]  for(int  pt  =  0;  pt  <  len;  pt++)  {  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	94	94	1	add	for(int  pt  =  0;  pt  <  len;  pt++)  {	for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	22	1	replace
272	[BUG]  [BUGGY]  for(int  pt  =  0;  pt  <  len;  pt++)  {  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [BUGGY]  for(int  pt  =  0;  pt  <  len;  pt++)  {  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	94	94	1	replace	for(int  pt  =  0;  pt  <  len;  pt++)  {	for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	22	1	replace
1	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]  if(consumed  >  0)  {  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	add	if(consumed  >  0)  {	if  (consumed  ==  0)  {  	compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	20	1	replace
2	[BUG]  [BUGGY]  if(consumed  >  0)  {  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]  if(consumed  >  0)  {  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	replace	if(consumed  >  0)  {	if  (consumed  ==  0)  {  	compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	20	1	replace
3	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]  if(consumed  <  0)  {  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	add	if(consumed  <  0)  {	if  (consumed  ==  0)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	20	1	replace
4	[BUG]  [BUGGY]  if(consumed  <  0)  {  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]  if(consumed  <  0)  {  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	replace	if(consumed  <  0)  {	if  (consumed  ==  0)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	20	1	replace
4	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]  if(consumed  <=  0)  {  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	add	if(consumed  <=  0)  {	if  (consumed  ==  0)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	20	1	replace
5	[BUG]  [BUGGY]  if(consumed  <=  0)  {  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]  if(consumed  <=  0)  {  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	replace	if(consumed  <=  0)  {	if  (consumed  ==  0)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	20	1	replace
22	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  newArray[0]  =  this;  [BUGGY]    System.arraycopy(translators,  0,  newArray,  0,  translators.length);  [BUGGY]  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	110	110	1	add	    System.arraycopy(translators,  0,  newArray,  0,  translators.length);		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	31	1	add
23	[BUG]  [BUGGY]    System.arraycopy(translators,  0,  newArray,  0,  translators.length);  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  newArray[0]  =  this;  [BUGGY]    System.arraycopy(translators,  0,  newArray,  0,  translators.length);  [BUGGY]  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	110	110	1	replace	    System.arraycopy(translators,  0,  newArray,  0,  translators.length);		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	31	1	add
141	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    out.write(len  -  pos);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	add	    out.write(len  -  pos);		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
142	[BUG]  [BUGGY]    out.write(len  -  pos);  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    out.write(len  -  pos);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	replace	    out.write(len  -  pos);		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
142	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    out.write(len);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	add	    out.write(len);		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
143	[BUG]  [BUGGY]    out.write(len);  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    out.write(len);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	replace	    out.write(len);		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
143	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    out.write(len  +  pos);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	add	    out.write(len  +  pos);		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
144	[BUG]  [BUGGY]    out.write(len  +  pos);  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    out.write(len  +  pos);  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	replace	    out.write(len  +  pos);		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
144	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    out.write( "Sequence: ");  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	add	    out.write( "Sequence: ");		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
145	[BUG]  [BUGGY]    out.write( "Sequence: ");  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    out.write( "Sequence: ");  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	replace	    out.write( "Sequence: ");		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
145	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    pos  =  input.length();  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	add	    pos  =  input.length();		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
146	[BUG]  [BUGGY]    pos  =  input.length();  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    pos  =  input.length();  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	replace	    pos  =  input.length();		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
184	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  -  2);  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	58	58	1	add	StringWriter  writer  =  new  StringWriter(input.length()  -  2);	StringWriter  writer  =  new  StringWriter(input.length()  *  2);  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	4	1	replace
185	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  -  2);  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  String  translate(CharSequence  input)  {  if  (input  ==  null)  {  return  null;  }  try  {  [BUGGY]  StringWriter  writer  =  new  StringWriter(input.length()  -  2);  [BUGGY]  translate(input,  writer);  return  writer.toString();  }  catch  (IOException  ioe)  {  throw  new  RuntimeException(ioe);  }  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  String  CharSequence  input  [VARIABLES]  boolean  StringWriter  writer  CharSequence  input  IOException  ioe  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	58	58	1	replace	StringWriter  writer  =  new  StringWriter(input.length()  -  2);	StringWriter  writer  =  new  StringWriter(input.length()  *  2);  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	4	1	replace
202	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]  int  len  =  input.length()  +  1;  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	add	int  len  =  input.length()  +  1;	int  len  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	14	1	replace
203	[BUG]  [BUGGY]  int  len  =  input.length()  +  1;  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]  int  len  =  input.length()  +  1;  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	replace	int  len  =  input.length()  +  1;	int  len  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	14	1	replace
204	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]  int  len  =  input.length()  -  4;  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	add	int  len  =  input.length()  -  4;	int  len  =  input.length();  	compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	14	1	replace
205	[BUG]  [BUGGY]  int  len  =  input.length()  -  4;  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]  int  len  =  input.length()  -  4;  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	replace	int  len  =  input.length()  -  4;	int  len  =  input.length();  	compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	14	1	replace
323	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]    pos  =  input.length();  [BUGGY]  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	add	    pos  =  input.length();		compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	15	1	add
324	[BUG]  [BUGGY]    pos  =  input.length();  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  [BUGGY]    pos  =  input.length();  [BUGGY]  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	83	83	1	replace	    pos  =  input.length();		compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	15	1	add
501	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  [BUGGY]    System.arraycopy(translators,  0,  newArray,  0,  translators.length);  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	109	109	1	add	    System.arraycopy(translators,  0,  newArray,  0,  translators.length);		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	29	1	add
502	[BUG]  [BUGGY]    System.arraycopy(translators,  0,  newArray,  0,  translators.length);  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  [BUGGY]    System.arraycopy(translators,  0,  newArray,  0,  translators.length);  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	109	109	1	replace	    System.arraycopy(translators,  0,  newArray,  0,  translators.length);		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	29	1	add
212	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  [BUGGY]  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  2];  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	108	108	1	add	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  2];	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	26	1	replace
213	[BUG]  [BUGGY]  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  2];  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  [BUGGY]  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  2];  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	108	108	1	replace	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  2];	CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  	compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	26	1	replace
663	[BUG]  [BUGGY]  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  [BUGGY]    System.arraycopy(translators,  0,  newArray,  2,  translators.length);  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	109	109	1	add	    System.arraycopy(translators,  0,  newArray,  2,  translators.length);		compilable	  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs	29	1	add
664	[BUG]  [BUGGY]    System.arraycopy(translators,  0,  newArray,  2,  translators.length);  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  [BUGGY]    System.arraycopy(translators,  0,  newArray,  2,  translators.length);  [BUGGY]  newArray[0]  =  this;  System.arraycopy(translators,  0,  newArray,  1,  translators.length);  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	109	109	1	replace	    System.arraycopy(translators,  0,  newArray,  2,  translators.length);		compilable	  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs	29	1	add
691	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    pos  +=  input.length();  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	    pos  +=  input.length();		compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	17	1	add
692	[BUG]  [BUGGY]    pos  +=  input.length();  [FE]  ComparisonFailure  testEscapeSurrogatePairs  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    pos  +=  input.length();  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	    pos  +=  input.length();		compilable	  [FE]  ComparisonFailure  testEscapeSurrogatePairs	17	1	add
814	[BUG]  [BUGGY]  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  newArray[0]  =  this;  [BUGGY]  System.arraycopy(translators,  0,  newArray,  1,  translators.length  +  2);  [BUGGY]  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	110	110	1	add	System.arraycopy(translators,  0,  newArray,  1,  translators.length  +  2);	System.arraycopy(translators,  0,  newArray,  1,  translators.length);  	compilable	  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs	30	1	replace
815	[BUG]  [BUGGY]  System.arraycopy(translators,  0,  newArray,  1,  translators.length  +  2);  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs  [CONTEXT]  public  final  CharSequenceTranslator  with(CharSequenceTranslator...  translators)  {  CharSequenceTranslator[]  newArray  =  new  CharSequenceTranslator[translators.length  +  1];  newArray[0]  =  this;  [BUGGY]  System.arraycopy(translators,  0,  newArray,  1,  translators.length  +  2);  [BUGGY]  return  new  AggregateTranslator(newArray);  }  [CLASS]  CharSequenceTranslator  [METHOD]  with  [RETURN_TYPE]  CharSequenceTranslator  translators  [VARIABLES]  boolean  CharSequenceTranslator[]  newArray  translators  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	110	110	1	replace	System.arraycopy(translators,  0,  newArray,  1,  translators.length  +  2);	System.arraycopy(translators,  0,  newArray,  1,  translators.length);  	compilable	  [FE]  ExceptionInInitializerError  testEscapeSurrogatePairs	30	1	replace
872	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    out.write(len);  consumed  =  input.length();  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	add	    out.write(len);  consumed  =  input.length();		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
873	[BUG]  [BUGGY]    out.write(len);  consumed  =  input.length();  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    out.write(len);  consumed  =  input.length();  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	replace	    out.write(len);  consumed  =  input.length();		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
873	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    pos  +=  input.length();  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	add	    pos  +=  input.length();		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
874	[BUG]  [BUGGY]    pos  +=  input.length();  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs  [CONTEXT]  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  [BUGGY]    pos  +=  input.length();  [BUGGY]  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	86	86	1	replace	    pos  +=  input.length();		compilable	  [FE]  StringIndexOutOfBoundsException  testEscapeSurrogatePairs	21	1	add
