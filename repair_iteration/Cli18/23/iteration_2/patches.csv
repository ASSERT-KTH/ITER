bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  +  1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  +  1]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])options.toArray(new  String[tokens.size()  +  1]);	  return(String[])options.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
2	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  -  1]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  -  1]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])options.toArray(new  String[tokens.size()  -  1]);	  return(String[])options.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
3	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ]);	  return(String[])options.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
4	[BUG]  [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0]);  currentOption  =  options.getOption(token);	  tokens.add(arguments[0]);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
5	[BUG]  [BUGGY]  tokens.add(arguments[1]);  currentOption  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[1]);  currentOption  =  options.getOption(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[1]);  currentOption  =  options.getOption(stopAtNonOption);	  tokens.add(arguments[0]);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
6	[BUG]  [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(startAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(startAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0]);  currentOption  =  options.getOption(startAtNonOption);	  tokens.add(arguments[0]);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
7	[BUG]  [BUGGY]  tokens.add(arguments[0].toLowerCase());  currentOption  =  options.getOption(arguments[1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0].toLowerCase());  currentOption  =  options.getOption(arguments[1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0].toLowerCase());  currentOption  =  options.getOption(arguments[1]);	  tokens.add(arguments[0]);    currentOption    =    options.getOption(arguments[1]);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
8	[BUG]  [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(arguments[2]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(arguments[2]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0]);  currentOption  =  options.getOption(arguments[2]);	  tokens.add(arguments[0]);    currentOption    =    options.getOption(arguments[1]);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
9	[BUG]  [BUGGY]  tokens.addAll(arguments[0]);  currentOption  =  options.getOption(arguments[1]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.addAll(arguments[0]);  currentOption  =  options.getOption(arguments[1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.addAll(arguments[0]);  currentOption  =  options.getOption(arguments[1]);	  tokens.add(arguments[0]);    currentOption    =    options.getOption(arguments[1]);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
10	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "- ");  currentOption  =  arguments.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "- ");  currentOption  =  arguments.iterator();	  tokens.add(   "-   ");    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
11	[BUG]  [BUGGY]  tokens.add('-');  currentOption  =  options.iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add('-');  currentOption  =  options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add('-');  currentOption  =  options.iterator();	  tokens.add(   "-   ");    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
12	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  options.iterator();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "-- ");  currentOption  =  options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "-- ");  currentOption  =  options.iterator();	  tokens.add(   "-   ");    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
13	[BUG]  [BUGGY]  tokens.add(t);  currentOption  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(t);  currentOption  =  options.values().iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(t);  currentOption  =  options.values().iterator();	  tokens.add(token);    currentOption    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
14	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  arguments.values().iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  arguments.values().iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  arguments.values().iterator();	  tokens.add(token);    currentOption    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
15	[BUG]  [BUGGY]  tokens.add(item);  currentOption  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(item);  currentOption  =  options.values().iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(item);  currentOption  =  options.values().iterator();	  tokens.add(token);    currentOption    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
16	[BUG]  [BUGGY]  tokens.add(arguments[1].toString());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[1].toString());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[1].toString());	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	66	None	replace
17	[BUG]  [BUGGY]  tokens.add(arguments[0].toString(),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0].toString(),  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0].toString(),  stopAtNonOption);	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	66	None	replace
18	[BUG]  [BUGGY]  tokens.add(arguments[0].toString()  + ", ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0].toString()  + ", ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0].toString()  + ", ");	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	66	None	replace
19	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Iterator  <  String>  iter  =  arguments.iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
20	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Iterator  <  String>  iter  =  currentOption.iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
21	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Iterator  <  String>  iter  =  tokens.iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
22	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.clone();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.clone();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.clone();	  tokens.add(token);    currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
23	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  arguments;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  arguments;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  arguments;	  tokens.add(token);    currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
24	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(arguments[0]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(arguments[0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "- ");  currentOption  =  options.getOption(arguments[0]);	  tokens.add(   "-   ");    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
25	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(arguments[stopAtNonOption]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(arguments[stopAtNonOption]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "- ");  currentOption  =  options.getOption(arguments[stopAtNonOption]);	  tokens.add(   "-   ");    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
26	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  token  },  options);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  token  },  options);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  token  },  options);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    token    }    );    	non-compiled	[CE]  <identifier>  expected	1	None	replace
27	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  token  },  arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  token  },  arguments);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  token  },  arguments);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    token    }    );    	non-compiled	[CE]  <identifier>  expected	1	None	replace
28	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  token,  stopAtNonOption  }  );  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  token,  stopAtNonOption  }  );  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  token,  stopAtNonOption  }  );	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    token    }    );    	non-compiled	[CE]  <identifier>  expected	1	None	replace
29	[BUG]  [BUGGY]  iter.add(arguments[1].toString());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.add(arguments[1].toString());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.add(arguments[1].toString());	  iter.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
30	[BUG]  [BUGGY]  iter.add(arguments[0].toString(),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.add(arguments[0].toString(),  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.add(arguments[0].toString(),  stopAtNonOption);	  iter.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
31	[BUG]  [BUGGY]  return(tokens!=  null)?  null  :  tokens.toArray(new  String[]  {  token  },  options);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens!=  null)?  null  :  tokens.toArray(new  String[]  {  token  },  options);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens!=  null)?  null  :  tokens.toArray(new  String[]  {  token  },  options);	  return(tokens!=    null)?    null    :    tokens.toArray(new    String[]    {    token    }    );    	non-compiled	[CE]  <identifier>  expected	61	None	replace
32	[BUG]  [BUGGY]  iter.remove(arguments[1]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.remove(arguments[1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.remove(arguments[1]);	  iter.remove(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
33	[BUG]  [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[1]);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[1]);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	if(options!=  null)  {  return(String[])options.toArray(new  String[1]);  }	  return(String[])options.toArray(new    String[1]);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
34	[BUG]  [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[1]);  }  else  {  tokens.add( "n ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[1]);  }  else  {  tokens.add( "n ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	if(options!=  null)  {  return(String[])options.toArray(new  String[1]);  }  else  {  tokens.add( "n ");  }	  return(String[])options.toArray(new    String[1]);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
35	[BUG]  [BUGGY]  return(String[])iter.getValue();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])iter.getValue();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])iter.getValue();	  return(String[])iter.remove();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
36	[BUG]  [BUGGY]  return(String[])this.options.get(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])this.options.get(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])this.options.get(token);	  return(String[])iter.remove();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
37	[BUG]  [BUGGY]  return(String[])this.options.clone();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])this.options.clone();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])this.options.clone();	  return(String[])iter.clone();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
38	[BUG]  [BUGGY]  return(String[])arguments.clone();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])arguments.clone();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])arguments.clone();	  return(String[])iter.clone();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
39	[BUG]  [BUGGY]  return(String[])options.clone();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])options.clone();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])options.clone();	  return(String[])iter.clone();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
40	[BUG]  [BUGGY]  tokens!=  null?  null  :  tokens.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens!=  null?  null  :  tokens.toArray(new  String[tokens.size()  ]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens!=  null?  null  :  tokens.toArray(new  String[tokens.size()  ]);	  if(tokens!=    null)    {    return(tokens!=    null)?    null    :    tokens.toArray(new    String[tokens.size()    ]);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
41	[BUG]  [BUGGY]  tokens.add(arguments[1]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[1]);	  tokens.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
42	[BUG]  [BUGGY]  tokens.add(arguments[0].toLowerCase());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0].toLowerCase());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0].toLowerCase());	  tokens.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
43	[BUG]  [BUGGY]  tokens.add(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0],  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0],  stopAtNonOption);	  tokens.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
44	[BUG]  [BUGGY]  tokens.add(arguments[1]);  currentOption  =  options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[1]);  currentOption  =  options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[1]);  currentOption  =  options.iterator();	  tokens.add(arguments[0]);    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
45	[BUG]  [BUGGY]  tokens.add(arguments[0]);  currentOption  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0]);  currentOption  =  arguments.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0]);  currentOption  =  arguments.iterator();	  tokens.add(arguments[0]);    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
46	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[args.size()  *  1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])options.toArray(new  String[args.size()  *  1]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])options.toArray(new  String[args.size()  *  1]);	  return(String[])options.toArray(new    String[args.size()    -    1]);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
47	[BUG]  [BUGGY]  tokens.add(arguments[i]);  currentOption  =  options.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[i]);  currentOption  =  options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[i]);  currentOption  =  options.iterator();	  tokens.add(id);    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
48	[BUG]  [BUGGY]  tokens.add(arguments[iter]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[iter]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[iter]);	  tokens.add(iter);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
49	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  arguments  },  options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  arguments  },  options);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  arguments  },  options);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    },    options);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
50	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[0]  {  },  options);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[0]  {  },  options);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[0]  {  },  options);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    },    options);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
51	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(startAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(startAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(startAtNonOption,  arguments);	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
52	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments[0]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments[0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments[0]);	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
53	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "- ");  currentOption  =  options.getOption(stopAtNonOption,  arguments);	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
54	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "null ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "null ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "null ");	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {       "   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
55	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "0 ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "0 ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "0 ");	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {       "   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
56	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "n ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "n ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "n ");	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {       "   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
57	[BUG]  [BUGGY]  return(tokens!=  null)?  null  :  tokens.toArray(new  String[]  {   "null ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens!=  null)?  null  :  tokens.toArray(new  String[]  {   "null ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens!=  null)?  null  :  tokens.toArray(new  String[]  {   "null ");	  return(tokens!=    null)?    null    :    tokens.toArray(new    String[]    {       "   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
58	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[args.size()  1]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])options.toArray(new  String[args.size()  1]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])options.toArray(new  String[args.size()  1]);	  return(String[])options.toArray(new    String[args.size()    +    1]);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
59	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[tokens.size()  1]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[tokens.size()  1]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[tokens.size()  1]);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[tokens.size()    +    1]);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
60	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "- ");  currentOption  =  options.getOption(token,  stopAtNonOption);	  tokens.add(token);    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
61	[BUG]  [BUGGY]  tokens.add(t);  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(t);  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(t);  currentOption  =  options.getOption(token,  stopAtNonOption);	  tokens.add(token);    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
62	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption)+  arguments.length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption)+  arguments.length;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption)+  arguments.length;	  tokens.add(token);    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
63	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments[1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments[1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(arguments[1]);	  tokens.add(token);    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
64	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);	  tokens.add(token);    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
65	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments[0],  arguments[1]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments[0],  arguments[1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(arguments[0],  arguments[1]);	  tokens.add(token);    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
66	[BUG]  [BUGGY]  return(String[])args.toArray(new  String[args.size()  -  1]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])args.toArray(new  String[args.size()  -  1]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])args.toArray(new  String[args.size()  -  1]);	  return(String[])args.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
67	[BUG]  [BUGGY]  return(String[])args.toArray(new  String[args.size()  +  1]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])args.toArray(new  String[args.size()  +  1]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])args.toArray(new  String[args.size()  +  1]);	  return(String[])args.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
68	[BUG]  [BUGGY]  tokens.add(id);  currentOption  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(id);  currentOption  =  arguments.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(id);  currentOption  =  arguments.iterator();	  tokens.add(token);    currentOption    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
69	[BUG]  [BUGGY]  Option  currentOption  =  options.get(args.size()  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Option  currentOption  =  options.get(args.size()  -  1);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Option  currentOption  =  options.get(args.size()  -  1);	  if(options!=    null)    {    return(String[])options.toArray(new    String[args.size()    ]);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
70	[BUG]  [BUGGY]  Option  option  =  options.toArray(new  Option(args));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Option  option  =  options.toArray(new  Option(args));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Option  option  =  options.toArray(new  Option(args));	  if(options!=    null)    {    return(String[])options.toArray(new    String[args.size()    ]);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.toArray(new  Option(args.size()  -  1));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Option  option  =  options.toArray(new  Option(args.size()  -  1));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Option  option  =  options.toArray(new  Option(args.size()  -  1));	  if(options!=    null)    {    return(String[])options.toArray(new    String[args.size()    ]);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
72	[BUG]  [BUGGY]  parent!=  null  &&  options.toArray(new  String[0]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  parent!=  null  &&  options.toArray(new  String[0]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	parent!=  null  &&  options.toArray(new  String[0]);	  if(options!=    null)    {    return(String[])options.toArray(new    String[0]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
73	[BUG]  [BUGGY]  parent!=  null  &&  options.contains(arguments[0]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  parent!=  null  &&  options.contains(arguments[0]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	parent!=  null  &&  options.contains(arguments[0]);	  if(options!=    null)    {    return(String[])options.toArray(new    String[0]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
74	[BUG]  [BUGGY]  parent!=  null  &&  options.toArray(new  String[options.size()  ]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  parent!=  null  &&  options.toArray(new  String[options.size()  ]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	parent!=  null  &&  options.toArray(new  String[options.size()  ]);	  if(options!=    null)    {    return(String[])options.toArray(new    String[0]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
75	[BUG]  [BUGGY]  Option  option  =  options.toArray(new  Option(token));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Option  option  =  options.toArray(new  Option(token));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Option  option  =  options.toArray(new  Option(token));	  if(options!=    null)    {    return(String[])options.toArray(new    String[0]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
76	[BUG]  [BUGGY]  return(tokens!=  null)?  false  :  tokens.toArray(new  String[tokens.size()  +  1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens!=  null)?  false  :  tokens.toArray(new  String[tokens.size()  +  1]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens!=  null)?  false  :  tokens.toArray(new  String[tokens.size()  +  1]);	  return(tokens!=    null)?    false    :    tokens.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
77	[BUG]  [BUGGY]  tokens.add(option);  currentOption  =  option;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(option);  currentOption  =  option;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(option);  currentOption  =  option;	  tokens.add(token);    currentOption    =    option;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
78	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)/  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)/  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)/  1;	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption)+    1;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
79	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  2;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  2;	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption)+    1;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
80	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)-  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)-  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)-  1;	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption)+    1;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
81	[BUG]  [BUGGY]  return(tokens  ==  null)?  false  :  tokens.toArray(new  String[tokens.size()  1]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  false  :  tokens.toArray(new  String[tokens.size()  1]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  false  :  tokens.toArray(new  String[tokens.size()  1]);	  return(tokens    ==    null)?    false    :    tokens.toArray(new    String[tokens.size()    +    1]);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
82	[BUG]  [BUGGY]  tokens.add(iter);  currentOption  =  options;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(iter);  currentOption  =  options;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(iter);  currentOption  =  options;	  tokens.add(iter);    currentOption    =    iter;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
83	[BUG]  [BUGGY]  tokens.add(iter);  currentOption  =  arguments;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(iter);  currentOption  =  arguments;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(iter);  currentOption  =  arguments;	  tokens.add(iter);    currentOption    =    iter;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
84	[BUG]  [BUGGY]  tokens.add(arguments[0].toLowerCase());  currentOption  =  options.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0].toLowerCase());  currentOption  =  options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0].toLowerCase());  currentOption  =  options.iterator();	  tokens.add(arguments[0].iterator());    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
85	[BUG]  [BUGGY]  tokens.add(arguments[0].trim());  currentOption  =  options.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0].trim());  currentOption  =  options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0].trim());  currentOption  =  options.iterator();	  tokens.add(arguments[0].iterator());    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
86	[BUG]  [BUGGY]  tokens.add(arguments[1].iterator());  currentOption  =  options.iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[1].iterator());  currentOption  =  options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[1].iterator());  currentOption  =  options.iterator();	  tokens.add(arguments[0].iterator());    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
87	[BUG]  [BUGGY]  return(String[])options.toArray(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])options.toArray(arguments,  stopAtNonOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])options.toArray(arguments,  stopAtNonOption);	  return(String[])options.toArray(arguments);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
88	[BUG]  [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(arguments);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(arguments);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	if(options!=  null)  {  return(String[])options.toArray(arguments);  }	  return(String[])options.toArray(arguments);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
89	[BUG]  [BUGGY]  iter.write(arguments[1]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.write(arguments[1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.write(arguments[1]);	  iter.write(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
90	[BUG]  [BUGGY]  iter.write(arguments[0].toLowerCase());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.write(arguments[0].toLowerCase());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.write(arguments[0].toLowerCase());	  iter.write(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
91	[BUG]  [BUGGY]  return(arguments  ==  null)?  null  :  tokens.toArray(new  String[]  {  },  tokens);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(arguments  ==  null)?  null  :  tokens.toArray(new  String[]  {  },  tokens);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(arguments  ==  null)?  null  :  tokens.toArray(new  String[]  {  },  tokens);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    },    arguments);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
92	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[0]  {  },  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[0]  {  },  arguments);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[0]  {  },  arguments);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    },    arguments);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
93	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  else    if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
94	[BUG]  [BUGGY]  options.add(token);  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  options.add(token);  currentOption  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	options.add(token);  currentOption  =  options.getOption(token);	  else    if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
95	[BUG]  [BUGGY]  iter.add(arguments[1]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.add(arguments[1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.add(arguments[1]);	  iter.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
96	[BUG]  [BUGGY]  iter.add(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.add(arguments[0],  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.add(arguments[0],  stopAtNonOption);	  iter.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
97	[BUG]  [BUGGY]  iter.add(arguments[0].toLowerCase());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.add(arguments[0].toLowerCase());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.add(arguments[0].toLowerCase());	  iter.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
98	[BUG]  [BUGGY]  tokens.clear();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.clear();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.clear();	  iter.clear();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
99	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "- ");  currentOption  =  options.getOption(arguments);	  tokens.add(   "-   ");    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
100	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(arguments[token]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(arguments[token]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "- ");  currentOption  =  options.getOption(arguments[token]);	  tokens.add(   "-   ");    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
101	[BUG]  [BUGGY]  Iterator  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Iterator  iter  =  arguments.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Iterator  iter  =  arguments.iterator();	  Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
102	[BUG]  [BUGGY]  Iterator  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Iterator  iter  =  tokens.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Iterator  iter  =  tokens.iterator();	  Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
103	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Iterator  iter  =  currentOption.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Iterator  iter  =  currentOption.iterator();	  Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
104	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)&&  arguments.length  >  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)&&  arguments.length  >  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)&&  arguments.length  >  1;	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption)&&    arguments.length    >    0;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
105	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)&&  arguments.length  >  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)&&  arguments.length  >  2;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)&&  arguments.length  >  2;	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption)&&    arguments.length    >    0;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
106	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)&&  arguments.length  ==  0;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)&&  arguments.length  ==  0;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)&&  arguments.length  ==  0;	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption)&&    arguments.length    >    0;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
107	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[options.size()  -  1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])options.toArray(new  String[options.size()  -  1]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])options.toArray(new  String[options.size()  -  1]);	  return(String[])options.toArray(new    String[options.size()    ]);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
108	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[options.size()  +  1]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])options.toArray(new  String[options.size()  +  1]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])options.toArray(new  String[options.size()  +  1]);	  return(String[])options.toArray(new    String[options.size()    ]);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
109	[BUG]  [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[options.size()  ]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[options.size()  ]);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	if(options!=  null)  {  return(String[])options.toArray(new  String[options.size()  ]);  }	  return(String[])options.toArray(new    String[options.size()    ]);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
110	[BUG]  [BUGGY]  tokens.add(i);  currentOption  =  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(i);  currentOption  =  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(i);  currentOption  =  null;	  tokens.add(token);    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
111	[BUG]  [BUGGY]  tokens.add(currentOption.toString());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(currentOption.toString());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(currentOption.toString());	  tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
112	[BUG]  [BUGGY]  tokens.add(getValue());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(getValue());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(getValue());	  tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
113	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0],  arguments[1],  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0],  arguments[1],  stopAtNonOption);	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
114	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1].toLowerCase());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0],  arguments[1].toLowerCase());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0],  arguments[1].toLowerCase());	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
115	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[2]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0],  arguments[2]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0],  arguments[2]);	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
116	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "null ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "null ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
117	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
118	[BUG]  [BUGGY]  tokens.add( "none ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "none ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "none ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
119	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  Iterator  iter  =  options.iterator();  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  else  if(stopAtNonOption)  {  Iterator  iter  =  options.iterator();  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	else  if(stopAtNonOption)  {  Iterator  iter  =  options.iterator();  tokens.add(token);  }	  else    if(stopAtNonOption)    {    iter.remove();    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
120	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.remove();  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  else  if(stopAtNonOption)  {  tokens.remove();  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	else  if(stopAtNonOption)  {  tokens.remove();  tokens.add(token);  }	  else    if(stopAtNonOption)    {    iter.remove();    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
121	[BUG]  [BUGGY]  (String[])iter.nextToken();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  (String[])iter.nextToken();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	(String[])iter.nextToken();	  return(String[])iter.nextToken();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
122	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
123	[BUG]  [BUGGY]  Option  options  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Option  options  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Option  options  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
124	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  arguments.length  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  arguments.length  +  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  arguments.length  +  1;	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption)+    arguments.length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
125	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)/  arguments.length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)/  arguments.length;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)/  arguments.length;	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption)+    arguments.length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
126	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  arguments.length  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  arguments.length  -  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  arguments.length  -  1;	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption)+    arguments.length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
127	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments.length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments.length  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments.length  -  1);	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption,    arguments.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
128	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments.length,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments.length,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(arguments.length,  stopAtNonOption);	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption,    arguments.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
129	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments.length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments.length  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments.length  +  1);	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption,    arguments.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
130	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Option  option  =  options.getOption(token);	  if(tokens!=    null)    {    return(tokens!=    null)?    null    :    tokens.toArray(new    String[tokens.size()    ]);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
131	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Option  options  =  options.getOptions();	  if(tokens!=    null)    {    return(tokens!=    null)?    null    :    tokens.toArray(new    String[tokens.size()    ]);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
132	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  null;  }	  tokens.add(token);    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
133	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  null;  }  else  {  System.arraycopy(arguments,  0,  currentOption,  arguments,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  null;  }  else  {  System.arraycopy(arguments,  0,  currentOption,  arguments,  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  null;  }  else  {  System.arraycopy(arguments,  0,  currentOption,  arguments,  stopAtNonOption);  }	  tokens.add(token);    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
134	[BUG]  [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.iterator(0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.iterator(0);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0]);  currentOption  =  options.iterator(0);	  tokens.add(arguments[0]);    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
135	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)-  arguments.length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)-  arguments.length;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)-  arguments.length;	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption)+    arguments.length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
136	[BUG]  [BUGGY]  tokens.add(arguments[0].toString());  currentOption  =  options.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0].toString());  currentOption  =  options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0].toString());  currentOption  =  options.iterator();	  tokens.add(arguments[0].iterator());    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
137	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "-- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "-- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
138	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  }	  tokens.add(token);    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
139	[BUG]  [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0]);  currentOption  =  options.getOption(token,  stopAtNonOption);	  tokens.add(token);    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
140	[BUG]  [BUGGY]  tokens.add(arguments);  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments);  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments);  currentOption  =  options.getOption(token,  stopAtNonOption);	  tokens.add(token);    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
141	[BUG]  [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(alternate);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(alternate);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0]);  currentOption  =  options.getOption(alternate);	  tokens.add(arguments[0]);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
142	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "-- ");  currentOption  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "-- ");  currentOption  =  options.getOption(token);	  tokens.add(   "-   ");    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
143	[BUG]  [BUGGY]  parent  ==  null  &&  options.toArray(new  String[0]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  parent  ==  null  &&  options.toArray(new  String[0]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	parent  ==  null  &&  options.toArray(new  String[0]);	  if(options!=    null)    {    return(String[])options.toArray(new    String[0]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
144	[BUG]  [BUGGY]  parent  ==  null  &&  options.toArray(new  String[0])!=  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  parent  ==  null  &&  options.toArray(new  String[0])!=  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	parent  ==  null  &&  options.toArray(new  String[0])!=  null;	  if(options!=    null)    {    return(String[])options.toArray(new    String[0]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
145	[BUG]  [BUGGY]  parent!=  null  &&  options.toArray(new  String[0])!=  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  parent!=  null  &&  options.toArray(new  String[0])!=  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	parent!=  null  &&  options.toArray(new  String[0])!=  null;	  if(options!=    null)    {    return(String[])options.toArray(new    String[0]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
146	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "-- ");  currentOption  =  options.getOption(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "-- ");  currentOption  =  options.getOption(stopAtNonOption);	  tokens.add(   "-   ");    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
147	[BUG]  [BUGGY]  iter.add(arguments[0].toString()  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.add(arguments[0].toString()  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.add(arguments[0].toString()  +  1);	  iter.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
148	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Iterator  iter  =  currentOption.options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Iterator  iter  =  currentOption.options.iterator();	  Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
149	[BUG]  [BUGGY]  tokens.add( "n ");  currentOption  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "n ");  currentOption  =  options.getOption(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "n ");  currentOption  =  options.getOption(stopAtNonOption);	  tokens.add(arguments);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
150	[BUG]  [BUGGY]  return(String[])iter.nextToken()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])iter.nextToken()  +  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])iter.nextToken()  +  1;	  return(String[])iter.nextToken();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
151	[BUG]  [BUGGY]  tokens.add( "n ");  currentOption  =  options.getOption(stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "n ");  currentOption  =  options.getOption(stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "n ");  currentOption  =  options.getOption(stopAtNonOption,  arguments);	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
152	[BUG]  [BUGGY]  options.toArray(new  String[args.size()  ]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  options.toArray(new  String[args.size()  ]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	options.toArray(new  String[args.size()  ]);	  if(options!=    null)    {    return(String[])options.toArray(new    String[args.size()    ]);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
153	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Option  currentOption  =  options.getOption(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Option  currentOption  =  options.getOption(token);	  if(options!=    null)    {    return(String[])options.toArray(new    String[args.size()    ]);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
154	[BUG]  [BUGGY]  tokens.add(t);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(t);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(t);	  tokens.add(iter);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
155	[BUG]  [BUGGY]  return(String[])tokens.clone();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])tokens.clone();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])tokens.clone();	  return(String[])iter.clone();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
156	[BUG]  [BUGGY]  tokens.add(old);  currentOption  =  iter;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(old);  currentOption  =  iter;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(old);  currentOption  =  iter;	  tokens.add(iter);    currentOption    =    iter;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
157	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1]).toLowerCase();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0],  arguments[1]).toLowerCase();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0],  arguments[1]).toLowerCase();	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
158	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }	  else    if(stopAtNonOption)    {    iter.remove();    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
159	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  process(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  else  if(stopAtNonOption)  {  process(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	else  if(stopAtNonOption)  {  process(token);  }	  else    if(stopAtNonOption)    {    iter.remove();    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
160	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  options.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  else  if(stopAtNonOption)  {  options.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	else  if(stopAtNonOption)  {  options.add(token);  }	  else    if(stopAtNonOption)    {    iter.remove();    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
161	[BUG]  [BUGGY]  tokens.add(arguments);  currentOption  =  options;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments);  currentOption  =  options;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments);  currentOption  =  options;	  tokens.add(token);    currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
162	[BUG]  [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0]);  currentOption  =  options;	  tokens.add(token);    currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
163	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  arguments.iterator();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  arguments.iterator();  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  arguments.iterator();  }	  tokens.add(token);    currentOption    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
164	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  arguments.iterator();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  arguments.iterator();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  arguments.iterator();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(token);    currentOption    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
165	[BUG]  [BUGGY]  tokens.add(arguments[id]);  currentOption  =  options.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[id]);  currentOption  =  options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[id]);  currentOption  =  options.iterator();	  tokens.add(id);    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
166	[BUG]  [BUGGY]  iter.write(arguments[0]).toLowerCase();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.write(arguments[0]).toLowerCase();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.write(arguments[0]).toLowerCase();	  iter.write(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
167	[BUG]  [BUGGY]  tokens.add(arguments[0].getName());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0].getName());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0].getName());	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	66	None	replace
168	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(options.add(options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(options.add(options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(options.add(options);	  else    if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
169	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  else    if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
170	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Iterator  <  String>  iter  =  currentOption.options.iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
171	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Iterator  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
172	[BUG]  [BUGGY]  iter.add( "n ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.add( "n ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.add( "n ");	  iter.clear();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
173	[BUG]  [BUGGY]  parent.addOption(options.getOption(token));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  parent.addOption(options.getOption(token));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	parent.addOption(options.getOption(token));	  if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
174	[BUG]  [BUGGY]  tokens.add(storage);  currentOption  =  options.getOption(arguments[0]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(storage);  currentOption  =  options.getOption(arguments[0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(storage);  currentOption  =  options.getOption(arguments[0]);	  tokens.add(token);    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
175	[BUG]  [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[tokens.size()  ]);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[tokens.size()  ]);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	if(options!=  null)  {  return(String[])options.toArray(new  String[tokens.size()  ]);  }	  return(String[])options.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
176	[BUG]  [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.values().iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0]);  currentOption  =  options.values().iterator();	  tokens.add(token);    currentOption    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
177	[BUG]  [BUGGY]  tokens.add(arguments);  currentOption  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments);  currentOption  =  options.values().iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments);  currentOption  =  options.values().iterator();	  tokens.add(token);    currentOption    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
178	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.values();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.values();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.values();	  tokens.add(token);    currentOption    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
179	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(startAtNonOption,  arguments.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(startAtNonOption,  arguments.length);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(startAtNonOption,  arguments.length);	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption,    arguments.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
180	[BUG]  [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[1]);  }  else  {  tokens  =  new  ArrayList  <  String>();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[1]);  }  else  {  tokens  =  new  ArrayList  <  String>();  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	if(options!=  null)  {  return(String[])options.toArray(new  String[1]);  }  else  {  tokens  =  new  ArrayList  <  String>();  }	  return(String[])options.toArray(new    String[1]);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
181	[BUG]  [BUGGY]  tokens.add(arguments[currentOption]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[currentOption]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[currentOption]);	  tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
182	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   " "  },  options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   " "  },  options);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   " "  },  options);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    },    options);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
183	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "n "  },  options);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "n "  },  options);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "n "  },  options);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    },    options);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
184	[BUG]  [BUGGY]  iter.add(arguments[0].getName());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.add(arguments[0].getName());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.add(arguments[0].getName());	  iter.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
185	[BUG]  [BUGGY]  iter.add(arguments[0].getValue());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.add(arguments[0].getValue());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.add(arguments[0].getValue());	  iter.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
186	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "- ");  currentOption  =  options;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "- ");  currentOption  =  options;	  tokens.add(token);    currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
187	[BUG]  [BUGGY]  tryFallThrough(tokens)  {  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tryFallThrough(tokens)  {  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tryFallThrough(tokens)  {  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }	  if(tokens    ==    null)    {    return(tokens!=    null)?    null    :    tokens.toArray(new    String[tokens.size()    ]);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
188	[BUG]  [BUGGY]  tryFallThrough(tokens)  {  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tryFallThrough(tokens)  {  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tryFallThrough(tokens)  {  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }	  if(tokens    ==    null)    {    return(tokens!=    null)?    null    :    tokens.toArray(new    String[tokens.size()    ]);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
189	[BUG]  [BUGGY]  tryFallThrough(tokens.size())  {  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tryFallThrough(tokens.size())  {  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tryFallThrough(tokens.size())  {  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }	  if(tokens    ==    null)    {    return(tokens!=    null)?    null    :    tokens.toArray(new    String[tokens.size()    ]);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
190	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(options);	  else    if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
191	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(arguments,  new  String[]  {  },  options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(arguments,  new  String[]  {  },  options);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(arguments,  new  String[]  {  },  options);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    },    options);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
192	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(arguments);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(arguments);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(arguments);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    },    options);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
193	[BUG]  [BUGGY]  iter.close();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  iter.close();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	iter.close();	  iter.clear();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
194	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[args.size()  ]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])tokens.toArray(new  String[args.size()  ]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])tokens.toArray(new  String[args.size()  ]);	  return(String[])args.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
195	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "null "  },  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "null "  },  arguments);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   "null "  },  arguments);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    },    arguments);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
196	[BUG]  [BUGGY]  tokens.add(arguments[0].toLowerCase());  currentOption  =  options.toLowerCase();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0].toLowerCase());  currentOption  =  options.toLowerCase();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0].toLowerCase());  currentOption  =  options.toLowerCase();	  tokens.add(arguments[0].iterator());    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
197	[BUG]  [BUGGY]  options!=  null  &&  options.toArray(new  String[args.size()  ]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  options!=  null  &&  options.toArray(new  String[args.size()  ]);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	options!=  null  &&  options.toArray(new  String[args.size()  ]);	  if(options!=    null)    {    return(String[])options.toArray(new    String[args.size()    ]);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
198	[BUG]  [BUGGY]  parent  ==  null  &&  parent!=  null  &&  parent.equals(arguments[args.size()  ]));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  parent  ==  null  &&  parent!=  null  &&  parent.equals(arguments[args.size()  ]));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	parent  ==  null  &&  parent!=  null  &&  parent.equals(arguments[args.size()  ]));	  if(options!=    null)    {    return(String[])options.toArray(new    String[args.size()    ]);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
199	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(stopAtNonOption  =  options  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(stopAtNonOption  =  options  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(stopAtNonOption  =  options	  if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
200	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(iter);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(iter);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(iter);	  if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
201	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments[0],  arguments.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments[0],  arguments.length);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(arguments[0],  arguments.length);	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption,    arguments.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
202	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.keySet().iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.keySet().iterator();	  tokens.add(token);    currentOption    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
203	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.toArray(arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "- ");  currentOption  =  options.toArray(arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "- ");  currentOption  =  options.toArray(arguments);	  tokens.add(   "-   ");    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
204	[BUG]  [BUGGY]  return(String[])options.toArray(arguments).toArray(this);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])options.toArray(arguments).toArray(this);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])options.toArray(arguments).toArray(this);	  return(String[])options.toArray(arguments);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
205	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  option.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  option.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  option.iterator();	  tokens.add(token);    currentOption    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
206	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  iterator();	  tokens.add(token);    currentOption    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
207	[BUG]  [BUGGY]  return(String[])iter.previousToken();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])iter.previousToken();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])iter.previousToken();	  return(String[])iter.nextToken();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
208	[BUG]  [BUGGY]  return(String[])iter.peek();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])iter.peek();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])iter.peek();	  return(String[])iter.nextToken();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
209	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   ", ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   ", ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   ", ");	  return(tokens!=    null)?    null    :    tokens.toArray(new    String[]    {       "   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
210	[BUG]  [BUGGY]  tokens.add(iter.next());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(iter.next());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(iter.next());	  tokens.add(iter);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
211	[BUG]  [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(candidate);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(candidate);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0]);  currentOption  =  options.getOption(candidate);	  tokens.add(arguments[0]);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
212	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(arguments,  stopAtNonOption);	  tokens.add(token);    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
213	[BUG]  [BUGGY]  Option  currentOption  =  options.get(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Option  currentOption  =  options.get(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Option  currentOption  =  options.get(token);	  if(options!=    null)    {    return(String[])options.toArray(new    String[0]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
214	[BUG]  [BUGGY]  parent  ==  null  &&  parent  ==  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  parent  ==  null  &&  parent  ==  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	parent  ==  null  &&  parent  ==  null;	  if(options!=    null)    {    return(String[])options.toArray(new    String[0]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
215	[BUG]  [BUGGY]  parent  ==  null  &&  parent!=  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  parent  ==  null  &&  parent!=  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	parent  ==  null  &&  parent!=  null;	  if(options!=    null)    {    return(String[])options.toArray(new    String[0]);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
216	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(options,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(options,  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(options,  stopAtNonOption,  arguments);	  tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
217	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  option;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "- ");  currentOption  =  option;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "- ");  currentOption  =  option;	  tokens.add(token);    currentOption    =    option;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
218	[BUG]  [BUGGY]  Iterator  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  Iterator  iter  =  this.options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	Iterator  iter  =  this.options.iterator();	  Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
219	[BUG]  [BUGGY]  tokens.add( "stop ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "stop ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "stop ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
220	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(token);	  else    if(stopAtNonOption)    {    iter.remove();    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
221	[BUG]  [BUGGY]  tokens.add(iter);  currentOption  =  null;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(iter);  currentOption  =  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(iter);  currentOption  =  null;	  tokens.add(iter);    currentOption    =    iter;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
222	[BUG]  [BUGGY]  tokens.add(arguments[0].trim());  currentOption  =  options.getOption(arguments[1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add(arguments[0].trim());  currentOption  =  options.getOption(arguments[1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add(arguments[0].trim());  currentOption  =  options.getOption(arguments[1]);	  tokens.add(arguments[0]);    currentOption    =    options.getOption(arguments[1]);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
223	[BUG]  [BUGGY]  return(String[])iter.cloneTree();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  return(String[])iter.cloneTree();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	return(String[])iter.cloneTree();	  return(String[])iter.clone();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
224	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(iter);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);      [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(iter);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	tokens.add( "- ");  currentOption  =  options.getOption(iter);	  tokens.add(   "-   ");    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
