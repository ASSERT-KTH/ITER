bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));	      tokens.add(token.substring(0,    token.length()    -    1));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.length()    -    1));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.length()    -    1));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  else  if(stopAtNonOption.equals(token)&&  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(stopAtNonOption.equals(token)&&  token.startsWith( "- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(stopAtNonOption.equals(token)&&  token.startsWith( "- "))  {	  else    if(   "-   ".equals(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
5	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.startsWith( "- ")&&  stopAtNonOption)  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(token.startsWith( "- ")&&  stopAtNonOption)  {	  else    if(   "-   ".equals(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
6	[BUG]  [BUGGY]  else  if( "-Hyphen ".equals(token)||  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "-Hyphen ".equals(token)||  token.startsWith( "- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if( "-Hyphen ".equals(token)||  token.startsWith( "- "))  {	  else    if(   "-Hyphen   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
7	[BUG]  [BUGGY]  else  if(!stopAtNonOption  && "-Hyphen ".equals(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(!stopAtNonOption  && "-Hyphen ".equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(!stopAtNonOption  && "-Hyphen ".equals(token))  {	  else    if(   "-Hyphen   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
8	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('-')));	      tokens.add(token.substring(0,    token.indexOf(   "-   ")));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
9	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf(':')));	      tokens.add(token.substring(0,    token.indexOf(   "-   ")));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
10	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf( "= ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf( "= ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf( "= ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.indexOf(   "=   ")));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
11	[BUG]  [BUGGY]  else  if(token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.startsWith( "- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(token.startsWith( "- "))  {	  else    if(   "-   ".equals(token)&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  else  if(token.equals( "- ")&&  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.equals( "- ")&&  token.startsWith( "- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(token.equals( "- ")&&  token.startsWith( "- "))  {	  else    if(   "-   ".equals(token)&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.length()    -    1));    tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
14	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.length()    -    1));    tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
15	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	Iterator  <  String>  iter  =  arguments.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
16	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	Iterator  <  String>  iter  =  options.values().iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
17	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	Iterator  <  String>  iter  =  currentOption.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
18	[BUG]  [BUGGY]  else  if(token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.startsWith( "-- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(token.startsWith( "-- "))  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
19	[BUG]  [BUGGY]  else  if( "-- ".equals(token)||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "-- ".equals(token)||  token.startsWith( "-- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if( "-- ".equals(token)||  token.startsWith( "-- "))  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
20	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.length()));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.length()));	      tokens.add(token.substring(0,    token.length()    -    1));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
21	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.length()  +  1));	      tokens.add(token.substring(0,    token.length()    -    1));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
22	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.length()    -    2));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.length()    -    2));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
24	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1));	      tokens.add(token.substring(0,    token.indexOf(   "=   ")));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
25	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf( "= ")+  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.indexOf( "= ")+  1));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf( "= ")+  1));	      tokens.add(token.substring(0,    token.indexOf(   "=   ")));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
26	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(token.startsWith( "- ")||  token.startsWith( "- "))  {	  else    if(   "-   ".equals(token)||   "-   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
27	[BUG]  [BUGGY]  else  if( "- ".equals(token)||  '-'.equals(token))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "- ".equals(token)||  '-'.equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if( "- ".equals(token)||  '-'.equals(token))  {	  else    if(   "-   ".equals(token)||   "-   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
28	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('-')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));	      tokens.add(token.substring(0,    token.indexOf(   "-   ")));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
29	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1));	      tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
30	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.lastIndexOf('=')));	      tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
31	[BUG]  [BUGGY]  else  if(token.equals( "- ")||  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.equals( "- ")||  token.startsWith( "- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(token.equals( "- ")||  token.startsWith( "- "))  {	  else    if(   "-   ".equals(token)||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
32	[BUG]  [BUGGY]  else  if(stopAtNonOption.equals(token)&&  token.length()  ==  2)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(stopAtNonOption.equals(token)&&  token.length()  ==  2)  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(stopAtNonOption.equals(token)&&  token.length()  ==  2)  {	  else    if(   "-   ".equals(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
33	[BUG]  [BUGGY]  else  if(stopAtNonOption.equals(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(stopAtNonOption.equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(stopAtNonOption.equals(token))  {	  else    if(   "-   ".equals(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
34	[BUG]  [BUGGY]  else  if( "-   ".equals(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "-   ".equals(token)||  stopAtNonOption)  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if( "-   ".equals(token)||  stopAtNonOption)  {	  else    if(   "-   ".equals(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
35	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()));	      tokens.add(token.substring(0,    token.indexOf(   "-   ")));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf( "- "))  +  1,  token.length()));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.indexOf( "- "))  +  1,  token.length()));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf( "- "))  +  1,  token.length()));	      tokens.add(token.substring(0,    token.indexOf(   "-   ")));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
37	[BUG]  [BUGGY]  else  if( "-Hyphen ".equals(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "-Hyphen ".equals(token)&&  stopAtNonOption)  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if( "-Hyphen ".equals(token)&&  stopAtNonOption)  {	  else    if(   "-Hyphen   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
38	[BUG]  [BUGGY]  else  if( "-Hyphen ".equals(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "-Hyphen ".equals(token)||  stopAtNonOption)  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if( "-Hyphen ".equals(token)||  stopAtNonOption)  {	  else    if(   "-Hyphen   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
39	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length())));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.length())));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.length())));	      tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
40	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "- "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(stopAtNonOption  &&  token.startsWith( "- "))  {	  else    if(   "-   ".equals(token)&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
41	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "-   "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "-   "))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(token.startsWith( "- ")&&  token.startsWith( "-   "))  {	  else    if(   "-   ".equals(token)&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  else  if(!stopAtNonOption  && "-- ".equals(token))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(!stopAtNonOption  && "-- ".equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(!stopAtNonOption  && "-- ".equals(token))  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
43	[BUG]  [BUGGY]  else  if( "--   ".equals(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "--   ".equals(token)&&  stopAtNonOption)  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if( "--   ".equals(token)&&  stopAtNonOption)  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
44	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	Iterator  <  String>  iter  =  options.keySet().iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
45	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOptions.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  Iterator  <  String>  iter  =  currentOptions.iterator();  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	Iterator  <  String>  iter  =  currentOptions.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
46	[BUG]  [BUGGY]  else  if(options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(options.hasOption(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(options.hasOption(token))  {	  else    if(   "-   ".equals(token)||   "-   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
47	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")||   "- ".equals(token))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.startsWith( "- ")||   "- ".equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(token.startsWith( "- ")||   "- ".equals(token))  {	  else    if(   "-   ".equals(token)||   "-   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
48	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.indexOf(   "=   ")));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
49	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf( "= ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf( "= ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf( "= ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.indexOf(   "=   ")));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
50	[BUG]  [BUGGY]  else  if( "-Hyphen ".equals(token.trim()))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "-Hyphen ".equals(token.trim()))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if( "-Hyphen ".equals(token.trim()))  {	  else    if(   "-Hyphen   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
51	[BUG]  [BUGGY]  else  if( "- ".equals(token)&& "- ".equals(token))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if( "- ".equals(token)&& "- ".equals(token))  {  [BUGGY]    {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if( "- ".equals(token)&& "- ".equals(token))  {	  else    if(   "-   ".equals(token)||   "-   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
52	[BUG]  [BUGGY]  else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.length()    -    2));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
53	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf( "=')));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.indexOf( "=')));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.indexOf( "=')));	      tokens.add(token.substring(0,    token.indexOf(   "=   ")));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
54	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  tokens.add(token.substring(0,  token.length()  1));  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	tokens.add(token.substring(0,  token.length()  1));	      tokens.add(token.substring(0,    token.length()    -    1));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
55	[BUG]  [BUGGY]  else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.length()    -    1));    tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
56	[BUG]  [BUGGY]  else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.indexOf(   "=   ")));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
57	[BUG]  [BUGGY]  else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.indexOf(   "=   ")));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
58	[BUG]  [BUGGY]  else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }      [BUGGY]  else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    else  if  (   "-   ".equals(token))    {  {  processSingleHyphen(token);  }  else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	else  if(token.startsWith( "- "))  {  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.length()    -    1));    tokens.add(token.substring(token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
