bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  options);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  [BUGGY]  processOptionToken(token,  stopAtNonOption,  options);  [BUGGY]  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  options);	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments);  [BUGGY]  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments);	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  [BUGGY]  acceptToken(token,  stopAtNonOption);  [BUGGY]  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	replace	acceptToken(token,  stopAtNonOption);	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  	9	None	replace
4	[BUG]  [BUGGY]    [CE]  [FE]          AssertionFailedError  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  [BUGGY]    [BUGGY]  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	replace	  	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]    tokens.add(token);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  [BUGGY]    tokens.add(token);  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	replace	    tokens.add(token);		non-compiled	[CE]  	10	None	add
6	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  options.iterator();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  [BUGGY]    Iterator  <  String>  iter  =  options.iterator();  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	replace	    Iterator  <  String>  iter  =  options.iterator();		non-compiled	[CE]  	10	None	add
7	[BUG]  [BUGGY]    Option  currentOption  =  options.getOption(token);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  [BUGGY]    Option  currentOption  =  options.getOption(token);  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	replace	    Option  currentOption  =  options.getOption(token);		non-compiled	[CE]  	10	None	add
8	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  arguments.iterator();  [CE]  [FE]          AssertionFailedError  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  [BUGGY]    Iterator  <  String>  iter  =  arguments.iterator();  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	replace	    Iterator  <  String>  iter  =  arguments.iterator();		non-compiled	[CE]  	10	None	add
9	[BUG]  [BUGGY]    tokens.add( "- ");  [CE]  [FE]            AssertionFailedError  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  [BUGGY]    tokens.add( "- ");  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	replace	    tokens.add( "- ");		non-compiled	[CE]  	10	None	add
10	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  [BUGGY]  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	replace	eatTheRest  =  processOptionToken(token,  stopAtNonOption);	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]    Iterator  <  Option>  iter  =  options.iterator();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  [BUGGY]    Iterator  <  Option>  iter  =  options.iterator();  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	replace	    Iterator  <  Option>  iter  =  options.iterator();		non-compiled	[CE]  	10	None	add
12	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  tokens.iterator();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  [BUGGY]    Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	replace	    Iterator  <  String>  iter  =  tokens.iterator();		non-compiled	[CE]  	10	None	add
