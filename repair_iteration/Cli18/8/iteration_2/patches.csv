bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  	52	None	replace
2	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens[0]  :  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  tokens[0]  :  null;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  tokens[0]  :  null;	  token    =    stopAtNonOption?    token    :    null;    	non-compiled	[CE]  	21	None	replace
3	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  null;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  tokens.size()  :  null;	  token    =    stopAtNonOption?    token    :    null;    	non-compiled	[CE]  	21	None	replace
4	[BUG]  [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add(Token.EMPTY,  stopAtNonOption);	  tokens.add(Token.EMPTY);    	non-compiled	[CE]  	65	None	replace
5	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  [Delete]  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	[Delete]	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
6	[BUG]  [BUGGY]  ==  [Delete]  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  ==  [Delete]  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	==  [Delete]	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
7	[BUG]  [BUGGY]  >>  [Delete]  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  >>  [Delete]  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	>>  [Delete]	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
8	[BUG]  [BUGGY]  !=  [Delete]  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  !=  [Delete]  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	!=  [Delete]	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
9	[BUG]  [BUGGY]  if  (stopAtNonOption  &&  token.length()  ==  0)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if  (stopAtNonOption  &&  token.length()  ==  0)  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption  &&  token.length()  ==  0)  {	  if    (stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  if  (stopAtNonOption  ||  arguments.length()  ==  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if  (stopAtNonOption  ||  arguments.length()  ==  0)  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption  ||  arguments.length()  ==  0)  {	  if    (stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  tokens.add(token)||  stopAtNonOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token)||  stopAtNonOption;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add(token)||  stopAtNonOption;	  tokens.add(token)&&!stopAtNonOption;    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  tokens.add( "- "  +  token)&&!stopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- "  +  token)&&!stopAtNonOption;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "- "  +  token)&&!stopAtNonOption;	  tokens.add(token)&&!stopAtNonOption;    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  token  =  options.get(0);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  options.get(0);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  options.get(0);	  token    =    options.get(   "-   ");    	non-compiled	[CE]  	15	None	replace
14	[BUG]  [BUGGY]  token  =  options.get( "- ").toLowerCase();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  options.get( "- ").toLowerCase();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  options.get( "- ").toLowerCase();	  token    =    options.get(   "-   ");    	non-compiled	[CE]  	15	None	replace
15	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  arguments.contains(token))  {  tokens.add(token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  ||  stopAtNonOption  &&  arguments.contains(token))  {  tokens.add(token);  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	||  stopAtNonOption  &&  arguments.contains(token))  {  tokens.add(token);	  ||    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	32	None	replace
16	[BUG]  [BUGGY]  ||  stopAtNonOption  ||  arguments.contains(token))  {  tokens.add(token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  ||  stopAtNonOption  ||  arguments.contains(token))  {  tokens.add(token);  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	||  stopAtNonOption  ||  arguments.contains(token))  {  tokens.add(token);	  ||    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	32	None	replace
17	[BUG]  [BUGGY]  ||  stopAtNonOption  ||  arguments.length  <  2)  {  tokens.add(token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  ||  stopAtNonOption  ||  arguments.length  <  2)  {  tokens.add(token);  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	||  stopAtNonOption  ||  arguments.length  <  2)  {  tokens.add(token);	  ||    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	32	None	replace
18	[BUG]  [BUGGY]  token  =  stopAtNonOption.token( "- ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.token( "- ");  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.token( "- ");	  token    =    stopAtNonOption.tokens();    	non-compiled	[CE]  	62	None	replace
19	[BUG]  [BUGGY]  token  =  stopAtNonOption.tokens()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.tokens()  +  1;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.tokens()  +  1;	  token    =    stopAtNonOption.tokens();    	non-compiled	[CE]  	62	None	replace
20	[BUG]  [BUGGY]  tokens.add('-',  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add('-',  stopAtNonOption);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add('-',  stopAtNonOption);	  tokens.add('-');    	non-compiled	[CE]  	50	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption  &&  arguments.contains(token))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  arguments.contains(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption  &&  arguments.contains(token))  {	  if(stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  	22	None	replace
22	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.contains(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  options.contains(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption  ||  options.contains(token))  {	  if(stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  	22	None	replace
23	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  stopAtNonOption.toString();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  null  :  stopAtNonOption.toString();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  null  :  stopAtNonOption.toString();	  token    =    stopAtNonOption?    null    :    stopAtNonOption;    	non-compiled	[CE]  	19	None	replace
24	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  options.values().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =  options.values().iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =  options.values().iterator();	  Iterator    <    String>    tokens    =    options.keySet().iterator();    	non-compiled	[CE]  	60	None	replace
25	[BUG]  [BUGGY]  List  <  String>  tokens  =  options.keySet().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  List  <  String>  tokens  =  options.keySet().iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	List  <  String>  tokens  =  options.keySet().iterator();	  Iterator    <    String>    tokens    =    options.keySet().iterator();    	non-compiled	[CE]  	60	None	replace
26	[BUG]  [BUGGY]  token  =  options.get( "- ").equals(token));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  options.get( "- ").equals(token));  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  options.get( "- ").equals(token));	  token    =    options.get(   "-   ".equals(token));    	non-compiled	[CE]  	63	None	replace
27	[BUG]  [BUGGY]  token  =  stopAtNonOption.toLowerCase();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.toLowerCase();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.toLowerCase();	  token    =    stopAtNonOption.toString();    	non-compiled	[CE]  	12	None	replace
28	[BUG]  [BUGGY]  token  =  stopAtNonOption.toString()  + "- ";  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.toString()  + "- ";  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.toString()  + "- ";	  token    =    stopAtNonOption.toString();    	non-compiled	[CE]  	12	None	replace
29	[BUG]  [BUGGY]  token  =  stopAtNonOption.toString()  + "n ";  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.toString()  + "n ";  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.toString()  + "n ";	  token    =    stopAtNonOption.toString();    	non-compiled	[CE]  	12	None	replace
30	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg()  &&  arguments.contains(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption.hasArg()  &&  arguments.contains(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption.hasArg()  &&  arguments.contains(token))  {	  if(stopAtNonOption.hasArg()    ||    arguments.contains(token))    {    	non-compiled	[CE]  	69	None	replace
31	[BUG]  [BUGGY]  if(!stopAtNonOption.hasArg()  &&  arguments.contains(token))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption.hasArg()  &&  arguments.contains(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(!stopAtNonOption.hasArg()  &&  arguments.contains(token))  {	  if(stopAtNonOption.hasArg()    ||    arguments.contains(token))    {    	non-compiled	[CE]  	69	None	replace
32	[BUG]  [BUGGY]  if(stopAtNonOption.hasArgs()  ||  arguments.contains(token))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption.hasArgs()  ||  arguments.contains(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption.hasArgs()  ||  arguments.contains(token))  {	  if(stopAtNonOption.hasArg()    ||    arguments.contains(token))    {    	non-compiled	[CE]  	69	None	replace
33	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption  &&  tokens.contains(token))  {	  if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  	66	None	replace
34	[BUG]  [BUGGY]  token  =  token.trim().toLowerCase(Locale.ENGLISH);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.trim().toLowerCase(Locale.ENGLISH);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.trim().toLowerCase(Locale.ENGLISH);	  token    =    token.trim().toLowerCase();    	non-compiled	[CE]  	41	None	replace
35	[BUG]  [BUGGY]  token  =  token.trim().toLowerCase()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.trim().toLowerCase()  +  1;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.trim().toLowerCase()  +  1;	  token    =    token.trim().toLowerCase();    	non-compiled	[CE]  	41	None	replace
36	[BUG]  [BUGGY]  token  =  token.trim().toLowerCase(Locale.getDefault());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.trim().toLowerCase(Locale.getDefault());  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.trim().toLowerCase(Locale.getDefault());	  token    =    token.trim().toLowerCase();    	non-compiled	[CE]  	41	None	replace
37	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(this.tokens!=  null)?  null  :  this.tokens.iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(this.tokens!=  null)?  null  :  this.tokens.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =(this.tokens!=  null)?  null  :  this.tokens.iterator();	  Iterator    <    String>    tokens    =    this.tokens.iterator();    	non-compiled	[CE]  	10	None	replace
38	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  iter  =  this.tokens.iterator();	  Iterator    <    String>    tokens    =    this.tokens.iterator();    	non-compiled	[CE]  	10	None	replace
39	[BUG]  [BUGGY]  trecută  {  tokens.add(token);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  trecută  {  tokens.add(token);  }  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	trecută  {  tokens.add(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	33	None	replace
40	[BUG]  [BUGGY]  options.add(token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  options.add(token);  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	options.add(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	33	None	replace
41	[BUG]  [BUGGY]  Gründen.checkState(stopAtNonOption);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Gründen.checkState(stopAtNonOption);  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Gründen.checkState(stopAtNonOption);	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	33	None	replace
42	[BUG]  [BUGGY]  token  =  token.substring(0,  3);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.substring(0,  3);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.substring(0,  3);	  token    =    token.substring(0,    2);    	non-compiled	[CE]  	39	None	replace
43	[BUG]  [BUGGY]  token  =  token.substring(0,  4);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.substring(0,  4);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.substring(0,  4);	  token    =    token.substring(0,    2);    	non-compiled	[CE]  	39	None	replace
44	[BUG]  [BUGGY]  tokens.add( "- "  +  token.equals(token));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- "  +  token.equals(token));  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "- "  +  token.equals(token));	  tokens.add(   "-   ".equals(token));    	non-compiled	[CE]  	70	None	replace
45	[BUG]  [BUGGY]  tokens.add( "- ").equals(token));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- ").equals(token));  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "- ").equals(token));	  tokens.add(   "-   ".equals(token));    	non-compiled	[CE]  	70	None	replace
46	[BUG]  [BUGGY]  tokens.add( "- "+token.substring(1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- "+token.substring(1));  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "- "+token.substring(1));	  tokens.add(   "-   ".equals(token));    	non-compiled	[CE]  	70	None	replace
47	[BUG]  [BUGGY]  token  =  token.trim().trim()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.trim().trim()  +  1;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.trim().trim()  +  1;	  token    =    token.trim().trim();    	non-compiled	[CE]  	42	None	replace
48	[BUG]  [BUGGY]  token  =  token.trim().substring(1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.trim().substring(1);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.trim().substring(1);	  token    =    token.trim().trim();    	non-compiled	[CE]  	42	None	replace
49	[BUG]  [BUGGY]  if  (stopAtNonOption.hasArg()  &&  stopAtNonOption.hasArg())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if  (stopAtNonOption.hasArg()  &&  stopAtNonOption.hasArg())  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption.hasArg()  &&  stopAtNonOption.hasArg())  {	  if    (stopAtNonOption.hasArg()    ||    stopAtNonOption.hasArg())    {    	non-compiled	[CE]  	54	None	replace
50	[BUG]  [BUGGY]  if  (stopAtNonOption.hasArgs()  ||  stopAtNonOption.hasArgs())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if  (stopAtNonOption.hasArgs()  ||  stopAtNonOption.hasArgs())  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption.hasArgs()  ||  stopAtNonOption.hasArgs())  {	  if    (stopAtNonOption.hasArg()    ||    stopAtNonOption.hasArg())    {    	non-compiled	[CE]  	54	None	replace
51	[BUG]  [BUGGY]  tokens.add( "-- ",  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "-- ",  stopAtNonOption);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "-- ",  stopAtNonOption);	  tokens.add(   "--   ");    	non-compiled	[CE]  	57	None	replace
52	[BUG]  [BUGGY]  tokens.add( "-- "  +  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "-- "  +  token);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "-- "  +  token);	  tokens.add(   "--   ");    	non-compiled	[CE]  	57	None	replace
53	[BUG]  [BUGGY]  tokens.add( "-- ").replace(token,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "-- ").replace(token,  stopAtNonOption);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "-- ").replace(token,  stopAtNonOption);	  tokens.add(   "--   ");    	non-compiled	[CE]  	57	None	replace
54	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.stopAtNonOption  :  stopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  options.stopAtNonOption  :  stopAtNonOption;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  options.stopAtNonOption  :  stopAtNonOption;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  	56	None	replace
55	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.stopAtNonOption  :  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  options.stopAtNonOption  :  null;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  options.stopAtNonOption  :  null;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  	56	None	replace
56	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  options;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  null  :  options;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  null  :  options;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  	56	None	replace
57	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.cloneTree()  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  options.cloneTree()  :  null;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  options.cloneTree()  :  null;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  	56	None	replace
58	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  arguments.iterator();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =  arguments.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =  arguments.iterator();	  Iterator    <    String>    tokens    =    options.iterator();    	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  token  =  stopAtNonOption  &&  stopAtNonOption  :  token;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption  &&  stopAtNonOption  :  token;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption  &&  stopAtNonOption  :  token;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  	5	None	replace
60	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  arguments;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  arguments;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption  ||  stopAtNonOption  :  arguments;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  	5	None	replace
61	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  eatTheRest  :  token;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption  ||  eatTheRest  :  token;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption  ||  eatTheRest  :  token;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  	5	None	replace
62	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  arguments.length  :  token;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption  ||  arguments.length  :  token;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption  ||  arguments.length  :  token;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  	5	None	replace
63	[BUG]  [BUGGY]  if(!stopAtNonOption.hasArg()  &&  token.startsWith( "-   "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption.hasArg()  &&  token.startsWith( "-   "))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(!stopAtNonOption.hasArg()  &&  token.startsWith( "-   "))  {	  if(stopAtNonOption.hasArg()    ||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  	27	None	replace
64	[BUG]  [BUGGY]  tokens.put(token,  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.put(token,  null);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.put(token,  null);	  tokens.put(token,    stopAtNonOption);    	non-compiled	[CE]  	16	None	replace
65	[BUG]  [BUGGY]  tokens.put(token,  eatTheRest);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.put(token,  eatTheRest);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.put(token,  eatTheRest);	  tokens.put(token,    stopAtNonOption);    	non-compiled	[CE]  	16	None	replace
66	[BUG]  [BUGGY]  tokens.put(token,  stopAtNonOption  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.put(token,  stopAtNonOption  +  1);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.put(token,  stopAtNonOption  +  1);	  tokens.put(token,    stopAtNonOption);    	non-compiled	[CE]  	16	None	replace
67	[BUG]  [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  1  &&  options.hasOption(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  1  &&  options.hasOption(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption  ||  token.length()  ==  1  &&  options.hasOption(token))  {	  if    (stopAtNonOption    ||    token.length()    ==    2    &&    options.hasOption(token))    {    	non-compiled	[CE]  	51	None	replace
68	[BUG]  [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  3  &&  options.hasOption(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  3  &&  options.hasOption(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption  ||  token.length()  ==  3  &&  options.hasOption(token))  {	  if    (stopAtNonOption    ||    token.length()    ==    2    &&    options.hasOption(token))    {    	non-compiled	[CE]  	51	None	replace
69	[BUG]  [BUGGY]  tokens.add( "- ").replace(token,  eatTheRest);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- ").replace(token,  eatTheRest);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "- ").replace(token,  eatTheRest);	  tokens.add(   "-   ").replace(token,    stopAtNonOption);    	non-compiled	[CE]  	71	None	replace
70	[BUG]  [BUGGY]  tokens.add( "- ").replace(token,  stopAtNonOption));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- ").replace(token,  stopAtNonOption));  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "- ").replace(token,  stopAtNonOption));	  tokens.add(   "-   ").replace(token,    stopAtNonOption);    	non-compiled	[CE]  	71	None	replace
71	[BUG]  [BUGGY]  token  =  stopAtNonOption.trim()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.trim()  +  1;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.trim()  +  1;	  token    =    stopAtNonOption.trim();    	non-compiled	[CE]  	47	None	replace
72	[BUG]  [BUGGY]  token  =  stopAtNonOption.substring(1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.substring(1);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.substring(1);	  token    =    stopAtNonOption.trim();    	non-compiled	[CE]  	47	None	replace
73	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  1;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  tokens.size()  :  1;	  token    =    stopAtNonOption?    tokens.size()    :    stopAtNonOption;    	non-compiled	[CE]  	73	None	replace
74	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.size()  :  stopAtNonOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  options.size()  :  stopAtNonOption;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  options.size()  :  stopAtNonOption;	  token    =    stopAtNonOption?    tokens.size()    :    stopAtNonOption;    	non-compiled	[CE]  	73	None	replace
75	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  2;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  2;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  tokens.size()  :  2;	  token    =    stopAtNonOption?    tokens.size()    :    stopAtNonOption;    	non-compiled	[CE]  	73	None	replace
76	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iterator().iterator();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =  iterator().iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =  iterator().iterator();	  Iterator    <    String>    tokens    =    iterator();    	non-compiled	[CE]  	74	None	replace
77	[BUG]  [BUGGY]  token  =  tokens.get(token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  tokens.get(token);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  tokens.get(token);	  token    =    tokens.get(0);    	non-compiled	[CE]  	18	None	replace
78	[BUG]  [BUGGY]  if  (stopAtNonOption.equals( "- "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if  (stopAtNonOption.equals( "- "))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption.equals( "- "))  {	  if    (stopAtNonOption.length()    ==    0)    {    	non-compiled	[CE]  	46	None	replace
79	[BUG]  [BUGGY]  if  (stopAtNonOption  &&  token.length()  ==  1)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if  (stopAtNonOption  &&  token.length()  ==  1)  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption  &&  token.length()  ==  1)  {	  if    (stopAtNonOption    ||    token.length()    ==    1)    {    	non-compiled	[CE]  	30	None	replace
80	[BUG]  [BUGGY]  token  =  stopAtNonOption.chompTo( "- "  +  token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.chompTo( "- "  +  token);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.chompTo( "- "  +  token);	  token    =    stopAtNonOption.chompTo(   "-   ");    	non-compiled	[CE]  	61	None	replace
81	[BUG]  [BUGGY]  token  =  stopAtNonOption.chompTo( "- ").toLowerCase();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.chompTo( "- ").toLowerCase();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.chompTo( "- ").toLowerCase();	  token    =    stopAtNonOption.chompTo(   "-   ");    	non-compiled	[CE]  	61	None	replace
82	[BUG]  [BUGGY]  token  =  stopAtNonOption.chompTo( "- ".equals(token));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.chompTo( "- ".equals(token));  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.chompTo( "- ".equals(token));	  token    =    stopAtNonOption.chompTo(   "-   ");    	non-compiled	[CE]  	61	None	replace
83	[BUG]  [BUGGY]  token  =  stopAtNonOption.equals( "- ")?  null  :  stopAtNonOption.clone();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.equals( "- ")?  null  :  stopAtNonOption.clone();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.equals( "- ")?  null  :  stopAtNonOption.clone();	  token    =    stopAtNonOption.clone();    	non-compiled	[CE]  	13	None	replace
84	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token,  stopAtNonOption  +  1);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add(token,  stopAtNonOption  +  1);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	1	None	replace
85	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)+  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token,  stopAtNonOption)+  1;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add(token,  stopAtNonOption)+  1;	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	1	None	replace
86	[BUG]  [BUGGY]  if  (stopAtNonOption.length()  >  1)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if  (stopAtNonOption.length()  >  1)  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption.length()  >  1)  {	  if    (stopAtNonOption.length()    ==    1)    {    	non-compiled	[CE]  	45	None	replace
87	[BUG]  [BUGGY]  tokens.add( "- "  +  token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- "  +  token,  stopAtNonOption);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "- "  +  token,  stopAtNonOption);	  tokens.add(   "-   ",    stopAtNonOption);    	non-compiled	[CE]  	58	None	replace
88	[BUG]  [BUGGY]  tokens.add( "- ",  eatTheRest);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- ",  eatTheRest);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "- ",  eatTheRest);	  tokens.add(   "-   ",    stopAtNonOption);    	non-compiled	[CE]  	58	None	replace
89	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  arguments;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  null  :  arguments;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  null  :  arguments;	  token    =    stopAtNonOption?    stopAtNonOption    :    arguments;    	non-compiled	[CE]  	20	None	replace
90	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.stopAtNonOption  :  arguments;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  options.stopAtNonOption  :  arguments;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  options.stopAtNonOption  :  arguments;	  token    =    stopAtNonOption?    stopAtNonOption    :    arguments;    	non-compiled	[CE]  	20	None	replace
91	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  arguments;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  token  :  arguments;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  token  :  arguments;	  token    =    stopAtNonOption?    stopAtNonOption    :    arguments;    	non-compiled	[CE]  	20	None	replace
92	[BUG]  [BUGGY]  token  =  stopAtNonOption?  currentOption  :  arguments;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  currentOption  :  arguments;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  currentOption  :  arguments;	  token    =    stopAtNonOption?    stopAtNonOption    :    arguments;    	non-compiled	[CE]  	20	None	replace
93	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens[1]  :  token;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  tokens[1]  :  token;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  tokens[1]  :  token;	  token    =    stopAtNonOption?    tokens[0]    :    token;    	non-compiled	[CE]  	6	None	replace
94	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens[0]  :  arguments[0];  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  tokens[0]  :  arguments[0];  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  tokens[0]  :  arguments[0];	  token    =    stopAtNonOption?    tokens[0]    :    token;    	non-compiled	[CE]  	6	None	replace
95	[BUG]  [BUGGY]  if(stopAtNonOption.hasMoreArgs())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption.hasMoreArgs())  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption.hasMoreArgs())  {	  if(stopAtNonOption.hasArgs())    {    	non-compiled	[CE]  	29	None	replace
96	[BUG]  [BUGGY]  Iterator  iter  =  arguments.iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  iter  =  arguments.iterator();  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  iter  =  arguments.iterator();	  Iterator    iter    =    options.iterator();    	non-compiled	[CE]  	72	None	replace
97	[BUG]  [BUGGY]  Iterator  iter  =  options.values().iterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  iter  =  options.values().iterator();  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  iter  =  options.values().iterator();	  Iterator    iter    =    options.iterator();    	non-compiled	[CE]  	72	None	replace
98	[BUG]  [BUGGY]  Iterator  iter  =  tokens.iterator();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  iter  =  tokens.iterator();  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  iter  =  tokens.iterator();	  Iterator    iter    =    options.iterator();    	non-compiled	[CE]  	72	None	replace
99	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  Option>  iter  =  currentOption.iterator();	  Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  	48	None	replace
100	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  arguments.iterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iter  =  arguments.iterator();  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  Option>  iter  =  arguments.iterator();	  Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  	48	None	replace
101	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.iterator();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Option  <  Option>  iter  =  options.iterator();  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Option  <  Option>  iter  =  options.iterator();	  Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  	48	None	replace
102	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  tokens;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  null  :  tokens;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  null  :  tokens;	  token    =    stopAtNonOption?    null    :    token;    	non-compiled	[CE]  	4	None	replace
103	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(!stopAtNonOption  &&  options.hasOption(token))  {	  if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  	23	None	replace
104	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasArg(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  options.hasArg(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption  ||  options.hasArg(token))  {	  if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  	23	None	replace
105	[BUG]  [BUGGY]  if(stopAtNonOption  &&  arguments.contains( "-   "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  arguments.contains( "-   "))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption  &&  arguments.contains( "-   "))  {	  if(stopAtNonOption    ||    arguments.contains(   "-   "))    {    	non-compiled	[CE]  	25	None	replace
106	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arguments.contains( "- "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  arguments.contains( "- "))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(!stopAtNonOption  &&  arguments.contains( "- "))  {	  if(stopAtNonOption    ||    arguments.contains(   "-   "))    {    	non-compiled	[CE]  	25	None	replace
107	[BUG]  [BUGGY]  List  <  String>  iter  =  currentOption.iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  List  <  String>  iter  =  currentOption.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	List  <  String>  iter  =  currentOption.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  	36	None	replace
108	[BUG]  [BUGGY]  tokens.add( "- "  +  token.toLowerCase());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- "  +  token.toLowerCase());  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "- "  +  token.toLowerCase());	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  	43	None	replace
109	[BUG]  [BUGGY]  List  <  String>  iter  =  currentOptions.iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  List  <  String>  iter  =  currentOptions.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	List  <  String>  iter  =  currentOptions.iterator();	  Iterator    <    String>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  	53	None	replace
110	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(token))  {	  if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  	24	None	replace
111	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  	49	None	replace
112	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Option  option  =  options.getOption(token)+  1;  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Option  option  =  options.getOption(token)+  1;	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  	49	None	replace
113	[BUG]  [BUGGY]  Option  option  =  options.get(token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Option  option  =  options.get(token);  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Option  option  =  options.get(token);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  	49	None	replace
114	[BUG]  [BUGGY]  token  =  stopAtNonOption.token(0);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.token(0);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.token(0);	  token    =    stopAtNonOption.token();    	non-compiled	[CE]  	75	None	replace
115	[BUG]  [BUGGY]  token  =  tokens.get(0).toLowerCase();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  tokens.get(0).toLowerCase();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  tokens.get(0).toLowerCase();	  token    =    tokens.get(   "-   ").toLowerCase();    	non-compiled	[CE]  	17	None	replace
116	[BUG]  [BUGGY]  token  =  tokens.get( "- ").toLowerCase(Locale.ENGLISH);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  tokens.get( "- ").toLowerCase(Locale.ENGLISH);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  tokens.get( "- ").toLowerCase(Locale.ENGLISH);	  token    =    tokens.get(   "-   ").toLowerCase();    	non-compiled	[CE]  	17	None	replace
117	[BUG]  [BUGGY]  List  <  String>  tokens  =  this.options.iterator();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  List  <  String>  tokens  =  this.options.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	List  <  String>  tokens  =  this.options.iterator();	  Iterator    <    String>    tokens    =    this.options.iterator();    	non-compiled	[CE]  	59	None	replace
118	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(this.options!=  null)?  null  :  this.options.iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(this.options!=  null)?  null  :  this.options.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =(this.options!=  null)?  null  :  this.options.iterator();	  Iterator    <    String>    tokens    =    this.options.iterator();    	non-compiled	[CE]  	59	None	replace
119	[BUG]  [BUGGY]  token  =  token.substring(0,  token.length()  -  1).trim();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.substring(0,  token.length()  -  1).trim();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.substring(0,  token.length()  -  1).trim();	  token    =    token.substring(1).trim();    	non-compiled	[CE]  	40	None	replace
120	[BUG]  [BUGGY]  token  =  token.substring(0,  token.length()).trim();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.substring(0,  token.length()).trim();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.substring(0,  token.length()).trim();	  token    =    token.substring(1).trim();    	non-compiled	[CE]  	40	None	replace
121	[BUG]  [BUGGY]  token  =  token.substring(2).trim();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.substring(2).trim();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.substring(2).trim();	  token    =    token.substring(1).trim();    	non-compiled	[CE]  	40	None	replace
122	[BUG]  [BUGGY]  token  =  token.substring(0,  token.length()  -  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.substring(0,  token.length()  -  1);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.substring(0,  token.length()  -  1);	  token    =    token.substring(1).trim();    	non-compiled	[CE]  	40	None	replace
123	[BUG]  [BUGGY]  token  =  iter.nextToken();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  iter.nextToken();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  iter.nextToken();	  token    =    iter.next();    	non-compiled	[CE]  	68	None	replace
124	[BUG]  [BUGGY]  token  =  iter.next(),  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  iter.next(),  stopAtNonOption);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  iter.next(),  stopAtNonOption);	  token    =    iter.next();    	non-compiled	[CE]  	68	None	replace
125	[BUG]  [BUGGY]  token  =  iter.next(),  stopAtNonOption;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  iter.next(),  stopAtNonOption;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  iter.next(),  stopAtNonOption;	  token    =    iter.next();    	non-compiled	[CE]  	68	None	replace
126	[BUG]  [BUGGY]  token  =  stopAtNonOption.getKey()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.getKey()  +  1;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.getKey()  +  1;	  token    =    stopAtNonOption.getValue()    +    1;    	non-compiled	[CE]  	14	None	replace
127	[BUG]  [BUGGY]  token  =  stopAtNonOption.getKey();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.getKey();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.getKey();	  token    =    stopAtNonOption.getValue()    +    1;    	non-compiled	[CE]  	14	None	replace
128	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  currentOption;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  token  :  currentOption;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  token  :  currentOption;	  token    =    stopAtNonOption?    token    :    stopAtNonOption;    	non-compiled	[CE]  	3	None	replace
129	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  StopAtNonOption.EMPTY;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  token  :  StopAtNonOption.EMPTY;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  token  :  StopAtNonOption.EMPTY;	  token    =    stopAtNonOption?    token    :    stopAtNonOption;    	non-compiled	[CE]  	3	None	replace
130	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  this.currentOption.iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =  this.currentOption.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =  this.currentOption.iterator();	  Iterator    <    String>    tokens    =    currentOption.iterator();    	non-compiled	[CE]  	11	None	replace
131	[BUG]  [BUGGY]  if  (stopAtNonOption.hasArg()  ||  options.hasOption(token))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if  (stopAtNonOption.hasArg()  ||  options.hasOption(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption.hasArg()  ||  options.hasOption(token))  {	  if    (stopAtNonOption.hasArg()    &&    options.hasOption(token))    {    	non-compiled	[CE]  	55	None	replace
132	[BUG]  [BUGGY]  token  =  token.toLowerCase(Locale.ENGLISH);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.toLowerCase(Locale.ENGLISH);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.toLowerCase(Locale.ENGLISH);	  token    =    token.toLowerCase();    	non-compiled	[CE]  	67	None	replace
133	[BUG]  [BUGGY]  token  =  token.toUpperCase();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.toUpperCase();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.toUpperCase();	  token    =    token.toLowerCase();    	non-compiled	[CE]  	67	None	replace
134	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg()  ||  arguments.contains( "-   "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption.hasArg()  ||  arguments.contains( "-   "))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption.hasArg()  ||  arguments.contains( "-   "))  {	  if(stopAtNonOption.hasArg()    &&    arguments.contains(   "-   "))    {    	non-compiled	[CE]  	28	None	replace
135	[BUG]  [BUGGY]  if(!stopAtNonOption.hasArg()  &&  arguments.contains( "- "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption.hasArg()  &&  arguments.contains( "- "))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(!stopAtNonOption.hasArg()  &&  arguments.contains( "- "))  {	  if(stopAtNonOption.hasArg()    &&    arguments.contains(   "-   "))    {    	non-compiled	[CE]  	28	None	replace
136	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	List  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  	35	None	replace
137	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  	35	None	replace
138	[BUG]  [BUGGY]  tokens.add( "- "  +  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- "  +  stopAtNonOption);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "- "  +  stopAtNonOption);	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  	43	None	replace
139	[BUG]  [BUGGY]  if  (stopAtNonOption  &&  token.length()  ==  2  &&  options.hasOption(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if  (stopAtNonOption  &&  token.length()  ==  2  &&  options.hasOption(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption  &&  token.length()  ==  2  &&  options.hasOption(token))  {	  if    (stopAtNonOption    ||    token.length()    ==    2    &&    options.hasOption(token))    {    	non-compiled	[CE]  	51	None	replace
140	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options  :  stopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  options  :  stopAtNonOption;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  options  :  stopAtNonOption;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  	56	None	replace
141	[BUG]  [BUGGY]  token  =  token.trim().toLowerCase(stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.trim().toLowerCase(stopAtNonOption);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.trim().toLowerCase(stopAtNonOption);	  token    =    token.trim().toLowerCase();    	non-compiled	[CE]  	41	None	replace
142	[BUG]  [BUGGY]  tokens.add( "-- ".equals(token));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "-- ".equals(token));  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "-- ".equals(token));	  tokens.add(   "-   ".equals(token));    	non-compiled	[CE]  	70	None	replace
143	[BUG]  [BUGGY]  tokens.add( "- "  +  token));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "- "  +  token));  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "- "  +  token));	  tokens.add(   "-   ".equals(token));    	non-compiled	[CE]  	70	None	replace
144	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  this.options.values().iterator();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =  this.options.values().iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =  this.options.values().iterator();	  Iterator    <    String>    tokens    =    this.options.iterator();    	non-compiled	[CE]  	59	None	replace
145	[BUG]  [BUGGY]  token  =  options.get(token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  options.get(token);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  options.get(token);	  token    =    tokens.get(0);    	non-compiled	[CE]  	18	None	replace
146	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.toArray(new  String[tokens.size()  ]):  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  tokens.toArray(new  String[tokens.size()  ]):  null;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  tokens.toArray(new  String[tokens.size()  ]):  null;	  token    =    stopAtNonOption?    token    :    null;    	non-compiled	[CE]  	21	None	replace
147	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.toArray(new  String[]  {  }  )  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  tokens.toArray(new  String[]  {  }  )  :  null;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  tokens.toArray(new  String[]  {  }  )  :  null;	  token    =    stopAtNonOption?    token    :    null;    	non-compiled	[CE]  	21	None	replace
148	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  currentOption.options.iterator();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =  currentOption.options.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =  currentOption.options.iterator();	  Iterator    <    String>    tokens    =    options.iterator();    	non-compiled	[CE]  	8	None	replace
149	[BUG]  [BUGGY]  token  =  options.get( "-- ".equals(token));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  options.get( "-- ".equals(token));  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  options.get( "-- ".equals(token));	  token    =    options.get(   "-   ".equals(token));    	non-compiled	[CE]  	63	None	replace
150	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Ilerator  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  	52	None	replace
151	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  currentOption();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =  currentOption();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =  currentOption();	  Iterator    <    String>    tokens    =    iterator();    	non-compiled	[CE]  	74	None	replace
152	[BUG]  [BUGGY]  token  =  stopAtNonOption.chompTo( "-? ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.chompTo( "-? ");  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.chompTo( "-? ");	  token    =    stopAtNonOption.chompTo(   "-   ");    	non-compiled	[CE]  	61	None	replace
153	[BUG]  [BUGGY]  token  =  stopAtNonOption.chompTo( "-- ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.chompTo( "-- ");  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.chompTo( "-- ");	  token    =    stopAtNonOption.chompTo(   "-   ");    	non-compiled	[CE]  	61	None	replace
154	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.values().iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iter  =  options.values().iterator();  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  Option>  iter  =  options.values().iterator();	  Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  	48	None	replace
155	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOptions.iterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iter  =  currentOptions.iterator();  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  Option>  iter  =  currentOptions.iterator();	  Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  	48	None	replace
156	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.keySet().iterator();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iter  =  options.keySet().iterator();  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  Option>  iter  =  options.keySet().iterator();	  Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  	48	None	replace
157	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  token.toLowerCase();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  null  :  token.toLowerCase();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  null  :  token.toLowerCase();	  token    =    stopAtNonOption?    null    :    token;    	non-compiled	[CE]  	4	None	replace
158	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.contains(token))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  options.contains(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption  &&  options.contains(token))  {	  if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  	66	None	replace
159	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  tokens;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  tokens;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption  ||  stopAtNonOption  :  tokens;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  	5	None	replace
160	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  token.toLowerCase();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  token.toLowerCase();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption  ||  stopAtNonOption  :  token.toLowerCase();	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  	5	None	replace
161	[BUG]  [BUGGY]  token  =  stopAtNonOption?  stopAtNonOption  :  arguments[0];  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  stopAtNonOption  :  arguments[0];  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  stopAtNonOption  :  arguments[0];	  token    =    stopAtNonOption?    stopAtNonOption    :    arguments;    	non-compiled	[CE]  	20	None	replace
162	[BUG]  [BUGGY]  tokens.add( "--? ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add( "--? ");  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add( "--? ");	  tokens.add(   "-n   ");    	non-compiled	[CE]  	44	None	replace
163	[BUG]  [BUGGY]  token  =  tokens.get( "- ").toLowerCase(stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  tokens.get( "- ").toLowerCase(stopAtNonOption);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  tokens.get( "- ").toLowerCase(stopAtNonOption);	  token    =    tokens.get(   "-   ").toLowerCase();    	non-compiled	[CE]  	17	None	replace
164	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {	  if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  	24	None	replace
165	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  ||  stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	||  stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);	  ||    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	32	None	replace
166	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);	  ||    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	32	None	replace
167	[BUG]  [BUGGY]  token  =  stopAtNonOption.toString()  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.toString()  +  1;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.toString()  +  1;	  token    =    stopAtNonOption.toString();    	non-compiled	[CE]  	12	None	replace
168	[BUG]  [BUGGY]  token  =  stopAtNonOption.toString(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.toString(token);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.toString(token);	  token    =    stopAtNonOption.toString();    	non-compiled	[CE]  	12	None	replace
169	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  endAtNonOption;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  token  :  endAtNonOption;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  token  :  endAtNonOption;	  token    =    stopAtNonOption?    token    :    stopAtNonOption;    	non-compiled	[CE]  	3	None	replace
170	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  stopAtNonOption  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  token  :  stopAtNonOption  +  1;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  token  :  stopAtNonOption  +  1;	  token    =    stopAtNonOption?    token    :    stopAtNonOption;    	non-compiled	[CE]  	3	None	replace
171	[BUG]  [BUGGY]  token  =  iter.next()  &&  stopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  iter.next()  &&  stopAtNonOption;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  iter.next()  &&  stopAtNonOption;	  token    =    iter.next();    	non-compiled	[CE]  	68	None	replace
172	[BUG]  [BUGGY]  token  =  iter.next()  &&  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  iter.next()  &&  stopAtNonOption);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  iter.next()  &&  stopAtNonOption);	  token    =    iter.next();    	non-compiled	[CE]  	68	None	replace
173	[BUG]  [BUGGY]  token  =  stopAtNonOption.tokensWithSingleHyphen(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.tokensWithSingleHyphen(token);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.tokensWithSingleHyphen(token);	  token    =    stopAtNonOption.tokens();    	non-compiled	[CE]  	62	None	replace
174	[BUG]  [BUGGY]  Iterator  iter  =  currentOptions.iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  iter  =  currentOptions.iterator();  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  iter  =  currentOptions.iterator();	  Iterator    iter    =    options.iterator();    	non-compiled	[CE]  	72	None	replace
175	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.options.iterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  iter  =  currentOption.options.iterator();  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  iter  =  currentOption.options.iterator();	  Iterator    iter    =    options.iterator();    	non-compiled	[CE]  	72	None	replace
176	[BUG]  [BUGGY]  if  (stopAtNonOption  ||  token.startsWith( "- "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if  (stopAtNonOption  ||  token.startsWith( "- "))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption  ||  token.startsWith( "- "))  {	  if    (stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  	7	None	replace
177	[BUG]  [BUGGY]  if(stopAtNonOption.hasArgs()  &&  arguments.contains( "- "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption.hasArgs()  &&  arguments.contains( "- "))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption.hasArgs()  &&  arguments.contains( "- "))  {	  if(stopAtNonOption.hasArg()    &&    arguments.contains(   "-   "))    {    	non-compiled	[CE]  	28	None	replace
178	[BUG]  [BUGGY]  if(stopAtNonOption.hasArgs()  &&  arguments.contains(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption.hasArgs()  &&  arguments.contains(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption.hasArgs()  &&  arguments.contains(token))  {	  if(stopAtNonOption.hasArg()    ||    arguments.contains(token))    {    	non-compiled	[CE]  	69	None	replace
179	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption;  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Option  option  =  options.getOption(token)+  stopAtNonOption;	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  	49	None	replace
180	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)&&  stopAtNonOption;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Option  option  =  options.getOption(token)&&  stopAtNonOption;  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Option  option  =  options.getOption(token)&&  stopAtNonOption;	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  	49	None	replace
181	[BUG]  [BUGGY]  token  =  token.substring(2)  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.substring(2)  +  1;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.substring(2)  +  1;	  token    =    token.substring(2);    	non-compiled	[CE]  	37	None	replace
182	[BUG]  [BUGGY]  BeidenIterator  <  Option>  iter  =  options.iterator();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  BeidenIterator  <  Option>  iter  =  options.iterator();  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	BeidenIterator  <  Option>  iter  =  options.iterator();	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	33	None	replace
183	[BUG]  [BUGGY]  BeidenIterator  <  Option>  iter  =  options.getOptions().iterator();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  BeidenIterator  <  Option>  iter  =  options.getOptions().iterator();  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	BeidenIterator  <  Option>  iter  =  options.getOptions().iterator();	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	33	None	replace
184	[BUG]  [BUGGY]  Ilerator  <  String>  tokens  =  options.keySet().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Ilerator  <  String>  tokens  =  options.keySet().iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Ilerator  <  String>  tokens  =  options.keySet().iterator();	  Iterator    <    String>    tokens    =    options.keySet().iterator();    	non-compiled	[CE]  	60	None	replace
185	[BUG]  [BUGGY]  token  =  stopAtNonOption.equals(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.equals(token);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.equals(token);	  token    =    stopAtNonOption.trim();    	non-compiled	[CE]  	47	None	replace
186	[BUG]  [BUGGY]  token  =  stopAtNonOption?   "-n "  :  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?   "-n "  :  null;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?   "-n "  :  null;	  token    =    stopAtNonOption?       "-   "    :    null;    	non-compiled	[CE]  	64	None	replace
187	[BUG]  [BUGGY]  token  =  options.get( "-- ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  options.get( "-- ");  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  options.get( "-- ");	  token    =    options.get(   "-   ");    	non-compiled	[CE]  	15	None	replace
188	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token)&&  tokens.contains(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token)&&  tokens.contains(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption  ||  options.hasOption(token)&&  tokens.contains(token))  {	  if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  	23	None	replace
189	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption!=  null)  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption!=  null)  {	  if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  	23	None	replace
190	[BUG]  [BUGGY]  if(stopAtNonOption.equals(arguments))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption.equals(arguments))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption.equals(arguments))  {	  if(stopAtNonOption.hasArgs())    {    	non-compiled	[CE]  	29	None	replace
191	[BUG]  [BUGGY]  if(stopAtNonOption.hasArgs()  &&  options.hasOption(token))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption.hasArgs()  &&  options.hasOption(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption.hasArgs()  &&  options.hasOption(token))  {	  if(stopAtNonOption.hasArgs())    {    	non-compiled	[CE]  	29	None	replace
192	[BUG]  [BUGGY]  >=  [Delete]  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  >=  [Delete]  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	>=  [Delete]	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
193	[BUG]  [BUGGY]  if(stopAtNonOption  &&  arguments.contains( "-- "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  arguments.contains( "-- "))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption  &&  arguments.contains( "-- "))  {	  if(stopAtNonOption    ||    arguments.contains(   "-   "))    {    	non-compiled	[CE]  	25	None	replace
194	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  currentOption.tokens.iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =  currentOption.tokens.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =  currentOption.tokens.iterator();	  Iterator    <    String>    tokens    =    this.tokens.iterator();    	non-compiled	[CE]  	10	None	replace
195	[BUG]  [BUGGY]  token  =  token.trim().substring(2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.trim().substring(2);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.trim().substring(2);	  token    =    token.trim().trim();    	non-compiled	[CE]  	42	None	replace
196	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();	  Iterator    <    String>    tokens    =    this.tokens.iterator();    	non-compiled	[CE]  	10	None	replace
197	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :   "- ";  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  token  :   "- ";  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  token  :   "- ";	  token    =    stopAtNonOption?    token    :    null;    	non-compiled	[CE]  	21	None	replace
198	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  new  String[]  {  }  ;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  token  :  new  String[]  {  }  ;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  token  :  new  String[]  {  }  ;	  token    =    stopAtNonOption?    token    :    null;    	non-compiled	[CE]  	21	None	replace
199	[BUG]  [BUGGY]  token  =  iter.next()  &&(stopAtNonOption  ||  stopAtNonOption));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  iter.next()  &&(stopAtNonOption  ||  stopAtNonOption));  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  iter.next()  &&(stopAtNonOption  ||  stopAtNonOption));	  token    =    iter.next();    	non-compiled	[CE]  	68	None	replace
200	[BUG]  [BUGGY]  token  =  iter.next()  &&(stopAtNonOption  ||  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  iter.next()  &&(stopAtNonOption  ||  stopAtNonOption);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  iter.next()  &&(stopAtNonOption  ||  stopAtNonOption);	  token    =    iter.next();    	non-compiled	[CE]  	68	None	replace
201	[BUG]  [BUGGY]  if(stopAtNonOption.hasArgs()  ||  token.startsWith( "- "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption.hasArgs()  ||  token.startsWith( "- "))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption.hasArgs()  ||  token.startsWith( "- "))  {	  if(stopAtNonOption.hasArg()    ||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  	27	None	replace
202	[BUG]  [BUGGY]  >>  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  >>  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	>>	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
203	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  token  :  stopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption  ||  token  :  stopAtNonOption;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption  ||  token  :  stopAtNonOption;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  	5	None	replace
204	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  token.startsWith( "- "):  token;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption  ||  token.startsWith( "- "):  token;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption  ||  token.startsWith( "- "):  token;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  	5	None	replace
205	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  tokens.size()  ==  0?  token  :  stopAtNonOption;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption  ||  tokens.size()  ==  0?  token  :  stopAtNonOption;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption  ||  tokens.size()  ==  0?  token  :  stopAtNonOption;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  	5	None	replace
206	[BUG]  [BUGGY]  token  =  options.get( "- ").equals(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  options.get( "- ").equals(token);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  options.get( "- ").equals(token);	  token    =    options.get(   "-   ".equals(token));    	non-compiled	[CE]  	63	None	replace
207	[BUG]  [BUGGY]  token  =  stopAtNonOption?   "- "  :  new  String[]  {  }  ;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?   "- "  :  new  String[]  {  }  ;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?   "- "  :  new  String[]  {  }  ;	  token    =    stopAtNonOption?       "-   "    :    null;    	non-compiled	[CE]  	64	None	replace
208	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  options.list().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =  options.list().iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =  options.list().iterator();	  Iterator    <    String>    tokens    =    options.keySet().iterator();    	non-compiled	[CE]  	60	None	replace
209	[BUG]  [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  0  &&  options.hasOption(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  0  &&  options.hasOption(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption  ||  token.length()  ==  0  &&  options.hasOption(token))  {	  if    (stopAtNonOption    ||    token.length()    ==    2    &&    options.hasOption(token))    {    	non-compiled	[CE]  	51	None	replace
210	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.get(token):  stopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  options.get(token):  stopAtNonOption;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  options.get(token):  stopAtNonOption;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  	56	None	replace
211	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.toString()  :  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  options.toString()  :  null;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  options.toString()  :  null;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  	56	None	replace
212	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens[0]  :  token.toLowerCase();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  tokens[0]  :  token.toLowerCase();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  tokens[0]  :  token.toLowerCase();	  token    =    stopAtNonOption?    tokens[0]    :    token;    	non-compiled	[CE]  	6	None	replace
213	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  token.toString();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  null  :  token.toString();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  null  :  token.toString();	  token    =    stopAtNonOption?    null    :    token;    	non-compiled	[CE]  	4	None	replace
214	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.list().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iter  =  options.list().iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  iter  =  options.list().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  	52	None	replace
215	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  arguments[0];  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption?  token  :  arguments[0];  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption?  token  :  arguments[0];	  token    =    stopAtNonOption?    token    :    stopAtNonOption;    	non-compiled	[CE]  	3	None	replace
216	[BUG]  [BUGGY]  token  =  token.trim().toLowerCase(),  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.trim().toLowerCase(),  stopAtNonOption);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.trim().toLowerCase(),  stopAtNonOption);	  token    =    token.trim().toLowerCase();    	non-compiled	[CE]  	41	None	replace
217	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg()  ||  tokens.contains(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption.hasArg()  ||  tokens.contains(token))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption.hasArg()  ||  tokens.contains(token))  {	  if(stopAtNonOption.hasArg()    ||    arguments.contains(token))    {    	non-compiled	[CE]  	69	None	replace
218	[BUG]  [BUGGY]  if(stopAtNonOption.hasOption(token)&&  arguments.contains( "- "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption.hasOption(token)&&  arguments.contains( "- "))  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption.hasOption(token)&&  arguments.contains( "- "))  {	  if(stopAtNonOption.hasArg()    &&    arguments.contains(   "-   "))    {    	non-compiled	[CE]  	28	None	replace
219	[BUG]  [BUGGY]  token  =  arguments.trim();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  arguments.trim();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  arguments.trim();	  token    =    stopAtNonOption.trim();    	non-compiled	[CE]  	47	None	replace
220	[BUG]  [BUGGY]  tokens.add(token)||!stopAtNonOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token)||!stopAtNonOption;  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add(token)||!stopAtNonOption;	  tokens.add(token)&&!stopAtNonOption;    	non-compiled	[CE]  	2	None	replace
221	[BUG]  [BUGGY]  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti	  ||    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	32	None	replace
222	[BUG]  [BUGGY]  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  &&  options))  {  tokens.add(to  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  &&  options))  {  tokens.add(to  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  &&  options))  {  tokens.add(to	  ||    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	32	None	replace
223	[BUG]  [BUGGY]  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  &&(token))  {  tokens.add  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  &&(token))  {  tokens.add  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  &&(token))  {  tokens.add	  ||    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	32	None	replace
224	[BUG]  [BUGGY]  token  =  token.toString();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  token.toString();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  token.toString();	  token    =    stopAtNonOption.toString();    	non-compiled	[CE]  	12	None	replace
225	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  iter  =  this.arguments.iterator();	  Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  	34	None	replace
226	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(token);  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Option  option  =  options.getOption(token)||  options.hasOption(token);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  	49	None	replace
227	[BUG]  [BUGGY]  if(stopAtNonOption.length()  >  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption.length()  >  0)  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(stopAtNonOption.length()  >  0)  {	  if    (stopAtNonOption.length()    ==    0)    {    	non-compiled	[CE]  	46	None	replace
228	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();	  Iterator    <    String>    tokens    =    this.options.iterator();    	non-compiled	[CE]  	59	None	replace
229	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption)  {  [BUGGY]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if(!stopAtNonOption)  {	  if(stopAtNonOption.hasArgs())    {    	non-compiled	[CE]  	29	None	replace
230	[BUG]  [BUGGY]  token  =  stopAtNonOption.tokens(arguments);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.tokens(arguments);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.tokens(arguments);	  token    =    stopAtNonOption.tokens();    	non-compiled	[CE]  	62	None	replace
231	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)&&  arguments.contains(token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  tokens.add(token,  stopAtNonOption)&&  arguments.contains(token);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	tokens.add(token,  stopAtNonOption)&&  arguments.contains(token);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	1	None	replace
232	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  this.stopAtNonOption.keySet();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  tokens  =  this.stopAtNonOption.keySet();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  tokens  =  this.stopAtNonOption.keySet();	  Iterator    <    String>    tokens    =    iterator();    	non-compiled	[CE]  	74	None	replace
233	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.currentOptions.iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iter  =  this.currentOptions.iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  iter  =  this.currentOptions.iterator();	  Iterator    <    String>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  	53	None	replace
234	[BUG]  [BUGGY]  token  =  stopAtNonOption.escape(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  stopAtNonOption.escape(token);  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  stopAtNonOption.escape(token);	  token    =    stopAtNonOption.clone();    	non-compiled	[CE]  	13	None	replace
235	[BUG]  [BUGGY]  token  =  options.get( "- ").trim();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  options.get( "- ").trim();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  options.get( "- ").trim();	  token    =    options.get(   "-   ");    	non-compiled	[CE]  	15	None	replace
236	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.allOptions().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iter  =  options.allOptions().iterator();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	Iterator  <  String>  iter  =  options.allOptions().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  	35	None	replace
237	[BUG]  [BUGGY]  token  =  tokens.get( "- ").toUpperCase();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith(     "-     "))  {      [BUGGY]  token  =  tokens.get( "- ").toUpperCase();  [BUGGY]      if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	token  =  tokens.get( "- ").toUpperCase();	  token    =    tokens.get(   "-   ").toLowerCase();    	non-compiled	[CE]  	17	None	replace
