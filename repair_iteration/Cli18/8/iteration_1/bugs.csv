bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (token.length()  ==  1)  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]  if  (token.length()  ==  1)  {  [BUGGY]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (token.length()  ==  1)  {	if  (token.length()  ==  2)  {  	non-compiled	[CE]  	15	None	replace
2	[BUG]  [BUGGY]  if  (token.length()  ==  0)  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]  if  (token.length()  ==  0)  {  [BUGGY]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (token.length()  ==  0)  {	if  (token.length()  ==  2)  {  	non-compiled	[CE]  	15	None	replace
3	[BUG]  [BUGGY]  if  (stopAtNonOption.length()  ==  2)  {  [CE]  [FE]        AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]  if  (stopAtNonOption.length()  ==  2)  {  [BUGGY]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption.length()  ==  2)  {	if  (token.length()  ==  2)  {  	non-compiled	[CE]  	15	None	replace
4	[BUG]  [BUGGY]    [CE]  [FE]          AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]    [BUGGY]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	  	if  (token.length()  ==  2)  {  	non-compiled	[CE]  	15	None	replace
5	[BUG]  [BUGGY]    tokens.add(token);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]    tokens.add(token);  [BUGGY]  if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	    tokens.add(token);		non-compiled	[CE]  	16	None	add
6	[BUG]  [BUGGY]    tokens.add( "- ");  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]    tokens.add( "- ");  [BUGGY]  if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	    tokens.add( "- ");		non-compiled	[CE]  	16	None	add
7	[BUG]  [BUGGY]    token  =  tokens.get( "- ");  [CE]  [FE]        AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]    token  =  tokens.get( "- ");  [BUGGY]  if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	    token  =  tokens.get( "- ");		non-compiled	[CE]  	16	None	add
8	[BUG]  [BUGGY]    token  =  token.trim();  [CE]  [FE]          AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]    token  =  token.trim();  [BUGGY]  if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	    token  =  token.trim();		non-compiled	[CE]  	16	None	add
9	[BUG]  [BUGGY]    token  =  token.substring(1);  [CE]  [FE]            AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]    token  =  token.substring(1);  [BUGGY]  if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	    token  =  token.substring(1);		non-compiled	[CE]  	16	None	add
10	[BUG]  [BUGGY]  if  (stopAtNonOption)  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]  if  (stopAtNonOption)  {  [BUGGY]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption)  {	if  (token.length()  ==  2)  {  	non-compiled	[CE]  	15	None	replace
11	[BUG]  [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  2)  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  2)  {  [BUGGY]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption  ||  token.length()  ==  2)  {	if  (token.length()  ==  2)  {  	non-compiled	[CE]  	15	None	replace
12	[BUG]  [BUGGY]  if  (stopAtNonOption.hasArg())  {  [CE]  [FE]        AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]  if  (stopAtNonOption.hasArg())  {  [BUGGY]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	if  (stopAtNonOption.hasArg())  {	if  (token.length()  ==  2)  {  	non-compiled	[CE]  	15	None	replace
13	[BUG]  [BUGGY]    token  =  stopAtNonOption?  stopAtNonOption  :  token;  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]    token  =  stopAtNonOption?  stopAtNonOption  :  token;  [BUGGY]  if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	    token  =  stopAtNonOption?  stopAtNonOption  :  token;		non-compiled	[CE]  	16	None	add
14	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  options.iterator();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]    Iterator  <  String>  iter  =  options.iterator();  [BUGGY]  if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	    Iterator  <  String>  iter  =  options.iterator();		non-compiled	[CE]  	16	None	add
15	[BUG]  [BUGGY]    token  =  stopAtNonOption?  stopAtNonOption  :  null;  [CE]  [FE]        AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]    token  =  stopAtNonOption?  stopAtNonOption  :  null;  [BUGGY]  if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	    token  =  stopAtNonOption?  stopAtNonOption  :  null;		non-compiled	[CE]  	16	None	add
16	[BUG]  [BUGGY]    Iterator  <  String>  tokens  =  tokens.iterator();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]    Iterator  <  String>  tokens  =  tokens.iterator();  [BUGGY]  if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	    Iterator  <  String>  tokens  =  tokens.iterator();		non-compiled	[CE]  	16	None	add
17	[BUG]  [BUGGY]    token  =  stopAtNonOption.getValue();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  }  else  if  ( "- ".equals(token))  {  processSingleHyphen(token);  }  else  if  (token.startsWith( "- "))  {  [BUGGY]    token  =  stopAtNonOption.getValue();  [BUGGY]  if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	    token  =  stopAtNonOption.getValue();		non-compiled	[CE]  	16	None	add
