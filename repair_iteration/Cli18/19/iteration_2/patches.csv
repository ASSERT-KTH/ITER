bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOptions.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  iter  =  this.currentOptions.iterator();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  iter  =  this.currentOptions.iterator();	  Iterator    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
2	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.next().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =  iter.next().iterator();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =  iter.next().iterator();	  Iterator    <    String>    tokens    =    iter.next().toString();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
3	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.next().toLowerCase();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =  iter.next().toLowerCase();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =  iter.next().toLowerCase();	  Iterator    <    String>    tokens    =    iter.next().toString();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')!=  -1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')!=  -1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  ||  token.indexOf('=')!=  -1)  {	  if(stopAtNonOption    &&    token.indexOf('=')    >=    -1)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
5	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  0)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(!stopAtNonOption  &&  arguments.length  >  0)  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
6	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  token.indexOf('=')  >=  -1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(!stopAtNonOption  &&  token.indexOf('=')  >=  -1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(!stopAtNonOption  &&  token.indexOf('=')  >=  -1)  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
7	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  token.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(!stopAtNonOption  &&  token.length()  >  0)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(!stopAtNonOption  &&  token.length()  >  0)  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
8	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(Iterator  <?>)iter.next();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(Iterator  <?>)iter.next();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(Iterator  <?>)iter.next();	  Iterator    <    String>    tokens    =(Iterator    <    Object>)iter.next();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
9	[BUG]  [BUGGY]  List  <  String>  tokens  =(List  <  Object>)iter.next();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  List  <  String>  tokens  =(List  <  Object>)iter.next();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	List  <  String>  tokens  =(List  <  Object>)iter.next();	  Iterator    <    String>    tokens    =(Iterator    <    Object>)iter.next();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
10	[BUG]  [BUGGY]  token  =(String)iter.getValue()  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  token  =(String)iter.getValue()  -  1;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	token  =(String)iter.getValue()  -  1;	  token    =(String)iter.next()    -    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
11	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  +  1:  token;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  +  1:  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  +  1:  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?((    String)iter.next()).toLowerCase()    :    token;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
12	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toUpperCase()  :  token;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toUpperCase()  :  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toUpperCase()  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?((    String)iter.next()).toLowerCase()    :    token;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
13	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  iter  =  currentOption.options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
14	[BUG]  [BUGGY]  if(token.startsWith( "0 ")&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "0 ")&&  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "0 ")&&  token.startsWith( "-- "))  {	  if(token.startsWith(   "0   ")||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
15	[BUG]  [BUGGY]  if(token.startsWith( "0 ")||  token.startsWith( "-1))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "0 ")||  token.startsWith( "-1))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "0 ")||  token.startsWith( "-1))  {	  if(token.startsWith(   "0   ")||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
16	[BUG]  [BUGGY]  if(token.startsWith( "-0 ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "-0 ")||  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "-0 ")||  token.startsWith( "-- "))  {	  if(token.startsWith(   "0   ")||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
17	[BUG]  [BUGGY]  if(token.startsWith( "--)||  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "--)||  token.startsWith( "--))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "--)||  token.startsWith( "--))  {	  if(token.startsWith(   "--   ")&&    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  if(token.startsWith( "- ")&&  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "- ")&&  token.startsWith( "- "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "- ")&&  token.startsWith( "- "))  {	  if(token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
19	[BUG]  [BUGGY]  if(token.startsWith( "/ ")||  token.startsWith( "/ "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "/ ")||  token.startsWith( "/ "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "/ ")||  token.startsWith( "/ "))  {	  if(token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
20	[BUG]  [BUGGY]  if(token.startsWith( "- ")||  token.startsWith( "-+ "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "- ")||  token.startsWith( "-+ "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "- ")||  token.startsWith( "-+ "))  {	  if(token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')  <  =  -1)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')  <  =  -1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  ||  token.indexOf('=')  <  =  -1)  {	  if(stopAtNonOption    &&    token.indexOf('=')    <    =    -1)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
22	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase();	  Iterator    <    String>    tokens    =(iter.hasNext())?((    String)iter.next()).toLowerCase()    :    null;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
23	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  +  1:  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  +  1:  null;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  +  1:  null;	  Iterator    <    String>    tokens    =(iter.hasNext())?((    String)iter.next()).toLowerCase()    :    null;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
24	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')  ==  -1)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')  ==  -1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  ||  token.indexOf('=')  ==  -1)  {	  if(stopAtNonOption    &&    token.indexOf('=')    ==    -1)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
25	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));	  tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
26	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.length()));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.length()));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.indexOf('=')),  token.length()));	  tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
27	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.hasNext()?(Iterator  <  String>)iter.next()  :  token;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =  iter.hasNext()?(Iterator  <  String>)iter.next()  :  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =  iter.hasNext()?(Iterator  <  String>)iter.next()  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?(Iterator    <    String>)iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
28	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.next())?(Iterator  <  String>)iter.next()  :  token;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.next())?(Iterator  <  String>)iter.next()  :  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.next())?(Iterator  <  String>)iter.next()  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?(Iterator    <    String>)iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
29	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?(Iterator  <  String>)iter.next()  :  token  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?(Iterator  <  String>)iter.next()  :  token  +  1;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?(Iterator  <  String>)iter.next()  :  token  +  1;	  Iterator    <    String>    tokens    =(iter.hasNext())?(Iterator    <    String>)iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
30	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?(String)iter.next()  :  token  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?(String)iter.next()  :  token  +  1;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?(String)iter.next()  :  token  +  1;	  Iterator    <    String>    tokens    =(iter.hasNext())?(String)iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
31	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.next())?(String)iter.next()  :  token;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.next())?(String)iter.next()  :  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.next())?(String)iter.next()  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?(String)iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
32	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.hasNext()?(String)iter.next()  :  token;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =  iter.hasNext()?(String)iter.next()  :  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =  iter.hasNext()?(String)iter.next()  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?(String)iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
33	[BUG]  [BUGGY]  if(stopAtNonOption  ||  arguments.length  >  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  ||  arguments.length  >  0)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  ||  arguments.length  >  0)  {	  if(stopAtNonOption    &&    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
34	[BUG]  [BUGGY]  if(stopAtNonOption  &&  arguments.length  >  1)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  &&  arguments.length  >  1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  &&  arguments.length  >  1)  {	  if(stopAtNonOption    &&    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
35	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  token  :  iter.next();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  token  :  iter.next();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  token  :  iter.next();	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
36	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  token.next()  :  token;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  token.next()  :  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  token.next()  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
37	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token  +  1;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token  +  1;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
38	[BUG]  [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();	  Iterator    iter    =    this.tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
39	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.length()  >  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  ||  token.length()  >  0)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  ||  token.length()  >  0)  {	  if(stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
40	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  &&  token.length()  ==  0)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  &&  token.length()  ==  0)  {	  if(stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
41	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.length()!=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  &&  token.length()!=  0)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  &&  token.length()!=  0)  {	  if(stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
42	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  &&  token.length()  >=  0)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  &&  token.length()  >=  0)  {	  if(stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
43	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  1));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.indexOf('-')+  1));	  tokens.add(token.substring(0,    token.indexOf('-')));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
44	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()));	  tokens.add(token.substring(0,    token.indexOf('-')));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
45	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.startsWith( "/ "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  ||  token.startsWith( "/ "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  ||  token.startsWith( "/ "))  {	  if(stopAtNonOption    ||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
46	[BUG]  [BUGGY]  tokens  =(String[])currentOption.clone();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens  =(String[])currentOption.clone();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens  =(String[])currentOption.clone();	  tokens    =(String[])iter.clone();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
47	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  iter  =  this.currentOption.iterator();	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
48	[BUG]  [BUGGY]  tokens  =(String)iter.next();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens  =(String)iter.next();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens  =(String)iter.next();	  token    =(String)iter.getValue();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
49	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(!stopAtNonOption  &&  token.startsWith( "- "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(!stopAtNonOption  &&  token.startsWith( "- "))  {	  if(!stopAtNonOption    &&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
50	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  iter  =  arguments.iterator();	  Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
51	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  iter  =  this.tokens.iterator();	  Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
52	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.indexOf(':')  ==  -1)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  &&  token.indexOf(':')  ==  -1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  &&  token.indexOf(':')  ==  -1)  {	  if(stopAtNonOption    &&    token.indexOf(':')    >=    -1)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
53	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.indexOf(':')!=  -1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  &&  token.indexOf(':')!=  -1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  &&  token.indexOf(':')!=  -1)  {	  if(stopAtNonOption    &&    token.indexOf(':')    >=    -1)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
54	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.indexOf(':')  >=  -1)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  ||  token.indexOf(':')  >=  -1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  ||  token.indexOf(':')  >=  -1)  {	  if(stopAtNonOption    &&    token.indexOf(':')    >=    -1)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
55	[BUG]  [BUGGY]  if(token.startsWith( "- ")||  token.indexOf('=')!=  -1)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "- ")||  token.indexOf('=')!=  -1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "- ")||  token.indexOf('=')!=  -1)  {	  if(token.startsWith(   "-   ")&&    token.indexOf('=')    >=    -1)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
56	[BUG]  [BUGGY]  if(token.startsWith( "- ")||  token.indexOf('=')  >=  -1)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "- ")||  token.indexOf('=')  >=  -1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "- ")||  token.indexOf('=')  >=  -1)  {	  if(token.startsWith(   "-   ")&&    token.indexOf('=')    >=    -1)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
57	[BUG]  [BUGGY]  if(token.startsWith( "- ")&&  token.indexOf('=')  ==  -1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "- ")&&  token.indexOf('=')  ==  -1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "- ")&&  token.indexOf('=')  ==  -1)  {	  if(token.startsWith(   "-   ")&&    token.indexOf('=')    >=    -1)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
58	[BUG]  [BUGGY]  token  =(String)iter.getValue()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  token  =(String)iter.getValue()  +  1;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	token  =(String)iter.getValue()  +  1;	  token    =(String)iter.next()    +    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
59	[BUG]  [BUGGY]  tokens.add( "-- "  +  token.substring(0,  token.length()));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add( "-- "  +  token.substring(0,  token.length()));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add( "-- "  +  token.substring(0,  token.length()));	  tokens.add(   "--   "    +    token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
60	[BUG]  [BUGGY]  tokens.add( "-- "  +  token.length());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add( "-- "  +  token.length());  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add( "-- "  +  token.length());	  tokens.add(   "--   "    +    token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
61	[BUG]  [BUGGY]  tokens.add( "-- "  +  token.substring(0,  token.length()  -  1));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add( "-- "  +  token.substring(0,  token.length()  -  1));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add( "-- "  +  token.substring(0,  token.length()  -  1));	  tokens.add(   "--   "    +    token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
62	[BUG]  [BUGGY]  tokens  =(String[])iter.getValue();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens  =(String[])iter.getValue();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens  =(String[])iter.getValue();	  tokens    =(String[])iter.remove();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
63	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  iter  =  currentOption.iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
64	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  iter  =  this.options.iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
65	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1));	  tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
66	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.lastIndexOf('=')));	  tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
67	[BUG]  [BUGGY]  if(token.startsWith( "- ")&&  token.startsWith( "-1))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "- ")&&  token.startsWith( "-1))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "- ")&&  token.startsWith( "-1))  {	  if(token.startsWith(   "-   ")&&    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
68	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "- ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  &&  token.startsWith( "- ")||  token.startsWith( "-- "))  {	  if(stopAtNonOption    &&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
69	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "/ "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "/ "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  &&  token.startsWith( "/ "))  {	  if(stopAtNonOption    &&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
70	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.startsWith( ".-- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  ||  token.startsWith( ".-- "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  ||  token.startsWith( ".-- "))  {	  if(stopAtNonOption    &&    token.startsWith(   ".--   "))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
71	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "/.- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "/.- "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  &&  token.startsWith( "/.- "))  {	  if(stopAtNonOption    &&    token.startsWith(   ".--   "))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
72	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  token  :  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  token  :  null;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  token  :  null;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
73	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  token.next()  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  token.next()  :  null;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  token.next()  :  null;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
74	[BUG]  [BUGGY]  if(token.startsWith( "- ")||  token.startsWith( "-1))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "- ")||  token.startsWith( "-1))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "- ")||  token.startsWith( "-1))  {	  if(token.startsWith(   "-   ")||    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
75	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')+  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')+  1));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.indexOf('/')+  1));	  tokens.add(token.substring(0,    token.indexOf('/')));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
76	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')-  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')-  1));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.indexOf('/')-  1));	  tokens.add(token.substring(0,    token.indexOf('/')));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
77	[BUG]  [BUGGY]  tokens.add('-'  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add('-'  +  1);  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add('-'  +  1);	  tokens.add('-');    	non-compiled	[CE]  <identifier>  expected	44	None	replace
78	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption);	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
79	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)+  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Option  currentOption  =  options.getOption(token)+  1;  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Option  currentOption  =  options.getOption(token)+  1;	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
80	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Option  currentOption  =  options.getOption(token  +  1);  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Option  currentOption  =  options.getOption(token  +  1);	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
81	[BUG]  [BUGGY]  tokens  =(List)iter.next();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens  =(List)iter.next();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens  =(List)iter.next();	  tokens    =(ArrayList)iter.next();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
82	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
83	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1  -  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1  -  1));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1  -  1));	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
84	[BUG]  [BUGGY]  List  <  String>  tokens  =(List  <  String>)iter.next();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  List  <  String>  tokens  =(List  <  String>)iter.next();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	List  <  String>  tokens  =(List  <  String>)iter.next();	  Ilerator    <    String>    tokens    =(Iterator    <    String>)iter.next();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
85	[BUG]  [BUGGY]  if(token.startsWith( "- ")||  token.charAt(token.length()  -  1)!=  '-')  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "- ")||  token.charAt(token.length()  -  1)!=  '-')  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "- ")||  token.charAt(token.length()  -  1)!=  '-')  {	  if(token.startsWith(   "-   ")&&    token.charAt(token.length()    -    1)!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
86	[BUG]  [BUGGY]  if(token.startsWith( "- ")&&  token.charAt(token.length())!=  '-')  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "- ")&&  token.charAt(token.length())!=  '-')  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "- ")&&  token.charAt(token.length())!=  '-')  {	  if(token.startsWith(   "-   ")&&    token.charAt(token.length()    -    1)!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
87	[BUG]  [BUGGY]  if(token.startsWith( ".java ")&&  token.charAt(token.length()  -  1)!=  '-')  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( ".java ")&&  token.charAt(token.length()  -  1)!=  '-')  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( ".java ")&&  token.charAt(token.length()  -  1)!=  '-')  {	  if(token.startsWith(   "-   ")&&    token.charAt(token.length()    -    1)!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
88	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOptions.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  iter  =  currentOptions.iterator();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  iter  =  currentOptions.iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
89	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  :  Token.EMPTY;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  :  Token.EMPTY;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  :  Token.EMPTY;	  Iterator    <    String>    tokens    =(iter.hasNext())?((    String)iter.next()).toLowerCase()    :    null;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
90	[BUG]  [BUGGY]  if(token.startsWith( ".- ")||  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( ".- ")||  token.startsWith( "--))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( ".- ")||  token.startsWith( "--))  {	  if(token.startsWith(   "--   ")&&    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
91	[BUG]  [BUGGY]  tokens  =(Collection)iter.next();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens  =(Collection)iter.next();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens  =(Collection)iter.next();	  tokens    =(ArrayList)iter.next();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
92	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token,  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token,  stopAtNonOption;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token,  stopAtNonOption;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
93	[BUG]  [BUGGY]  Ilerator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Ilerator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Ilerator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
94	[BUG]  [BUGGY]  if(token.startsWith( ".- ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( ".- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( ".- ")||  token.startsWith( "-- "))  {	  if(token.startsWith(   "-   ")&&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
95	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?(String)iter.next()  :  token,  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?(String)iter.next()  :  token,  stopAtNonOption;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?(String)iter.next()  :  token,  stopAtNonOption;	  Iterator    <    String>    tokens    =(iter.hasNext())?(String)iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
96	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  Token.EMPTY;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  Token.EMPTY;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  Token.EMPTY;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
97	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  new  HashSet  <  String>();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  new  HashSet  <  String>();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  new  HashSet  <  String>();	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
98	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  :  token  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  :  token  +  1;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  :  token  +  1;	  Iterator    <    String>    tokens    =(iter.hasNext())?((    String)iter.next()).toLowerCase()    :    token;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
99	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  +  token;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  +  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?((  String)iter.next()).toLowerCase()  +  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?((    String)iter.next()).toLowerCase()    :    token;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
100	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1);  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.indexOf('-'))  +  1);	  tokens.add(token.substring(0,    token.indexOf('-')));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
101	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.next().values();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =  iter.next().values();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =  iter.next().values();	  Iterator    <    String>    tokens    =    iter.next().toString();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
102	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "-- ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "-- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  &&  token.startsWith( "-- ")||  token.startsWith( "-- "))  {	  if(stopAtNonOption    &&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
103	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.arguments.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  iter  =  currentOption.arguments.iterator();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  iter  =  currentOption.arguments.iterator();	  Iterator    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
104	[BUG]  [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(1,  token.indexOf('=')));	  tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
105	[BUG]  [BUGGY]  Ilerator  <  String>  tokens  =(Iterator  <  Object>)iter.next();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Ilerator  <  String>  tokens  =(Iterator  <  Object>)iter.next();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Ilerator  <  String>  tokens  =(Iterator  <  Object>)iter.next();	  Iterator    <    String>    tokens    =(Iterator    <    Object>)iter.next();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
106	[BUG]  [BUGGY]  tokens.add( "-- "  +  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add( "-- "  +  token,  stopAtNonOption);  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add( "-- "  +  token,  stopAtNonOption);	  tokens.add(   "--   "    +    token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
107	[BUG]  [BUGGY]  if(token.startsWith( "- ")||  token.charAt(token.length())!=  '-')  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "- ")||  token.charAt(token.length())!=  '-')  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "- ")||  token.charAt(token.length())!=  '-')  {	  if(token.startsWith(   "-   ")&&    token.charAt(token.length()    -    1)!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
108	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  -  1,  token.length()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  -  1,  token.length()));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  -  1,  token.length()));	  tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
109	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.startsWith( "- ")&&  token.indexOf('=')!=  -1)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  ||  token.startsWith( "- ")&&  token.indexOf('=')!=  -1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  ||  token.startsWith( "- ")&&  token.indexOf('=')!=  -1)  {	  if(token.startsWith(   "-   ")&&    token.indexOf('=')!=    -1)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
110	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')  >=  -1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')  >=  -1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  ||  token.indexOf('=')  >=  -1)  {	  if(stopAtNonOption    &&    token.indexOf('=')    >=    -1)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
111	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.startsWith( "- ")&&  token.indexOf('=')  >=  -1)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  ||  token.startsWith( "- ")&&  token.indexOf('=')  >=  -1)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  ||  token.startsWith( "- ")&&  token.indexOf('=')  >=  -1)  {	  if(token.startsWith(   "-   ")&&    token.indexOf('=')    >=    -1)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
112	[BUG]  [BUGGY]  token  =(String)iter.get();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  token  =(String)iter.get();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	token  =(String)iter.get();	  token    =(String)iter.next()    +    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
113	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/'))  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/'))  +  1);  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.indexOf('/'))  +  1);	  tokens.add(token.substring(0,    token.indexOf('/')));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
114	[BUG]  [BUGGY]  token  =(String)iter.getKey();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  token  =(String)iter.getKey();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	token  =(String)iter.getKey();	  token    =(String)iter.getValue();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
115	[BUG]  [BUGGY]  if(token.startsWith( "0 ")||  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "0 ")||  token.startsWith( "--))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "0 ")||  token.startsWith( "--))  {	  if(token.startsWith(   "0   ")||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
116	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.next()  ==  null)?  iter.next()  :  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.next()  ==  null)?  iter.next()  :  null;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.next()  ==  null)?  iter.next()  :  null;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
117	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.next()  ==  null)?  iter.next()  :  token;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.next()  ==  null)?  iter.next()  :  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.next()  ==  null)?  iter.next()  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
118	[BUG]  [BUGGY]  tokens.add( "-- "  +  token.substring(0,  token.indexOf('=')));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add( "-- "  +  token.substring(0,  token.indexOf('=')));  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add( "-- "  +  token.substring(0,  token.indexOf('=')));	  tokens.add(   "--   "    +    token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
119	[BUG]  [BUGGY]  tokens.add( "-- "  +  token.toLowerCase());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add( "-- "  +  token.toLowerCase());  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add( "-- "  +  token.toLowerCase());	  tokens.add(   "--   "    +    token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
120	[BUG]  [BUGGY]  if(token.startsWith( "- ")&&  token.charAt(token.length()  -  1)  ==  '-')  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( "- ")&&  token.charAt(token.length()  -  1)  ==  '-')  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( "- ")&&  token.charAt(token.length()  -  1)  ==  '-')  {	  if(token.startsWith(   "-   ")&&    token.charAt(token.length()    -    1)!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
121	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add( "- ");  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add( "- ");	  tokens.add('-');    	non-compiled	[CE]  <identifier>  expected	44	None	replace
122	[BUG]  [BUGGY]  Option  currentOption  =  iter.next();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Option  currentOption  =  iter.next();  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Option  currentOption  =  iter.next();	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
123	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());	  tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
124	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.hasNext()?((  String)iter.next()).toLowerCase()  :  token;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =  iter.hasNext()?((  String)iter.next()).toLowerCase()  :  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =  iter.hasNext()?((  String)iter.next()).toLowerCase()  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?((    String)iter.next()).toLowerCase()    :    token;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
125	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.next()  ==  null)?((  String)iter.next()).toLowerCase()  :  token;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.next()  ==  null)?((  String)iter.next()).toLowerCase()  :  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.next()  ==  null)?((  String)iter.next()).toLowerCase()  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?((    String)iter.next()).toLowerCase()    :    token;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
126	[BUG]  [BUGGY]  if(token!=  null  &&!stopAtNonOption  &&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token!=  null  &&!stopAtNonOption  &&  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token!=  null  &&!stopAtNonOption  &&  token.startsWith( "-- "))  {	  if(!stopAtNonOption    &&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
127	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.startsWith( ".- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  ||  token.startsWith( ".- "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  ||  token.startsWith( ".- "))  {	  if(stopAtNonOption    &&    token.startsWith(   ".--   "))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
128	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.length  >  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(stopAtNonOption  &&  token.length  >  0)  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(stopAtNonOption  &&  token.length  >  0)  {	  if(stopAtNonOption    &&    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
129	[BUG]  [BUGGY]  if(token.startsWith( ". ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( ". ")||  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( ". ")||  token.startsWith( "-- "))  {	  if(token.startsWith(   "-   ")&&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
130	[BUG]  [BUGGY]  tokens  =(ArrayList)iter.getValue();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  tokens  =(ArrayList)iter.getValue();  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	tokens  =(ArrayList)iter.getValue();	  token    =(String)iter.getValue();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
131	[BUG]  [BUGGY]  if(token.startsWith( ". ")||  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  if(token.startsWith( ". ")||  token.startsWith( "--))  {  [BUGGY]      {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	if(token.startsWith( ". ")||  token.startsWith( "--))  {	  if(token.startsWith(   "-   ")&&    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
132	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.next()?(Iterator  <  String>)iter.next()  :  token;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =  iter.next()?(Iterator  <  String>)iter.next()  :  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =  iter.next()?(Iterator  <  String>)iter.next()  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?(Iterator    <    String>)iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
133	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?(Iterator  <  String>)iter.remove()  :  token;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?(Iterator  <  String>)iter.remove()  :  token;  [BUGGY]      if  (token.startsWith(     "--     "))    {  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?(Iterator  <  String>)iter.remove()  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?(Iterator    <    String>)iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
