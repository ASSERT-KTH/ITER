bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption  &&  token.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(stopAtNonOption  &&  token.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	18	None	replace
2	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(token));  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(token));  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(token));  }	  While(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	18	None	replace
3	[BUG]  [BUGGY]  options  =  options.getOption(token,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options  =  options.getOption(token,  stopAtNonOption);	  options    =    options.getOption(token);    	non-compiled	[CE]  	45	None	replace
4	[BUG]  [BUGGY]  options  =  options.getOption(token)+  stopAtNonOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options  =  options.getOption(token)+  stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options  =  options.getOption(token)+  stopAtNonOption;	  options    =    options.getOption(token);    	non-compiled	[CE]  	45	None	replace
5	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  null  :  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token,  stopAtNonOption?  null  :  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	tokens.add(token,  stopAtNonOption?  null  :  stopAtNonOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	33	None	replace
6	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.equals( "   "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  token.equals( "   "))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  token.equals( "   "))  {	  if(stopAtNonOption    ||    token.equals(   "   "))    {    	non-compiled	[CE]  	49	None	replace
7	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.contains( "   "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  tokens.contains( "   "))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  tokens.contains( "   "))  {	  if(stopAtNonOption    ||    token.equals(   "   "))    {    	non-compiled	[CE]  	49	None	replace
8	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  options.get(token):  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  stopAtNonOption?  options.get(token):  null;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  stopAtNonOption?  options.get(token):  null;	  Option    options    =    stopAtNonOption?    options.getOption(token):    null;    	non-compiled	[CE]  	9	None	replace
9	[BUG]  [BUGGY]  options  =  stopAtNonOption?  options.getOption(token):  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options  =  stopAtNonOption?  options.getOption(token):  null;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options  =  stopAtNonOption?  options.getOption(token):  null;	  Option    options    =    stopAtNonOption?    options.getOption(token):    null;    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  options.put(token,  currentOption)  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  currentOption)  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.put(token,  currentOption)	  options.put(token,    stopAtNonOption)    	non-compiled	[CE]  	47	None	replace
11	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  token.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(!stopAtNonOption  &&  token.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(!stopAtNonOption  &&  token.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	19	None	replace
12	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  currentOption  =  options.getOption(token);  tokens.add(token);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	17	None	replace
13	[BUG]  [BUGGY]  options.setOption(token,  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.setOption(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.setOption(token,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	17	None	replace
14	[BUG]  [BUGGY]  if(!options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {	  if(!options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  	12	None	replace
15	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  tokens.contains(token))  {	  if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  	3	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.contains(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  options.contains(token))  {	  if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  	3	None	replace
17	[BUG]  [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	tokens.add(Token.EMPTY,  stopAtNonOption);	  tokens.add(Token.EMPTY);    	non-compiled	[CE]  	35	None	replace
18	[BUG]  [BUGGY]  tokens.add(Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(Token.EXPR_RESULT);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	tokens.add(Token.EXPR_RESULT);	  tokens.add(Token.EMPTY);    	non-compiled	[CE]  	35	None	replace
19	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  options.getOption(token))  {	  if(stopAtNonOption    ||    options.getOption(token))    {    	non-compiled	[CE]  	11	None	replace
20	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.getOption(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  options.getOption(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  &&  options.getOption(token))  {	  if(stopAtNonOption    ||    options.getOption(token))    {    	non-compiled	[CE]  	11	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption  &&!options.hasOption(token))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&!options.hasOption(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&!options.hasOption(token))  {	  if(stopAtNonOption    ||!options.hasOption(token))    {    	non-compiled	[CE]  	13	None	replace
22	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(token));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(token));  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(stopAtNonOption)  {  throw  new  IllegalStateException( " ".equals(token));  }	  While(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
23	[BUG]  [BUGGY]  Option  option  =  options.getOption(token  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token  +  1);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token  +  1);	  Option    option    =    options.getOption(token    +    stopAtNonOption);    	non-compiled	[CE]  	51	None	replace
24	[BUG]  [BUGGY]  Option  option  =  options.getOption(token  +  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token  +  token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token  +  token);	  Option    option    =    options.getOption(token    +    stopAtNonOption);    	non-compiled	[CE]  	51	None	replace
25	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.contains(token))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  options.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  &&  options.contains(token))  {	  if(!stopAtNonOption    &&    tokens.contains(token))    {    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.contains(token))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  options.contains(token))  {	  if(!stopAtNonOption    &&    tokens.contains(token))    {    	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  options.put(token,  StopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  StopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.put(token,  StopAtNonOption);	  options.put(token,    currentOption);    	non-compiled	[CE]  	27	None	replace
28	[BUG]  [BUGGY]  options.add(token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.add(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.add(token,  stopAtNonOption);	  options.add(token);    	non-compiled	[CE]  	29	None	replace
29	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.containsKey(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  tokens.containsKey(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  tokens.containsKey(token))  {	  if(stopAtNonOption    ||    tokens.containsKey(token))    {    	non-compiled	[CE]  	37	None	replace
30	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.containsKey(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.containsKey(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  options.containsKey(token))  {	  if(stopAtNonOption    ||    tokens.containsKey(token))    {    	non-compiled	[CE]  	37	None	replace
31	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  tokens.containsKey(token))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  tokens.containsKey(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  &&  tokens.containsKey(token))  {	  if(stopAtNonOption    ||    tokens.containsKey(token))    {    	non-compiled	[CE]  	37	None	replace
32	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(token,  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  currentOption.getOption(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  currentOption.getOption(token,  stopAtNonOption);	  Option    options    =    currentOption.getOption(token);    	non-compiled	[CE]  	32	None	replace
33	[BUG]  [BUGGY]  Option  options  =  currentOption.process(token,  stopAtNonOption);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  currentOption.process(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  currentOption.process(token,  stopAtNonOption);	  Option    options    =    currentOption.getOption(token);    	non-compiled	[CE]  	32	None	replace
34	[BUG]  [BUGGY]  Option  options  =  currentOption.process(token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  currentOption.process(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  currentOption.process(token);	  Option    options    =    currentOption.getOption(token);    	non-compiled	[CE]  	32	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  }	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	15	None	replace
36	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {	  if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  	10	None	replace
37	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(token))  {	  if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  	10	None	replace
38	[BUG]  [BUGGY]  if(!options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {	  if(!options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  	14	None	replace
39	[BUG]  [BUGGY]  ters.add(token,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  ters.add(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	ters.add(token,  stopAtNonOption);	  ters.add(token);    	non-compiled	[CE]  	30	None	replace
40	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.containsKey(token)||  tokens.contains(token))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.containsKey(token)||  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  options.containsKey(token)||  tokens.contains(token))  {	  if(stopAtNonOption    &&    options.containsKey(token))    {    	non-compiled	[CE]  	36	None	replace
41	[BUG]  [BUGGY]  Thread.currentThread().interrupt(throwAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Thread.currentThread().interrupt(throwAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Thread.currentThread().interrupt(throwAtNonOption);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  	43	None	replace
42	[BUG]  [BUGGY]  Thread.currentThread().interrupt(token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Thread.currentThread().interrupt(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Thread.currentThread().interrupt(token);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  	43	None	replace
43	[BUG]  [BUGGY]  Thread.currentThread().interrupt(this);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Thread.currentThread().interrupt(this);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Thread.currentThread().interrupt(this);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  	43	None	replace
44	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.size()  >  0)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  tokens.size()  >  0)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  tokens.size()  >  0)  {	  if(!stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  	52	None	replace
45	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  tokens.size()  >  0)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  tokens.size()  >  0)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  &&  tokens.size()  >  0)  {	  if(!stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  	52	None	replace
46	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.length()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.length()  >  0)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  token.length()  >  0)  {	  if(!stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  	52	None	replace
47	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  token.length()  ==  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  token.length()  ==  0)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  &&  token.length()  ==  0)  {	  if(!stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  	52	None	replace
48	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  tokens;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  tokens;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  stopAtNonOption?  options.getOption(token):  tokens;	  Option    options    =    stopAtNonOption?    options.getOption(token):    token;    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	tokens.add(Token.NAME,  stopAtNonOption);	  tokens.add(Token.NAME);    	non-compiled	[CE]  	41	None	replace
50	[BUG]  [BUGGY]  if(options.getOption(token)&&  stopAtNonOption)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(options.getOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(options.getOption(token)&&  stopAtNonOption)  {	  if(options.getOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  	39	None	replace
51	[BUG]  [BUGGY]  if(options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {	  if(options.getOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  	39	None	replace
52	[BUG]  [BUGGY]  if(!options.getOption(token)||  stopAtNonOption)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!options.getOption(token)||  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!options.getOption(token)||  stopAtNonOption)  {	  if(options.getOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  	39	None	replace
53	[BUG]  [BUGGY]  if(!stopAtNonOption  ||  options.containsKey(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  ||  options.containsKey(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  ||  options.containsKey(token))  {	  if(!stopAtNonOption    &&    options.containsKey(token))    {    	non-compiled	[CE]  	5	None	replace
54	[BUG]  [BUGGY]  options.put(token,  new  Option(stopAtNonOption));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  new  Option(stopAtNonOption));  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.put(token,  new  Option(stopAtNonOption));	  options.put(token,    null);    	non-compiled	[CE]  	26	None	replace
55	[BUG]  [BUGGY]  While(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }	  While(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	42	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)  ==  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)  ==  null)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  options.getOption(token)  ==  null)  {	  if(stopAtNonOption    &&    options.getOption(token)!=    null)    {    	non-compiled	[CE]  	48	None	replace
57	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null  ||  tokens.contains(token)  ==  false)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null  ||  tokens.contains(token)  ==  false)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  options.getOption(token)!=  null  ||  tokens.contains(token)  ==  false)  {	  if(stopAtNonOption    &&    options.getOption(token)!=    null)    {    	non-compiled	[CE]  	48	None	replace
58	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.getOption(token)  ==  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  options.getOption(token)  ==  null)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  &&  options.getOption(token)  ==  null)  {	  if(!stopAtNonOption    &&    options.getOption(token)!=    null)    {    	non-compiled	[CE]  	44	None	replace
59	[BUG]  [BUGGY]  if(options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {	  if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  	24	None	replace
60	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)&&  stopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)&&  stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token)&&  stopAtNonOption;	  Option    option    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  	57	None	replace
61	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);	  Option    option    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  	57	None	replace
62	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  currentOption;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)||  currentOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token)||  currentOption;	  Option    option    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  	57	None	replace
63	[BUG]  [BUGGY]  Option  options  =  options.getOptions(token,  stopAtNonOption);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOptions(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  options.getOptions(token,  stopAtNonOption);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  	2	None	replace
64	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions(token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  currentOption.getOptions(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  currentOption.getOptions(token);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  	2	None	replace
65	[BUG]  [BUGGY]  While(stopAtNonOption)  {  if(!options.contains(token))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption)  {  if(!options.contains(token))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(stopAtNonOption)  {  if(!options.contains(token))  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    if(!tokens.contains(token))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
66	[BUG]  [BUGGY]  While(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);	  While(stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	21	None	replace
67	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  while(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	while(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);	  While(stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	21	None	replace
68	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.length()  ==  0)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  token.length()  ==  0)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  token.length()  ==  0)  {	  if(stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  	58	None	replace
69	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.size()  ==  0)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  tokens.size()  ==  0)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  tokens.size()  ==  0)  {	  if(stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  	58	None	replace
70	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  tokens!=  null)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  tokens!=  null)  {	  if(stopAtNonOption    ||    tokens!=    null)    {    	non-compiled	[CE]  	38	None	replace
71	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  tokens  ==  null)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  tokens  ==  null)  {	  if(stopAtNonOption    ||    tokens!=    null)    {    	non-compiled	[CE]  	38	None	replace
72	[BUG]  [BUGGY]  if(tokens!=  null  ||  stopAtNonOption)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(tokens!=  null  ||  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(tokens!=  null  ||  stopAtNonOption)  {	  if(stopAtNonOption    ||    tokens!=    null)    {    	non-compiled	[CE]  	38	None	replace
73	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.get(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.get(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.put(token,  stopAtNonOption)&&  tokens.get(token);	  options.put(token,    stopAtNonOption)&&    tokens.contains(token);    	non-compiled	[CE]  	55	None	replace
74	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&  currentOption.contains(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  stopAtNonOption)&&  currentOption.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.put(token,  stopAtNonOption)&&  currentOption.contains(token);	  options.put(token,    stopAtNonOption)&&    tokens.contains(token);    	non-compiled	[CE]  	55	None	replace
75	[BUG]  [BUGGY]  tokens.add(Token.valueOf(currentOption));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(Token.valueOf(currentOption));  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	tokens.add(Token.valueOf(currentOption));	  tokens.add(Token.valueOf(stopAtNonOption));    	non-compiled	[CE]  	34	None	replace
76	[BUG]  [BUGGY]  tokens.add(Token.valueOf(token));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(Token.valueOf(token));  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	tokens.add(Token.valueOf(token));	  tokens.add(Token.valueOf(stopAtNonOption));    	non-compiled	[CE]  	34	None	replace
77	[BUG]  [BUGGY]  tokens.add(Token.valueOf(stopAtNonOption)+  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(Token.valueOf(stopAtNonOption)+  1);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	tokens.add(Token.valueOf(stopAtNonOption)+  1);	  tokens.add(Token.valueOf(stopAtNonOption));    	non-compiled	[CE]  	34	None	replace
78	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  token.equals(token))  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption  &&  token.equals(token))  {  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	||  stopAtNonOption  &&  token.equals(token))  {  tokens.add(token);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	28	None	replace
79	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	28	None	replace
80	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(Token.valueOf(token));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(Token.valueOf(token));  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	||  stopAtNonOption)  {  tokens.add(Token.valueOf(token));  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	28	None	replace
81	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.equals(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  token.equals(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  token.equals(token))  {	  if(stopAtNonOption    ||    token.equals(token))    {    	non-compiled	[CE]  	50	None	replace
82	[BUG]  [BUGGY]  if(options.hasOption(token)||  stopAtNonOption  &&  tokens.contains(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(options.hasOption(token)||  stopAtNonOption  &&  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(options.hasOption(token)||  stopAtNonOption  &&  tokens.contains(token))  {	  if(options.hasOption(token)||    stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  	25	None	replace
83	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {	  if(options.hasOption(token)||    stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  	25	None	replace
84	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)&&  stopAtNonOption;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)&&  stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  options.getOption(token)&&  stopAtNonOption;	  Option    options    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  	56	None	replace
85	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  currentOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)||  currentOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  options.getOption(token)||  currentOption;	  Option    options    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  	56	None	replace
86	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);	  Option    options    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  	56	None	replace
87	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)/  stopAtNonOption;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)/  stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token)/  stopAtNonOption;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  	23	None	replace
88	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  eatTheRest;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)+  eatTheRest;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token)+  eatTheRest;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  	23	None	replace
89	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  StopAtNonOption;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)+  StopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token)+  StopAtNonOption;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  	23	None	replace
90	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.getOption(token)  ==  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.getOption(token)  ==  null)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  options.getOption(token)  ==  null)  {	  if(stopAtNonOption    ||    options.getOption(token)!=    null)    {    	non-compiled	[CE]  	40	None	replace
91	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token)!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token)!=  null)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  tokens.contains(token)!=  null)  {	  if(stopAtNonOption    ||    options.getOption(token)!=    null)    {    	non-compiled	[CE]  	40	None	replace
92	[BUG]  [BUGGY]  Options  options  =  options.getOptions(token,  stopAtNonOption,  token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Options  options  =  options.getOptions(token,  stopAtNonOption,  token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Options  options  =  options.getOptions(token,  stopAtNonOption,  token);	  Options    options    =    options.getOptions(token,    stopAtNonOption);    	non-compiled	[CE]  	1	None	replace
93	[BUG]  [BUGGY]  Options  options  =  options.getOptions(token,  stopAtNonOption,  eatTheRest);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Options  options  =  options.getOptions(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Options  options  =  options.getOptions(token,  stopAtNonOption,  eatTheRest);	  Options    options    =    options.getOptions(token,    stopAtNonOption);    	non-compiled	[CE]  	1	None	replace
94	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	22	None	replace
95	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption)+  1;	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	22	None	replace
96	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  options.getOption(token)!=  null)  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption  &&  options.getOption(token)!=  null)  {  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	||  stopAtNonOption  &&  options.getOption(token)!=  null)  {  tokens.add(token);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	28	None	replace
97	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  options.getOption(token)  ==  null)  {  tokens.add(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption  &&  options.getOption(token)  ==  null)  {  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	||  stopAtNonOption  &&  options.getOption(token)  ==  null)  {  tokens.add(token);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	28	None	replace
98	[BUG]  [BUGGY]  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	&&  stopAtNonOption)  {  tokens.add(token);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	28	None	replace
99	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	46	None	replace
100	[BUG]  [BUGGY]  Options  options  =  stopAtNonOption?  options.getOption(token):  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Options  options  =  stopAtNonOption?  options.getOption(token):  null;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Options  options  =  stopAtNonOption?  options.getOption(token):  null;	  Option    options    =    stopAtNonOption?    options.getOption(token):    null;    	non-compiled	[CE]  	9	None	replace
101	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  while(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	while(stopAtNonOption)  {  tokens.add(token);  }	  While(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	42	None	replace
102	[BUG]  [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	while(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  While(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
103	[BUG]  [BUGGY]  if(options.getOption(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(options.getOption(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(options.getOption(token))  {	  if(options.getOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  	39	None	replace
104	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	22	None	replace
105	[BUG]  [BUGGY]  if(stopAtNonOption  ||!options.hasOption(token)&&  stopAtNonOption)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||!options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||!options.hasOption(token)&&  stopAtNonOption)  {	  if(!options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  	14	None	replace
106	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);	  Option    option    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  	57	None	replace
107	[BUG]  [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	while(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	18	None	replace
108	[BUG]  [BUGGY]  Option  options  =  currentOption.cloneTree();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  currentOption.cloneTree();  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  currentOption.cloneTree();	  Option    options    =    currentOption.getOption(token);    	non-compiled	[CE]  	32	None	replace
109	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	15	None	replace
110	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.equals( "- "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.equals( "- "))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  token.equals( "- "))  {	  if(stopAtNonOption    ||    token.equals(   "   "))    {    	non-compiled	[CE]  	49	None	replace
111	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.equals( "-- "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.equals( "-- "))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  token.equals( "-- "))  {	  if(stopAtNonOption    ||    token.equals(   "   "))    {    	non-compiled	[CE]  	49	None	replace
112	[BUG]  [BUGGY]  if(stopAtNonOption)  {  ters.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  ters.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption)  {  ters.add(token);  }	  ters.add(token);    	non-compiled	[CE]  	30	None	replace
113	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.add(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.add(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.put(token,  stopAtNonOption)&&  tokens.add(token);	  options.put(token,    stopAtNonOption)&&    tokens.contains(token);    	non-compiled	[CE]  	55	None	replace
114	[BUG]  [BUGGY]  Option  option  =  options.getOption(token  +  stopAtNonOption,  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token  +  stopAtNonOption,  token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token  +  stopAtNonOption,  token);	  Option    option    =    options.getOption(token    +    stopAtNonOption);    	non-compiled	[CE]  	51	None	replace
115	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add(token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  while(stopAtNonOption)  {  tokens.add(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	while(stopAtNonOption)  {  tokens.add(token);	  While(stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	21	None	replace
116	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);	  Option    options    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  	56	None	replace
117	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)-  stopAtNonOption;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)-  stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token)-  stopAtNonOption;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  	23	None	replace
118	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	33	None	replace
119	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token,  stopAtNonOption)!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token,  stopAtNonOption)!=  null)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  options.getOption(token,  stopAtNonOption)!=  null)  {	  if(stopAtNonOption    &&    options.getOption(token)!=    null)    {    	non-compiled	[CE]  	48	None	replace
120	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.length()  >  0)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  token.length()  >  0)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  token.length()  >  0)  {	  if(!stopAtNonOption    &&    token.length()    >    0)    {    	non-compiled	[CE]  	52	None	replace
121	[BUG]  [BUGGY]  token  =  token.trim().toLowerCase();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  token  =  token.trim().toLowerCase();  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	token  =  token.trim().toLowerCase();	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	17	None	replace
122	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.getOption(token)!=  null  &&  tokens.contains(token))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  options.getOption(token)!=  null  &&  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  &&  options.getOption(token)!=  null  &&  tokens.contains(token))  {	  if(!stopAtNonOption    &&    options.getOption(token)!=    null)    {    	non-compiled	[CE]  	44	None	replace
123	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null  &&  tokens.contains(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null  &&  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  options.getOption(token)!=  null  &&  tokens.contains(token))  {	  if(!stopAtNonOption    &&    options.getOption(token)!=    null)    {    	non-compiled	[CE]  	44	None	replace
124	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null  &&  stopAtNonOption)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null  &&  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  options.getOption(token)!=  null  &&  stopAtNonOption)  {	  if(stopAtNonOption    &&    options.getOption(token)!=    null)    {    	non-compiled	[CE]  	48	None	replace
125	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)&&!stopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)&&!stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption)&&!stopAtNonOption;	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	22	None	replace
126	[BUG]  [BUGGY]  AssertionFailedToken(token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  AssertionFailedToken(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	AssertionFailedToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	16	None	replace
127	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	28	None	replace
128	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(Token.EMPTY);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(Token.EMPTY);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	||  stopAtNonOption)  {  tokens.add(Token.EMPTY);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	28	None	replace
129	[BUG]  [BUGGY]  options.setOption(stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.setOption(stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.setOption(stopAtNonOption);	  options.add(token);    	non-compiled	[CE]  	29	None	replace
130	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  currentOption.getOptions();  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  currentOption.getOptions();	  Option    options    =    currentOption.getOption(token);    	non-compiled	[CE]  	32	None	replace
131	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	15	None	replace
132	[BUG]  [BUGGY]  options  =  options.getOptions(token,  stopAtNonOption);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options  =  options.getOptions(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options  =  options.getOptions(token,  stopAtNonOption);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  	2	None	replace
133	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	tokens.add(token,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	33	None	replace
134	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)&&!stopAtNonOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token,  stopAtNonOption)&&!stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	tokens.add(token,  stopAtNonOption)&&!stopAtNonOption;	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	33	None	replace
135	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }	  While(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	42	None	replace
136	[BUG]  [BUGGY]  Option  option  =  options.getOption(token  + "_ "  +  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token  + "_ "  +  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token  + "_ "  +  stopAtNonOption);	  Option    option    =    options.getOption(token    +    stopAtNonOption);    	non-compiled	[CE]  	51	None	replace
137	[BUG]  [BUGGY]  Option  option  =  options.getOption(token  + "- "  +  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token  + "- "  +  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token  + "- "  +  stopAtNonOption);	  Option    option    =    options.getOption(token    +    stopAtNonOption);    	non-compiled	[CE]  	51	None	replace
138	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	7	None	replace
139	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	7	None	replace
140	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  token,  stopAtNonOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  token,  stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  stopAtNonOption?  options.getOption(token):  token,  stopAtNonOption;	  Option    options    =    stopAtNonOption?    options.getOption(token):    token;    	non-compiled	[CE]  	8	None	replace
141	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  options  =  options.getOption(token);  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  Options  options  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption)  {  Options  options  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	46	None	replace
142	[BUG]  [BUGGY]  options.put(token,  null)  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  null)  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.put(token,  null)	  options.put(token,    stopAtNonOption)    	non-compiled	[CE]  	47	None	replace
143	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption  +  1;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token)+  stopAtNonOption  +  1;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  	23	None	replace
