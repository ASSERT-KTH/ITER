bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Options  options  =  options.getOptions(token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Options  options  =  options.getOptions(token,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Options  options  =  options.getOptions(token,  stopAtNonOption);	      Options    options    =    options.getOptions(token);    	non-compiled	[CE]  	15	None	replace
2	[BUG]  [BUGGY]  Option  options  =  options.getOptions(token);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Option  options  =  options.getOptions(token);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  options.getOptions(token);	      Options    options    =    options.getOptions(token);    	non-compiled	[CE]  	15	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  tokens.contains(token))  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  	16	None	replace
4	[BUG]  [BUGGY]  if(!stopAtNonOption  ||  tokens.contains(token))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(!stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  ||  tokens.contains(token))  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  	16	None	replace
5	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.containsKey(token))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(!stopAtNonOption  &&  options.containsKey(token))  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  &&  options.containsKey(token))  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  	16	None	replace
6	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  tokens.contains(token))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(!stopAtNonOption  &&  tokens.contains(token))  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  &&  tokens.contains(token))  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  	16	None	replace
7	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  options.getOption(token,  stopAtNonOption);	      Option    options    =    options.getOption(token);    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  token;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  token;  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  stopAtNonOption?  options.getOption(token):  token;	      Option    options    =    options.getOption(token);    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  null;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  null;  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  stopAtNonOption?  options.getOption(token):  null;	      Option    options    =    options.getOption(token);    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  options.hasOption(token))  {	  if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.getOption(token))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  ||  options.getOption(token))  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  options.getOption(token))  {	  if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  if(!options.hasOption(token)||  stopAtNonOption)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(!options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!options.hasOption(token)||  stopAtNonOption)  {	  if(!options.hasOption(token))    {    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  if(stopAtNonOption  ||!options.hasOption(token))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  ||!options.hasOption(token))  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||!options.hasOption(token))  {	  if(!options.hasOption(token))    {    	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  if(!options.hasOption(token)&&  stopAtNonOption)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(!options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!options.hasOption(token)&&  stopAtNonOption)  {	  if(!options.hasOption(token))    {    	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	12	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	12	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	12	None	replace
18	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  While(stopAtNonOption)  {  if(!tokens.contains(token))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  While(stopAtNonOption)  {  if(!tokens.contains(token))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(stopAtNonOption)  {  if(!tokens.contains(token))  {  throw  new  IllegalArgumentException( " ");  }	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(stopAtNonOption)  {  tokens.add(token);	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption);	      Option    option    =    options.getOption(token);    	non-compiled	[CE]  	13	None	replace
23	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption;  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token)+  stopAtNonOption;	      Option    option    =    options.getOption(token);    	non-compiled	[CE]  	13	None	replace
24	[BUG]  [BUGGY]  if(options.hasOption(token)&&  stopAtNonOption)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(options.hasOption(token)&&  stopAtNonOption)  {	  if(options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  if(options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {	  if(options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  options.put(token,  null);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  options.put(token,  null);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.put(token,  null);	      options.put(token,    stopAtNonOption);    	non-compiled	[CE]  	3	None	replace
27	[BUG]  [BUGGY]  options.put(token,  currentOption);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  options.put(token,  currentOption);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.put(token,  currentOption);	      options.put(token,    stopAtNonOption);    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	||  stopAtNonOption)  {  tokens.add(token);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	2	None	replace
29	[BUG]  [BUGGY]  options.add(token);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  options.add(token);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.add(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	2	None	replace
30	[BUG]  [BUGGY]  ters.add(token);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  ters.add(token);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	ters.add(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	2	None	replace
31	[BUG]  [BUGGY]  Options  options  =  options.getOption(token,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Options  options  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Options  options  =  options.getOption(token,  stopAtNonOption);	      Options    options    =    options.getOption(token);    	non-compiled	[CE]  	14	None	replace
32	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(token);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Option  options  =  currentOption.getOption(token);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  currentOption.getOption(token);	      Options    options    =    options.getOption(token);    	non-compiled	[CE]  	14	None	replace
33	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	tokens.add(token,  stopAtNonOption);	      tokens.add(token);    	non-compiled	[CE]  	1	None	replace
34	[BUG]  [BUGGY]  tokens.add(Token.valueOf(stopAtNonOption));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.add(Token.valueOf(stopAtNonOption));  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	tokens.add(Token.valueOf(stopAtNonOption));	      tokens.add(token);    	non-compiled	[CE]  	1	None	replace
35	[BUG]  [BUGGY]  tokens.add(Token.EMPTY);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.add(Token.EMPTY);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	tokens.add(Token.EMPTY);	      tokens.add(token);    	non-compiled	[CE]  	1	None	replace
36	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.containsKey(token))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  &&  options.containsKey(token))  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  options.containsKey(token))  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  	6	None	replace
37	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.containsKey(token))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  ||  tokens.containsKey(token))  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  tokens.containsKey(token))  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens!=  null)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  ||  tokens!=  null)  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  tokens!=  null)  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  	6	None	replace
39	[BUG]  [BUGGY]  if(options.getOption(token)||  stopAtNonOption)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(options.getOption(token)||  stopAtNonOption)  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(options.getOption(token)||  stopAtNonOption)  {	  if(options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.getOption(token)!=  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  ||  options.getOption(token)!=  null)  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  options.getOption(token)!=  null)  {	  if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  	9	None	replace
41	[BUG]  [BUGGY]  tokens.add(Token.NAME);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  tokens.add(Token.NAME);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	tokens.add(Token.NAME);	      tokens.add(token);    	non-compiled	[CE]  	1	None	replace
42	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(stopAtNonOption)  {  tokens.add(token);  }	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
43	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Thread.currentThread().interrupt();	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
44	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.getOption(token)!=  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(!stopAtNonOption  &&  options.getOption(token)!=  null)  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  &&  options.getOption(token)!=  null)  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  	16	None	replace
45	[BUG]  [BUGGY]  options  =  options.getOption(token);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  options  =  options.getOption(token);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options  =  options.getOption(token);	      Option    options    =    options.getOption(token);    	non-compiled	[CE]  	11	None	replace
46	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	12	None	replace
47	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  options.put(token,  stopAtNonOption)  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.put(token,  stopAtNonOption)	      options.put(token,    stopAtNonOption);    	non-compiled	[CE]  	3	None	replace
48	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null)  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  &&  options.getOption(token)!=  null)  {	  if(!stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  	10	None	replace
49	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.equals( " "))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  ||  token.equals( " "))  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  token.equals( " "))  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  	6	None	replace
50	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.equals(token))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  ||  token.equals(token))  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  token.equals(token))  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  	6	None	replace
51	[BUG]  [BUGGY]  Option  option  =  options.getOption(token  +  stopAtNonOption);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Option  option  =  options.getOption(token  +  stopAtNonOption);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token  +  stopAtNonOption);	      Option    option    =    options.getOption(token);    	non-compiled	[CE]  	13	None	replace
52	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  token.length()  >  0)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(!stopAtNonOption  &&  token.length()  >  0)  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(!stopAtNonOption  &&  token.length()  >  0)  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  	16	None	replace
53	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	While(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
54	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  [Delete]  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	[Delete]	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
55	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	options.put(token,  stopAtNonOption)&&  tokens.contains(token);	      options.put(token,    stopAtNonOption);    	non-compiled	[CE]  	3	None	replace
56	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption;  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  options  =  options.getOption(token)||  stopAtNonOption;	      Option    options    =    options.getOption(token);    	non-compiled	[CE]  	11	None	replace
57	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption;  [BUGGY]    if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	Option  option  =  options.getOption(token)||  stopAtNonOption;	      Option    option    =    options.getOption(token);    	non-compiled	[CE]  	13	None	replace
58	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.length()  ==  0)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption  ||  token.length()  ==  0)  {  [BUGGY]    {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	if(stopAtNonOption  ||  token.length()  ==  0)  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  	6	None	replace
