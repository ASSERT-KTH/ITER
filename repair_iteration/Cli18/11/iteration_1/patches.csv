bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  options.clear();  currentOption  =  null;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  options.clear();  currentOption  =  null;  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	options.clear();  currentOption  =  null;	      if(currentOption!=    null)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  if(currentOption!=  null)  {  tokens.remove();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(currentOption!=  null)  {  tokens.remove();  currentOption  =  null;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(currentOption!=  null)  {  tokens.remove();  currentOption  =  null;  }	      if(currentOption!=    null)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens  =  new  LinkedList  <  Option>();  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens  =  new  LinkedList  <  Option>();	      tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
4	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size());  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size());  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens  =  new  ArrayList  <  Option>(options.size());	      tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
5	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens  =  new  ArrayList  <  Option>(options);  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens  =  new  ArrayList  <  Option>(options);	      tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
6	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  ArrayList();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.clear();  currentOption  =  new  ArrayList();  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.clear();  currentOption  =  new  ArrayList();	      tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
7	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option(this);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.clear();  currentOption  =  new  Option(this);  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.clear();  currentOption  =  new  Option(this);	      tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
8	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Options();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.clear();  currentOption  =  new  Options();  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.clear();  currentOption  =  new  Options();	      tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
9	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  <identifier>  expected	11	None	replace
10	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  <identifier>  expected	11	None	replace
11	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  <identifier>  expected	11	None	replace
12	[BUG]  [BUGGY]  eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  eatTheRest  =  false;  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	eatTheRest  =  false;	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
13	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
14	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
15	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(currentOption!=  null)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
16	[BUG]  [BUGGY]  if(currentOption!=  null)  {  tokens  =  new  LinkedList  <  Option>();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(currentOption!=  null)  {  tokens  =  new  LinkedList  <  Option>();  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(currentOption!=  null)  {  tokens  =  new  LinkedList  <  Option>();  }	      if(currentOption!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
17	[BUG]  [BUGGY]  tokens.add( "0 ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "0 ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "0 ");	  tokens.add(   "u00   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
18	[BUG]  [BUGGY]  tokens.add( "00 ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "00 ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "00 ");	  tokens.add(   "u00   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
19	[BUG]  [BUGGY]  tokens.add( "-00 ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "-00 ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "-00 ");	  tokens.add(   "u00   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
20	[BUG]  [BUGGY]  tokens.add( "$00 ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "$00 ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "$00 ");	  tokens.add(   "u00   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
21	[BUG]  [BUGGY]  currentOption  =  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  currentOption  =  null;  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	currentOption  =  null;	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  tokens.add(new  Option( "Option "));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(new  Option( "Option "));  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add(new  Option( "Option "));	  tokens.add(new    Option(   "Position   "));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
23	[BUG]  [BUGGY]  tokens.add(new  Option( "Operation "));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(new  Option( "Operation "));  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add(new  Option( "Operation "));	  tokens.add(new    Option(   "Position   "));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
24	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "null ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "null ");	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
25	[BUG]  [BUGGY]  tokens.remove( "- ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.remove( "- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.remove( "- ");	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
26	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "- ");	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
27	[BUG]  [BUGGY]  tokens.remove(0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.remove(0);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.remove(0);	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
28	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;	      if(currentOption!=    null)    {    tokens    =    new    ArrayList    <    Option>();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;	      if(currentOption!=    null)    {    tokens    =    new    ArrayList    <    Option>();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
30	[BUG]  [BUGGY]  tokens.remove( "-- ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.remove( "-- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.remove( "-- ");	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
31	[BUG]  [BUGGY]  tokens.add( "--n ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "--n ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "--n ");	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
32	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "-- "  +  currentOption);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "-- "  +  currentOption);	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
33	[BUG]  [BUGGY]  tokens.add( "   ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "   ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "   ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
34	[BUG]  [BUGGY]  tokens.add( "000 ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "000 ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "000 ");	  tokens.add(   "u00   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
35	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	      if(currentOption!=    null)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
36	[BUG]  [BUGGY]  if(eatTheRest)  {  if(currentOption!=  null)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(eatTheRest)  {  if(currentOption!=  null)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(eatTheRest)  {  if(currentOption!=  null)  {  tokens.clear();  currentOption  =  null;  }	      if(currentOption!=    null)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
37	[BUG]  [BUGGY]  tokens.remove( "this ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.remove( "this ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.remove( "this ");	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
38	[BUG]  [BUGGY]  tokens.add( "none ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "none ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "none ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
39	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
40	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(currentOption,  0,  tokens.size()  -  1,  tokens.size());  currentOption  =  null;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
41	[BUG]  [BUGGY]  tokens.add( "-- "  +  eatTheRest);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "-- "  +  eatTheRest);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "-- "  +  eatTheRest);	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
42	[BUG]  [BUGGY]  tokens.set( "-- ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.set( "-- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.set( "-- ");	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
43	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size());  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size());  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens  =  new  ArrayList  <  Option>(tokens.size());	      tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
44	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	      tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "-- ");  currentOption  =  null;  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "-- ");  currentOption  =  null;	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
46	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }	      if(currentOption!=    null)    {    tokens    =    new    ArrayList    <    Option>();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
47	[BUG]  [BUGGY]  tokens.addAll(tokens);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.addAll(tokens);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.addAll(tokens);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
48	[BUG]  [BUGGY]  tokens.add( "-- ".equals(this.options));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "-- ".equals(this.options));  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "-- ".equals(this.options));	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
49	[BUG]  [BUGGY]  tokens.add( "-- ".equals(currentOption.getName()));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add( "-- ".equals(currentOption.getName()));  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add( "-- ".equals(currentOption.getName()));	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
50	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(size());  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens  =  new  ArrayList  <  Option>(size());  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens  =  new  ArrayList  <  Option>(size());	      tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
51	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.addAll(options);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.addAll(options);  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.addAll(options);  }	      tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
52	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.add(option);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.add(option);  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.add(option);  }	      tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
53	[BUG]  [BUGGY]  if(eatTheRest  ==  false)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(eatTheRest  ==  false)  {  eatTheRest  =  true;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(eatTheRest  ==  false)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
54	[BUG]  [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  true;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(eatTheRest!=  null)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
55	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(eatTheRest)  {  tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(eatTheRest)  {  tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;  }	      if(currentOption!=    null)    {    tokens    =    new    ArrayList    <    Option>();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
56	[BUG]  [BUGGY]  tokens.remove( "eatTheRest ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.remove( "eatTheRest ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.remove( "eatTheRest ");	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
57	[BUG]  [BUGGY]  if(eatTheRest)  {  currentOption  =  null;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  if(eatTheRest)  {  currentOption  =  null;  tokens.clear();  currentOption  =  null;  }  [BUGGY]    tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	if(eatTheRest)  {  currentOption  =  null;  tokens.clear();  currentOption  =  null;  }	      if(currentOption!=    null)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
58	[BUG]  [BUGGY]  tokens.add(new  Option( "position "));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;    [BUGGY]  tokens.add(new  Option( "position "));  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	tokens.add(new  Option( "position "));	  tokens.add(new    Option(   "Position   "));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
