bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  true;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  true;  }	  else    if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  	29	None	replace
2	[BUG]  [BUGGY]  options.add(token);  eatTheRest  =  stopAtNonOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  options.add(token);  eatTheRest  =  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.add(token);  eatTheRest  =  stopAtNonOption;	  else    if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  	29	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  tokens  =  options.getOptions(token);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  tokens  =  options.getOptions(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  tokens  =  options.getOptions(token);  }	  Option    tokens    =    options.getOptions(token);    	non-compiled	[CE]  	30	None	replace
4	[BUG]  [BUGGY]  Option  tokens  =  options.getOptions(token,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  Option  tokens  =  options.getOptions(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  tokens  =  options.getOptions(token,  stopAtNonOption);	  Option    tokens    =    options.getOptions(token);    	non-compiled	[CE]  	30	None	replace
5	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	  parent    ==    null    &&    stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	25	None	replace
9	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(currentOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(currentOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(currentOption);	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	24	None	replace
10	[BUG]  [BUGGY]  tokens.add(currentOption);  eatTheRest  =  true;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(currentOption);  eatTheRest  =  true;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(currentOption);  eatTheRest  =  true;	  tokens.add(currentOption);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	12	None	replace
11	[BUG]  [BUGGY]  tokens.add(currentOption);  eatTheRest  =  false;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(currentOption);  eatTheRest  =  false;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(currentOption);  eatTheRest  =  false;	  tokens.add(currentOption);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	12	None	replace
12	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  	16	None	replace
13	[BUG]  [BUGGY]  Option  option  =  currentOption.getOption(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  Option  option  =  currentOption.getOption(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  option  =  currentOption.getOption(token);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  	16	None	replace
14	[BUG]  [BUGGY]  parent!=  null  &&  currentOption!=  null  &&  currentOption.isSupported();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent!=  null  &&  currentOption!=  null  &&  currentOption.isSupported();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  currentOption!=  null  &&  currentOption.isSupported();	  parent!=    null    &&    currentOption    ==    null    &&    currentOption.isSupported();    	non-compiled	[CE]  	22	None	replace
15	[BUG]  [BUGGY]  options.add(currentOption);  continue;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  options.add(currentOption);  continue;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.add(currentOption);  continue;	  options.add(token);    continue;    	non-compiled	[CE]  	17	None	replace
16	[BUG]  [BUGGY]  tokens.add( "-- ",  currentOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add( "-- ",  currentOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add( "-- ",  currentOption);	  tokens.add(   "--   ");    	non-compiled	[CE]  	27	None	replace
17	[BUG]  [BUGGY]  tokens.add( "-- "  +  token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add( "-- "  +  token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add( "-- "  +  token);	  tokens.add(   "--   ");    	non-compiled	[CE]  	27	None	replace
18	[BUG]  [BUGGY]  tokens.add( "--n ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add( "--n ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add( "--n ");	  tokens.add(   "--   ");    	non-compiled	[CE]  	27	None	replace
19	[BUG]  [BUGGY]  tokens.add(currentOption.toString());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(currentOption.toString());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(currentOption.toString());	  tokens.add(currentOption);    	non-compiled	[CE]  	1	None	replace
20	[BUG]  [BUGGY]  tokens.add(currentOption.token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(currentOption.token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(currentOption.token);	  tokens.add(currentOption);    	non-compiled	[CE]  	1	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  tokens  =  options.getOption(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  tokens  =  options.getOption(token);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  tokens  =  options.getOption(token);  }	  Option    tokens    =    options.getOption(token);    	non-compiled	[CE]  	31	None	replace
22	[BUG]  [BUGGY]  tokens  =  options.getOption(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens  =  options.getOption(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens  =  options.getOption(token);	  Option    tokens    =    options.getOption(token);    	non-compiled	[CE]  	31	None	replace
23	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  tokens  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  tokens  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  tokens  =  options.getOption(token);  }  else  {  tokens.add(token);  }	  Option    tokens    =    options.getOption(token);    	non-compiled	[CE]  	31	None	replace
24	[BUG]  [BUGGY]  options.add(token);  currentOption  =  options.getOption(token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  options.add(token);  currentOption  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.add(token);  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	10	None	replace
25	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(token);  currentOption  =  options.getOption(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	10	None	replace
26	[BUG]  [BUGGY]  parent.addOption(token);  currentOption  =  options.getOption(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent.addOption(token);  currentOption  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent.addOption(token);  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	10	None	replace
27	[BUG]  [BUGGY]  options.put(token,  currentOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  options.put(token,  currentOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.put(token,  currentOption);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  	9	None	replace
28	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add( "null ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add( "null ");	  tokens.add(   "n   ");    	non-compiled	[CE]  	28	None	replace
29	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add( "- ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add( "- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  	28	None	replace
30	[BUG]  [BUGGY]  tokens.add( ": ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add( ": ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add( ": ");	  tokens.add(   "n   ");    	non-compiled	[CE]  	28	None	replace
31	[BUG]  [BUGGY]  tokens.add(new  Option(token,  stopAtNonOption));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(new  Option(token,  stopAtNonOption));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(new  Option(token,  stopAtNonOption));	  tokens.add(new    Option(token));    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  options.add(currentOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  options.add(currentOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.add(currentOption);	  options.add(token);    	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add( ", ");  currentOption  =  options.getOption(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add( ", ");  currentOption  =  options.getOption(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	else  if(stopAtNonOption)  {  tokens.add( ", ");  currentOption  =  options.getOption(token);  }	  else    if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	11	None	replace
34	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }	  Option    option    =    options.getOption(token);    tokens.add(option);    	non-compiled	[CE]  	20	None	replace
35	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);	  parent    ==    null    &&    stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  	26	None	replace
36	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);	  parent    ==    null    &&    stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  	26	None	replace
37	[BUG]  [BUGGY]  parent!=  null  &&  currentOption!=  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent!=  null  &&  currentOption!=  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  currentOption!=  null;	  parent    ==    null    &&    currentOption!=    null;    	non-compiled	[CE]  	21	None	replace
38	[BUG]  [BUGGY]  currentOption!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  currentOption!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	currentOption!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	23	None	replace
39	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Option    currentOption    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  	8	None	replace
40	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  stopAtNonOption  =  false;  }	  Option    currentOption    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  	8	None	replace
41	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  null;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(token);  currentOption  =  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(token);  currentOption  =  null;	  tokens.add(token);    currentOption    =    stopAtNonOption;    	non-compiled	[CE]  	13	None	replace
42	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  eatTheRest;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(token);  currentOption  =  eatTheRest;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(token);  currentOption  =  eatTheRest;	  tokens.add(token);    currentOption    =    stopAtNonOption;    	non-compiled	[CE]  	13	None	replace
43	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  StopAtNonOption;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(token);  currentOption  =  StopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(token);  currentOption  =  StopAtNonOption;	  tokens.add(token);    currentOption    =    stopAtNonOption;    	non-compiled	[CE]  	13	None	replace
44	[BUG]  [BUGGY]  Option  token  =  options.get(token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  Option  token  =  options.get(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  token  =  options.get(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  	18	None	replace
45	[BUG]  [BUGGY]  tokens.add(new  Option(currentOption),  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(new  Option(currentOption),  stopAtNonOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(new  Option(currentOption),  stopAtNonOption);	  tokens.add(new    Option(currentOption));    	non-compiled	[CE]  	2	None	replace
46	[BUG]  [BUGGY]  tokens.add(new  Option(currentOption,  stopAtNonOption));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(new  Option(currentOption,  stopAtNonOption));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(new  Option(currentOption,  stopAtNonOption));	  tokens.add(new    Option(currentOption));    	non-compiled	[CE]  	2	None	replace
47	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    tokens.add(currentOption);    }    	non-compiled	[CE]  	7	None	replace
48	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    tokens.add(currentOption);    }    	non-compiled	[CE]  	7	None	replace
49	[BUG]  [BUGGY]  tokens.add(currentOption);  continue;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(currentOption);  continue;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(currentOption);  continue;	  tokens.add(token);    continue;    	non-compiled	[CE]  	4	None	replace
50	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  options  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(options.getOption(token));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Options  options  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(options.getOption(token));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Options  options  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(options.getOption(token));  }	  Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    tokens.add(currentOption);    }    	non-compiled	[CE]  	7	None	replace
51	[BUG]  [BUGGY]  if(stopAtNonOption)  {  option  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  option  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  option  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    tokens.add(currentOption);    }    	non-compiled	[CE]  	7	None	replace
52	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {	  Option    currentOption    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  	8	None	replace
53	[BUG]  [BUGGY]  tokens.add( "stopAtNonOption ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add( "stopAtNonOption ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add( "stopAtNonOption ");	  tokens.add(   "n   ");    	non-compiled	[CE]  	28	None	replace
54	[BUG]  [BUGGY]  tokens.add( "eatTheRest ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add( "eatTheRest ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add( "eatTheRest ");	  tokens.add(   "n   ");    	non-compiled	[CE]  	28	None	replace
55	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  	18	None	replace
56	[BUG]  [BUGGY]  options.addOption(currentOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  options.addOption(currentOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.addOption(currentOption);	  options.addOption(token);    	non-compiled	[CE]  	15	None	replace
57	[BUG]  [BUGGY]  Option  tokens  =  options.getOption(token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  Option  tokens  =  options.getOption(token,  stopAtNonOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  tokens  =  options.getOption(token,  stopAtNonOption);	  Option    tokens    =    options.getOption(token);    	non-compiled	[CE]  	31	None	replace
58	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(parent);  tokens.add(token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(parent);  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent  ==  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(parent);  tokens.add(token);	  parent    ==    null    &&    stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  	26	None	replace
59	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(currentOption);  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	23	None	replace
60	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  eattheRest  =  stopAtNonOption;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  eattheRest  =  stopAtNonOption;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  eattheRest  =  stopAtNonOption;  }	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  	14	None	replace
61	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  else  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  else  {  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  else  {	  Option    option    =    options.getOption(token);    tokens.add(option);    	non-compiled	[CE]  	20	None	replace
62	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.addOption(token);    }    	non-compiled	[CE]  	19	None	replace
63	[BUG]  [BUGGY]  tokens.add(new  Option(stopAtNonOption));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(new  Option(stopAtNonOption));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(new  Option(stopAtNonOption));	  tokens.add(new    Option(currentOption));    	non-compiled	[CE]  	2	None	replace
64	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  tokens.add(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  tokens.add(token);  }	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	5	None	replace
65	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  continue;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  continue;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  continue;  }	  tokens.add(token);    continue;    	non-compiled	[CE]  	4	None	replace
66	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  option  =  options.getOption(token)+  stopAtNonOption;	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  	16	None	replace
67	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  Option  option  =  options.getOption(token)+  1;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  option  =  options.getOption(token)+  1;	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  	16	None	replace
68	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.stopAtNonOption)  {  tokens.add(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent!=  null  &&  currentOption.stopAtNonOption)  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  currentOption.stopAtNonOption)  {  tokens.add(token);	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	24	None	replace
69	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  stopAtNonOption;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  stopAtNonOption;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  stopAtNonOption;  }	  tokens.add(token);    currentOption    =    stopAtNonOption;    	non-compiled	[CE]  	13	None	replace
70	[BUG]  [BUGGY]  options.put(token,  eatTheRest);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  options.put(token,  eatTheRest);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.put(token,  eatTheRest);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  	9	None	replace
71	[BUG]  [BUGGY]  options.addOption(token);  currentOption  =  options.getOption(token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  options.addOption(token);  currentOption  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.addOption(token);  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	10	None	replace
72	[BUG]  [BUGGY]  parent!=  null  &&  currentOption  ==  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent!=  null  &&  currentOption  ==  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  currentOption  ==  null;	  parent    ==    null    &&    currentOption!=    null;    	non-compiled	[CE]  	21	None	replace
73	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Option    option    =    options.getOption(token);    tokens.add(option);    	non-compiled	[CE]  	20	None	replace
74	[BUG]  [BUGGY]  tokens.add( "-- ",  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add( "-- ",  stopAtNonOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add( "-- ",  stopAtNonOption);	  tokens.add(   "--   ");    	non-compiled	[CE]  	27	None	replace
75	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  else    if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  	29	None	replace
76	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add(token);  continue;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  if(stopAtNonOption)  {  options.add(token);  continue;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  options.add(token);  continue;  }	  options.add(token);    continue;    	non-compiled	[CE]  	17	None	replace
77	[BUG]  [BUGGY]  options.put(token,  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  options.put(token,  null);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.put(token,  null);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  	9	None	replace
78	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  currentOption.getParent())  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent!=  null  &&  parent  ==  currentOption.getParent())  {  tokens.add(token);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  parent  ==  currentOption.getParent())  {  tokens.add(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.addOption(token);    }    	non-compiled	[CE]  	19	None	replace
79	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(stopAtNonOption  =  options  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(stopAtNonOption  =  options  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(stopAtNonOption  =  options	  else    if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	11	None	replace
80	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption!=  null  &&  currentOption.isSupported();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent  ==  null  &&  currentOption!=  null  &&  currentOption.isSupported();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent  ==  null  &&  currentOption!=  null  &&  currentOption.isSupported();	  parent!=    null    &&    currentOption    ==    null    &&    currentOption.isSupported();    	non-compiled	[CE]  	22	None	replace
81	[BUG]  [BUGGY]  tokens.add(Token.EMPTY);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(Token.EMPTY);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(Token.EMPTY);	  tokens.add(currentOption);    	non-compiled	[CE]  	1	None	replace
82	[BUG]  [BUGGY]  parent  ==  null  ||  currentOption!=  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent  ==  null  ||  currentOption!=  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent  ==  null  ||  currentOption!=  null;	  parent    ==    null    &&    currentOption!=    null;    	non-compiled	[CE]  	21	None	replace
83	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent!=  null  &&  currentOption.stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  currentOption.stopAtNonOption)  {  tokens.add(token);  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	23	None	replace
84	[BUG]  [BUGGY]  options.addOption(token,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  options.addOption(token,  stopAtNonOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.addOption(token,  stopAtNonOption);	  options.addOption(token);    	non-compiled	[CE]  	15	None	replace
85	[BUG]  [BUGGY]  tokens.add(new  Option(token),  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  tokens.add(new  Option(token),  stopAtNonOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(new  Option(token),  stopAtNonOption);	  tokens.add(new    Option(token));    	non-compiled	[CE]  	3	None	replace
86	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  currentOption.getParent())  {  tokens.add(token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }      [BUGGY]  parent!=  null  &&  parent  ==  currentOption.getParent())  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  parent  ==  currentOption.getParent())  {  tokens.add(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  	18	None	replace
