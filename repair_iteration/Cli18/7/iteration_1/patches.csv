bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(currentOption);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(currentOption);	  tokens.add(token);    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  tokens.add(new  Option(currentOption));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(new  Option(currentOption));  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(new  Option(currentOption));	  tokens.add(token);    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  tokens.add(new  Option(token));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(new  Option(token));  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(new  Option(token));	  tokens.add(token);    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  tokens.add(token);  continue;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  continue;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(token);  continue;	      if(stopAtNonOption)    {    tokens.add(token);    continue;    }    	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  Option  currentOption  =  options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  currentOption  =  options.getOption(token);	      if(stopAtNonOption)    {    tokens.add(token);    continue;    }    	non-compiled	[CE]  	9	None	replace
6	[BUG]  [BUGGY]  options.add(token);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  options.add(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.add(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	2	None	replace
7	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	2	None	replace
8	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  currentOption  =  options.getOption(token);  tokens.add(token);	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  options.put(token,  stopAtNonOption);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.put(token,  stopAtNonOption);	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }	      tokens.add(token);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	10	None	replace
11	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }	      tokens.add(token);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  tokens.add(currentOption);  eatTheRest  =  stopAtNonOption;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(currentOption);  eatTheRest  =  stopAtNonOption;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(currentOption);  eatTheRest  =  stopAtNonOption;	      tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  stopAtNonOption;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token);  currentOption  =  stopAtNonOption;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add(token);  currentOption  =  stopAtNonOption;	      tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }	      tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  options.addOption(token);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  options.addOption(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.addOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  option  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
17	[BUG]  [BUGGY]  options.add(token);  continue;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  options.add(token);  continue;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	options.add(token);  continue;	      if(stopAtNonOption)    {    tokens.add(token);    continue;    }    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }	  tokens.add(token);    	non-compiled	[CE]  	1	None	replace
19	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.addOption(token);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.addOption(token);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.addOption(token);  }	  tokens.add(token);    	non-compiled	[CE]  	1	None	replace
20	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  tokens.add(option);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  Option  option  =  options.getOption(token);  tokens.add(option);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  option  =  options.getOption(token);  tokens.add(option);	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption!=  null;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  parent  ==  null  &&  currentOption!=  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent  ==  null  &&  currentOption!=  null;	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  parent!=  null  &&  currentOption  ==  null  &&  currentOption.isSupported();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  parent!=  null  &&  currentOption  ==  null  &&  currentOption.isSupported();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  currentOption  ==  null  &&  currentOption.isSupported();	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent  ==  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	parent  ==  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add( "-- ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add( "-- ");	  tokens.add(token);    	non-compiled	[CE]  	1	None	replace
28	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add( "n ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	tokens.add( "n ");	  tokens.add(token);    	non-compiled	[CE]  	1	None	replace
29	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }	      tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  Option  tokens  =  options.getOptions(token);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  Option  tokens  =  options.getOptions(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  tokens  =  options.getOptions(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  Option  tokens  =  options.getOption(token);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  }    [BUGGY]  Option  tokens  =  options.getOption(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	Option  tokens  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
