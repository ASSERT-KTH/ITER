bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
2	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  tokens.add(token);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ')'  expected	11	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ')'  expected	11	None	replace
5	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ')'  expected	11	None	replace
6	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
7	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);	      ||    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  ')'  expected	7	None	replace
8	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add(token);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add(token);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add(token);	      ||    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  ')'  expected	7	None	replace
9	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  currentOption);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  currentOption);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  tokens.add(token,  currentOption);	      ||    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  ')'  expected	7	None	replace
10	[BUG]  [BUGGY]  eatTheRest  =  StopAtNonOption;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  eatTheRest  =  StopAtNonOption;  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  StopAtNonOption;	  eatTheRest    =    null;    	non-compiled	[CE]  ')'  expected	13	None	replace
11	[BUG]  [BUGGY]  eatTheRest  =  currentOption;  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  eatTheRest  =  currentOption;  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  currentOption;	  eatTheRest    =    null;    	non-compiled	[CE]  ')'  expected	13	None	replace
12	[BUG]  [BUGGY]  stopAtNonOption  =  false;  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  stopAtNonOption  =  false;  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	stopAtNonOption  =  false;	  stopAtNonOption    =    true;    	non-compiled	[CE]  ')'  expected	3	None	replace
13	[BUG]  [BUGGY]  StopAtNonOption  =  false;  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  StopAtNonOption  =  false;  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	StopAtNonOption  =  false;	  stopAtNonOption    =    true;    	non-compiled	[CE]  ')'  expected	3	None	replace
14	[BUG]  [BUGGY]  stopAtNonOption  =  null;  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  stopAtNonOption  =  null;  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	stopAtNonOption  =  null;	  stopAtNonOption    =    true;    	non-compiled	[CE]  ')'  expected	3	None	replace
15	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  }	  eatTheRest    =    false;    	non-compiled	[CE]  	1	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(token);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(token);  }  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(token);  }	  eatTheRest    =    false;    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	2	None	replace
18	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	2	None	replace
19	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(token));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(token));  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(token));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	2	None	replace
20	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }	      Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  	10	None	replace
22	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  stopAtNonOption;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token);  currentOption  =  stopAtNonOption;  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(token);  currentOption  =  stopAtNonOption;	      tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	15	None	replace
23	[BUG]  [BUGGY]  tokens.add(currentOption);  eatTheRest  =  stopAtNonOption;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(currentOption);  eatTheRest  =  stopAtNonOption;  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(currentOption);  eatTheRest  =  stopAtNonOption;	      tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	15	None	replace
24	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  stopAtNonOption;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  stopAtNonOption;  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  eatTheRest  =  stopAtNonOption;  }	      eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	12	None	replace
25	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  tokens.contains(token);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  eatTheRest  =  stopAtNonOption  ||  tokens.contains(token);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption  ||  tokens.contains(token);	      eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	12	None	replace
26	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(currentOption);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(currentOption);	      tokens.add(token);    	non-compiled	[CE]  	5	None	replace
27	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(token,  stopAtNonOption);	      tokens.add(token);    	non-compiled	[CE]  	5	None	replace
28	[BUG]  [BUGGY]  tokens.add(Token.EXPR_RESULT);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(Token.EXPR_RESULT);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(Token.EXPR_RESULT);	      tokens.add(token);    	non-compiled	[CE]  	5	None	replace
29	[BUG]  [BUGGY]  tokens.add(token);  continue;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token);  continue;  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(token);  continue;	      if(stopAtNonOption)    {    tokens.add(token);    continue;    }    	non-compiled	[CE]  	9	None	replace
30	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  continue;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  continue;  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  tokens.add(token);  continue;  }	      if(stopAtNonOption)    {    tokens.add(token);    continue;    }    	non-compiled	[CE]  	9	None	replace
31	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  continue;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  continue;  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  continue;  }	      if(stopAtNonOption)    {    tokens.add(token);    continue;    }    	non-compiled	[CE]  	9	None	replace
32	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }	      tokens.add(token);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);	      tokens.add(token);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	8	None	replace
34	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  tokens.containsKey(token);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  eatTheRest  =  stopAtNonOption  ||  tokens.containsKey(token);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption  ||  tokens.containsKey(token);	      eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	12	None	replace
35	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(token);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	14	None	replace
36	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	14	None	replace
37	[BUG]  [BUGGY]  process(token,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(token,  stopAtNonOption);  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	process(token,  stopAtNonOption);	      	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(token);  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	11	None	replace
39	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  token);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  throw  new  IllegalArgumentException( " "  +  token);  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	throw  new  IllegalArgumentException( " "  +  token);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	2	None	replace
41	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {	      Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  	10	None	replace
42	[BUG]  [BUGGY]  tokens.add(')');  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(')');  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(')');	      tokens.add(token);    	non-compiled	[CE]  	5	None	replace
43	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);	      ||    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	7	None	replace
44	[BUG]  [BUGGY]  &&  stopAtNonOption)  {  tokens.add(token);  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  &&  stopAtNonOption)  {  tokens.add(token);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	&&  stopAtNonOption)  {  tokens.add(token);	      ||    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
45	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  continue;  }  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  continue;  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  continue;  }	      if(stopAtNonOption)    {    tokens.add(token);    continue;    }    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
46	[BUG]  [BUGGY]  eattheRest  =  true;  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  eattheRest  =  true;  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eattheRest  =  true;	  eatTheRest    =    false;    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
47	[BUG]  [BUGGY]  EATTheRest  =  true;  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  EATTheRest  =  true;  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	EATTheRest  =  true;	  eatTheRest    =    false;    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
48	[BUG]  [BUGGY]  parent.processOptionToken(token,  stopAtNonOption);  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent.processOptionToken(token,  stopAtNonOption);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent.processOptionToken(token,  stopAtNonOption);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
49	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }	      tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
50	[BUG]  [BUGGY]  eatTheRest  =  false,  stopAtNonOption);  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  eatTheRest  =  false,  stopAtNonOption);  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  false,  stopAtNonOption);	  eatTheRest    =    false;    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
51	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
52	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  tokens.isEmpty();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  eatTheRest  =  stopAtNonOption  ||  tokens.isEmpty();  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption  ||  tokens.isEmpty();	      eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  ';'  expected	12	None	replace
53	[BUG]  [BUGGY]  tokens.add(Token.EMPTY);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(Token.EMPTY);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(Token.EMPTY);	      tokens.add(token);    	non-compiled	[CE]  ';'  expected	5	None	replace
54	[BUG]  [BUGGY]  eatTheRest  = "stopAtNonOption ";  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  eatTheRest  = "stopAtNonOption ";  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  = "stopAtNonOption ";	  eatTheRest    =    null;    	non-compiled	[CE]  ';'  expected	13	None	replace
55	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption?  null  :  stopAtNonOption;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  eatTheRest  =  stopAtNonOption?  null  :  stopAtNonOption;  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption?  null  :  stopAtNonOption;	  eatTheRest    =    null;    	non-compiled	[CE]  ';'  expected	13	None	replace
56	[BUG]  [BUGGY]  options.add(token);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  options.add(token);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	options.add(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
57	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption: "  +  token);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption: "  +  token);  [BUGGY]    }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	throw  new  IllegalArgumentException( "stopAtNonOption: "  +  token);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	2	None	replace
58	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)+  1;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  Option  currentOption  =  options.getOption(token)+  1;  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token)+  1;	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ';'  expected	11	None	replace
59	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {    [BUGGY]  options.put(token,  stopAtNonOption);  [BUGGY]    eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	options.put(token,  stopAtNonOption);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ';'  expected	11	None	replace
