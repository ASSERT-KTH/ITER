bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  null;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token);  currentOption  =  null;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(token);  currentOption  =  null;	  tokens.add(token);    currentOption    =    stopAtNonOption;    	non-compiled	[CE]  	22	None	replace
2	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  StopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token);  currentOption  =  StopAtNonOption;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(token);  currentOption  =  StopAtNonOption;	  tokens.add(token);    currentOption    =    stopAtNonOption;    	non-compiled	[CE]  	22	None	replace
3	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  eatTheRest;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token);  currentOption  =  eatTheRest;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(token);  currentOption  =  eatTheRest;	  tokens.add(token);    currentOption    =    stopAtNonOption;    	non-compiled	[CE]  ';'  expected	22	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  }	  tokens.add(token);    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	33	None	replace
5	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(token);    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	33	None	replace
6	[BUG]  [BUGGY]  tokens.add(token,  currentOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token,  currentOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(token,  currentOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	27	None	replace
7	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  &&  currentOption!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token,  stopAtNonOption  &&  currentOption!=  null);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(token,  stopAtNonOption  &&  currentOption!=  null);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	27	None	replace
8	[BUG]  [BUGGY]  eatTheRest!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest!=  null  &&  stopAtNonOption)  {  tokens.add(token);	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	51	None	replace
9	[BUG]  [BUGGY]  parent.processOptionToken(token,  currentOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent.processOptionToken(token,  currentOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent.processOptionToken(token,  currentOption);	  parent.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  	48	None	replace
10	[BUG]  [BUGGY]  parent.processOptionToken(token,  stopAtNonOption,  currentOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent.processOptionToken(token,  stopAtNonOption,  currentOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent.processOptionToken(token,  stopAtNonOption,  currentOption);	  parent.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  	48	None	replace
11	[BUG]  [BUGGY]  ||  currentOption)  {  tokens.add(token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption)  {  tokens.add(token,  stopAtNonOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  currentOption)  {  tokens.add(token,  stopAtNonOption);	  ||    stopAtNonOption)    {    tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	43	None	replace
12	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token,  stopAtNonOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token,  stopAtNonOption);	  ||    stopAtNonOption)    {    tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	43	None	replace
13	[BUG]  [BUGGY]  options.put(token,  currentOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  options.put(token,  currentOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	options.put(token,  currentOption);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  	59	None	replace
14	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  eatTheRest  =  true,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  true,  stopAtNonOption);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  true,  stopAtNonOption);	  eatTheRest    =    false,    stopAtNonOption);    	non-compiled	[CE]  	50	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false,  stopAtNonOption);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false,  stopAtNonOption);  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false,  stopAtNonOption);  }	  eatTheRest    =    false,    stopAtNonOption);    	non-compiled	[CE]  	50	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  eatTheRest    =    false,    stopAtNonOption);    	non-compiled	[CE]  	50	None	replace
18	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	16	None	replace
19	[BUG]  [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	While(stopAtNonOption)  {  eatTheRest  =  true;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	16	None	replace
20	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	While(stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	16	None	replace
21	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	16	None	replace
22	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption?  StopAtNonOption  :  StopAtNonOption;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption?  StopAtNonOption  :  StopAtNonOption;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption?  StopAtNonOption  :  StopAtNonOption;	  eatTheRest    =    StopAtNonOption;    	non-compiled	[CE]  	10	None	replace
23	[BUG]  [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(Token.EMPTY,  stopAtNonOption);	  tokens.add(Token.EMPTY);    	non-compiled	[CE]  	53	None	replace
24	[BUG]  [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  eattheRest  =  false;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eattheRest  =  false;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eattheRest  =  false;	  eattheRest    =    true;    	non-compiled	[CE]  	46	None	replace
26	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    tokens.add(currentOption);    }    	non-compiled	[CE]  	36	None	replace
27	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)/  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token)/  1;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token)/  1;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  	58	None	replace
28	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)+  2;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token)+  2;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token)+  2;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  	58	None	replace
29	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)+  0;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token)+  0;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token)+  0;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  	58	None	replace
30	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption?  null  :  currentOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption?  null  :  currentOption;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption?  null  :  currentOption;	  eatTheRest    =    stopAtNonOption?    null    :    stopAtNonOption;    	non-compiled	[CE]  	55	None	replace
31	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption?  null  :  stopAtNonOption.toString();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption?  null  :  stopAtNonOption.toString();  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption?  null  :  stopAtNonOption.toString();	  eatTheRest    =    stopAtNonOption?    null    :    stopAtNonOption;    	non-compiled	[CE]  	55	None	replace
32	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "   "  +  token,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  throw  new  IllegalArgumentException( "   "  +  token,  stopAtNonOption);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	throw  new  IllegalArgumentException( "   "  +  token,  stopAtNonOption);	  throw    new    IllegalArgumentException(   "   "    +    token);    	non-compiled	[CE]  	40	None	replace
33	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  stopAtNonOption)  {	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	3	None	replace
34	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  currentOption;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  currentOption;  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  eatTheRest  =  currentOption;  }	  eatTheRest    =    currentOption;    	non-compiled	[CE]  	11	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  currentOption;  }  else  {  tokens.add(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  currentOption;  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  eatTheRest  =  currentOption;  }  else  {  tokens.add(token);  }	  eatTheRest    =    currentOption;    	non-compiled	[CE]  	11	None	replace
36	[BUG]  [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens!=  null  &&  stopAtNonOption)  {  tokens.add(token);	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	6	None	replace
37	[BUG]  [BUGGY]  options.add(token);  eatTheRest  =  stopAtNonOption;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  options.add(token);  eatTheRest  =  stopAtNonOption;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	options.add(token);  eatTheRest  =  stopAtNonOption;	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
38	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
39	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add(token);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add(token);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	2	None	replace
40	[BUG]  [BUGGY]  ||  currentOption)  {  tokens.add(token);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  currentOption)  {  tokens.add(token);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  currentOption)  {  tokens.add(token);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	2	None	replace
41	[BUG]  [BUGGY]  options.add(token);  currentOption  =  options.getOption(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  options.add(token);  currentOption  =  options.getOption(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	options.add(token);  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	32	None	replace
42	[BUG]  [BUGGY]  parent.addToken(token);  currentOption  =  options.getOption(token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent.addToken(token);  currentOption  =  options.getOption(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent.addToken(token);  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	32	None	replace
43	[BUG]  [BUGGY]  tokens.add(currentOption,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(currentOption,  stopAtNonOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(currentOption,  stopAtNonOption);	  tokens.add(currentOption);    	non-compiled	[CE]  	26	None	replace
44	[BUG]  [BUGGY]  tokens.add(currentOption.toString());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(currentOption.toString());  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(currentOption.toString());	  tokens.add(currentOption);    	non-compiled	[CE]  ';'  expected	26	None	replace
45	[BUG]  [BUGGY]  stopAtNonOption  =  currentOption;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  stopAtNonOption  =  currentOption;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	stopAtNonOption  =  currentOption;	  stopAtNonOption    =    null;    	non-compiled	[CE]  ';'  expected	14	None	replace
46	[BUG]  [BUGGY]  stopAtNonOption  =  eatTheRest;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  stopAtNonOption  =  eatTheRest;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	stopAtNonOption  =  eatTheRest;	  stopAtNonOption    =    null;    	non-compiled	[CE]  	14	None	replace
47	[BUG]  [BUGGY]  options.add(token,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  options.add(token,  stopAtNonOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	options.add(token,  stopAtNonOption);	  options.add(token);    	non-compiled	[CE]  	56	None	replace
48	[BUG]  [BUGGY]  Options  options  =(Option)options.get(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Options  options  =(Option)options.get(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Options  options  =(Option)options.get(token);	  options.add(token);    	non-compiled	[CE]  	56	None	replace
49	[BUG]  [BUGGY]  tokens.add(')',  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(')',  stopAtNonOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(')',  stopAtNonOption);	  tokens.add(')');    	non-compiled	[CE]  	42	None	replace
50	[BUG]  [BUGGY]  tokens.add( ") ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add( ") ");  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add( ") ");	  tokens.add(')');    	non-compiled	[CE]  	42	None	replace
51	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  &&  tokens.containsKey(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption  &&  tokens.containsKey(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption  &&  tokens.containsKey(token);	  eatTheRest    =    stopAtNonOption    ||    tokens.containsKey(token);    	non-compiled	[CE]  	34	None	replace
52	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.containsKey(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.containsKey(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption.containsKey(token);	  eatTheRest    =    stopAtNonOption    ||    tokens.containsKey(token);    	non-compiled	[CE]  	34	None	replace
53	[BUG]  [BUGGY]  StopAtNonOption  =  true;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  StopAtNonOption  =  true;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	StopAtNonOption  =  true;	  stopAtNonOption    =    false;    	non-compiled	[CE]  	12	None	replace
54	[BUG]  [BUGGY]  tokens.add(token);  eatTheRest  =  true;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token);  eatTheRest  =  true;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(token);  eatTheRest  =  true;	  tokens.add(token);    continue;    	non-compiled	[CE]  	29	None	replace
55	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	18	None	replace
56	[BUG]  [BUGGY]  process(token,  currentOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  currentOption);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	process(token,  currentOption);	  process(token,    stopAtNonOption);    	non-compiled	[CE]  	37	None	replace
57	[BUG]  [BUGGY]  eatTheRest  =  process(token,  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  process(token,  stopAtNonOption);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  process(token,  stopAtNonOption);	  process(token,    stopAtNonOption);    	non-compiled	[CE]  	37	None	replace
58	[BUG]  [BUGGY]  process(token,  stopAtNonOption,  currentOption);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  stopAtNonOption,  currentOption);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	process(token,  stopAtNonOption,  currentOption);	  process(token,    stopAtNonOption);    	non-compiled	[CE]  	37	None	replace
59	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	processOptionToken(token,  stopAtNonOption);	  process(token,    stopAtNonOption);    	non-compiled	[CE]  	37	None	replace
60	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token,  currentOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token,  currentOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token,  currentOption);	  ||    stopAtNonOption)    {    tokens.add(token,    currentOption);    	non-compiled	[CE]  	9	None	replace
61	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  null);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  tokens.add(token,  null);	  ||    stopAtNonOption)    {    tokens.add(token,    currentOption);    	non-compiled	[CE]  	9	None	replace
62	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  0);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  0);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  tokens.add(token,  0);	  ||    stopAtNonOption)    {    tokens.add(token,    currentOption);    	non-compiled	[CE]  	9	None	replace
63	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  continue;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  continue;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  continue;	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(token);    continue;    }    	non-compiled	[CE]  	31	None	replace
64	[BUG]  [BUGGY]  options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	38	None	replace
65	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  continue;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  continue;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  tokens.add(token);  continue;	  parent    ==    null    &&    stopAtNonOption)    {    tokens.add(token);    continue;    }    	non-compiled	[CE]  	45	None	replace
66	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token);  tokens.add(token);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	39	None	replace
67	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  continue;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  continue;  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  continue;  }	  ||    stopAtNonOption)    {    tokens.add(token);    continue;    }    	non-compiled	[CE]  	30	None	replace
68	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add(token);  continue;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add(token);  continue;  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add(token);  continue;  }	  ||    stopAtNonOption)    {    tokens.add(token);    continue;    }    	non-compiled	[CE]  	30	None	replace
69	[BUG]  [BUGGY]  eatTheRest  =   "stopAtNonOption "  +  token;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =   "stopAtNonOption "  +  token;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =   "stopAtNonOption "  +  token;	  eatTheRest    =   "stopAtNonOption   ";    	non-compiled	[CE]  	54	None	replace
70	[BUG]  [BUGGY]  tokens.add(Token.EXPR_RESULT,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(Token.EXPR_RESULT,  stopAtNonOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(Token.EXPR_RESULT,  stopAtNonOption);	  tokens.add(Token.EXPR_RESULT);    	non-compiled	[CE]  	28	None	replace
71	[BUG]  [BUGGY]  tokens.add(Token.EXPR_RESULT,  currentOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(Token.EXPR_RESULT,  currentOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(Token.EXPR_RESULT,  currentOption);	  tokens.add(Token.EXPR_RESULT);    	non-compiled	[CE]  	28	None	replace
72	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(currentOption));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(currentOption));  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(currentOption));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	17	None	replace
73	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  &&  tokens.contains(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption  &&  tokens.contains(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption  &&  tokens.contains(token);	  eatTheRest    =    stopAtNonOption    ||    tokens.contains(token);    	non-compiled	[CE]  	25	None	replace
74	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.contains(token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.contains(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption.contains(token);	  eatTheRest    =    stopAtNonOption    ||    tokens.contains(token);    	non-compiled	[CE]  	25	None	replace
75	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  tokens.contains(token));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  tokens.contains(token));  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption  ||  tokens.contains(token));	  eatTheRest    =    stopAtNonOption    ||    tokens.contains(token);    	non-compiled	[CE]  	25	None	replace
76	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption: "  +  token,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption: "  +  token,  stopAtNonOption);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	throw  new  IllegalArgumentException( "stopAtNonOption: "  +  token,  stopAtNonOption);	  throw    new    IllegalArgumentException(   "stopAtNonOption:   "    +    token);    	non-compiled	[CE]  	57	None	replace
77	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption:  ' "  +  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption:  ' "  +  token);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	throw  new  IllegalArgumentException( "stopAtNonOption:  ' "  +  token);	  throw    new    IllegalArgumentException(   "stopAtNonOption:   "    +    token);    	non-compiled	[CE]  	57	None	replace
78	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption: "  +  token.toLowerCase());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption: "  +  token.toLowerCase());  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	throw  new  IllegalArgumentException( "stopAtNonOption: "  +  token.toLowerCase());	  throw    new    IllegalArgumentException(   "stopAtNonOption:   "    +    token);    	non-compiled	[CE]  	57	None	replace
79	[BUG]  [BUGGY]  StopAtNonOption  =  true;  tokens.add(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  StopAtNonOption  =  true;  tokens.add(token);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	StopAtNonOption  =  true;  tokens.add(token);	  StopAtNonOption    =    false;    	non-compiled	[CE]  	13	None	replace
80	[BUG]  [BUGGY]  StopAtNonOption  =  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  StopAtNonOption  =  null;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	StopAtNonOption  =  null;	  StopAtNonOption    =    false;    	non-compiled	[CE]  	13	None	replace
81	[BUG]  [BUGGY]  StopAtNonOption  =  true;  this.stopAtNonOption  =  true;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  StopAtNonOption  =  true;  this.stopAtNonOption  =  true;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	StopAtNonOption  =  true;  this.stopAtNonOption  =  true;	  StopAtNonOption    =    false;    	non-compiled	[CE]  	13	None	replace
82	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  token.equals(token));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  token.equals(token));  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Throwables.throw  new  IllegalArgumentException( " "  +  token.equals(token));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(token));    	non-compiled	[CE]  	19	None	replace
83	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  token.equals(stopAtNonOption));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  token.equals(stopAtNonOption));  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Throwables.throw  new  IllegalArgumentException( " "  +  token.equals(stopAtNonOption));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(token));    	non-compiled	[CE]  	19	None	replace
84	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(token));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(token));  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(token));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(token));    	non-compiled	[CE]  	19	None	replace
85	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  &&  tokens.isEmpty();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption  &&  tokens.isEmpty();  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption  &&  tokens.isEmpty();	  eatTheRest    =    stopAtNonOption    ||    tokens.isEmpty();    	non-compiled	[CE]  	52	None	replace
86	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  stopAtNonOption  ||  tokens.isEmpty();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  stopAtNonOption  ||  tokens.isEmpty();  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  eatTheRest  =  stopAtNonOption  ||  tokens.isEmpty();  }	  eatTheRest    =    stopAtNonOption    ||    tokens.isEmpty();    	non-compiled	[CE]  	52	None	replace
87	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.isEmpty();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.isEmpty();  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption.isEmpty();	  eatTheRest    =    stopAtNonOption    ||    tokens.isEmpty();    	non-compiled	[CE]  	52	None	replace
88	[BUG]  [BUGGY]  tokens.add(currentOption);  eatTheRest  =  true;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(currentOption);  eatTheRest  =  true;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(currentOption);  eatTheRest  =  true;	  tokens.add(currentOption);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	23	None	replace
89	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	15	None	replace
90	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	15	None	replace
91	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  eatTheRest  =  true;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	15	None	replace
92	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  stopAtNonOption;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  stopAtNonOption;  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  eatTheRest  =  stopAtNonOption;  }	  if(stopAtNonOption)    {    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  	24	None	replace
93	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  stopAtNonOption;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  stopAtNonOption;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  eatTheRest  =  stopAtNonOption;	  if(stopAtNonOption)    {    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  	24	None	replace
94	[BUG]  [BUGGY]  EATTheRest  =  false;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  EATTheRest  =  false;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	EATTheRest  =  false;	  EATTheRest    =    true;    	non-compiled	[CE]  	47	None	replace
95	[BUG]  [BUGGY]  EATtheRest  =  false;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  EATtheRest  =  false;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	EATtheRest  =  false;	  EATTheRest    =    true;    	non-compiled	[CE]  	47	None	replace
96	[BUG]  [BUGGY]  &&  stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  &&  stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	&&  stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);	  &&    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	44	None	replace
97	[BUG]  [BUGGY]  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  =  &&(token))  {  tokens.add  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  =  &&(token))  {  tokens.add  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  =  &&(token))  {  tokens.add	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	2	None	replace
98	[BUG]  [BUGGY]  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  =  &&  withOptionToken))  {  tokens  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  =  &&  withOptionToken))  {  tokens  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  =  &&  withOptionToken))  {  tokens	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	2	None	replace
99	[BUG]  [BUGGY]  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  =  &&(tokens))  {  tokens.  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  =  &&(tokens))  {  tokens.  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  aveti  =  &&(tokens))  {  tokens.	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	2	None	replace
100	[BUG]  [BUGGY]  options.addOption(token);  currentOption  =  options.getOption(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  options.addOption(token);  currentOption  =  options.getOption(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	options.addOption(token);  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	32	None	replace
101	[BUG]  [BUGGY]  eattheRest  =  true,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eattheRest  =  true,  stopAtNonOption);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eattheRest  =  true,  stopAtNonOption);	  eatTheRest    =    false,    stopAtNonOption);    	non-compiled	[CE]  	50	None	replace
102	[BUG]  [BUGGY]  eatTheRest  =  false,  currentOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  false,  currentOption);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  false,  currentOption);	  eatTheRest    =    false,    stopAtNonOption);    	non-compiled	[CE]  	50	None	replace
103	[BUG]  [BUGGY]  eattheRest  =  stopAtNonOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eattheRest  =  stopAtNonOption;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eattheRest  =  stopAtNonOption;	  eatTheRest    =    currentOption;    	non-compiled	[CE]  	11	None	replace
104	[BUG]  [BUGGY]  throw  new  IllegalStateException( "stopAtNonOption: "  +  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  throw  new  IllegalStateException( "stopAtNonOption: "  +  token);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	throw  new  IllegalStateException( "stopAtNonOption: "  +  token);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	18	None	replace
105	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  tokens.get(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  tokens.get(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption  ||  tokens.get(token);	  eatTheRest    =    stopAtNonOption    ||    tokens.containsKey(token);    	non-compiled	[CE]  	34	None	replace
106	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    	non-compiled	[CE]  	20	None	replace
107	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    	non-compiled	[CE]  	20	None	replace
108	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent  ==  null  &&  stopAtNonOption)  {	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	39	None	replace
109	[BUG]  [BUGGY]  mutableTokens(token,  stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  mutableTokens(token,  stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	mutableTokens(token,  stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	16	None	replace
110	[BUG]  [BUGGY]  mutableTokens(token,  stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  mutableTokens(token,  stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	mutableTokens(token,  stopAtNonOption)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	16	None	replace
111	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption:   " "  +  token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption:   " "  +  token);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	throw  new  IllegalArgumentException( "stopAtNonOption:   " "  +  token);	  throw    new    IllegalArgumentException(   "stopAtNonOption:   "    +    token);    	non-compiled	[CE]  	57	None	replace
112	[BUG]  [BUGGY]  currentOption!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  currentOption!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	currentOption!=  null  &&  stopAtNonOption)  {  tokens.add(token);	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	51	None	replace
113	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token,  currentOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token,  currentOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token,  currentOption);	  ||    stopAtNonOption)    {    tokens.add(token,    currentOption);    	non-compiled	[CE]  	9	None	replace
114	[BUG]  [BUGGY]  process(token,  stopAtNonOption,  eatTheRest);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	process(token,  stopAtNonOption,  eatTheRest);	  process(token,    stopAtNonOption);    	non-compiled	[CE]  	37	None	replace
115	[BUG]  [BUGGY]  eatTheRest(token,  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest(token,  stopAtNonOption);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest(token,  stopAtNonOption);	  process(token,    stopAtNonOption);    	non-compiled	[CE]  	37	None	replace
116	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException(token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException(token);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Throwables.throw  new  IllegalArgumentException(token);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	17	None	replace
117	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  token);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Throwables.throw  new  IllegalArgumentException( " "  +  token);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	17	None	replace
118	[BUG]  [BUGGY]  parent!=  null  &&  currentOption)  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  currentOption)  {  tokens.add(token);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  currentOption)  {  tokens.add(token);  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	1	None	replace
119	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	21	None	replace
120	[BUG]  [BUGGY]  if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }	  parent.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  	48	None	replace
121	[BUG]  [BUGGY]  kens.add(token);  eatTheRest  =  stopAtNonOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  kens.add(token);  eatTheRest  =  stopAtNonOption;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	kens.add(token);  eatTheRest  =  stopAtNonOption;	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  	49	None	replace
122	[BUG]  [BUGGY]  options.addOption(token,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  options.addOption(token,  stopAtNonOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	options.addOption(token,  stopAtNonOption);	  options.add(token);    	non-compiled	[CE]  	56	None	replace
123	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	5	None	replace
124	[BUG]  [BUGGY]  options.setOption(token,  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  options.setOption(token,  stopAtNonOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	options.setOption(token,  stopAtNonOption);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	5	None	replace
125	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)+  stopAtNonOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token)+  stopAtNonOption;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token)+  stopAtNonOption;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  	58	None	replace
126	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption?  StopAtNonOption.TRUE  :  StopAtNonOption;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption?  StopAtNonOption.TRUE  :  StopAtNonOption;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption?  StopAtNonOption.TRUE  :  StopAtNonOption;	  eatTheRest    =    StopAtNonOption;    	non-compiled	[CE]  	10	None	replace
127	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  }  else  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  }  else  {  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  }  else  {	  tokens.add(token);    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	33	None	replace
128	[BUG]  [BUGGY]  parent.process(token,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent.process(token,  stopAtNonOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent.process(token,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    else    {    	non-compiled	[CE]  	41	None	replace
129	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption?  null  :  token;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption?  null  :  token;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption?  null  :  token;	  eatTheRest    =    stopAtNonOption?    null    :    stopAtNonOption;    	non-compiled	[CE]  	55	None	replace
130	[BUG]  [BUGGY]  &&  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  &&  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	&&  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);	  &&    stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  	44	None	replace
131	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	options.put(token,  stopAtNonOption)&&  tokens.contains(token);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  	59	None	replace
132	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&!stopAtNonOption;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  options.put(token,  stopAtNonOption)&&!stopAtNonOption;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	options.put(token,  stopAtNonOption)&&!stopAtNonOption;	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  	59	None	replace
133	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  stopAtNonOption;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  stopAtNonOption;  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  stopAtNonOption;  }	  tokens.add(token);    currentOption    =    stopAtNonOption;    	non-compiled	[CE]  	22	None	replace
134	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  stopAtNonOption  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token);  currentOption  =  stopAtNonOption  +  1;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(token);  currentOption  =  stopAtNonOption  +  1;	  tokens.add(token);    currentOption    =    stopAtNonOption;    	non-compiled	[CE]  	22	None	replace
135	[BUG]  [BUGGY]  EATTheRest  =  stopAtNonOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  EATTheRest  =  stopAtNonOption;  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	EATTheRest  =  stopAtNonOption;	  EATTheRest    =    true;    	non-compiled	[CE]  	47	None	replace
136	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(Token.valueOf(currentOption));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(Token.valueOf(currentOption));  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  tokens.add(Token.valueOf(currentOption));  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	2	None	replace
137	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add( "- ");  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add( "- ");	  tokens.add(')');    	non-compiled	[CE]  	42	None	replace
138	[BUG]  [BUGGY]  tokens.addAll(options.getOption(token));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.addAll(options.getOption(token));  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.addAll(options.getOption(token));	  tokens.add(currentOption);    	non-compiled	[CE]  	26	None	replace
139	[BUG]  [BUGGY]  tokens.add(Token.EQUALS);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(Token.EQUALS);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(Token.EQUALS);	  tokens.add(currentOption);    	non-compiled	[CE]  	26	None	replace
140	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption?  currentOption  :  tokens.iterator().next();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption?  currentOption  :  tokens.iterator().next();  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption?  currentOption  :  tokens.iterator().next();	  eatTheRest    =    currentOption;    	non-compiled	[CE]  	11	None	replace
141	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)-  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token)-  1;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token)-  1;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  	58	None	replace
142	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    tokens.add(currentOption);    }    	non-compiled	[CE]  	36	None	replace
143	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	5	None	replace
144	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	5	None	replace
145	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	Throwables.throw  new  IllegalArgumentException( " ")	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	17	None	replace
146	[BUG]  [BUGGY]  aughtExceptionHandler  =  stopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  aughtExceptionHandler  =  stopAtNonOption;  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	aughtExceptionHandler  =  stopAtNonOption;	  if(stopAtNonOption)    {    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  	24	None	replace
147	[BUG]  [BUGGY]  ackTokens.add(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ackTokens.add(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	ackTokens.add(token);	  if(stopAtNonOption)    {    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  	24	None	replace
148	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	tokens.add(token,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	27	None	replace
149	[BUG]  [BUGGY]  ackToken(token,  stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ackToken(token,  stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	ackToken(token,  stopAtNonOption)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	15	None	replace
150	[BUG]  [BUGGY]  StopAtNonOption  =  false,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  StopAtNonOption  =  false,  stopAtNonOption);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	StopAtNonOption  =  false,  stopAtNonOption);	  StopAtNonOption    =    false;    	non-compiled	[CE]  	13	None	replace
151	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	3	None	replace
152	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent  ==  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	3	None	replace
153	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption?  null  :  tokens.toArray(stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption?  null  :  tokens.toArray(stopAtNonOption);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption?  null  :  tokens.toArray(stopAtNonOption);	  eatTheRest    =    stopAtNonOption?    null    :    stopAtNonOption;    	non-compiled	[CE]  	55	None	replace
154	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(currentOption);  eatTheRest  =  stopAtNonOption;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(currentOption);  eatTheRest  =  stopAtNonOption;  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	if(stopAtNonOption)  {  tokens.add(currentOption);  eatTheRest  =  stopAtNonOption;  }	  tokens.add(currentOption);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	23	None	replace
155	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent  ==  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	39	None	replace
156	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	39	None	replace
157	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent!=  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	39	None	replace
158	[BUG]  [BUGGY]  currentOption!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  currentOption!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	currentOption!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	1	None	replace
159	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	parent  ==  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	16	None	replace
160	[BUG]  [BUGGY]  While(stopAtNonOption)  {  currentOption  =  options.getOption(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption)  {  currentOption  =  options.getOption(token);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	While(stopAtNonOption)  {  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	16	None	replace
161	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  continue;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  continue;  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  continue;  }	  ||    stopAtNonOption)    {    tokens.add(token);    continue;    }    	non-compiled	[CE]  	30	None	replace
162	[BUG]  [BUGGY]  throw  new  IllegalStateException( "stopAtNonOption: ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  throw  new  IllegalStateException( "stopAtNonOption: ");  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	throw  new  IllegalStateException( "stopAtNonOption: ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	18	None	replace
163	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  tokens.add(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  tokens.add(token);  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  stopAtNonOption  ||  tokens.add(token);	  eatTheRest    =    stopAtNonOption    ||    tokens.contains(token);    	non-compiled	[CE]  	25	None	replace
164	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }	  ||    stopAtNonOption)    {    tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	43	None	replace
165	[BUG]  [BUGGY]  eatTheRest  =  false,  stopAtNonOption,  tokens);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  false,  stopAtNonOption,  tokens);  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	eatTheRest  =  false,  stopAtNonOption,  tokens);	  eatTheRest    =    false,    stopAtNonOption);    	non-compiled	[CE]  	50	None	replace
166	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption  is  null. ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption  is  null. ");  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	throw  new  IllegalArgumentException( "stopAtNonOption  is  null. ");	  throw    new    IllegalArgumentException(   "   "    +    token);    	non-compiled	[CE]  	40	None	replace
167	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption  cannot  process  tokens. ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  throw  new  IllegalArgumentException( "stopAtNonOption  cannot  process  tokens. ");  [BUGGY]      }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	throw  new  IllegalArgumentException( "stopAtNonOption  cannot  process  tokens. ");	  throw    new    IllegalArgumentException(   "   "    +    token);    	non-compiled	[CE]  	40	None	replace
168	[BUG]  [BUGGY]  currentOption!=  null  &&  stopAtNonOption)  {  tokens.add(token);  continue;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {      [BUGGY]  currentOption!=  null  &&  stopAtNonOption)  {  tokens.add(token);  continue;  }  [BUGGY]      eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	currentOption!=  null  &&  stopAtNonOption)  {  tokens.add(token);  continue;  }	  parent!=    null    &&    stopAtNonOption)    {    tokens.add(token);    continue;    }    	non-compiled	[CE]  	31	None	replace
