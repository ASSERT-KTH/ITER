bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  init()  {  [BUGGY]    tokens.clear();  [BUGGY]  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	54	54	1	add	    tokens.clear();		compilable	  [FE]  AssertionFailedError  testStop2	21	1
2	[BUG]  [BUGGY]    tokens.clear();  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  init()  {  [BUGGY]    tokens.clear();  [BUGGY]  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	54	54	1	replace	    tokens.clear();		compilable	  [FE]  AssertionFailedError  testStop2	21	1	add
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  init()  {  [BUGGY]    tokens.clear();  currentOption  =  null;  [BUGGY]  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	54	54	1	add	    tokens.clear();  currentOption  =  null;		compilable	  [FE]  AssertionFailedError  testStop2	21	1
3	[BUG]  [BUGGY]    tokens.clear();  currentOption  =  null;  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  init()  {  [BUGGY]    tokens.clear();  currentOption  =  null;  [BUGGY]  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	54	54	1	replace	    tokens.clear();  currentOption  =  null;		compilable	  [FE]  AssertionFailedError  testStop2	21	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  init()  {  [BUGGY]    tokens.clear();  tokens.add(currentOption);  [BUGGY]  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	54	54	1	add	    tokens.clear();  tokens.add(currentOption);		compilable	  [FE]  AssertionFailedError  testStop2	21	1
4	[BUG]  [BUGGY]    tokens.clear();  tokens.add(currentOption);  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  init()  {  [BUGGY]    tokens.clear();  tokens.add(currentOption);  [BUGGY]  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	54	54	1	replace	    tokens.clear();  tokens.add(currentOption);		compilable	  [FE]  AssertionFailedError  testStop2	21	1	add
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  init()  {  [BUGGY]    tokens.clear();  tokens.clear();  [BUGGY]  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	54	54	1	add	    tokens.clear();  tokens.clear();		compilable	  [FE]  AssertionFailedError  testStop2	21	1
5	[BUG]  [BUGGY]    tokens.clear();  tokens.clear();  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  init()  {  [BUGGY]    tokens.clear();  tokens.clear();  [BUGGY]  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	54	54	1	replace	    tokens.clear();  tokens.clear();		compilable	  [FE]  AssertionFailedError  testStop2	21	1	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  init()  {  [BUGGY]    tokens.clear();  tokens.add( "- ");  [BUGGY]  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	54	54	1	add	    tokens.clear();  tokens.add( "- ");		compilable	  [FE]  AssertionFailedError  testStop2	21	1
6	[BUG]  [BUGGY]    tokens.clear();  tokens.add( "- ");  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  init()  {  [BUGGY]    tokens.clear();  tokens.add( "- ");  [BUGGY]  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	54	54	1	replace	    tokens.clear();  tokens.add( "- ");		compilable	  [FE]  AssertionFailedError  testStop2	21	1	add
11	[BUG]  [BUGGY]  [FE]  NullPointerException  testStop2  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	add	else  if(stopAtNonOption  &&  currentOption.hasArg())  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  NullPointerException  testStop2	1	1
12	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {  [FE]  NullPointerException  testStop2  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg())  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  NullPointerException  testStop2	1	1	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(token))  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	add	else  if(stopAtNonOption  &&  tokens.contains(token))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  AssertionFailedError  testStop2	1	1
13	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(token))  {  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(token))  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  tokens.contains(token))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  AssertionFailedError  testStop2	1	1	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	add	else  if(stopAtNonOption  ||  tokens.contains(token))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  AssertionFailedError  testStop2	1	1
14	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token))  {  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens.contains(token))  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  AssertionFailedError  testStop2	1	1	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	add	else  if(stopAtNonOption  ||  currentOption.hasArg())  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  AssertionFailedError  testStop2	1	1
15	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {  [FE]  AssertionFailedError  testStop2  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg())  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  AssertionFailedError  testStop2	1	1	replace
15	[BUG]  [BUGGY]    [CE]  class,  interface,  or  enum  expected  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	  	else  if  (stopAtNonOption)  {  	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
21	[BUG]  [BUGGY]    tokens.add(iter.getValue());  [CE]  cannot  find  symbol  [CONTEXT]  private  void  gobble(Iterator  iter)  {  if  (eatTheRest)  {  [BUGGY]    tokens.add(iter.getValue());  [BUGGY]  while  (iter.hasNext())    {  {  tokens.add(iter.next());  }  }  }  [CLASS]  PosixParser  [METHOD]  gobble  [RETURN_TYPE]  void  Iterator  iter  [VARIABLES]  Iterator  iter  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	170	171	1	replace	    tokens.add(iter.getValue());		non-compiled	[CE]  cannot  find  symbol	8	None	add
22	[BUG]  [BUGGY]    tokens.add(iter.getLocalMillis());  [CE]  cannot  find  symbol  [CONTEXT]  private  void  gobble(Iterator  iter)  {  if  (eatTheRest)  {  [BUGGY]    tokens.add(iter.getLocalMillis());  [BUGGY]  while  (iter.hasNext())    {  {  tokens.add(iter.next());  }  }  }  [CLASS]  PosixParser  [METHOD]  gobble  [RETURN_TYPE]  void  Iterator  iter  [VARIABLES]  Iterator  iter  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	170	171	1	replace	    tokens.add(iter.getLocalMillis());		non-compiled	[CE]  cannot  find  symbol	8	None	add
