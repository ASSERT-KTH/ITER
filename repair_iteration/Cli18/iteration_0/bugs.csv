bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] else if (stopAtNonOption) { [FE] AssertionFailedError [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { if (options.hasOption(token)) { currentOption = options.getOption(token); tokens.add(token); } [BUGGY] else if (stopAtNonOption)  { [BUGGY] { eatTheRest = true; } } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { if (options.hasOption(token)) { currentOption = options.getOption(token); tokens.add(token); } [BUGGY] [BUGGY] else if (stopAtNonOption)  { { eatTheRest = true; } } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	add	
3	[BUG] [BUGGY] eatTheRest = true; [FE] AssertionFailedError [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { if (options.hasOption(token)) { currentOption = options.getOption(token); tokens.add(token); } else if (stopAtNonOption) { [BUGGY] eatTheRest = true; [BUGGY] } } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { if (options.hasOption(token)) { currentOption = options.getOption(token); tokens.add(token); } else if (stopAtNonOption) { [BUGGY] [BUGGY] eatTheRest = true; } } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	240	240	1	add	
5	[BUG] [BUGGY] tokens.add(iter.next()); [FE] AssertionFailedError [CONTEXT] private void gobble(Iterator iter) { if (eatTheRest) { while (iter.hasNext()) { [BUGGY] tokens.add(iter.next()); [BUGGY] } } } [CLASS] PosixParser [METHOD] gobble [RETURN_TYPE] void  Iterator iter [VARIABLES] Iterator iter Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.5	172	172	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void gobble(Iterator iter) { if (eatTheRest) { while (iter.hasNext()) { [BUGGY] [BUGGY] tokens.add(iter.next()); } } } [CLASS] PosixParser [METHOD] gobble [RETURN_TYPE] void  Iterator iter [VARIABLES] Iterator iter Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.5	172	172	1	add	
7	[BUG] [BUGGY] while (iter.hasNext()) { [FE] AssertionFailedError [CONTEXT] private void gobble(Iterator iter) { if (eatTheRest) { [BUGGY] while (iter.hasNext())   { [BUGGY] { tokens.add(iter.next()); } } } [CLASS] PosixParser [METHOD] gobble [RETURN_TYPE] void  Iterator iter [VARIABLES] Iterator iter Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	170	171	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void gobble(Iterator iter) { if (eatTheRest) { [BUGGY] [BUGGY] while (iter.hasNext())   { { tokens.add(iter.next()); } } } [CLASS] PosixParser [METHOD] gobble [RETURN_TYPE] void  Iterator iter [VARIABLES] Iterator iter Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	170	171	1	add	
9	[BUG] [BUGGY] processOptionToken(token, stopAtNonOption); [FE] AssertionFailedError [CONTEXT] else if (token.startsWith("-")) { if (token.length() == 2) { [BUGGY] processOptionToken(token, stopAtNonOption); [BUGGY] } else if (options.hasOption(token)) { tokens.add(token); }  else { burstToken(token, stopAtNonOption); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] else if (token.startsWith("-")) { if (token.length() == 2) { [BUGGY] [BUGGY] processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); }  else { burstToken(token, stopAtNonOption); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	134	134	1	add	
11	[BUG] [BUGGY] if (options.hasOption(token)) { [FE] AssertionFailedError [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { [BUGGY] if (options.hasOption(token))  { [BUGGY] { currentOption = options.getOption(token); tokens.add(token); } else if (stopAtNonOption) { eatTheRest = true; } } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { [BUGGY] [BUGGY] if (options.hasOption(token))  { { currentOption = options.getOption(token); tokens.add(token); } else if (stopAtNonOption) { eatTheRest = true; } } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	233	234	1	add	
13	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] { if (options.hasOption(token)) { currentOption = options.getOption(token); tokens.add(token); } else if (stopAtNonOption) { eatTheRest = true; } [BUGGY] } [BUGGY]  [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { if (options.hasOption(token)) { currentOption = options.getOption(token); tokens.add(token); } else if (stopAtNonOption) { eatTheRest = true; } [BUGGY] [BUGGY] } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	242	242	1	add	
15	[BUG] [BUGGY] if (token.length() == 2) { [FE] AssertionFailedError [CONTEXT] } }  else if ("-".equals(token)) { processSingleHyphen(token); } else if (token.startsWith("-")) { [BUGGY] if (token.length() == 2)    { [BUGGY] { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); }  else { [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } }  else if ("-".equals(token)) { processSingleHyphen(token); } else if (token.startsWith("-")) { [BUGGY] [BUGGY] if (token.length() == 2)    { { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); }  else { [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2886751345948129	132	133	1	add	
18	[BUG] [BUGGY] private List tokens = new ArrayList(); [FE] AssertionFailedError [CONTEXT] [BUGGY] private List tokens = new ArrayList(); [BUGGY]  [CLASS] PosixParser  [VARIABLES] 	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	36	36	1	replace	
19	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private List tokens = new ArrayList(); [CLASS] PosixParser  [VARIABLES] 	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	36	36	1	add	
20	[BUG] [BUGGY] eatTheRest = false; [FE] AssertionFailedError [CONTEXT] private void init() { [BUGGY] eatTheRest = false; [BUGGY] tokens.clear(); currentOption = null; } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	54	54	1	replace	
21	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void init() { [BUGGY] [BUGGY] eatTheRest = false; tokens.clear(); currentOption = null; } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	54	54	1	add	
22	[BUG] [BUGGY] tokens.clear(); [FE] AssertionFailedError [CONTEXT] private void init() { eatTheRest = false; [BUGGY] tokens.clear(); [BUGGY] currentOption = null; } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	replace	
23	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void init() { eatTheRest = false; [BUGGY] [BUGGY] tokens.clear(); currentOption = null; } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	55	55	1	add	
24	[BUG] [BUGGY] currentOption = null; [FE] AssertionFailedError [CONTEXT] private void init() { eatTheRest = false; tokens.clear(); [BUGGY] currentOption = null; [BUGGY] } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	56	56	1	replace	
25	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void init() { eatTheRest = false; tokens.clear(); [BUGGY] [BUGGY] currentOption = null; } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	56	56	1	add	
26	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] private void init() { eatTheRest = false; tokens.clear(); currentOption = null; [BUGGY] } [BUGGY]  [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	57	57	1	replace	
27	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void init() { eatTheRest = false; tokens.clear(); currentOption = null; [BUGGY] [BUGGY] } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	57	57	1	add	
28	[BUG] [BUGGY] init(); [FE] AssertionFailedError [CONTEXT] { [BUGGY] init(); [BUGGY] this.options = options;  Iterator iter = Arrays.asList(arguments).iterator();  while (iter.hasNext()) {  String token = (String) iter.next(); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	99	99	1	replace	
29	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { [BUGGY] [BUGGY] init(); this.options = options;  Iterator iter = Arrays.asList(arguments).iterator();  while (iter.hasNext()) {  String token = (String) iter.next(); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	99	99	1	add	
30	[BUG] [BUGGY] this.options = options; [FE] AssertionFailedError [CONTEXT] { init(); [BUGGY] this.options = options; [BUGGY]   Iterator iter = Arrays.asList(arguments).iterator();  while (iter.hasNext()) {  String token = (String) iter.next();  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	100	100	1	replace	
31	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { init(); [BUGGY] [BUGGY] this.options = options;  Iterator iter = Arrays.asList(arguments).iterator();  while (iter.hasNext()) {  String token = (String) iter.next();  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	100	100	1	add	
32	[BUG] [BUGGY] Iterator iter = Arrays.asList(arguments).iterator(); [FE] AssertionFailedError [CONTEXT] { init(); this.options = options;  [BUGGY] Iterator iter = Arrays.asList(arguments).iterator(); [BUGGY]   while (iter.hasNext()) {  String token = (String) iter.next();  if (token.startsWith("--")) { [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	103	103	1	replace	
33	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { init(); this.options = options;  [BUGGY] [BUGGY] Iterator iter = Arrays.asList(arguments).iterator();  while (iter.hasNext()) {  String token = (String) iter.next();  if (token.startsWith("--")) { [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	103	103	1	add	
34	[BUG] [BUGGY] while (iter.hasNext()) { [FE] AssertionFailedError [CONTEXT] { init(); this.options = options;  Iterator iter = Arrays.asList(arguments).iterator();  [BUGGY] while (iter.hasNext())  { [BUGGY] {  String token = (String) iter.next();  if (token.startsWith("--")) { if (token.indexOf('=') != -1) { tokens.add(token.substring(0, token.indexOf('='))); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	106	107	1	replace	
35	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { init(); this.options = options;  Iterator iter = Arrays.asList(arguments).iterator();  [BUGGY] [BUGGY] while (iter.hasNext())  { {  String token = (String) iter.next();  if (token.startsWith("--")) { if (token.indexOf('=') != -1) { tokens.add(token.substring(0, token.indexOf('='))); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	106	107	1	add	
36	[BUG] [BUGGY] String token = (String) iter.next(); [FE] AssertionFailedError [CONTEXT] while (iter.hasNext()) {  [BUGGY] String token = (String) iter.next(); [BUGGY]   if (token.startsWith("--")) { if (token.indexOf('=') != -1) { tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	109	109	1	replace	
37	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] while (iter.hasNext()) {  [BUGGY] [BUGGY] String token = (String) iter.next();  if (token.startsWith("--")) { if (token.indexOf('=') != -1) { tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	109	109	1	add	
38	[BUG] [BUGGY] if (token.startsWith("--")) { [FE] AssertionFailedError [CONTEXT] while (iter.hasNext()) {  String token = (String) iter.next();  [BUGGY] if (token.startsWith("--"))   { [BUGGY] { if (token.indexOf('=') != -1) { tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else { tokens.add(token); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	replace	
39	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] while (iter.hasNext()) {  String token = (String) iter.next();  [BUGGY] [BUGGY] if (token.startsWith("--"))   { { if (token.indexOf('=') != -1) { tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else { tokens.add(token); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	112	113	1	add	
40	[BUG] [BUGGY] else if ("-".equals(token)) { [FE] AssertionFailedError [CONTEXT] tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else { tokens.add(token); } }  [BUGGY] else if ("-".equals(token))   { [BUGGY] { processSingleHyphen(token); } else if (token.startsWith("-")) { if (token.length() == 2) { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	replace	
41	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else { tokens.add(token); } }  [BUGGY] [BUGGY] else if ("-".equals(token))   { { processSingleHyphen(token); } else if (token.startsWith("-")) { if (token.length() == 2) { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	126	127	1	add	
42	[BUG] [BUGGY] else if (token.startsWith("-")) { [FE] AssertionFailedError [CONTEXT] { tokens.add(token); } }  else if ("-".equals(token)) { processSingleHyphen(token); } [BUGGY] else if (token.startsWith("-"))   { [BUGGY] { if (token.length() == 2) { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); }  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	130	131	1	replace	
43	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { tokens.add(token); } }  else if ("-".equals(token)) { processSingleHyphen(token); } [BUGGY] [BUGGY] else if (token.startsWith("-"))   { { if (token.length() == 2) { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); }  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	130	131	1	add	
44	[BUG] [BUGGY] gobble(iter); [FE] AssertionFailedError [CONTEXT] } else if (stopAtNonOption) { process(token); } else { tokens.add(token); } [BUGGY] gobble(iter); [BUGGY] } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	155	155	1	replace	
45	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else if (stopAtNonOption) { process(token); } else { tokens.add(token); } [BUGGY] [BUGGY] gobble(iter); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	155	155	1	add	
46	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] else if (stopAtNonOption) { process(token); } else { tokens.add(token); } gobble(iter); [BUGGY] } [BUGGY]  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	replace	
47	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] else if (stopAtNonOption) { process(token); } else { tokens.add(token); } gobble(iter); [BUGGY] [BUGGY] } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	156	156	1	add	
48	[BUG] [BUGGY] return (String[]) tokens.toArray(new String[tokens.size()]); [FE] AssertionFailedError [CONTEXT] process(token); } else { tokens.add(token); } gobble(iter); } [BUGGY] return (String[]) tokens.toArray(new String[tokens.size()]); [BUGGY] } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	158	158	1	replace	
49	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] process(token); } else { tokens.add(token); } gobble(iter); } [BUGGY] [BUGGY] return (String[]) tokens.toArray(new String[tokens.size()]); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	158	158	1	add	
50	[BUG] [BUGGY] if (eatTheRest) { [FE] AssertionFailedError [CONTEXT] private void gobble(Iterator iter) { [BUGGY] if (eatTheRest)  { [BUGGY] { while (iter.hasNext()) { tokens.add(iter.next()); } } } [CLASS] PosixParser [METHOD] gobble [RETURN_TYPE] void  Iterator iter [VARIABLES] Iterator iter Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	168	169	1	replace	
51	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void gobble(Iterator iter) { [BUGGY] [BUGGY] if (eatTheRest)  { { while (iter.hasNext()) { tokens.add(iter.next()); } } } [CLASS] PosixParser [METHOD] gobble [RETURN_TYPE] void  Iterator iter [VARIABLES] Iterator iter Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	0.2672612419124244	168	169	1	add	
