bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add(new  Option(token,  currentOption));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  tokens.add(new  Option(token,  currentOption));  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(new  Option(token,  currentOption));	  tokens.add(new    Option(token,    stopAtNonOption));    	non-compiled	[CE]  ')'  expected	32	None	replace
2	[BUG]  [BUGGY]  tokens.add(new  Option(currentOption,  stopAtNonOption));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  tokens.add(new  Option(currentOption,  stopAtNonOption));  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(new  Option(currentOption,  stopAtNonOption));	  tokens.add(new    Option(token,    stopAtNonOption));    	non-compiled	[CE]  ')'  expected	32	None	replace
3	[BUG]  [BUGGY]  tokens.add(new  Option(token,  stopAtNonOption),  currentOption);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  tokens.add(new  Option(token,  stopAtNonOption),  currentOption);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(new  Option(token,  stopAtNonOption),  currentOption);	  tokens.add(new    Option(token,    stopAtNonOption));    	non-compiled	[CE]  ')'  expected	32	None	replace
4	[BUG]  [BUGGY]  else  if(currentOption  ==  null)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    else    if(stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  ')'  expected	35	None	replace
5	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption    ==    null)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
6	[BUG]  [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption    ==    null)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
7	[BUG]  [BUGGY]  else  if(currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption    ==    null)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
8	[BUG]  [BUGGY]  else  if(currentOption  ==  null  ||  stopAtNonOption  ==  null)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  null  ||  stopAtNonOption  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ==  null  ||  stopAtNonOption  ==  null)  {	  else    if(currentOption    ||    stopAtNonOption    ==    null)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
9	[BUG]  [BUGGY]  else  if(currentOption!=  null  ||  stopAtNonOption  ==  null)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  null  ||  stopAtNonOption  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption!=  null  ||  stopAtNonOption  ==  null)  {	  else    if(currentOption    ||    stopAtNonOption    ==    null)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
10	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	Option  currentOption  =  options.getOption(token);  tokens.add(token);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
11	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
12	[BUG]  [BUGGY]  if(stopAtNonOption)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    if(stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
13	[BUG]  [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  &&  currentOption!=  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption!=  null)  {  if(stopAtNonOption  &&  currentOption!=  null)  {	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    if(stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
14	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  &&  currentOption!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  if(stopAtNonOption  &&  currentOption!=  null)  {	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    if(stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    if(stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    	non-compiled	[CE]  ')'  expected	12	None	replace
17	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  tokens.contains(token))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  tokens.contains(token))  {	  else    if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  	55	None	replace
18	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasValue(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasValue(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  options.hasValue(token))  {	  else    if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  	55	None	replace
19	[BUG]  [BUGGY]  else  if(currentOption  ==  null  ||  stopAtNonOption!=  null)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  null  ||  stopAtNonOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ==  null  ||  stopAtNonOption!=  null)  {	  else    if(currentOption    ||    stopAtNonOption!=    null)    {    	non-compiled	[CE]  	15	None	replace
20	[BUG]  [BUGGY]  else  if(currentOption!=  null  ||  stopAtNonOption!=  null)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  null  ||  stopAtNonOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption!=  null  ||  stopAtNonOption!=  null)  {	  else    if(currentOption    ||    stopAtNonOption!=    null)    {    	non-compiled	[CE]  	15	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }	  if(stopAtNonOption    ||    currentOption!=    null)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
22	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }	  if(stopAtNonOption    ||    currentOption!=    null)    {    tokens.add(token);    }    	non-compiled	[CE]  	43	None	replace
23	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null  &&  currentOption.hasOption(token))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null  &&  currentOption.hasOption(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption!=  null  &&  currentOption.hasOption(token))  {	  else    if(stopAtNonOption    &&    currentOption!=    null    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  	3	None	replace
24	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null  &&  currentOption.hasOption(token))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null  &&  currentOption.hasOption(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption  ==  null  &&  currentOption.hasOption(token))  {	  else    if(stopAtNonOption    &&    currentOption!=    null    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  	3	None	replace
25	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  currentOption.hasValue(token))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  currentOption.hasValue(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null  &&  currentOption.hasValue(token))  {	  else    if(stopAtNonOption    &&    currentOption!=    null    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  	3	None	replace
26	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasOption(token)||  tokens.contains(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasOption(token)||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption.hasOption(token)||  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasOption(token)||    tokens.contains(token))    {    	non-compiled	[CE]  	2	None	replace
27	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasOption(token)&&  tokens.contains(token))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasOption(token)&&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption.hasOption(token)&&  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasOption(token)||    tokens.contains(token))    {    	non-compiled	[CE]  	2	None	replace
28	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(token))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasOption(token)||    tokens.contains(token))    {    	non-compiled	[CE]  	2	None	replace
29	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasValue(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasValue(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption.hasValue(token))  {	  else    if(stopAtNonOption    ||    currentOption.hasOption(token))    {    	non-compiled	[CE]  	1	None	replace
30	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasOption(token)&&  tokens.contains(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasOption(token)&&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption.hasOption(token)&&  tokens.contains(token))  {	  else    if(stopAtNonOption    ||    currentOption.hasOption(token))    {    	non-compiled	[CE]  	1	None	replace
31	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  tokens.add(currentOption);  }	  tokens.add(currentOption);    	non-compiled	[CE]  	30	None	replace
32	[BUG]  [BUGGY]  tokens.add(currentOption.toString());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  tokens.add(currentOption.toString());  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(currentOption.toString());	  tokens.add(currentOption);    	non-compiled	[CE]  	30	None	replace
33	[BUG]  [BUGGY]  else  if(currentOption!=  null)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption!=  null)  {	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    else    if(stopAtNonOption    ||    currentOption!=    null)    {    	non-compiled	[CE]  	22	None	replace
34	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token!=  null  &&  tokens.contains(token))  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  token!=  null  &&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  token!=  null  &&  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption!=    null    &&    tokens.contains(token))    {    	non-compiled	[CE]  	62	None	replace
35	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens!=  null  &&  tokens.contains(token))  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  tokens!=  null  &&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens!=  null  &&  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption!=    null    &&    tokens.contains(token))    {    	non-compiled	[CE]  	62	None	replace
36	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null  &&  tokens.contains(token))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null  &&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption  ==  null  &&  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption!=    null    &&    tokens.contains(token))    {    	non-compiled	[CE]  	62	None	replace
37	[BUG]  [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption    ||    currentOption!=    null)    {    	non-compiled	[CE]  	26	None	replace
38	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  ||  currentOption!=  null)  {	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption    ||    currentOption!=    null)    {    	non-compiled	[CE]  	26	None	replace
39	[BUG]  [BUGGY]  tokens.add(options.getOption(currentOption));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  tokens.add(options.getOption(currentOption));  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(options.getOption(currentOption));	  tokens.add(options.getOption(token));    	non-compiled	[CE]  	13	None	replace
40	[BUG]  [BUGGY]  tokens.add(options.getValue(token));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  tokens.add(options.getValue(token));  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(options.getValue(token));	  tokens.add(options.getOption(token));    	non-compiled	[CE]  	13	None	replace
41	[BUG]  [BUGGY]  tokens.add(options.getOption(token),  stopAtNonOption);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  tokens.add(options.getOption(token),  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(options.getOption(token),  stopAtNonOption);	  tokens.add(options.getOption(token));    	non-compiled	[CE]  	13	None	replace
42	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.containsKey(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.containsKey(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  options.containsKey(token))  {	  else    if(stopAtNonOption    &&    tokens.containsKey(token))    {    	non-compiled	[CE]  	40	None	replace
43	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.containsKey(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.containsKey(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption.containsKey(token))  {	  else    if(stopAtNonOption    &&    tokens.containsKey(token))    {    	non-compiled	[CE]  	40	None	replace
44	[BUG]  [BUGGY]  else  if(currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption!=    null)    {    	non-compiled	[CE]  	60	None	replace
45	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasKey(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasKey(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  options.hasKey(token))  {	  else    if(stopAtNonOption    ||    options.hasKey(token))    {    	non-compiled	[CE]  	52	None	replace
46	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasArg(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasArg(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  options.hasArg(token))  {	  else    if(stopAtNonOption    ||    options.hasKey(token))    {    	non-compiled	[CE]  	52	None	replace
47	[BUG]  [BUGGY]  tokens.add(token,  currentOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  tokens.add(token,  currentOption);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(token,  currentOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	31	None	replace
48	[BUG]  [BUGGY]  tokens.add(currentOption,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  tokens.add(currentOption,  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(currentOption,  stopAtNonOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	31	None	replace
49	[BUG]  [BUGGY]  Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    Token    eatTheRest    =    stopAtNonOption    &&    currentOption!=    null;    	non-compiled	[CE]  	8	None	replace
50	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null)  {  Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  }	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    Token    eatTheRest    =    stopAtNonOption    &&    currentOption!=    null;    	non-compiled	[CE]  	8	None	replace
51	[BUG]  [BUGGY]  Token  eatTheRest  =  stopAtNonOption  &&  currentOption  ==  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  Token  eatTheRest  =  stopAtNonOption  &&  currentOption  ==  null;  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	Token  eatTheRest  =  stopAtNonOption  &&  currentOption  ==  null;	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    Token    eatTheRest    =    stopAtNonOption    &&    currentOption!=    null;    	non-compiled	[CE]  	8	None	replace
52	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	47	None	replace
53	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	47	None	replace
54	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  stopAtNonOption;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  tokens.add(token);  currentOption  =  stopAtNonOption;  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(token);  currentOption  =  stopAtNonOption;	  tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	34	None	replace
55	[BUG]  [BUGGY]  tokens.add(currentOption);  eatTheRest  =  stopAtNonOption;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  tokens.add(currentOption);  eatTheRest  =  stopAtNonOption;  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(currentOption);  eatTheRest  =  stopAtNonOption;	  tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	34	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }	  tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	34	None	replace
57	[BUG]  [BUGGY]  Token  eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  Token  eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	Token  eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    Token    eatTheRest    =    stopAtNonOption    ||    currentOption    ==    null;    	non-compiled	[CE]  	59	None	replace
58	[BUG]  [BUGGY]  Token  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  Token  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	Token  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    Token    eatTheRest    =    stopAtNonOption    ||    currentOption    ==    null;    	non-compiled	[CE]  	59	None	replace
59	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArgs())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArgs())  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArgs())  {	  else    if(stopAtNonOption    &&    currentOption.hasArgs())    {    	non-compiled	[CE]  	51	None	replace
60	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  options.put(token,  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	options.put(token,  stopAtNonOption);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  	48	None	replace
61	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.hasArg())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  tokens.hasArg())  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens.hasArg())  {	  else    if(stopAtNonOption    &&    tokens.hasArg())    {    	non-compiled	[CE]  	74	None	replace
62	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasArg())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasArg())  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  options.hasArg())  {	  else    if(stopAtNonOption    &&    tokens.hasArg())    {    	non-compiled	[CE]  	74	None	replace
63	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.size()  >  1)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  tokens.size()  >  1)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  tokens.size()  >  1)  {	  else    if(stopAtNonOption    &&    tokens.hasArg())    {    	non-compiled	[CE]  	74	None	replace
64	[BUG]  [BUGGY]  else  if(currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  	58	None	replace
65	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  ||  currentOption  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  	58	None	replace
66	[BUG]  [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  	58	None	replace
67	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens  ==  null)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  tokens  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  tokens  ==  null)  {	  else    if(stopAtNonOption    ||    tokens    ==    null)    {    	non-compiled	[CE]  	49	None	replace
68	[BUG]  [BUGGY]  else  if(currentOption  ||  tokens  ==  null)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ||  tokens  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ||  tokens  ==  null)  {	  else    if(stopAtNonOption    ||    tokens    ==    null)    {    	non-compiled	[CE]  	49	None	replace
69	[BUG]  [BUGGY]  else  if(currentOption  ||  stopAtNonOption.hasArg())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ||  stopAtNonOption.hasArg())  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ||  stopAtNonOption.hasArg())  {	  else    if(stopAtNonOption    ||    currentOption.hasArg())    {    	non-compiled	[CE]  	28	None	replace
70	[BUG]  [BUGGY]  else  if(currentOption  ==  stopAtNonOption  &&  tokens.containsKey(token))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  stopAtNonOption  &&  tokens.containsKey(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ==  stopAtNonOption  &&  tokens.containsKey(token))  {	  else    if(currentOption    ||    tokens.containsKey(token))    {    	non-compiled	[CE]  	42	None	replace
71	[BUG]  [BUGGY]  else  if(currentOption  ==  stopAtNonOption  ||  tokens.containsKey(token))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  stopAtNonOption  ||  tokens.containsKey(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ==  stopAtNonOption  ||  tokens.containsKey(token))  {	  else    if(currentOption    ||    tokens.containsKey(token))    {    	non-compiled	[CE]  	42	None	replace
72	[BUG]  [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption    ||    currentOption!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
73	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption    ||    currentOption!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
74	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption    ||    currentOption!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
75	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  ||  stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	||  stopAtNonOption  &&  currentOption!=  null)  {	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    ||    stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  	7	None	replace
76	[BUG]  [BUGGY]  else  if(currentOption!=  null)  {  ||  stopAtNonOption  &&  currentOption!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  null)  {  ||  stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption!=  null)  {  ||  stopAtNonOption  &&  currentOption!=  null)  {	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    ||    stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  	7	None	replace
77	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.contains(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  options.contains(token))  {	  else    if(stopAtNonOption    ||    options.contains(token))    {    	non-compiled	[CE]  	45	None	replace
78	[BUG]  [BUGGY]  else  if(currentOption  ||  options.containsKey(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ||  options.containsKey(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ||  options.containsKey(token))  {	  else    if(stopAtNonOption    ||    options.containsKey(token))    {    	non-compiled	[CE]  	41	None	replace
79	[BUG]  [BUGGY]  else  if(currentOption  ==  stopAtNonOption  &&  tokens.contains(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  stopAtNonOption  &&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ==  stopAtNonOption  &&  tokens.contains(token))  {	  else    if(currentOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  	46	None	replace
80	[BUG]  [BUGGY]  else  if(currentOption  ==  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ==  stopAtNonOption  ||  tokens.contains(token))  {	  else    if(currentOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  	46	None	replace
81	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  &&  tokens.contains(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  &&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg()  &&  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&    tokens.contains(token))    {    	non-compiled	[CE]  	29	None	replace
82	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  tokens.contains(token)||  tokens.contains(token))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  tokens.contains(token)||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  tokens.contains(token)||  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&    tokens.contains(token))    {    	non-compiled	[CE]  	29	None	replace
83	[BUG]  [BUGGY]  eatTheRest  =  false;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  eatTheRest  =  false;  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	eatTheRest  =  false;	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	19	None	replace
84	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	||  stopAtNonOption)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	19	None	replace
85	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token))  {  eatTheRest  =  true;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token))  {  eatTheRest  =  true;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  &&  tokens.contains(token))  {  eatTheRest  =  true;  }	  if(stopAtNonOption    ||    tokens.contains(token))    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	66	None	replace
86	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token))  {  eatTheRest  =  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token))  {  eatTheRest  =  false;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  ||  tokens.contains(token))  {  eatTheRest  =  false;  }	  if(stopAtNonOption    ||    tokens.contains(token))    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	66	None	replace
87	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	53	None	replace
88	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  Option  currentOption  =  options.getOption(token);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  Option  currentOption  =  options.getOption(token);  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption!=  null)  {  Option  currentOption  =  options.getOption(token);	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	53	None	replace
89	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  Option  currentOption  =  options.getOption(token);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  Option  currentOption  =  options.getOption(token);  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null)  {  Option  currentOption  =  options.getOption(token);  }	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	53	None	replace
90	[BUG]  [BUGGY]  ||  stopAtNonOption  ||  currentOption  ==  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  ||  stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	||  stopAtNonOption  ||  currentOption  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    ||    stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  	38	None	replace
91	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null)  {  ||  stopAtNonOption  &&  currentOption  ==  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null)  {  ||  stopAtNonOption  &&  currentOption  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption  ==  null)  {  ||  stopAtNonOption  &&  currentOption  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    ||    stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  	38	None	replace
92	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens!=  null)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  tokens!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  tokens!=  null)  {	  else    if(stopAtNonOption    ||    tokens!=    null)    {    	non-compiled	[CE]  	57	None	replace
93	[BUG]  [BUGGY]  else  if(currentOption  ||  tokens!=  null)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ||  tokens!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ||  tokens!=  null)  {	  else    if(stopAtNonOption    ||    tokens!=    null)    {    	non-compiled	[CE]  	57	None	replace
94	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  eatTheRest  =  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  eatTheRest  =  false;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  ||  currentOption  ==  null)  {  eatTheRest  =  false;  }	  if(stopAtNonOption    ||    currentOption    ==    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	61	None	replace
95	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption  ==  null)  {  eatTheRest  =  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  &&  currentOption  ==  null)  {  eatTheRest  =  true;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  &&  currentOption  ==  null)  {  eatTheRest  =  true;  }	  if(stopAtNonOption    ||    currentOption    ==    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	61	None	replace
96	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(startAtNonOption)  {  continue;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(startAtNonOption)  {  continue;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(startAtNonOption)  {  continue;  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	63	None	replace
97	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(currentOption!=  null)  {  continue;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(currentOption!=  null)  {  continue;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(currentOption!=  null)  {  continue;  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	63	None	replace
98	[BUG]  [BUGGY]  &&  stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  &&  stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	&&  stopAtNonOption)  {  eatTheRest  =  true;  }	  ||    stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	20	None	replace
99	[BUG]  [BUGGY]  ||  currentOption)  {  eatTheRest  =  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  ||  currentOption)  {  eatTheRest  =  true;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	||  currentOption)  {  eatTheRest  =  true;  }	  ||    stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	20	None	replace
100	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(token)&&  currentOption.equals(token))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(token)&&  currentOption.equals(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  tokens.contains(token)&&  currentOption.equals(token))  {	  else    if(stopAtNonOption    ||    tokens.contains(token)&&    currentOption.equals(token))    {    	non-compiled	[CE]  	67	None	replace
101	[BUG]  [BUGGY]  else  if(currentOption  ||  tokens.contains(token)&&  stopAtNonOption.equals(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ||  tokens.contains(token)&&  stopAtNonOption.equals(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ||  tokens.contains(token)&&  stopAtNonOption.equals(token))  {	  else    if(stopAtNonOption    ||    tokens.contains(token)&&    currentOption.equals(token))    {    	non-compiled	[CE]  	67	None	replace
102	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token)&&  currentOption.equalsIgnoreCase(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token)&&  currentOption.equalsIgnoreCase(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens.contains(token)&&  currentOption.equalsIgnoreCase(token))  {	  else    if(stopAtNonOption    ||    tokens.contains(token)&&    currentOption.equals(token))    {    	non-compiled	[CE]  	67	None	replace
103	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	37	None	replace
104	[BUG]  [BUGGY]  else  if(currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	37	None	replace
105	[BUG]  [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	37	None	replace
106	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.contains(token))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption.contains(token))  {	  else    if(stopAtNonOption    &&    tokens.contains(token))    {    	non-compiled	[CE]  	44	None	replace
107	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption    ||    currentOption!=    null)    {    tokens.add(token);    }    	non-compiled	[CE]  	25	None	replace
108	[BUG]  [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption    ||    currentOption!=    null)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
109	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption    ||    currentOption!=    null)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
110	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  tokens.contains(token))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    ||    tokens.contains(token))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
111	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.hasArg()  ||  tokens.contains(token))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  tokens.hasArg()  ||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  tokens.hasArg()  ||  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    ||    tokens.contains(token))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
112	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  eatTheRest  =  true;  }	  eatTheRest    =    true;    	non-compiled	[CE]  ';'  expected	21	None	replace
113	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add(token);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add(token);  }	  eatTheRest    =    true;    	non-compiled	[CE]  ';'  expected	21	None	replace
114	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  	56	None	replace
115	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    Token    eatTheRest    =    stopAtNonOption    ||    currentOption    ==    null;    	non-compiled	[CE]  ')'  expected	59	None	replace
116	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption    ==    null)    {    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	39	None	replace
117	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasKey(token)&&  currentOption!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasKey(token)&&  currentOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  options.hasKey(token)&&  currentOption!=  null)  {	  else    if(stopAtNonOption    ||    options.hasKey(token))    {    	non-compiled	[CE]  ';'  expected	52	None	replace
118	[BUG]  [BUGGY]  else  if(currentOption  ||  stopAtNonOption)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ||  stopAtNonOption)  {	  else    if(currentOption    ||    stopAtNonOption!=    null)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
119	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null)  {  Option  currentOption  =  options.getOption(token);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null)  {  Option  currentOption  =  options.getOption(token);  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption  ==  null)  {  Option  currentOption  =  options.getOption(token);	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ')'  expected	53	None	replace
120	[BUG]  [BUGGY]  other  if(stopAtNonOption  ||  currentOption!=  null)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  other  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	other  if(stopAtNonOption  ||  currentOption!=  null)  {	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    other    if(stopAtNonOption    ||    currentOption!=    null)    {    	non-compiled	[CE]  ')'  expected	69	None	replace
121	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  currentOption!=  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  currentOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token)||  currentOption!=  null)  {	  else    if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  ')'  expected	56	None	replace
122	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(token)!=  null)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(token)!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  options.getOption(token)!=  null)  {	  else    if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  ')'  expected	56	None	replace
123	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	31	None	replace
124	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.contains(token)&&  currentOption.equals(token))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  options.contains(token)&&  currentOption.equals(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  options.contains(token)&&  currentOption.equals(token))  {	  else    if(stopAtNonOption    ||    tokens.contains(token)&&    currentOption.equals(token))    {    	non-compiled	[CE]  ')'  expected	67	None	replace
125	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(options.getOption(token));  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(options.getOption(token));  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  tokens.add(options.getOption(token));  }	  tokens.add(options.getOption(token));    	non-compiled	[CE]  ')'  expected	13	None	replace
126	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(options.getOption(token));  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(options.getOption(token));  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  tokens.add(options.getOption(token));  }	  tokens.add(options.getOption(token));    	non-compiled	[CE]  ')'  expected	13	None	replace
127	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.getOption(token))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  options.getOption(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  options.getOption(token))  {	  else    if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  ')'  expected	55	None	replace
128	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  currentOption!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  currentOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  currentOption!=  null)  {	  else    if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
129	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	37	None	replace
130	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  }	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    Token    eatTheRest    =    stopAtNonOption    &&    currentOption!=    null;    	non-compiled	[CE]  ')'  expected	8	None	replace
131	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    Token    eatTheRest    =    stopAtNonOption    &&    currentOption!=    null;    	non-compiled	[CE]  ')'  expected	8	None	replace
132	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  ')'  expected	58	None	replace
133	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token!=  null  &&  currentOption.hasOption(token))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  token!=  null  &&  currentOption.hasOption(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  token!=  null  &&  currentOption.hasOption(token))  {	  else    if(stopAtNonOption    &&    currentOption!=    null    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
134	[BUG]  [BUGGY]  other  if(stopAtNonOption  ||  currentOption  ==  null)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  other  if(stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	other  if(stopAtNonOption  ||  currentOption  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    other    if(stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  ')'  expected	64	None	replace
135	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.hasOption(token))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  tokens.hasOption(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  tokens.hasOption(token))  {	  else    if(stopAtNonOption    &&    tokens.hasArg())    {    	non-compiled	[CE]  ')'  expected	74	None	replace
136	[BUG]  [BUGGY]  else  if(currentOption  ==  null  ||  stopAtNonOption)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  null  ||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ==  null  ||  stopAtNonOption)  {	  else    if(currentOption    ||    stopAtNonOption    ==    null)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
137	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(currentOption);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(currentOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(currentOption);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    	non-compiled	[CE]  ')'  expected	12	None	replace
138	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  eatTheRest  =  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  eatTheRest  =  false;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  ||  currentOption!=  null)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  ')'  expected	19	None	replace
139	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.hasArg()  &&  currentOption.contains(token))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  tokens.hasArg()  &&  currentOption.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  tokens.hasArg()  &&  currentOption.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&    tokens.contains(token))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
140	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  options.contains(token))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  options.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  options.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    &&    tokens.contains(token))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
141	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    Token    eatTheRest    =    stopAtNonOption    ||    currentOption!=    null;    	non-compiled	[CE]  ')'  expected	54	None	replace
142	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  Token  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  Token  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null)  {  Token  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    Token    eatTheRest    =    stopAtNonOption    ||    currentOption!=    null;    	non-compiled	[CE]  ')'  expected	54	None	replace
143	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
144	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption    ||    currentOption!=    null)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
145	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption    ||    currentOption!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
146	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  eatTheRest  =  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  eatTheRest  =  true;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  ||  currentOption!=  null)  {  eatTheRest  =  true;  }	  if(stopAtNonOption    ||    currentOption    ==    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  not  a  statement	61	None	replace
147	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  tokens.add(currentOption);  }	  tokens.add(currentOption);    	non-compiled	[CE]  not  a  statement	30	None	replace
148	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.get(token))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  options.get(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  options.get(token))  {	  else    if(stopAtNonOption    ||    options.contains(token))    {    	non-compiled	[CE]  not  a  statement	45	None	replace
149	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token!=  null  &&  currentOption.hasOption(token))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  token!=  null  &&  currentOption.hasOption(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  token!=  null  &&  currentOption.hasOption(token))  {	  else    if(stopAtNonOption    &&    currentOption!=    null    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
150	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.size()  ==  1  ||  currentOption.hasOption(token))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  tokens.size()  ==  1  ||  currentOption.hasOption(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens.size()  ==  1  ||  currentOption.hasOption(token))  {	  else    if(stopAtNonOption    ||    currentOption.hasOption(token))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
151	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token))  {  Option  currentOption  =  options.getOption(token);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token))  {  Option  currentOption  =  options.getOption(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  ||  tokens.contains(token))  {  Option  currentOption  =  options.getOption(token);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  ')'  expected	9	None	replace
152	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.containsValue(token))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  options.containsValue(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  options.containsValue(token))  {	  else    if(stopAtNonOption    ||    options.containsKey(token))    {    	non-compiled	[CE]  ')'  expected	41	None	replace
153	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens  ==  null  ||  tokens.contains(token))  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  tokens  ==  null  ||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens  ==  null  ||  tokens.contains(token))  {	  else    if(stopAtNonOption    ||    tokens    ==    null)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
154	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption    ||    currentOption!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
155	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  eatTheRest  =  stopAtNonOption;  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	eatTheRest  =  stopAtNonOption;	  eatTheRest    =    true;    	non-compiled	[CE]  ')'  expected	21	None	replace
156	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  >=  null)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption  >=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption  >=  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    else    if(stopAtNonOption    ||    currentOption    >=    null)    {    	non-compiled	[CE]  ')'  expected	65	None	replace
157	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.getOption(token);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  Option  <?>  currentOption  =  options.getOption(token);  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	Option  <?>  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	33	None	replace
158	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.containsValue(token))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  tokens.containsValue(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens.containsValue(token))  {	  else    if(currentOption    ||    tokens.containsKey(token))    {    	non-compiled	[CE]  ')'  expected	42	None	replace
159	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token!=  null)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  token!=  null)  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  ||  token!=  null)  {  tokens.add(token);  }	  if(stopAtNonOption    ||    currentOption!=    null)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
160	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token!=  null)  {  Option  currentOption  =  options.getOption(token);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  token!=  null)  {  Option  currentOption  =  options.getOption(token);  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  token!=  null)  {  Option  currentOption  =  options.getOption(token);	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ')'  expected	53	None	replace
161	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token!=  null)  {  Option  currentOption  =  options.getOption(token);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  token!=  null)  {  Option  currentOption  =  options.getOption(token);  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  token!=  null)  {  Option  currentOption  =  options.getOption(token);	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ')'  expected	53	None	replace
162	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  existingOption  =  options.getOption(token);  tokens.add(currentOption);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  existingOption  =  options.getOption(token);  tokens.add(currentOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Option  existingOption  =  options.getOption(token);  tokens.add(currentOption);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    	non-compiled	[CE]  ')'  expected	12	None	replace
163	[BUG]  [BUGGY]  else  if(currentOption!=  null  ||  stopAtNonOption)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  null  ||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption!=  null  ||  stopAtNonOption)  {	  else    if(currentOption    ||    stopAtNonOption    ==    null)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
164	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token  ==  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  token  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  token  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    ||    stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
165	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
166	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(token))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.getOption(token))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  options.getOption(token))  {	  else    if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  ')'  expected	56	None	replace
167	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token!=  null)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  token!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  token!=  null)  {	  else    if(currentOption    ||    stopAtNonOption!=    null)    {    	non-compiled	[CE]  ')'  expected	15	None	replace
168	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token)&&  currentOption.equals(token,  stopAtNonOption))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token)&&  currentOption.equals(token,  stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens.contains(token)&&  currentOption.equals(token,  stopAtNonOption))  {	  else    if(stopAtNonOption    ||    tokens.contains(token)&&    currentOption.equals(token))    {    	non-compiled	[CE]  ')'  expected	67	None	replace
169	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token)&&  currentOption.equals(Token.EMPTY))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token)&&  currentOption.equals(Token.EMPTY))  {  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens.contains(token)&&  currentOption.equals(Token.EMPTY))  {	  else    if(stopAtNonOption    ||    tokens.contains(token)&&    currentOption.equals(token))    {    	non-compiled	[CE]  ')'  expected	67	None	replace
170	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }	  tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  ')'  expected	34	None	replace
171	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [BUGGY]      {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption    ||    currentOption    ==    null)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
