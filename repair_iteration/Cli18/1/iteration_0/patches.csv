bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	add	else  if(stopAtNonOption  ||  currentOption!=  null)  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
2	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption!=  null)  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	add	else  if(stopAtNonOption  ||  currentOption  ==  null)  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
4	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption  ==  null)  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	add	else  if(stopAtNonOption  &&  currentOption!=  null)  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
6	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null)  {	else  if  (stopAtNonOption)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
7	[BUG]  [BUGGY]    [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	  	else  if  (stopAtNonOption)  {  	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
8	[BUG]  [BUGGY]    tokens.add(token);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    tokens.add(token);  [BUGGY]  else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	    tokens.add(token);		non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
9	[BUG]  [BUGGY]    if(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    if(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]  else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	    if(stopAtNonOption)  {  eatTheRest  =  true;  }		non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
10	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]  else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	    if(stopAtNonOption)  {  tokens.add(token);  }		non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
11	[BUG]  [BUGGY]    Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [BUGGY]  else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	    Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);		non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
12	[BUG]  [BUGGY]    Option  currentOption  =  options.getOption(token);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    Option  currentOption  =  options.getOption(token);  [BUGGY]  else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	    Option  currentOption  =  options.getOption(token);		non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
13	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {  [CE]  cannot  find  symbol  opt  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg())  {	else  if  (stopAtNonOption)  {  	non-compiled	[CE]  cannot  find  symbol  opt	1	None	replace
14	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasOption(token))  {  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasOption(token))  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption.hasOption(token))  {	else  if  (stopAtNonOption)  {  	non-compiled	[CE]  ')'  expected	1	None	replace
15	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token))  {  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens.contains(token))  {	else  if  (stopAtNonOption)  {  	non-compiled	[CE]  ')'  expected	1	None	replace
16	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.containsKey(token))  {  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  ||  tokens.containsKey(token))  {  [BUGGY]  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens.containsKey(token))  {	else  if  (stopAtNonOption)  {  	non-compiled	[CE]  ')'  expected	1	None	replace
