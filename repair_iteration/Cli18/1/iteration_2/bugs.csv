bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasOption(token))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasOption(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption.hasOption(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
2	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasOption(token)||  tokens.contains(token))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasOption(token)||  tokens.contains(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption.hasOption(token)||  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
3	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  currentOption.hasOption(token))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  currentOption.hasOption(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null  &&  currentOption.hasOption(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
4	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  else  if(stopAtNonOption  &&  currentOption!=  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  else  if(stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    &&    currentOption!=    null)    {    else  if(stopAtNonOption  &&  currentOption!=  null)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
5	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  else  if(stopAtNonOption  &&  currentOption  ==  null)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  else  if(stopAtNonOption  &&  currentOption  ==  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    &&    currentOption!=    null)    {    else  if(stopAtNonOption  &&  currentOption  ==  null)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
6	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  if(stopAtNonOption  &&  currentOption!=  null)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  if(stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    &&    currentOption!=    null)    {    if(stopAtNonOption  &&  currentOption!=  null)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
7	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  ||  stopAtNonOption  &&  currentOption!=  null)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  ||  stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    &&    currentOption!=    null)    {    ||  stopAtNonOption  &&  currentOption!=  null)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
8	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    &&    currentOption!=    null)    {    Token  eatTheRest  =  stopAtNonOption  &&  currentOption!=  null;	  	non-compiled	[CE]  ')'  expected	5	None	add
9	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ')'  expected	12	None	replace
10	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ')'  expected	12	None	replace
11	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ')'  expected	12	None	replace
12	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }	      Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  ')'  expected	11	None	replace
13	[BUG]  [BUGGY]  tokens.add(options.getOption(token));  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  tokens.add(options.getOption(token));  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(options.getOption(token));	      Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  ')'  expected	11	None	replace
14	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  ')'  expected	11	None	replace
15	[BUG]  [BUGGY]  else  if(currentOption  ||  stopAtNonOption!=  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(currentOption  ||  stopAtNonOption!=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ||  stopAtNonOption!=  null)  {	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
16	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
17	[BUG]  [BUGGY]  else  if(currentOption  ||  stopAtNonOption  ==  null)  {  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(currentOption  ||  stopAtNonOption  ==  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ||  stopAtNonOption  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
18	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption  >=  null)  {  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption  >=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption  >=  null)  {	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
19	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  }	      if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
20	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	||  stopAtNonOption)  {  eatTheRest  =  true;  }	      if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
21	[BUG]  [BUGGY]  eatTheRest  =  true;  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  eatTheRest  =  true;  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	eatTheRest  =  true;	      if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
22	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  else  if(stopAtNonOption  ||  currentOption!=  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  else  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption!=    null)    {    else  if(stopAtNonOption  ||  currentOption!=  null)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
23	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption!=    null)    {    else  if(stopAtNonOption  ||  currentOption  ==  null)  {	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
24	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  	1	None	add
25	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }	  	non-compiled	[CE]  ')'  expected	1	None	add
26	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption!=    null)    {    if(stopAtNonOption  ||  currentOption!=  null)  {	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
27	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  tokens.contains(token))  {  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  tokens.contains(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
28	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg())  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	13	None	replace
29	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  tokens.contains(token))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  tokens.contains(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	13	None	replace
30	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  tokens.add(currentOption);  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(currentOption);	      tokens.add(token);    	non-compiled	[CE]  ')'  expected	8	None	replace
31	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(token,  stopAtNonOption);	      tokens.add(token);    	non-compiled	[CE]  ')'  expected	8	None	replace
32	[BUG]  [BUGGY]  tokens.add(new  Option(token,  stopAtNonOption));  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  tokens.add(new  Option(token,  stopAtNonOption));  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(new  Option(token,  stopAtNonOption));	      tokens.add(token);    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
33	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  'else'  without  'if'	7	None	replace
34	[BUG]  [BUGGY]  tokens.add(token);  eatTheRest  =  stopAtNonOption;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  tokens.add(token);  eatTheRest  =  stopAtNonOption;  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	tokens.add(token);  eatTheRest  =  stopAtNonOption;	      	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption    ==    null)    {    else  if(stopAtNonOption  ||  currentOption  ==  null)  {	  	non-compiled	[CE]  	3	None	add
36	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  else  if(stopAtNonOption  ||  currentOption!=  null)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  else  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption    ==    null)    {    else  if(stopAtNonOption  ||  currentOption!=  null)  {	  	non-compiled	[CE]  	3	None	add
37	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  	3	None	add
38	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  ||  stopAtNonOption  ||  currentOption  ==  null)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  ||  stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption    ==    null)    {    ||  stopAtNonOption  ||  currentOption  ==  null)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
39	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }	  	non-compiled	[CE]  ')'  expected	3	None	add
40	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.containsKey(token))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  tokens.containsKey(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  tokens.containsKey(token))  {	  else    if(stopAtNonOption    ||    tokens.containsKey(token))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
41	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.containsKey(token))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  options.containsKey(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  options.containsKey(token))  {	  else    if(stopAtNonOption    ||    tokens.containsKey(token))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
42	[BUG]  [BUGGY]  else  if(currentOption  ||  tokens.containsKey(token))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(currentOption  ||  tokens.containsKey(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ||  tokens.containsKey(token))  {	  else    if(stopAtNonOption    ||    tokens.containsKey(token))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
43	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
44	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(token))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  tokens.contains(token))  {	  else    if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
45	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.contains(token))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  options.contains(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  options.contains(token))  {	  else    if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  ';'  expected	15	None	replace
46	[BUG]  [BUGGY]  else  if(currentOption  ||  tokens.contains(token))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(currentOption  ||  tokens.contains(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(currentOption  ||  tokens.contains(token))  {	  else    if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  ';'  expected	15	None	replace
47	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }	      tokens.add(token);    	non-compiled	[CE]  ';'  expected	8	None	replace
48	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }	      tokens.add(token);    	non-compiled	[CE]  ';'  expected	8	None	replace
49	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens  ==  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  tokens  ==  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
50	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalStateException( " ");  }	      Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  ';'  expected	11	None	replace
51	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArgs())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArgs())  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArgs())  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
52	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasKey(token))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  options.hasKey(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  options.hasKey(token))  {	  else    if(stopAtNonOption    ||    tokens.containsKey(token))    {    	non-compiled	[CE]  ';'  expected	16	None	replace
53	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  Option  currentOption  =  options.getOption(token);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  Option  currentOption  =  options.getOption(token);  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    &&    currentOption!=    null)    {    Option  currentOption  =  options.getOption(token);	  	non-compiled	[CE]  ';'  expected	5	None	add
54	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  Token  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  Token  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption!=    null)    {    Token  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;	  	non-compiled	[CE]  ';'  expected	1	None	add
55	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  options.hasOption(token))  {	  else    if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  ';'  expected	15	None	replace
56	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  ';'  expected	14	None	replace
57	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens!=  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  tokens!=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens!=  null)  {	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
58	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption  ||  currentOption  ==  null)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
59	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  Token  eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  Token  eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption    ==    null)    {    Token  eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;	  	non-compiled	[CE]  ';'  expected	3	None	add
60	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption    ==    null)    {    if(stopAtNonOption  ||  currentOption!=  null)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
61	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  eatTheRest  =  true;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  eatTheRest  =  true;  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  ||  currentOption  ==  null)  {  eatTheRest  =  true;  }	      if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
62	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  tokens.contains(token))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  tokens.contains(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null  &&  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
63	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  continue;  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  continue;  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  continue;  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ';'  expected	12	None	replace
64	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  other  if(stopAtNonOption  ||  currentOption  ==  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  other  if(stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption    ==    null)    {    other  if(stopAtNonOption  ||  currentOption  ==  null)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
65	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  else  if(stopAtNonOption  ||  currentOption  >=  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  else  if(stopAtNonOption  ||  currentOption  >=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption    ==    null)    {    else  if(stopAtNonOption  ||  currentOption  >=  null)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
66	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token))  {  eatTheRest  =  true;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption  ||  tokens.contains(token))  {  eatTheRest  =  true;  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	if(stopAtNonOption  ||  tokens.contains(token))  {  eatTheRest  =  true;  }	      if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
67	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token)&&  currentOption.equals(token))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token)&&  currentOption.equals(token))  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  ||  tokens.contains(token)&&  currentOption.equals(token))  {	  else    if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  ';'  expected	15	None	replace
68	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  else  if(stopAtNonOption  ||  currentOption  >=  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  else  if(stopAtNonOption  ||  currentOption  >=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption!=    null)    {    else  if(stopAtNonOption  ||  currentOption  >=  null)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
69	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  other  if(stopAtNonOption  ||  currentOption!=  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  other  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption!=    null)    {    other  if(stopAtNonOption  ||  currentOption!=  null)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
70	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  else  if(stopAtNonOption  ||  currentOption  >>  null)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  else  if(stopAtNonOption  ||  currentOption  >>  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    ||    currentOption!=    null)    {    else  if(stopAtNonOption  ||  currentOption  >>  null)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
71	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  else  if(stopAtNonOption  &&  currentOption  >=  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  else  if(stopAtNonOption  &&  currentOption  >=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    &&    currentOption!=    null)    {    else  if(stopAtNonOption  &&  currentOption  >=  null)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
72	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  else  if(stopAtNonOption  &&  currentOption  >>  null)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  else  if(stopAtNonOption  &&  currentOption  >>  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    &&    currentOption!=    null)    {    else  if(stopAtNonOption  &&  currentOption  >>  null)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
73	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  other  if(stopAtNonOption  &&  currentOption!=  null)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  other  if(stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else    if(stopAtNonOption    &&    currentOption!=    null)    {    other  if(stopAtNonOption  &&  currentOption!=  null)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
74	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.hasArg())  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  tokens.hasArg())  {  [BUGGY]    {  eatTheRest  =  true;  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli18/src/java/org/apache/commons/cli/PosixParser.java	1.0	238	239	1	replace	else  if(stopAtNonOption  &&  tokens.hasArg())  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	13	None	replace
