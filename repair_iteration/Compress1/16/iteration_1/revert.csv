projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.getName().equals(cpioEntry.getName
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.names.get(i);if(entry.getKey().equals(entry.getValue())){break;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.names.get(i);if(entry.getKey().equals(entry.getValue())){return;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.names.get(i);if(entry.getKey().equals(entry.getValue())){out.put
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){format=cpioEntry.getFormat();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){out.write(cpioEntry.getKey());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){out.write(cpioEntry.getValue());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);if(out!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,String>();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write('n');
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,Object>();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133getNames().put("entryFormat",entryFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write('n');break;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133getNames().put("entryFormat",format);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(0);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133For(inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(0);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133inti=0;names.size()>0;++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133getNames().put("EntryFormat",format);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133getNames().put("entryFormat",this.format);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133getNames().put("entryFormat,",format);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(0);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133For(inti=0;i<this.names.size();i++){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133inti=0;i<this.names.size();i++){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(0);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133inti=0;i<names.size();i++){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.put(i,format);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size()-1;i++){out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133inti=0;i<names.size();i++){out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size()+1;i++){out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size()-2;i++){out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){out.write(cpioEntry.get
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){out.write(cpioEntry.getKey()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(0);if(cpioEntry!=null){out.write(cpioEntry.getKey());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry==null){out.write(cpioEntry.getKey());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(0);if(cpioEntry!=null){out.write(cpioEntry.get
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write('n',crc);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.defaultWrite('n');
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write("n");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write('n',format);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write('n','/');
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newLinkedHashMap();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap(this.names);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newArrayList();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap(this.numbers);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.getName().equals(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.getName().equals(cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.getName().equals
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.getName().equals(c
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.getName().equals(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){format=cpioEntry.getFormat()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){format=cpioEntry.get
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(0);if(cpioEntry!=null){format=cpioEntry.getFormat();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){format=cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry==null){format=cpioEntry.getFormat();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=files.get(i);if(cpioEntry!=null){format=cpioEntry.getFormat();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.names.get(i);if(entry.getKey().equals(entry.get
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.names.get(i);if(entry.getKey().equals(entry.getValu
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.names.get(i);if(entry.getKey().equals(entry.getValue())
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.names.get(i);if(entry.getKey().equals(entry.getVal
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.names.get(i);if(entry.getKey().equals(entry.getValue
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.names.get(i);if(entry.getKey().equals(entry.getValue())
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.names.get(i);if(entry.getKey().equals(entry.getValue()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,String>(this.names);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newLinkedHashMap<String,String>();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,String>(names);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,String>(0);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,String>(1);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,String>(format);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write('n',crc);break;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write("n");break;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.defaultWrite('n');break;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write('0');break;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.defaultWrite("null");break;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){out.write(cpioEntry.getValu
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){out.write(cpioEntry.getValue()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){out.write(cpioEntry.getVal
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){out.write(cpioEntry.getValue
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(0);if(cpioEntry!=null){out.write(cpioEntry.getValue());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newLinkedHashMap<String,Object>();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,Object>(this.names);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,Object>(names);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,Object>(1);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,Object>(){};
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.names.get(i);if(entry.getKey().equals(entry.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133getNames().put("entryFormat",this.entryFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133getNames().put("entryFormat,",entryFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133inti=0;i<names.size();++i){out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.put(0,format);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size()+1;++i){out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){out.put(i,format+1);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.getKey().equals(cpioEntry.getKey())){
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.getKey().equals(cpioEntry.getValue())){
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.equals(cpioEntry.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){CpioArchiveEntrycrc=(CpioArchiveEntry)this.names.get(i);out.write(crc);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry==null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(0);if(cpioEntry!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i+1);if(cpioEntry!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=files.get(i);if(cpioEntry!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);if(out!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133For(inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);if(out!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(0);if(out!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);if(out==null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133if(names!=null){for(inti=0;i<names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);if(out!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);if(out!=null){
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){format=cpioEntry.getFormat
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i+1);if(cpioEntry!=null){format=cpioEntry.getFormat();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);out.put(i,format
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){out.put(i+1,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){output.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<entries.size();++i){out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,OutputStream>();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.names.get(i);if(entry.getKey().equals(entry.getValu
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.names.get(i);if(entry.getKey().equals(entry
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newArrayList<String,Object>();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newArrayHashMap<String,Object>();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write('n','n');
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write(this.entryFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write('n','-');
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,String>(2);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);out.put(i,format
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);if(out!=null){out
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);if(out!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);if(out!=null){out.close
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){out.put(i+1,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){out.put(i,format+1);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<entries.size();i++){out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133getNames().put("entryFormat"+format,entryFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=files.get(i);if(cpioEntry!=null){out.write(cpioEntry.getKey());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){out.write(cpioEntry.getKey
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write(this.entryFormat);break;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.close();break;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133getNames().put("entryFormat"+format);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.getName().equals(cpioEntry
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){format=cpioEntry.getValue();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i-1);if(cpioEntry!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i+1);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133if(this.names!=null){for(inti=0;i<names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);if(out!=null){out
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i);if(out!=nu
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.append('n');
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write('#');
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.close();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();i++){CpioArchiveEntryout=(CpioArchiveEntry)this.names.get(i+1);out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){format.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){this.out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){format=names.get(i);if(cpioEntry!=null){format=cpioEntry.getFormat();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i);if(cpioEntry!=null){out.write(cpioEntry.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133getNames().put("entryFormat","format");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.equals(cpioEntry
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);out.write(cpioEntry.getKey());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);out.write(cpioEntry.getValue
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);break;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.getName
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);out.write(cpioEntry.getKey());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,Object>(4);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,Object>(8);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){format.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){this.out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i+=2){out.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();i++){output.put(i,format);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.write('#');break;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133out.append('n');break;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap(this.entryFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=paths.get(i);if(cpioEntry!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133for(inti=0;i<names.size();++i){CpioArchiveEntrycpioEntry=names.get(i).if(cpioEntry!=null){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,String>(4);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,String>(this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java133this.names=newHashMap<String,String>(8);
