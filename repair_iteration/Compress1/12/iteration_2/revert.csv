projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.equals(cpioEntry.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){thrownewIOException("
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.isOpen()){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){thrownewIOException("
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.isOpen()){thrownewIOException("
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.equals(cpioEntry
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){return;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(cpioEntry.getValue());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(cpioEntry.getKey());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntryentry=(CpioArchiveEntry)this.closed;out.write(entry.getValue());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){thrownewIOException("");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.close();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.closed;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)super.clone();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry.clone();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.equals(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.equals(cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.equals(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.equals(cpioEntry
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.equals(cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){thrownew
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){thrownewIOException
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){thrownewIOException(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){thrownewIOException("
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.closed;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.isOpen()){
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.isOpen()){thrownewIOException(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.isOpen()){thrownewIOException("
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.isOpen()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.isOpen()){thrownewIOException
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.isOpen()){thrownew
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(cpioEntry.get
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(cpioEntry.getValu
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(cpioEntry.getVal
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(cpioEntry.getValue
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){out.write('n');}else{out.write('n');}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.entryFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){out.write('n');}else{out.write('r');}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){out.write("n");}else{out.write('n');}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{out.write("n");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){out.write("n");}else{out.write("n");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write('n');
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.isOpen()){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.isOpen
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.isOpen()){out.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.isOpen()){out
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){return;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){return;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){return
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(cpio
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(cpioEntry.getKey()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(cpioEnt
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.closed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.cloned;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.closed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.open;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(entry.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=cpioEntry.getOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=getOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream("UTF-8");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(newFileOutputStream("UTF-8"));
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream("UTF-8");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=cpioEntry.getInputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.closed;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=getOutputStream();if(out!=null){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen(i);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().reset();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().interrupt();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().throwInternal();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().setCurrentName(this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setCurrentName(this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(getCurrentThreadContext());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111this.closed=true;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=false;}else{out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=false;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.open;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.open;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){thrownew
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){thrownewIOException
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){thrownewIOException(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){thrownew
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){this.closed=true;}else{out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){this.closed=true;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.close
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getKey());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("n");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(entryFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newOutputStreamWriter();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("ArchiveEntry.closed");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEnt
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpio
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.cloned;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.equals
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.closed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.finished;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.readOnly;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.getKey());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.class);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.closed;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.closed;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.cloned;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.finished;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.closed;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.finished;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.cloned;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.closed;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.finished;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.cloned;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.is
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){out.close();}else{out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){thrownewIOException("");}else{out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){out.close();}else{this.closed=true;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.finished;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.readOnly;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.open;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.close
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEnt
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){thrownewIOException("Streamclosed.");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.open){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.clone){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.equals(c
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){thrownew
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=this.closed.iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.closed){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=newCpioArchiveEntry();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.closed){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(!this.closed){thrownewIOException("");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(!this.closed){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next();++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.closed;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next();++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(CpioArchiveEntry.DEFAULT_OUTPUT);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.entryFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next();i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().removeChild(this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextChanged();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.close;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpio!=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpio==
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpio!=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpio==
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpio}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=this.names.iterator().next();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>it=names.iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=cpioEntrySet.iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen(i,out);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed!=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed==
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed!=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111this.closed=false;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=false;}else{out.flush();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setCurrentName(this.cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setCurrentName(this.open);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setCurrentName(this.clone);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setCurrentName(this.cloned);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setCurrentName(this.null);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setCurrentName(this.file);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=1;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(2);if(cpioEntry.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=false;}else{System.err.println("Streamclosed:"+this.cpioEntry.getClass().getName());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=false;}else{System.err.println("Streamclosed:"+this.cpioEntry.getValue());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=false;}else{System.err.println("Streamclosed:"+this.cpioEntry.getName());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.clone){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){thrownewIOException("Streamclosed.");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(this.clone);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.clone){thrownewIOException("Streamclosed.");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(!this.closed){thrownewIOException("Streamclosed.");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(!this.cloned){thrownewIOException("");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(!this.open){thrownewIOException("");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(!this.finished){thrownewIOException("");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.closed){thrownewIOException("");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.isOpen()){
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.isOpen()){out
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry.clone()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry.clone();out.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry.clone
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry.clone();out.close()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry.clone();out.close
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)super.clone();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.close()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStreamWriter();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newPrintStreamWriter();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStreamWriter();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newCpioOutputStreamWriter();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedInputStreamWriter();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStreamWriter(64);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newMockOutputStreamWriter();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=this.cpioEntry.getOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=crc.getOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=this.crc.getOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=cpioEntry.openStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out=this.cpioEntry.getOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.equals(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.equals(c
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.equals(cpioEntry
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.equals(cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){thrownewIOException
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){return
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.closed){thrownew
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.closed){
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.finished;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.isOpen
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.isOpen()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<that.closed;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<that.cloned;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.cloned;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed||this.finished){for(inti=0;i<this.finished;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.finished;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry==
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry==
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry!=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry!=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111EncoderUtil.writePath(out,this.closed){out.write('n');}else{out.write('r');}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111EncoderUtil.writePath(out,this.closed){out.write('n');}elseif(!this.closed){out.write('r');}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111EncoderUtil.writePath(out,this.closed){out.write('n');}elseif(this.closed){out.write('r');}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=getCurrentOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=(OutputStream)this.closed.clone();if(this.finished){for(inti=0;i<this.closed;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.finished;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEnt
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArch
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.cloned;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.closed;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;++i){ensureOpen(i,out);}}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned>0){for(inti=0;i<this.cloned;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<that.cloned;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.open;out.flush();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.open;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.open;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;--i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;++i){ensureOpen(i,output);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.open;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.closed;++i){ensureOpen(i+1);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.data.length;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.entryFormat.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.crc.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.cpioEntry.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.cpio.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.format.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.file.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.finished;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().internal();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().startInternal();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().reset();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().join();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().intermediate();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.get
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=(OutputStream)cpioEntry.clone();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(crc.getAbsolutePath());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(cpioEntry.getName());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(cpioEntry.getPath());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=(OutputStream)cpioEntry.getValue();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.open!=null){if(this.closed){for(inti=0;i<this.open;++i){ensureOpen();}}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(!this.closed){for(inti=0;i<this.open;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.open!=null){for(inti=0;i<this.open;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.open!=null){if(this.closed){for(inti=0;i<this.open;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.open!=null){if(!this.closed){for(inti=0;i<this.open;++i){ensureOpen();}}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.flush();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.crc);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.read());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getVal
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getVal);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getVal());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;i++){out.flush();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;i++){this.closed=true;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;i++){outputStream.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;i++){thrownewIOException("");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;i++){start.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(this.finished);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){thrownewIOException("Streamclosed.");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.open;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.cloned;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111inti=0;i<this.closed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=1;i<this.closed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.cpioEntry.length;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.writeEnd;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.open;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111inti=0;i<this.closed;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.readOnly;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.cpioEntry.length;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.closed;++i){ensureOpen(i+1,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(!this.cloned){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(!this.finished){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(!this.open){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){if(this.closed){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEnt
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){if(this.closed){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArch
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(this.getCurrentThreadContext());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),this.cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),true);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),getChronology());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.equals
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed.get(i);if(cpioEntry.equals
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.equals
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.equal
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.close
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.close}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.close}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.close
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.open){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.write){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.written){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.finished){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.crc.getKey());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpio.getKey());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.entryFormat.getKey());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.crec.getKey());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){return
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed){continue
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.finished;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen(inti=0;i<this.closed;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen(inti=0;i<this.closed;++i){out.write(this.cpioEntry.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpio);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(cpio.getAbsolutePath());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=cpio.getOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.cloned;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.finished;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=(OutputStream)this.cloned.clone();if(this.finished){for(inti=0;i<this.cloned;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.closed;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=(OutputStream)this.cloned.clone();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=(OutputStream)this.cloned.clone();if(this.finished){for(inti=0;i<this.closed;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.close
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.close}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.close}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.close
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clon
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEnt
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clo
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArch
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111because(this.closed){for(inti=0;i<it.next;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.next;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<its.next;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.next;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.finished){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(!this.finished){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(!this.closed){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.finished){for(inti=0;i<this.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.closed){for(inti=0;i<this.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.finished){for(inti=0;i<this.finished;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.defaultWrite("n");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write('n',this.cpioEntry.length);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.enabled);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getKey()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getValue()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111For(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.equals(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111For(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.equals(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.equals(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<that.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.close()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)super.clone();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){thrownewIOException(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){thrownewIOException
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.closed){thrownewIOException("
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.closed){thrownew
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEnt
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArch
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.closed){thrownewIOException("Streamclosed");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.defaultWrite("null");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(".s.IFJDCS".getBytes());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(".s.IFJDCS".toString());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("n".getBytes());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(".s.IFJDCS");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.getValue();++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.iterator.next();++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.remove();++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<its.next();++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.next();++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.finished;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.cloned;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=this.cloned.iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>it=this.cloned.iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=this.cloned.keySet().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.class,crc);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.crc,CpioArchiveEntry.class);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.class);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.DEFAULT);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.DEFAULT_SYNTHETIC);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.isOpen()){thrownew
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.finished;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.finished;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(!this.closed){out.close();}else{this.closed=true;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.written){out.close();}else{this.closed=true;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){out.close();}else{this.closed=false;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.written){out.close();}else{this.closed=false;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.defaultWrite(this.entryFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.format);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.entryFormat,cpioEntry.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.entryFormat,this.cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry.clone();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)super.clone();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.flush();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.cpio);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.cpioEntry.getKey());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry==
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry==
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry!=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry!=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().close();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().start();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().set(this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().set(this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().set(this.crc);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.next;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<its.next;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.getValue();i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.next;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.remove;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>it=this.closedList.iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>it=names.iterator().next();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().interrupt(this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.sleep().interrupt();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().interrupt(this.cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().interrupt(this.crc);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.sleep(1000);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.open;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.cloned;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;++i){this.closed=true;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;++i){outputStream.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;++i){out.flush();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;++i){thrownewIOException("");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;++i){break;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed!=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed==
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed!=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;i++){out.close();}}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;i++){out.close();}}else{thrownewIOException("");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=getOutputStream();if(this.closed!=null){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){OutputStreamout=getOutputStream();if(out!=null){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=getOutputStream();if(out==null){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){OutputStreamout=getOutputStream();if(out!=null){for(inti=0;i<this.closed;++i){ensureOpen(i);}}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111finalOutputStreamout=getOutputStream();if(out!=null){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(CpioArchiveEntry.DEFAULT_OUTPUT,crc);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(cpioEntry.DEFAULT_OUTPUT);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.crc,CpioArchiveEntry.DEFAULT_OUTPUT);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(cpioEntry.DEFAULT_OUTPUT,crc);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(CpioArchiveEntry.DEFAULT_OUTPUT,this.crc);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(CpioArchiveEntry.DEFAULT_OUTPUT,this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=this.cpioEntry.iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=cpioEntry.iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=this.closed.entrySet().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=this.enabled.iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=this.closed.values().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=this.getOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=getOutputStream().getOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=getInputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=getOutputStream(),this.cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=this.outputStream;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=getOutputStream(this.out);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.readOnly){for(inti=0;i<this.finished;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.readOnly;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.readOnly){for(inti=0;i<this.readOnly;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.readOnly){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=this.readOnly.keySet().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=this.readOnly.entrySet().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.is
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed.get(i);if(cpioEntry.is
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.is
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(!this.closed){out.close();}else{out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(!this.closed){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=(OutputStream)this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.readOnly){for(inti=0;i<this.finished;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.readOnly;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.readOnly){for(inti=0;i<this.readOnly;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.readOnly){for(inti=0;i<this.closed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.entryFormat,this.cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.entryFormat,true);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.file);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.entryFormat,this.zip);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.entryFormat,null);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.entryFormat,cpioEntry.length);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(newFileOutputStream(this.enabled));
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(newFileOutputStream(this.zipFile));
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(newFileOutputStream(this.entryFormat));
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(newFileOutputStream(this.file));
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(newFileOutputStream(this.entryFormat"));
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.open;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){output.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.cloned;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.finished;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.closed;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.finish();++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.finished;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.finished;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>it=this.closed.iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.open;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.cloned;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111inti=0;i<this.closed;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.readOnly;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.closed;++i){out.flush();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111For(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.equals(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed.get(i);if(cpioEntry.equals(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getBytes());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clon
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEnt
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clo
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.closed){return;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){return;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){return;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;++i){out.close();}}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;++i){out.close();}}else{thrownewIOException("");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().setCurrentName(this.open);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().setCurrentName(this.cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().setCurrentName(this.crc);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().setCurrentName(this.clone);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().setCurrentName(this.cloned);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().setCurrentName(this.file);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed.get(i);if(cpioEntry.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111For(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111this.closed=true;for(inti=0;i<this.open;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.closed){for(inti=0;i<this.open;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.isOpen()){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.isOpen()){out.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111cpioEntry.close();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(".UTF-8");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out=newBufferedOutputStream("UTF-8");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(this.entryFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(this.enabled);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(this.info);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(this.out);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.isOpen
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.open;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;++i){output.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;--i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("null");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{for(inti=0;i<this.cpioEntry.length;++i){out.write(cpioEntry.getValue());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{for(inti=0;i<this.cpioEntry.length;i++){out.write(cpioEntry.getValue());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{for(inti=0;i<this.cpioEntry.length;++i){out.write(cpioEntry.getKey());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{for(inti=0;i<this.cpioEntry.length;i++){out.write(cpioEntry.getKey());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{for(inti=0;i<this.cpioEntry.length;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{for(inti=0;i<this.cpioEntry.size();++i){out.write(cpioEntry.getValue());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getValu());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getValu
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getValue
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getValue);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.file);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.open!=null){for(inti=0;i<this.open;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.open!=null){if(this.closed){for(inti=0;i<this.open;++i){ensureOpen(i);}}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.open!=null){if(this.closed){for(inti=0;i<this.open;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=this.cpioEntry.getInputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=crc.getInputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=this.crc.getInputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=(OutputStream)super.clone();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(!this.closed){for(inti=0;i<that.closed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<that.closed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(!this.finished){for(inti=0;i<that.closed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(!this.finished){for(inti=0;i<that.finished;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111EncoderUtil.writePath(out,this.closed){out.write('n');}else{out.write('n');}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){out.write('n');}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111EncoderUtil.writePath(out,this.closed){out.write('n');}elseif(!this.closed){out.write('n');}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111EncoderUtil.writePath(out,this.closed){out.write('n');}elseif(this.closed){out.write('n');}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111EncoderUtil.writePath(out,this.closed){out.write('n');}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;++i){ensureOpen();}}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.closed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(!this.closed){for(inti=0;i<this.cloned;++i){ensureOpen();}}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.getValue(),crc);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.close()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)super.clone();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.finished;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.finished;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.finish;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen(this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen(this.cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen(this.out);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen(this.open);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen(this.crc);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen(this.cpio);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.pioEntry.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111inti=0;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){thrownewIOException(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getName());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(crc.getName());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){this.closed=false;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed||this.finished){this.closed=true;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111This.closed=true;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;++i){ensureOpen(i);}}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){if(this.closed){for(inti=0;i<this.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<that.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("ArchiveEntry.closed:");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("ArchiveEntry.closedn");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.defaultWrite("ArchiveEntry.closed");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(",ArchiveEntry.closed");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=false;}else{out.write("n");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.closed){
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){this.closed=false;}else{out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.finished){this.closed=true;}else{out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.finished){this.closed=true;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.equals(c
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(this,out);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(this,cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(this,this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(this,open);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(this,true);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(this,closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpi!=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpiicy
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.iterator.next();i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.remove();i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.next();i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<its.next();i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.getValue();++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.get();++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.getKey();++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next();++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.close;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.isOpen()){thrownewIOException(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.isOpen()){thrownewIOException
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.isOpen()){thrownewIOException("
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.finished;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>it=this.opens().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){thrownewIOException("Streamclosed");}else{out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){thrownewIOException("Streamclosed.");}else{out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.enabled);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.info);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.format);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.out);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.zipFile);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.closed){for(inti=0;i<this.finished;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){CpioArchiveEntrycpioEntry=newCpioArchiveEntry();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(newFileOutputStream(".UTF-8"));
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(newFileOutputStream("UTF-8")));
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(newFileOutputStream(this.getPath()));
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(newFileOutputStream("UTF-8"),this.enabled);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<that.finished;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<that.getValue();++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.outPath);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(CpioArchiveEntry.DEFAULT_OUTPUT,this.entryFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(CpioArchiveEntry.DEFAULT_OUTPUT,this.enabled);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(CpioArchiveEntry.DEFAULT_OUTPUT,this.out);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=this.closed.keySet().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.class.getName());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.class.getSimpleName());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.get
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.get);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=cpioEntry.open();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().release();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().init(this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed==
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;--i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length+1;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<output.length;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContext(this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(null);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().enable(this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){for(inti=0;i<this.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned==null){for(inti=0;i<this.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=false){for(inti=0;i<this.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned==null){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(')'
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(')'expected
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=cpioEntry.getNames();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=getNames().iterator().next();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<that.closed;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().sleepInternal();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setCurrentThreadContext(this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContext(getCurrentThreadContext());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setCurrentThreadContext(getCurrentThreadContext());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(Cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEnt
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.next();i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.get();i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.open);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.readFully());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=1;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed){
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.encodeStream(this.entryFormat));
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.cpio,this.entryFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.open;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.readOnly;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.readOnly!=null){for(inti=0;i<this.readOnly;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){for(inti=0;i<this.cloned;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){for(inti=0;i<this.finished;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null||this.finished){for(inti=0;i<this.cloned;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<out.length;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("noOpen");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("noopen");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("negative");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream("UTF-8").getCanonicalFile();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream("UTF-8").getAbsolutePath();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloclosed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.isOpen()){
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.isOpen()){thrownewIOException
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.isOpen()){thrownew
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=(OutputStream)this.cloned.clone();if(this.finished){for(inti=0;i<this.cloned;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.cloned;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.cloned;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpi}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<output.length;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.size();i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.open;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.getKey());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(Cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(cpioEntry!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEnt
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.open;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.open;out.flush();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.open;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().setCurrentName(this.closed,out);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().setCurrentName(this.null);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.finished){thrownewIOException("");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(!this.closed){thrownewIOException("Streamclosed:");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getValu()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.getValu
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getValu()+')'
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){for(inti=0;i<this.cloned;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){for(inti=0;i<this.closed;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.cloned;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.entryFormat,this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.zip);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.outputFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=(OutputStream)cpioEntry.getData();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{for(inti=0;i<this.closed;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{for(inti=0;i<this.closed;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{System.err.println("CpioArchiveOutputStreamclosed:"+this.cpioEntry.getName());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{System.err.println("Cpioclosed:"+this.cpioEntry.getName());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{for(inti=0;i<this.closed;i++){out.write('n');}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{System.err.println("CpioArchiveOutputStreamclosed:"+this.cpioEntry.getKey());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){for(inti=0;i<this.cloned;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned==null){for(inti=0;i<this.cloned;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){for(inti=0;i<this.finished;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null||this.finished){for(inti=0;i<this.cloned;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){out.close();}else{this.closed=true;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(!this.finished){out.close();}else{this.closed=true;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){out.close();}else{this.closed=false;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.next();++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write('n','n');
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.next();++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.next();++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<its.next();++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.getAnswer();++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<String,Object>it=names.entrySet().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<K,V>=it=names.entrySet().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111safeThan<=this.closed){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClass(this.getClass().getName());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpio
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpio>=
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream("UTF-8");this.closed=true;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry.clon
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry.clone
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111cpioEntry.ensureOpen();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEnt
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.getValue
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getValue)
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.next;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.getValues();++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next;++i){ensureOpen(i,"out");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<that.finished;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<that.getValue();++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<that.getSize();++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<out.length;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out.length;++i){ensureOpen(i,"out");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.getVal
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(cpioEntry.getVal());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=this.closed?cpioEntry.getOutputStream():null;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=cpioEntry.getOutputStream(this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed||this.finished){for(inti=0;i<this.open;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=(this.closed)?getOutputStream():null;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=(this.closed)?getOutputStream():this.closed;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=getOutputStream(this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.readOnly;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.readOnly!=null){for(inti=0;i<this.readOnly;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.readOnly!=null){for(inti=0;i<this.finished;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.open;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpio
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=this.closed?cpioEntry.getInputStream():null;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){for(inti=0;i<this.finished;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null||this.finished){for(inti=0;i<this.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloclosed;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){thrownewIOException("Streamclosed.n");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.getKey()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.getValue()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(",UTF-8");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream("UTF-16");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.clone){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.closed){thrownewIOException("Streamclosed.");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed||this.finished){for(inti=0;i<this.open;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.open;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().interrupt(this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().interrupt(this.clone);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().interrupt(this,closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newCpioArchiveOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(newOutputStreamWriter());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newCpioArchiveOutputStreamWriter();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen(this.null);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen(out);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<out;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.finished=true;}else{out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloclosed;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clocked;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){out.close();}else{out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.finished){for(inti=0;i<this.readOnly;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.finished){for(inti=0;i<this.open;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=1;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<that.finished;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<that.getValue();++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<that.getSize();++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=super.getOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setCurrentName(this.closed,out);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){for(inti=0;i<this.closed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){if(this.closed){for(inti=0;i<this.cloned;++i){ensureOpen();}}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=false){for(inti=0;i<this.cloned;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned==null){for(inti=0;i<this.cloned;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){for(inti=0;i<this.closed;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned==null){for(inti=0;i<this.closed;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(!cloned){thrownewIOException("Streamclosed");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newOutputStreamWriter(this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("ArchiveEntry.closed",this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("ArchiveEntry.closed:n");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEnt
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){for(inti=0;i<this.cloned;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned!=null){for(inti=0;i<this.closed;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.closed==
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("-n");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("]");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("Open");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<that.closed;i++){CpioArchiveEntrycpioEntry=this.closed;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.closed){thrownewIOException
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloclosed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.isOpen()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpio}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpio
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<out;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=cpioEntry.getCurrentSegment();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpio}')'
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpio+')'
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpio+')'expected
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setCurrentPath(this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newCpioArchiveEntry();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStreamWriter(System.out);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedReader();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedReader(newOutputStreamWriter());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=out.iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=cpioEntry.names.iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newPrintStream("UTF-8");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=getOutputStream(),this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=createOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.next;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next;i++){CpioArchiveEntrycpioEntry=newCpioArchiveEntry();out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next;i++){CpioArchiveEntrycpioEntry=this.closed;out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.closed){for(inti=0;i<that.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.clone){for(inti=0;i<that.clone;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().interrupt();if(this.closed){thrownewIOException("");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().interrupt();if(this.closed){this.closed=true;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().interrupt();if(this.closed){System.err.println("Cpioclosed:"+this.closed);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().interrupt();this.closed=true;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone();out.close
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<K,V>=out=names.entrySet().iterator().next();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<K,V>=out=this.closed.entrySet().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>entries=this.closed.iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().setCurrentName(this.close);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=1;i<out.length;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0,out.length;i<out.length;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){thrownewIOException("Streamclosed:"+this.closed);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.written);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<K,V>=it.next=names.entrySet().iterator().next();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<K,V>=it.next=names.entrySet().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.closed){for(inti=0;i<this.finished;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.compressed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111descarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarc
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111descarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcAsIO();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111descarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarc
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111descarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcsLogged();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111descarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcsOngoingArchive();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111descarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcs("Streamclosed=newIOException(");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111descarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcs
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=this.closed.getOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=cpioEntry.openArchiveOutputStream();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.entryFormat,this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.entryFormat,this.cloned);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(this.entryFormat,cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.cloned;out.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.cloned
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.cloned;out.close()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpio.getValue());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.open);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>entries=this.readOnly.entrySet().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.clone){for(inti=0;i<that.clone;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.clone){thrownewIOException("Streamclosed.");}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().reportError("Cpioclosed.");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.readOnly){for(inti=0;i<this.readOnly;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.readOnly){for(inti=0;i<this.finished;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.toString());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().intermediateThread();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().intermediateParent();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(newFileOutputStream(this.closed));
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(newFileOutputStream(this.appendCompletedFile));
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(cpi
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(cp
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(c
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.close
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=1;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(this.inputFormat);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newBufferedOutputStream(this.out,"UTF-8");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){outputStream.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;i++){break;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.open;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.clone();++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("noopensource");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("no-data");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111cpioEntry.close();out.write(cpioEntry.get
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(cpioEntry.getAbsolutePath());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<K,V>=this.closed=true;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<String,Object>it=this.closed;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<K,V==this.closed=true;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("no");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111ensureOpen(this.clone);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=1;i<out.length;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.closed;out.write(
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{for(inti=0;i<this.closed;++i){writeOpen(cpioEntry.getKey(),cpioEntry.getValue());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{for(inti=0;i<this.closed;++i){writeOpen(cpioEntry.getKey(),cpioEntry.getValue(),cpio
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{for(inti=0;i<this.closed;++i){writeOpen(cpioEntry.getImmediateParentPointer());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){this.closed=true;}else{for(inti=0;i<this.closed;++i){writeOpen(cpioEntry.getKey());}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEntry.closed}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next+1;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(0);if(cpioEnt
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.separator);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111descarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcdescarcsAngle("Streamclosed=newIOException("
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry.clone()
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.clone;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry.clone();out.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111OutputStreamout=newFileOutputStream(this.encoding);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().process(cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().getContextClassLoader().process(cpioEntry,this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.get();++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.getAnswer();++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry.equals}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.DEFAULT_OUTPUT);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111InputStreamout=getOutputStream();if(out!=null){for(inti=0;i<this.closed;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.clone!=null){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.clone
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111&&this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchive
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<this.open;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("ArchiveEntry.close",this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.append("ArchiveEntry.closed");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("ArchiveEntry.open");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<K,V==it.next=names.entrySet().iterator().next();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.next+1;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.getAnswer();i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111cpioEntry.enable(this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111cpioEntry.setOpen(true);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(CpioArchiveEntry.class,this.closed);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){CpioArchiveEntrycpioEntry=newCpioArchiveEntry(cpio);out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=1;i<that.closed;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<iterables.size();i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<K,V>=this.closed){for(inti=0;i<this.finished;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);if(cpioEntry
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(">");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write("=>");
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;--i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.cloned;++i){break;}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry.clone();out
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<out.length;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111This.closed=false;
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.closed;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.clone){for(inti=0;i<this.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.clone){for(inti=0;i<this.clone;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111while(this.cloned){for(inti=0;i<this.cloned;++i){ensureOpen(i);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.open;i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)cpioEntry.clone();out.
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.out.length;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.compressed;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;--i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<this.closed;++i){ensureOpen(i+1,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=1;i<out.length;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.remove();++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=it.next();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(CpioArchiveEntry.class);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().intermediateThread().setContextClassLoader(this);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Thread.currentThread().setContextClassLoader(cpioEntry);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<CpioArchiveEntry>names=this.cloned.entrySet().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.open!=null){for(inti=0;i<this.closed;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=1;i<that.closed;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.close;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(1);if(cpioEntry.isOpen()){out
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(cpioEntry.getClass().getName());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){if(this.names!=null){for(inti=0;i<this.names.size();++i){CpioArchiveEntrycpioEntry=(CpioArchive
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=1;i<this.open;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.open!=null){for(inti=0;i<this.open;++i){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.cloned){for(inti=0;i<out.length;i++){out.close();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.finished){for(inti=0;i<this.names.size();i++){CpioArchiveEntrycpioEntry=(CpioArchiveEntry)this.names.get(i);
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(".s.IFJDCS".charAt(i));
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(".s.IFJDCS".charAt(i).getLength());
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111out.write(".s.IFJDCS".charAt(i),'n');
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111if(this.closed){for(inti=0;i<it.close;++i){ensureOpen();}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<K,V>=this.closed){for(inti=0;i<this.finished;++i){ensureOpen(i,out);}
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<String,Object>entry=this.closed.entrySet().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<String,Object>it=this.closed.entrySet().iterator();
projects/Compress1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java111Iterator<Map.Entry<String,Object>entry=names.entrySet().iterator().next();
