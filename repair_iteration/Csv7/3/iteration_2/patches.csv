bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  header  =  this.headerMap.get(nextRecord);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.headerMap.get(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.headerMap.get(nextRecord);	  header    =    this.headerMap.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
2	[BUG]  [BUGGY]  header  =  this.headerMap.hashMap();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.headerMap.hashMap();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.headerMap.hashMap();	  header    =    this.headerMap.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
3	[BUG]  [BUGGY]  header  =  this.headerMap.toArray(new  String[this.headerMap.size()  ]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.headerMap.toArray(new  String[this.headerMap.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.headerMap.toArray(new  String[this.headerMap.size()  ]);	  header    =    this.headerMap.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
4	[BUG]  [BUGGY]  header  =  this.headerMap.toArray(new  String[recordNumber]);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.headerMap.toArray(new  String[recordNumber]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.headerMap.toArray(new  String[recordNumber]);	  header    =    this.headerMap.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
5	[BUG]  [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
6	[BUG]  [BUGGY]  rec  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  rec  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	rec  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
7	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  rec.nextRecord();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  rec.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  rec.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
8	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  this.nextRecord();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  this.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  this.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
9	[BUG]  [BUGGY]  nextRecord  =  nextRecord.nextRecord();  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  nextRecord  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	nextRecord  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
10	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  this.nextRecord  =  nextRecord.nextRecord();  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  this.nextRecord  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  this.nextRecord  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
11	[BUG]  [BUGGY]  header  =  this.header.getSkipHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.getSkipHeaderRecord();	  header    =    this.header.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
12	[BUG]  [BUGGY]  header  =  hdrMap.getHeader();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.getHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.getHeader();	  header    =    this.header.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
13	[BUG]  [BUGGY]  header  =  this.header.getHeader()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.getHeader()  +  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.getHeader()  +  1;	  header    =    this.header.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
14	[BUG]  [BUGGY]  header  =  this.header.getSkipHeader();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.getSkipHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.getSkipHeader();	  header    =    this.header.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
15	[BUG]  [BUGGY]  header  =  this.recordHeader.toArray(new  String[this.recordHeader.size()  ]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.recordHeader.toArray(new  String[this.recordHeader.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.recordHeader.toArray(new  String[this.recordHeader.size()  ]);	  header    =    nextRecord.toArray(new    String[this.recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
16	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[this.recordHeader.size()  +  1]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[this.recordHeader.size()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[this.recordHeader.size()  +  1]);	  header    =    nextRecord.toArray(new    String[this.recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
17	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[this.recordHeader.size()  -  1]);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[this.recordHeader.size()  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[this.recordHeader.size()  -  1]);	  header    =    nextRecord.toArray(new    String[this.recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
18	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[headers.size()  -  1]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[headers.size()  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[headers.size()  -  1]);	  header    =    nextRecord.toArray(new    String[headers.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
19	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[headers.size()  +  1]);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[headers.size()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[headers.size()  +  1]);	  header    =    nextRecord.toArray(new    String[headers.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
20	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[this.headers.size()  ]);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[this.headers.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[this.headers.size()  ]);	  header    =    nextRecord.toArray(new    String[headers.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
21	[BUG]  [BUGGY]  header  =  this.format.toString()  + ", "  +  nextRecord.getSkipHeaderRecord();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toString()  + ", "  +  nextRecord.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toString()  + ", "  +  nextRecord.getSkipHeaderRecord();	  header    =    nextRecord.toString()    +   ",   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
22	[BUG]  [BUGGY]  header  =  rec.toString()  + ",   "  +  this.format.getSkipHeaderRecord();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  rec.toString()  + ",   "  +  this.format.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.toString()  + ",   "  +  this.format.getSkipHeaderRecord();	  header    =    nextRecord.toString()    +   ",   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
23	[BUG]  [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.length  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.length  -  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  +  formatHeader.length  -  1;	  header    =    nextRecord.toString()    +    formatHeader.length;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
24	[BUG]  [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.length  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.length  +  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  +  formatHeader.length  +  1;	  header    =    nextRecord.toString()    +    formatHeader.length;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
25	[BUG]  [BUGGY]  header  =  nextRecord.toString()  /  formatHeader.length;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  /  formatHeader.length;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  /  formatHeader.length;	  header    =    nextRecord.toString()    +    formatHeader.length;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
26	[BUG]  [BUGGY]  header  =  formatHeader.toString()  +  nextRecord.length;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  formatHeader.toString()  +  nextRecord.length;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  formatHeader.toString()  +  nextRecord.length;	  header    =    nextRecord.toString()    +    formatHeader.length;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
27	[BUG]  [BUGGY]  header  =  nextRecord.toString()  *  formatHeader.length;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  *  formatHeader.length;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  *  formatHeader.length;	  header    =    nextRecord.toString()    +    formatHeader.length;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
28	[BUG]  [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.length  -  2;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.length  -  2;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  +  formatHeader.length  -  2;	  header    =    nextRecord.toString()    +    formatHeader.length;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
29	[BUG]  [BUGGY]  hdrMap.put(rec,  new  CSVRecord(nextRecord));  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(rec,  new  CSVRecord(nextRecord));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(rec,  new  CSVRecord(nextRecord));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
30	[BUG]  [BUGGY]  hdrMap.put(rec,  new  CSVRecord(header));  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(rec,  new  CSVRecord(header));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(rec,  new  CSVRecord(header));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
31	[BUG]  [BUGGY]  hdrMap.put(header,  new  CSVRecord(rec));  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header,  new  CSVRecord(rec));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  new  CSVRecord(rec));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
32	[BUG]  [BUGGY]  hdrMap.put(header,  new  CSVRecord(currentRecord));  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header,  new  CSVRecord(currentRecord));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  new  CSVRecord(currentRecord));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
33	[BUG]  [BUGGY]  hdrMap.put(nextRecord,  new  CSVRecord(header));  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(nextRecord,  new  CSVRecord(header));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(nextRecord,  new  CSVRecord(header));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
34	[BUG]  [BUGGY]  hdrMap.put(header,  new  CSVRecord(this.format.getSkipHeaderRecord()));  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header,  new  CSVRecord(this.format.getSkipHeaderRecord()));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  new  CSVRecord(this.format.getSkipHeaderRecord()));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
35	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[nextRecord.size()  ]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[nextRecord.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[nextRecord.size()  ]);	  header    =    hdrMap.toArray(new    String[recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
36	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[recordHeader.size()  +  1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[recordHeader.size()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[recordHeader.size()  +  1]);	  header    =    hdrMap.toArray(new    String[recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
37	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[recordHeader.size()  -  1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[recordHeader.size()  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[recordHeader.size()  -  1]);	  header    =    hdrMap.toArray(new    String[recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
38	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[recordHeader.length()  ]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[recordHeader.length()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[recordHeader.length()  ]);	  header    =    hdrMap.toArray(new    String[recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
39	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  -  2]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  -  2]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber  -  2]);	  header    =    nextRecord.toArray(new    String[recordNumber    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
40	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  *  1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  *  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber  *  1]);	  header    =    nextRecord.toArray(new    String[recordNumber    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
41	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  -  1]  +  formatHeader);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  -  1]  +  formatHeader);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber  -  1]  +  formatHeader);	  header    =    nextRecord.toArray(new    String[recordNumber    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
42	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[formatHeader.length  -  1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[formatHeader.length  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[formatHeader.length  -  1]);	  header    =    nextRecord.toArray(new    String[recordNumber    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
43	[BUG]  [BUGGY]  header  =  nextRecord.header()  /  formatHeader;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  /  formatHeader;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  /  formatHeader;	  header    =    nextRecord.header()    +    formatHeader;    	non-compiled	[CE]  not  a  statement	74	None	replace
44	[BUG]  [BUGGY]  header  =  nextRecord.header()  *  formatHeader;  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  *  formatHeader;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  *  formatHeader;	  header    =    nextRecord.header()    +    formatHeader;    	non-compiled	[CE]  >  expected	74	None	replace
45	[BUG]  [BUGGY]  header  =  nextRecord.header()  -  formatHeader;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  -  formatHeader;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  -  formatHeader;	  header    =    nextRecord.header()    +    formatHeader;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
46	[BUG]  [BUGGY]  header  =  nextRecord.header()  +  formatHeader.trim();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  +  formatHeader.trim();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  +  formatHeader.trim();	  header    =    nextRecord.header()    +    formatHeader;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
47	[BUG]  [BUGGY]  header  =  nextRecord.header()  +  formatHeader.charAt(i);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  +  formatHeader.charAt(i);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  +  formatHeader.charAt(i);	  header    =    nextRecord.header()    +    formatHeader;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
48	[BUG]  [BUGGY]  header  =  hdrMap.hdrMap(record);  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.hdrMap(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.hdrMap(record);	  header    =    nextRecord.hdrMap(record);    	non-compiled	[CE]  >  expected	57	None	replace
49	[BUG]  [BUGGY]  header  =  nextRecord.hdrMap(this.format);  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.hdrMap(this.format);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.hdrMap(this.format);	  header    =    nextRecord.hdrMap(record);    	non-compiled	[CE]  >  expected	57	None	replace
50	[BUG]  [BUGGY]  header  =  nextRecord.hdrMap(this.format.getSkipHeaderRecord());  [CE]  >  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.hdrMap(this.format.getSkipHeaderRecord());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.hdrMap(this.format.getSkipHeaderRecord());	  header    =    nextRecord.hdrMap(record);    	non-compiled	[CE]  >  expected	57	None	replace
51	[BUG]  [BUGGY]  header  =  nextRecord.hdrMap(this.format,  record);  [CE]  >  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.hdrMap(this.format,  record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.hdrMap(this.format,  record);	  header    =    nextRecord.hdrMap(record);    	non-compiled	[CE]  >  expected	57	None	replace
52	[BUG]  [BUGGY]  header  =  nextRecord.hdrMap(header);  [CE]  >  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.hdrMap(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.hdrMap(header);	  header    =    nextRecord.hdrMap(record);    	non-compiled	[CE]  >  expected	57	None	replace
53	[BUG]  [BUGGY]  header  =  nextRecord.header(this.format);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(this.format);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(this.format);	  header    =    nextRecord.header(rec);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
54	[BUG]  [BUGGY]  header  =  nextRecord.header(record);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(record);	  header    =    nextRecord.header(rec);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
55	[BUG]  [BUGGY]  header  =  nextRecord.header(hdrMap);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(hdrMap);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(hdrMap);	  header    =    nextRecord.header(rec);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
56	[BUG]  [BUGGY]  header  =  nextRecord.header(this.format,  rec);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(this.format,  rec);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(this.format,  rec);	  header    =    nextRecord.header(rec);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
57	[BUG]  [BUGGY]  header  =  nextRecord.header(rec,  hdrMap);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(rec,  hdrMap);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(rec,  hdrMap);	  header    =    nextRecord.header(rec);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
58	[BUG]  [BUGGY]  header  =  nextRecord.header(this.format,  hdrMap);  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(this.format,  hdrMap);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(this.format,  hdrMap);	  header    =    nextRecord.header(rec);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
59	[BUG]  [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
60	[BUG]  [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
61	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.header.getHeader();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.header.getHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.header.getHeader();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
62	[BUG]  [BUGGY]  if(header!=  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  if(header!=  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();  }  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	if(header!=  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();  }	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
63	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.getHeader();  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.getHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.getHeader();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
64	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  currentRecord.getHeader();  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  currentRecord.getHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  currentRecord.getHeader();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
65	[BUG]  [BUGGY]  header  =  this.format.getSkipHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getSkipHeaderRecord();	  header    =    this.format.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
66	[BUG]  [BUGGY]  header  =  this.format.getHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getHeaderRecord();	  header    =    this.format.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
67	[BUG]  [BUGGY]  header  =  this.format.getHeader(recordNumber);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getHeader(recordNumber);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getHeader(recordNumber);	  header    =    this.format.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
68	[BUG]  [BUGGY]  header  =  this.format.getHeader(record);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getHeader(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getHeader(record);	  header    =    this.format.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
69	[BUG]  [BUGGY]  header  =  nextRecord.record();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.record();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.record();	  header    =    this.header.record();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
70	[BUG]  [BUGGY]  header  =  this.header.record(nextRecord);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.record(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.record(nextRecord);	  header    =    this.header.record();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
71	[BUG]  [BUGGY]  header  =  hdrMap.record(nextRecord);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.record(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.record(nextRecord);	  header    =    this.header.record();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
72	[BUG]  [BUGGY]  header  =  this.header.record(nextRecord,  i);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.record(nextRecord,  i);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.record(nextRecord,  i);	  header    =    this.header.record();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
73	[BUG]  [BUGGY]  header  =  hdrMap.record();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.record();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.record();	  header    =    this.header.record();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
74	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[header.size()  -  1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[header.size()  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[header.size()  -  1]);	  header    =    hdrMap.toArray(new    String[header.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
75	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[headers.size()  ]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[headers.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[headers.size()  ]);	  header    =    hdrMap.toArray(new    String[header.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
76	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[header.size()  +  1]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[header.size()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[header.size()  +  1]);	  header    =    hdrMap.toArray(new    String[header.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
77	[BUG]  [BUGGY]  header  =  this.nextRecord.hashMap();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.hashMap();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.hashMap();	  header    =    this.nextRecord.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
78	[BUG]  [BUGGY]  header  =  this.nextRecord.hdrMap()  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.hdrMap()  +  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.hdrMap()  +  1;	  header    =    this.nextRecord.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
79	[BUG]  [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  ==  0);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  ==  0);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  ==  0);	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
80	[BUG]  [BUGGY]  header  =  nextRecord.header()  ||  this.format.getSkipHeaderRecord().length  >  0);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  ||  this.format.getSkipHeaderRecord().length  >  0);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  ||  this.format.getSkipHeaderRecord().length  >  0);	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
81	[BUG]  [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >=  0);  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >=  0);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >=  0);	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
82	[BUG]  [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length!=  0);  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length!=  0);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length!=  0);	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
83	[BUG]  [BUGGY]  header  =  nextRecord.header()  &&  this.format.getHeaderRecord().length  >  0);  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  &&  this.format.getHeaderRecord().length  >  0);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  &&  this.format.getHeaderRecord().length  >  0);	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
84	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  1]);	  header    =    nextRecord.toArray(new    String[record.size()    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
85	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  *  1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  *  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  *  1]);	  header    =    nextRecord.toArray(new    String[record.size()    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
86	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  2]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  2]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  2]);	  header    =    nextRecord.toArray(new    String[record.size()    +    1]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
87	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[nextRecord.size()]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[nextRecord.size()]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[nextRecord.size()]);	  header    =    nextRecord.toArray(new    String[record.size()    +    1]);    	non-compiled	[CE]  :  expected	30	None	replace
88	[BUG]  [BUGGY]  header  =  this.nextRecord.toString()  + ", "  +  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.toString()  + ", "  +  this.format.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.toString()  + ", "  +  this.format.getSkipHeaderRecord();	  header    =    this.nextRecord.toString();    	non-compiled	[CE]  :  expected	81	None	replace
89	[BUG]  [BUGGY]  header  =  this.nextRecord.toString()  + ": "  +  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.toString()  + ": "  +  this.format.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.toString()  + ": "  +  this.format.getSkipHeaderRecord();	  header    =    this.nextRecord.toString();    	non-compiled	[CE]  :  expected	81	None	replace
90	[BUG]  [BUGGY]  header  =  this.nextRecord.toString()  + "  - "  +  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.toString()  + "  - "  +  this.format.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.toString()  + "  - "  +  this.format.getSkipHeaderRecord();	  header    =    this.nextRecord.toString();    	non-compiled	[CE]  :  expected	81	None	replace
91	[BUG]  [BUGGY]  header  =  this.nextRecord.toString()  +  1;  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.toString()  +  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.toString()  +  1;	  header    =    this.nextRecord.toString();    	non-compiled	[CE]  :  expected	81	None	replace
92	[BUG]  [BUGGY]  header  =  this.header.hashMap();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.hashMap();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.hashMap();	  header    =    this.header.hdrMap();    	non-compiled	[CE]  :  expected	54	None	replace
93	[BUG]  [BUGGY]  header  =  this.header.hdrMap(record);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.hdrMap(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.hdrMap(record);	  header    =    this.header.hdrMap();    	non-compiled	[CE]  :  expected	54	None	replace
94	[BUG]  [BUGGY]  header  =  this.header.hdrMap(nextRecord);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.hdrMap(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.hdrMap(nextRecord);	  header    =    this.header.hdrMap();    	non-compiled	[CE]  :  expected	54	None	replace
95	[BUG]  [BUGGY]  header  =  nextRecord.getHeader(record);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getHeader(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getHeader(record);	  header    =    nextRecord.getHeader(rec);    	non-compiled	[CE]  :  expected	6	None	replace
96	[BUG]  [BUGGY]  header  =  nextRecord.getHeader(this.format);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getHeader(this.format);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getHeader(this.format);	  header    =    nextRecord.getHeader(rec);    	non-compiled	[CE]  :  expected	6	None	replace
97	[BUG]  [BUGGY]  header  =  nextRecord.getHeader(header);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getHeader(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getHeader(header);	  header    =    nextRecord.getHeader(rec);    	non-compiled	[CE]  :  expected	6	None	replace
98	[BUG]  [BUGGY]  header  =  nextRecord.getHeader(this.format,  rec);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getHeader(this.format,  rec);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getHeader(this.format,  rec);	  header    =    nextRecord.getHeader(rec);    	non-compiled	[CE]  :  expected	6	None	replace
99	[BUG]  [BUGGY]  header  =  nextRecord.getHeader(hdrMap);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getHeader(hdrMap);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getHeader(hdrMap);	  header    =    nextRecord.getHeader(rec);    	non-compiled	[CE]  :  expected	6	None	replace
100	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber++],  header);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber++],  header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber++],  header);	  header    =    nextRecord.toArray(new    String[recordNumber++]);    	non-compiled	[CE]  :  expected	46	None	replace
101	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber++]  +  1);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber++]  +  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber++]  +  1);	  header    =    nextRecord.toArray(new    String[recordNumber++]);    	non-compiled	[CE]  :  expected	46	None	replace
102	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber++]  +  formatHeader);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber++]  +  formatHeader);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber++]  +  formatHeader);	  header    =    nextRecord.toArray(new    String[recordNumber++]);    	non-compiled	[CE]  :  expected	46	None	replace
103	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[recordNumber++]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[recordNumber++]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[recordNumber++]);	  header    =    nextRecord.toArray(new    String[recordNumber++]);    	non-compiled	[CE]  :  expected	46	None	replace
104	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber++]),  header);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber++]),  header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber++]),  header);	  header    =    nextRecord.toArray(new    String[recordNumber++]);    	non-compiled	[CE]  :  expected	46	None	replace
105	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  +  formatHeader.length  ]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  +  formatHeader.length  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  +  formatHeader.length  ]);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    formatHeader);    	non-compiled	[CE]  :  expected	33	None	replace
106	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  formatHeader,  header);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  formatHeader,  header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  ]  +  formatHeader,  header);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    formatHeader);    	non-compiled	[CE]  :  expected	33	None	replace
107	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  *  formatHeader.length  ]  +  formatHeader);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  *  formatHeader.length  ]  +  formatHeader);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  *  formatHeader.length  ]  +  formatHeader);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    formatHeader);    	non-compiled	[CE]  :  expected	33	None	replace
108	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  +  formatHeader.length  -  1]);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  +  formatHeader.length  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  +  formatHeader.length  -  1]);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    formatHeader);    	non-compiled	[CE]  :  expected	33	None	replace
109	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  formatHeader,  this.format);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  formatHeader,  this.format);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  ]  +  formatHeader,  this.format);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    formatHeader);    	non-compiled	[CE]  :  expected	33	None	replace
110	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  formatHeader,  header.length);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  formatHeader,  header.length);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  ]  +  formatHeader,  header.length);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    formatHeader);    	non-compiled	[CE]  :  expected	33	None	replace
111	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[record.size()  -  1]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[record.size()  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[record.size()  -  1]);	  header    =    hdrMap.toArray(new    String[record.size()    ]);    	non-compiled	[CE]  :  expected	31	None	replace
112	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[record.size()  +  1]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[record.size()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[record.size()  +  1]);	  header    =    hdrMap.toArray(new    String[record.size()    ]);    	non-compiled	[CE]  :  expected	31	None	replace
113	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[formatHeader.size()]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[formatHeader.size()]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[formatHeader.size()]);	  header    =    nextRecord.toArray(new    String[recordHeader.size()    -    1]);    	non-compiled	[CE]  :  expected	35	None	replace
114	[BUG]  [BUGGY]  header  =  this.format.toString()  + ": "  +  nextRecord.getSkipHeaderRecord();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toString()  + ": "  +  nextRecord.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toString()  + ": "  +  nextRecord.getSkipHeaderRecord();	  header    =    nextRecord.toString()    +   ":   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	41	None	replace
115	[BUG]  [BUGGY]  header  =  nextRecord.toString()  + ": "  +  this.format.getHeaderRecord();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  + ": "  +  this.format.getHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  + ": "  +  this.format.getHeaderRecord();	  header    =    nextRecord.toString()    +   ":   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	41	None	replace
116	[BUG]  [BUGGY]  header  =  rec.toString()  + ": "  +  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  rec.toString()  + ": "  +  this.format.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.toString()  + ": "  +  this.format.getSkipHeaderRecord();	  header    =    nextRecord.toString()    +   ":   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	41	None	replace
117	[BUG]  [BUGGY]  header  =  formatHeader.toString()  + ": "  +  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  formatHeader.toString()  + ": "  +  this.format.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  formatHeader.toString()  + ": "  +  this.format.getSkipHeaderRecord();	  header    =    nextRecord.toString()    +   ":   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	41	None	replace
118	[BUG]  [BUGGY]  header  =  this.format.getSkipHeaderRecord()  + ": "  +  nextRecord.toString();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getSkipHeaderRecord()  + ": "  +  nextRecord.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getSkipHeaderRecord()  + ": "  +  nextRecord.toString();	  header    =    nextRecord.toString()    +   ":   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	41	None	replace
119	[BUG]  [BUGGY]  header  =  nextRecord.toString()  + ",: "  +  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  + ",: "  +  this.format.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  + ",: "  +  this.format.getSkipHeaderRecord();	  header    =    nextRecord.toString()    +   ":   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	41	None	replace
120	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length());	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.substring(0,    nextRecord.length());    	non-compiled	[CE]  :  expected	59	None	replace
121	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length()  -  1);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length()  -  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length()  -  1);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.substring(0,    nextRecord.length());    	non-compiled	[CE]  :  expected	59	None	replace
122	[BUG]  [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length());  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length());	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.substring(0,    nextRecord.length());    	non-compiled	[CE]  :  expected	59	None	replace
123	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length()  -  1);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length()  -  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length()  -  1);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.substring(0,    nextRecord.length());    	non-compiled	[CE]  :  expected	59	None	replace
124	[BUG]  [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length());  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length());	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.substring(0,    nextRecord.length());    	non-compiled	[CE]  :  expected	59	None	replace
125	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length()  +  1);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length()  +  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length()  +  1);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.substring(0,    nextRecord.length());    	non-compiled	[CE]  :  expected	59	None	replace
126	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  header.length());  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  header.length());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  header.length());	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.substring(0,    nextRecord.length());    	non-compiled	[CE]  :  expected	59	None	replace
127	[BUG]  [BUGGY]  header  =  this.format.header(),  nextRecord.getSkipHeaderRecord());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.header(),  nextRecord.getSkipHeaderRecord());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.header(),  nextRecord.getSkipHeaderRecord());	  header    =    nextRecord.header(),    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	7	None	replace
128	[BUG]  [BUGGY]  header  =  nextRecord.header(),  this.format.getHeaderRecord());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(),  this.format.getHeaderRecord());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(),  this.format.getHeaderRecord());	  header    =    nextRecord.header(),    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	7	None	replace
129	[BUG]  [BUGGY]  header  =  nextRecord.header(),  formatHeader.getSkipHeaderRecord());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(),  formatHeader.getSkipHeaderRecord());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(),  formatHeader.getSkipHeaderRecord());	  header    =    nextRecord.header(),    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	7	None	replace
130	[BUG]  [BUGGY]  header  =  nextRecord.header(),  this.format.getSkipHeaderRecord(),  hdrMap);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(),  this.format.getSkipHeaderRecord(),  hdrMap);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(),  this.format.getSkipHeaderRecord(),  hdrMap);	  header    =    nextRecord.header(),    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	7	None	replace
131	[BUG]  [BUGGY]  header  =  rec.header(),  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  rec.header(),  this.format.getSkipHeaderRecord());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.header(),  this.format.getSkipHeaderRecord());	  header    =    nextRecord.header(),    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	7	None	replace
132	[BUG]  [BUGGY]  header  =  nextRecord.header(),  this.format.getSkipHeaderRecord()  +  1);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(),  this.format.getSkipHeaderRecord()  +  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(),  this.format.getSkipHeaderRecord()  +  1);	  header    =    nextRecord.header(),    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	7	None	replace
133	[BUG]  [BUGGY]  header  =  hdrMap.header(nextRecord);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.header(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.header(nextRecord);	  header    =    hdrMap.header();    	non-compiled	[CE]  :  expected	85	None	replace
134	[BUG]  [BUGGY]  header  =  hdrMap.nextRecord();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.nextRecord();	  header    =    hdrMap.header();    	non-compiled	[CE]  :  expected	85	None	replace
135	[BUG]  [BUGGY]  header  =  hdrMap.recordHeader();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.recordHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.recordHeader();	  header    =    hdrMap.header();    	non-compiled	[CE]  :  expected	85	None	replace
136	[BUG]  [BUGGY]  header  =  hdrMap.header(record);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.header(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.header(record);	  header    =    hdrMap.header();    	non-compiled	[CE]  :  expected	85	None	replace
137	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.size()  1]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.size()  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordHeader.size()  1]);	  header    =    nextRecord.toArray(new    String[recordHeader.size()    +    1]);    	non-compiled	[CE]  :  expected	36	None	replace
138	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.size()  *  1]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.size()  *  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordHeader.size()  *  1]);	  header    =    nextRecord.toArray(new    String[recordHeader.size()    +    1]);    	non-compiled	[CE]  :  expected	36	None	replace
139	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.size()  2]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.size()  2]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordHeader.size()  2]);	  header    =    nextRecord.toArray(new    String[recordHeader.size()    +    1]);    	non-compiled	[CE]  :  expected	36	None	replace
140	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.length()  ]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.length()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.length()  ]);	  header    =    nextRecord.toArray(new    String[rec.length()    ]);    	non-compiled	[CE]  :  expected	51	None	replace
141	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[rec.length()  +  1]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[rec.length()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[rec.length()  +  1]);	  header    =    nextRecord.toArray(new    String[rec.length()    ]);    	non-compiled	[CE]  :  expected	51	None	replace
142	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[rec.length()  -  1]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[rec.length()  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[rec.length()  -  1]);	  header    =    nextRecord.toArray(new    String[rec.length()    ]);    	non-compiled	[CE]  :  expected	51	None	replace
143	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.length()  +  1]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.length()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.length()  +  1]);	  header    =    nextRecord.toArray(new    String[rec.length()    ]);    	non-compiled	[CE]  :  expected	51	None	replace
144	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[rec.length()  0]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[rec.length()  0]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[rec.length()  0]);	  header    =    nextRecord.toArray(new    String[rec.length()    ]);    	non-compiled	[CE]  :  expected	51	None	replace
145	[BUG]  [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =(String[])hdrMap.get(header);    	non-compiled	[CE]  :  expected	89	None	replace
146	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])headerMap.get(nextRecord);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])headerMap.get(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])headerMap.get(nextRecord);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =(String[])hdrMap.get(header);    	non-compiled	[CE]  :  expected	89	None	replace
147	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])nextRecord.get(header);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])nextRecord.get(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])nextRecord.get(header);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =(String[])hdrMap.get(header);    	non-compiled	[CE]  :  expected	89	None	replace
148	[BUG]  [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =(String[])hdrMap.get(header);    	non-compiled	[CE]  :  expected	89	None	replace
149	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])this.headerMap.get(header);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])this.headerMap.get(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])this.headerMap.get(header);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =(String[])hdrMap.get(header);    	non-compiled	[CE]  :  expected	89	None	replace
150	[BUG]  [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])headerMap.get(header);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])headerMap.get(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])headerMap.get(header);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =(String[])hdrMap.get(header);    	non-compiled	[CE]  :  expected	89	None	replace
151	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])headers.get(header);  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])headers.get(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])headers.get(header);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =(String[])hdrMap.get(header);    	non-compiled	[CE]  :  expected	89	None	replace
152	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[nextRecord.length]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[nextRecord.length]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[nextRecord.length]);	  header    =    hdrMap.toArray(new    String[recordNumber]);    	non-compiled	[CE]  :  expected	68	None	replace
153	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[recordNumber  +  1]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[recordNumber  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[recordNumber  +  1]);	  header    =    hdrMap.toArray(new    String[recordNumber]);    	non-compiled	[CE]  :  expected	68	None	replace
154	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[recordHeader.length]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[recordHeader.length]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[recordHeader.length]);	  header    =    hdrMap.toArray(new    String[recordNumber]);    	non-compiled	[CE]  :  expected	68	None	replace
155	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[recordRecord.length]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[recordRecord.length]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[recordRecord.length]);	  header    =    hdrMap.toArray(new    String[recordNumber]);    	non-compiled	[CE]  :  expected	68	None	replace
156	[BUG]  [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  ==  0;  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  ==  0;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  ==  0;	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0;    	non-compiled	[CE]  :  expected	9	None	replace
157	[BUG]  [BUGGY]  header  =  nextRecord.header()  ||  this.format.getSkipHeaderRecord().length  >  0;  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  ||  this.format.getSkipHeaderRecord().length  >  0;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  ||  this.format.getSkipHeaderRecord().length  >  0;	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0;    	non-compiled	[CE]  :  expected	9	None	replace
158	[BUG]  [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >  1;  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >  1;	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0;    	non-compiled	[CE]  :  expected	9	None	replace
159	[BUG]  [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length!=  0;  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length!=  0;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length!=  0;	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0;    	non-compiled	[CE]  :  expected	9	None	replace
160	[BUG]  [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >=  0;  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >=  0;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >=  0;	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0;    	non-compiled	[CE]  :  expected	9	None	replace
161	[BUG]  [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  <  =  0;  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  <  =  0;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  <  =  0;	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0;    	non-compiled	[CE]  :  expected	9	None	replace
162	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.size()  +  1]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.size()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[this.format.size()  +  1]);	  header    =    nextRecord.toArray(new    String[this.format.size()    ]);    	non-compiled	[CE]  :  expected	79	None	replace
163	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.size()  -  1]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.size()  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[this.format.size()  -  1]);	  header    =    nextRecord.toArray(new    String[this.format.size()    ]);    	non-compiled	[CE]  :  expected	79	None	replace
164	[BUG]  [BUGGY]  hdrMap.put(rec,  nextRecord);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(rec,  nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(rec,  nextRecord);	  hdrMap.put(header,    nextRecord);    	non-compiled	[CE]  :  expected	14	None	replace
165	[BUG]  [BUGGY]  hdrMap.put(header,  rec);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header,  rec);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  rec);	  hdrMap.put(header,    nextRecord);    	non-compiled	[CE]  :  expected	14	None	replace
166	[BUG]  [BUGGY]  hdrMap.put(nextRecord,  header);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(nextRecord,  header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(nextRecord,  header);	  hdrMap.put(header,    nextRecord);    	non-compiled	[CE]  :  expected	14	None	replace
167	[BUG]  [BUGGY]  hdrMap.put(header,  currentRecord);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header,  currentRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  currentRecord);	  hdrMap.put(header,    nextRecord);    	non-compiled	[CE]  :  expected	14	None	replace
168	[BUG]  [BUGGY]  hdrMap.put(header,  formatHeader);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header,  formatHeader);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  formatHeader);	  hdrMap.put(header,    nextRecord);    	non-compiled	[CE]  :  expected	14	None	replace
169	[BUG]  [BUGGY]  header  =  this.format.toString()  + "  - "  +  nextRecord.getSkipHeaderRecord();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toString()  + "  - "  +  nextRecord.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toString()  + "  - "  +  nextRecord.getSkipHeaderRecord();	  header    =    nextRecord.toString()    +   "    -   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	66	None	replace
170	[BUG]  [BUGGY]  header  =  nextRecord.toString()  + "  - "  +  this.format.getHeaderRecord();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  + "  - "  +  this.format.getHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  + "  - "  +  this.format.getHeaderRecord();	  header    =    nextRecord.toString()    +   "    -   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	66	None	replace
171	[BUG]  [BUGGY]  header  =  nextRecord.toString()  + ",  - "  +  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  + ",  - "  +  this.format.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  + ",  - "  +  this.format.getSkipHeaderRecord();	  header    =    nextRecord.toString()    +   "    -   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	66	None	replace
172	[BUG]  [BUGGY]  header  =  formatHeader.toString()  + "  - "  +  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  formatHeader.toString()  + "  - "  +  this.format.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  formatHeader.toString()  + "  - "  +  this.format.getSkipHeaderRecord();	  header    =    nextRecord.toString()    +   "    -   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	66	None	replace
173	[BUG]  [BUGGY]  header  =  rec.toString()  + "  - "  +  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  rec.toString()  + "  - "  +  this.format.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.toString()  + "  - "  +  this.format.getSkipHeaderRecord();	  header    =    nextRecord.toString()    +   "    -   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	66	None	replace
174	[BUG]  [BUGGY]  header  =  nextRecord.toString()  + "  - "  +  formatHeader.getSkipHeaderRecord();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  + "  - "  +  formatHeader.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  + "  - "  +  formatHeader.getSkipHeaderRecord();	  header    =    nextRecord.toString()    +   "    -   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	66	None	replace
175	[BUG]  [BUGGY]  header  =  this.format.toString()  + ", "  +  nextRecord.getHeaderRecord();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toString()  + ", "  +  nextRecord.getHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toString()  + ", "  +  nextRecord.getHeaderRecord();	  header    =    nextRecord.toString()    +   ",   "    +    this.format.getHeaderRecord();    	non-compiled	[CE]  :  expected	67	None	replace
176	[BUG]  [BUGGY]  header  =  this.format.getHeaderRecord()  + ", "  +  nextRecord.toString();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getHeaderRecord()  + ", "  +  nextRecord.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getHeaderRecord()  + ", "  +  nextRecord.toString();	  header    =    nextRecord.toString()    +   ",   "    +    this.format.getHeaderRecord();    	non-compiled	[CE]  :  expected	67	None	replace
177	[BUG]  [BUGGY]  header  =  rec.toString()  + ",   "  +  this.format.getHeaderRecord();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  rec.toString()  + ",   "  +  this.format.getHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.toString()  + ",   "  +  this.format.getHeaderRecord();	  header    =    nextRecord.toString()    +   ",   "    +    this.format.getHeaderRecord();    	non-compiled	[CE]  :  expected	67	None	replace
178	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  rec.nextRecord();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  rec.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  rec.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    currentRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	18	None	replace
179	[BUG]  [BUGGY]  rec  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  rec  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	rec  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    currentRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	18	None	replace
180	[BUG]  [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    currentRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	18	None	replace
181	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  this.currentRecord.nextRecord();  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  this.currentRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  this.currentRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    currentRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	18	None	replace
182	[BUG]  [BUGGY]  currentRecord  =  nextRecord.nextRecord();  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  currentRecord  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	currentRecord  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    currentRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	18	None	replace
183	[BUG]  [BUGGY]  nextRecord  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  nextRecord  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	nextRecord  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    currentRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	18	None	replace
184	[BUG]  [BUGGY]  header  =  nextRecord.initializeHeader(header);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.initializeHeader(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.initializeHeader(header);	  header    =    nextRecord.initializeHeader(record);    	non-compiled	[CE]  :  expected	72	None	replace
185	[BUG]  [BUGGY]  header  =  nextRecord.initializeHeader(rec);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.initializeHeader(rec);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.initializeHeader(rec);	  header    =    nextRecord.initializeHeader(record);    	non-compiled	[CE]  :  expected	72	None	replace
186	[BUG]  [BUGGY]  header  =  nextRecord.initializeHeader(this.format);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.initializeHeader(this.format);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.initializeHeader(this.format);	  header    =    nextRecord.initializeHeader(record);    	non-compiled	[CE]  :  expected	72	None	replace
187	[BUG]  [BUGGY]  header  =  nextRecord.initializeHeader(hdrMap);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.initializeHeader(hdrMap);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.initializeHeader(hdrMap);	  header    =    nextRecord.initializeHeader(record);    	non-compiled	[CE]  :  expected	72	None	replace
188	[BUG]  [BUGGY]  header  =  nextRecord.initializeHeader(this.format,  record);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.initializeHeader(this.format,  record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.initializeHeader(this.format,  record);	  header    =    nextRecord.initializeHeader(record);    	non-compiled	[CE]  :  expected	72	None	replace
189	[BUG]  [BUGGY]  header  =  nextRecord.initializeHeader(record,  header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.initializeHeader(record,  header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.initializeHeader(record,  header);	  header    =    nextRecord.initializeHeader(record);    	non-compiled	[CE]  :  expected	72	None	replace
190	[BUG]  [BUGGY]  header  =  this.header.substring(0,  this.header.length()  -  1);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.substring(0,  this.header.length()  -  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.substring(0,  this.header.length()  -  1);	  header    =    this.header.toString();    	non-compiled	[CE]  :  expected	82	None	replace
191	[BUG]  [BUGGY]  header  =  hdrMap.toString();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toString();	  header    =    this.header.toString();    	non-compiled	[CE]  :  expected	82	None	replace
192	[BUG]  [BUGGY]  header  =  this.header.toString()  +  1;  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.toString()  +  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.toString()  +  1;	  header    =    this.header.toString();    	non-compiled	[CE]  :  expected	82	None	replace
193	[BUG]  [BUGGY]  header  =  this.header.toString()  +  formatHeader.length;  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.toString()  +  formatHeader.length;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.toString()  +  formatHeader.length;	  header    =    this.header.toString();    	non-compiled	[CE]  :  expected	82	None	replace
194	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length()  +  1]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordHeader.length()  +  1]);	  header    =    nextRecord.toArray(new    String[recordHeader.length()    ]);    	non-compiled	[CE]  :  expected	37	None	replace
195	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length()  -  1]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length()  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordHeader.length()  -  1]);	  header    =    nextRecord.toArray(new    String[recordHeader.length()    ]);    	non-compiled	[CE]  :  expected	37	None	replace
196	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[formatHeader.length()  ]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[formatHeader.length()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[formatHeader.length()  ]);	  header    =    nextRecord.toArray(new    String[recordHeader.length()    ]);    	non-compiled	[CE]  :  expected	37	None	replace
197	[BUG]  [BUGGY]  header  =  nextRecord.toString()  /  formatHeader;  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  /  formatHeader;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  /  formatHeader;	  header    =    nextRecord.toString()    +    formatHeader;    	non-compiled	[CE]  :  expected	65	None	replace
198	[BUG]  [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.substring(1);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.substring(1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  +  formatHeader.substring(1);	  header    =    nextRecord.toString()    +    formatHeader;    	non-compiled	[CE]  :  expected	65	None	replace
199	[BUG]  [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.trim();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.trim();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  +  formatHeader.trim();	  header    =    nextRecord.toString()    +    formatHeader;    	non-compiled	[CE]  :  expected	65	None	replace
200	[BUG]  [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.charAt(i);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.charAt(i);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  +  formatHeader.charAt(i);	  header    =    nextRecord.toString()    +    formatHeader;    	non-compiled	[CE]  :  expected	65	None	replace
201	[BUG]  [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.hdrMap;  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.hdrMap;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  +  formatHeader.hdrMap;	  header    =    nextRecord.toString()    +    formatHeader;    	non-compiled	[CE]  :  expected	65	None	replace
202	[BUG]  [BUGGY]  header  =  this.nextRecord.getHeader()  +  1;  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.getHeader()  +  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.getHeader()  +  1;	  header    =    this.nextRecord.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
203	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  -  2]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  -  2]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length  -  2]);	  header    =    nextRecord.toArray(new    String[header.length    -    1]);    	non-compiled	[CE]  :  expected	71	None	replace
204	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  0]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  0]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length  0]);	  header    =    nextRecord.toArray(new    String[header.length    -    1]);    	non-compiled	[CE]  :  expected	71	None	replace
205	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  -  3]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  -  3]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length  -  3]);	  header    =    nextRecord.toArray(new    String[header.length    -    1]);    	non-compiled	[CE]  :  expected	71	None	replace
206	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  +  1]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length  +  1]);	  header    =    nextRecord.toArray(new    String[header.length    -    1]);    	non-compiled	[CE]  :  expected	71	None	replace
207	[BUG]  [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(header);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(header);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord.add(header);    	non-compiled	[CE]  :  expected	17	None	replace
208	[BUG]  [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(header);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(header);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord.add(header);    	non-compiled	[CE]  :  expected	17	None	replace
209	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(nextRecord);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(nextRecord);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord.add(header);    	non-compiled	[CE]  :  expected	17	None	replace
210	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  headerMap.add(nextRecord);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  headerMap.add(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  headerMap.add(nextRecord);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord.add(header);    	non-compiled	[CE]  :  expected	17	None	replace
211	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(0,  header);  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(0,  header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(0,  header);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord.add(header);    	non-compiled	[CE]  :  expected	17	None	replace
212	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(record);  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(record);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord.add(header);    	non-compiled	[CE]  :  expected	17	None	replace
213	[BUG]  [BUGGY]  header  =  nextRecord.header(rec)-  1;  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(rec)-  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(rec)-  1;	  header    =    nextRecord.header()    -    1;    	non-compiled	[CE]  :  expected	75	None	replace
214	[BUG]  [BUGGY]  header  =  rec.header()  -  1;  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  rec.header()  -  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.header()  -  1;	  header    =    nextRecord.header()    -    1;    	non-compiled	[CE]  :  expected	75	None	replace
215	[BUG]  [BUGGY]  header  =  nextRecord.hdr();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.hdr();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.hdr();	  header    =    hdrMap.hdr();    	non-compiled	[CE]  :  expected	55	None	replace
216	[BUG]  [BUGGY]  header  =  hdrMap.hashCode();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.hashCode();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.hashCode();	  header    =    hdrMap.hdr();    	non-compiled	[CE]  :  expected	55	None	replace
217	[BUG]  [BUGGY]  header  =  hdrMap.get(nextRecord);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.get(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.get(nextRecord);	  header    =    hdrMap.hdr();    	non-compiled	[CE]  :  expected	55	None	replace
218	[BUG]  [BUGGY]  header  =  hdrMap.get(nextRecord).hdr();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.get(nextRecord).hdr();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.get(nextRecord).hdr();	  header    =    hdrMap.hdr();    	non-compiled	[CE]  :  expected	55	None	replace
219	[BUG]  [BUGGY]  header  =  hdrMap.get(nextRecord.length);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.get(nextRecord.length);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.get(nextRecord.length);	  header    =    hdrMap.hdr();    	non-compiled	[CE]  :  expected	55	None	replace
220	[BUG]  [BUGGY]  header  =  nextRecord.getHeader()  /  1;  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getHeader()  /  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getHeader()  /  1;	  header    =    nextRecord.getHeader()    +    1;    	non-compiled	[CE]  :  expected	2	None	replace
221	[BUG]  [BUGGY]  header  =  nextRecord.getHeader(),  hdrMap);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getHeader(),  hdrMap);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getHeader(),  hdrMap);	  header    =    nextRecord.getHeader()    +    1;    	non-compiled	[CE]  :  expected	2	None	replace
222	[BUG]  [BUGGY]  header  =  nextRecord.getHeader()  -  1;  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getHeader()  -  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getHeader()  -  1;	  header    =    nextRecord.getHeader()    +    1;    	non-compiled	[CE]  :  expected	2	None	replace
223	[BUG]  [BUGGY]  header  = " "  +  nextRecord.getHeader()  + "n ";  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  = " "  +  nextRecord.getHeader()  + "n ";  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  = " "  +  nextRecord.getHeader()  + "n ";	  header    =    nextRecord.getHeader()    +    1;    	non-compiled	[CE]  :  expected	2	None	replace
224	[BUG]  [BUGGY]  header  =  nextRecord.substring(0,  nextRecord.length());  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.substring(0,  nextRecord.length());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.substring(0,  nextRecord.length());	  header    =    nextRecord.substring(0,    nextRecord.length()    -    1);    	non-compiled	[CE]  :  expected	83	None	replace
225	[BUG]  [BUGGY]  header  =  nextRecord.substring(0,  this.nextRecord.length()  -  1);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.substring(0,  this.nextRecord.length()  -  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.substring(0,  this.nextRecord.length()  -  1);	  header    =    nextRecord.substring(0,    nextRecord.length()    -    1);    	non-compiled	[CE]  :  expected	83	None	replace
226	[BUG]  [BUGGY]  header  =  nextRecord.substring(0,  nextRecord.length()  +  1);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.substring(0,  nextRecord.length()  +  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.substring(0,  nextRecord.length()  +  1);	  header    =    nextRecord.substring(0,    nextRecord.length()    -    1);    	non-compiled	[CE]  :  expected	83	None	replace
227	[BUG]  [BUGGY]  header  =  nextRecord.substring(0,  nextRecord.length()  -  2);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.substring(0,  nextRecord.length()  -  2);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.substring(0,  nextRecord.length()  -  2);	  header    =    nextRecord.substring(0,    nextRecord.length()    -    1);    	non-compiled	[CE]  :  expected	83	None	replace
228	[BUG]  [BUGGY]  header  =  nextRecord.substring(0,  this.format.length()  -  1);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.substring(0,  this.format.length()  -  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.substring(0,  this.format.length()  -  1);	  header    =    nextRecord.substring(0,    nextRecord.length()    -    1);    	non-compiled	[CE]  :  expected	83	None	replace
229	[BUG]  [BUGGY]  header  =  this.record.getHeader();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.record.getHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.record.getHeader();	  header    =    rec.getHeader();    	non-compiled	[CE]  :  expected	1	None	replace
230	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length  -  1]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[headers.length  -  1]);	  header    =    nextRecord.toArray(new    String[headers.length]);    	non-compiled	[CE]  :  expected	69	None	replace
231	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length  +  1]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[headers.length  +  1]);	  header    =    nextRecord.toArray(new    String[headers.length]);    	non-compiled	[CE]  :  expected	69	None	replace
232	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[rec.length]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[rec.length]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[rec.length]);	  header    =    nextRecord.toArray(new    String[headers.length]);    	non-compiled	[CE]  :  expected	69	None	replace
233	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.length]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.length]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber.length]);	  header    =    nextRecord.toArray(new    String[headers.length]);    	non-compiled	[CE]  :  expected	69	None	replace
234	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[rect.length]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[rect.length]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[rect.length]);	  header    =    nextRecord.toArray(new    String[headers.length]);    	non-compiled	[CE]  :  expected	69	None	replace
235	[BUG]  [BUGGY]  header  =  nextRecord.toString(),  hdrMap);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString(),  hdrMap);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString(),  hdrMap);	  header    =    nextRecord.toString()    +    1;    	non-compiled	[CE]  :  expected	44	None	replace
236	[BUG]  [BUGGY]  header  = " "  +  nextRecord.toString();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  = " "  +  nextRecord.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  = " "  +  nextRecord.toString();	  header    =    nextRecord.toString()    +    1;    	non-compiled	[CE]  :  expected	44	None	replace
237	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  *  1]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  *  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length()  *  1]);	  header    =    nextRecord.toArray(new    String[header.length()    -    1]);    	non-compiled	[CE]  :  expected	49	None	replace
238	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  1]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length()  1]);	  header    =    nextRecord.toArray(new    String[header.length()    +    1]);    	non-compiled	[CE]  :  expected	50	None	replace
239	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  2]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  2]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length()  2]);	  header    =    nextRecord.toArray(new    String[header.length()    +    1]);    	non-compiled	[CE]  :  expected	50	None	replace
240	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  [0]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  [0]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length()  [0]);	  header    =    nextRecord.toArray(new    String[header.length()    +    1]);    	non-compiled	[CE]  :  expected	50	None	replace
241	[BUG]  [BUGGY]  hdrMap.put(rec.toString(),  nextRecord);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(rec.toString(),  nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(rec.toString(),  nextRecord);	  hdrMap.put(rect.toString(),    nextRecord);    	non-compiled	[CE]  :  expected	19	None	replace
242	[BUG]  [BUGGY]  hdrMap.put(header.toString(),  nextRecord);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header.toString(),  nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header.toString(),  nextRecord);	  hdrMap.put(rect.toString(),    nextRecord);    	non-compiled	[CE]  :  expected	19	None	replace
243	[BUG]  [BUGGY]  hdrMap.put(nextRecord.toString(),  header);  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(nextRecord.toString(),  header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(nextRecord.toString(),  header);	  hdrMap.put(rect.toString(),    nextRecord);    	non-compiled	[CE]  :  expected	19	None	replace
244	[BUG]  [BUGGY]  hdrMap.put(this.format.toString(),  nextRecord);  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(this.format.toString(),  nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(this.format.toString(),  nextRecord);	  hdrMap.put(rect.toString(),    nextRecord);    	non-compiled	[CE]  :  expected	19	None	replace
245	[BUG]  [BUGGY]  hdrMap.put(formatHeader.toString(),  nextRecord);  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(formatHeader.toString(),  nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(formatHeader.toString(),  nextRecord);	  hdrMap.put(rect.toString(),    nextRecord);    	non-compiled	[CE]  :  expected	19	None	replace
246	[BUG]  [BUGGY]  header  =  nextRecord.toArray();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray();	  header    =    nextRecord.hashMap();    	non-compiled	[CE]  :  expected	20	None	replace
247	[BUG]  [BUGGY]  header  =  hdrMap.hashMap();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.hashMap();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.hashMap();	  header    =    nextRecord.hashMap();    	non-compiled	[CE]  :  expected	20	None	replace
248	[BUG]  [BUGGY]  header  =  rec.hashMap();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  rec.hashMap();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.hashMap();	  header    =    nextRecord.hashMap();    	non-compiled	[CE]  :  expected	20	None	replace
249	[BUG]  [BUGGY]  header  =  this.record.hdrMap();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.record.hdrMap();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.record.hdrMap();	  header    =    rec.hdrMap();    	non-compiled	[CE]  :  expected	21	None	replace
250	[BUG]  [BUGGY]  header  =  this.format.hdrMap();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.hdrMap();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.hdrMap();	  header    =    rec.hdrMap();    	non-compiled	[CE]  :  expected	21	None	replace
251	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.toString();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.toString();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.toString();    	non-compiled	[CE]  :  expected	58	None	replace
252	[BUG]  [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.toString();    	non-compiled	[CE]  :  expected	58	None	replace
253	[BUG]  [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.toString();    	non-compiled	[CE]  :  expected	58	None	replace
254	[BUG]  [BUGGY]  if(header!=  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  if(header!=  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();  }  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	if(header!=  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();  }	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.toString();    	non-compiled	[CE]  :  expected	58	None	replace
255	[BUG]  [BUGGY]  if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();  }  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();  }	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.toString();    	non-compiled	[CE]  :  expected	58	None	replace
256	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  formatHeader.toString();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  formatHeader.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  formatHeader.toString();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.toString();    	non-compiled	[CE]  :  expected	58	None	replace
257	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(nextRecord.length);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(nextRecord.length);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(nextRecord.length);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(header.length);    	non-compiled	[CE]  :  expected	16	None	replace
258	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(record.length);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(record.length);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(record.length);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(header.length);    	non-compiled	[CE]  :  expected	16	None	replace
259	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length  +  1);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length  +  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length  +  1);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(header.length);    	non-compiled	[CE]  :  expected	16	None	replace
260	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length  -  1);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length  -  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length  -  1);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(header.length);    	non-compiled	[CE]  :  expected	16	None	replace
261	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(recordNumber);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(recordNumber);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(recordNumber);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(header.length);    	non-compiled	[CE]  :  expected	16	None	replace
262	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.size()  +  1]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.size()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber.size()  +  1]);	  header    =    nextRecord.toArray(new    String[recordNumber.size()    ]);    	non-compiled	[CE]  :  expected	26	None	replace
263	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.size()  -  1]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.size()  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber.size()  -  1]);	  header    =    nextRecord.toArray(new    String[recordNumber.size()    ]);    	non-compiled	[CE]  :  expected	26	None	replace
264	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[recordNumber.size()  ]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[recordNumber.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[recordNumber.size()  ]);	  header    =    nextRecord.toArray(new    String[recordNumber.size()    ]);    	non-compiled	[CE]  :  expected	26	None	replace
265	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.size()  ]  +  1);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.size()  ]  +  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber.size()  ]  +  1);	  header    =    nextRecord.toArray(new    String[recordNumber.size()    ]);    	non-compiled	[CE]  :  expected	26	None	replace
266	[BUG]  [BUGGY]  header  =  rec.getSkipHeader();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  rec.getSkipHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.getSkipHeader();	  header    =    nextRecord.getSkipHeader();    	non-compiled	[CE]  :  expected	4	None	replace
267	[BUG]  [BUGGY]  header  =  this.format.getSkipHeader();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getSkipHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getSkipHeader();	  header    =    nextRecord.getSkipHeader();    	non-compiled	[CE]  :  expected	4	None	replace
268	[BUG]  [BUGGY]  header  =  nextRecord.getSkipHeader()  +  1;  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getSkipHeader()  +  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getSkipHeader()  +  1;	  header    =    nextRecord.getSkipHeader();    	non-compiled	[CE]  :  expected	4	None	replace
269	[BUG]  [BUGGY]  header  =  nextRecord.recordHeader();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.recordHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.recordHeader();	  header    =    nextRecord.getSkipHeader();    	non-compiled	[CE]  :  expected	4	None	replace
270	[BUG]  [BUGGY]  header  =  this.format.toString();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toString();	  header    =    rec.toString();    	non-compiled	[CE]  :  expected	42	None	replace
271	[BUG]  [BUGGY]  header  =  this.record.toString();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.record.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.record.toString();	  header    =    rec.toString();    	non-compiled	[CE]  :  expected	42	None	replace
272	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.length()  +  1]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.length()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber.length()  +  1]);	  header    =    nextRecord.toArray(new    String[recordNumber.length()    ]);    	non-compiled	[CE]  :  expected	52	None	replace
273	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.length()  -  1]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.length()  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber.length()  -  1]);	  header    =    nextRecord.toArray(new    String[recordNumber.length()    ]);    	non-compiled	[CE]  :  expected	52	None	replace
274	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.length()  0]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.length()  0]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber.length()  0]);	  header    =    nextRecord.toArray(new    String[recordNumber.length()    ]);    	non-compiled	[CE]  :  expected	52	None	replace
275	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  2);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  2);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  ]  +  2);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    1);    	non-compiled	[CE]  :  expected	32	None	replace
276	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  -  1]  +  1);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  -  1]  +  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  -  1]  +  1);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    1);    	non-compiled	[CE]  :  expected	32	None	replace
277	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  4);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  4);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  ]  +  4);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    1);    	non-compiled	[CE]  :  expected	32	None	replace
278	[BUG]  [BUGGY]  hdrMap.put(record,  header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(record,  header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(record,  header);	  hdrMap.put(record,    nextRecord);    	non-compiled	[CE]  :  expected	87	None	replace
279	[BUG]  [BUGGY]  hdrMap.put(nextRecord,  record);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(nextRecord,  record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(nextRecord,  record);	  hdrMap.put(record,    nextRecord);    	non-compiled	[CE]  :  expected	87	None	replace
280	[BUG]  [BUGGY]  hdrMap.put(currentRecord,  nextRecord);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(currentRecord,  nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(currentRecord,  nextRecord);	  hdrMap.put(record,    nextRecord);    	non-compiled	[CE]  :  expected	87	None	replace
281	[BUG]  [BUGGY]  hdrMap.put(i,  nextRecord);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(i,  nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(i,  nextRecord);	  hdrMap.put(record,    nextRecord);    	non-compiled	[CE]  :  expected	87	None	replace
282	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[header.length()  -  1]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[header.length()  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[header.length()  -  1]);	  header    =    hdrMap.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  :  expected	64	None	replace
283	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[header.length()  +  1]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[header.length()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[header.length()  +  1]);	  header    =    hdrMap.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  :  expected	64	None	replace
284	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[nextRecord.length()  ]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[nextRecord.length()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[nextRecord.length()  ]);	  header    =    hdrMap.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  :  expected	64	None	replace
285	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[header.length()  0]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[header.length()  0]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[header.length()  0]);	  header    =    hdrMap.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  :  expected	64	None	replace
286	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[recordNumber.length()  ]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[recordNumber.length()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[recordNumber.length()  ]);	  header    =    hdrMap.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  :  expected	64	None	replace
287	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.size()  +  1]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.size()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.size()  +  1]);	  header    =    nextRecord.toArray(new    String[header.size()    -    1]);    	non-compiled	[CE]  :  expected	28	None	replace
288	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.size()  *  1]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.size()  *  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.size()  *  1]);	  header    =    nextRecord.toArray(new    String[header.size()    -    1]);    	non-compiled	[CE]  :  expected	28	None	replace
289	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  +  2]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  +  2]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber  +  2]);	  header    =    nextRecord.toArray(new    String[recordNumber    +    1]);    	non-compiled	[CE]  :  expected	45	None	replace
290	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  +  3]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  +  3]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber  +  3]);	  header    =    nextRecord.toArray(new    String[recordNumber    +    1]);    	non-compiled	[CE]  :  expected	45	None	replace
291	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[formatHeader.length  +  1]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[formatHeader.length  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[formatHeader.length  +  1]);	  header    =    nextRecord.toArray(new    String[recordNumber    +    1]);    	non-compiled	[CE]  :  expected	45	None	replace
292	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  +  1],  formatHeader);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  +  1],  formatHeader);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber  +  1],  formatHeader);	  header    =    nextRecord.toArray(new    String[recordNumber    +    1]);    	non-compiled	[CE]  :  expected	45	None	replace
293	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  /  2]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  /  2]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  /  2]);	  header    =    nextRecord.toArray(new    String[record.size()    *    2]);    	non-compiled	[CE]  :  expected	34	None	replace
294	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  +  2]);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  +  2]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  +  2]);	  header    =    nextRecord.toArray(new    String[record.size()    *    2]);    	non-compiled	[CE]  :  expected	34	None	replace
295	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  -  2]);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  -  2]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  -  2]);	  header    =    nextRecord.toArray(new    String[record.size()    *    2]);    	non-compiled	[CE]  :  expected	34	None	replace
296	[BUG]  [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  ArrayList  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	13	None	replace
297	[BUG]  [BUGGY]  hdrMap  =  new  ArrayHashMap  <  String,  Integer>();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  ArrayHashMap  <  String,  Integer>();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  ArrayHashMap  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	13	None	replace
298	[BUG]  [BUGGY]  header  =  nextRecord.removeLast();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.removeLast();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.removeLast();	  header    =    nextRecord.removeFirst();    	non-compiled	[CE]  :  expected	80	None	replace
299	[BUG]  [BUGGY]  header  =  nextRecord.getFirst();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getFirst();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getFirst();	  header    =    nextRecord.removeFirst();    	non-compiled	[CE]  :  expected	80	None	replace
300	[BUG]  [BUGGY]  header  =  nextRecord.getLastChild();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getLastChild();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getLastChild();	  header    =    nextRecord.removeFirst();    	non-compiled	[CE]  :  expected	80	None	replace
301	[BUG]  [BUGGY]  header  =  nextRecord.getFirstChild();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getFirstChild();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getFirstChild();	  header    =    nextRecord.removeFirst();    	non-compiled	[CE]  :  expected	80	None	replace
302	[BUG]  [BUGGY]  header  =  nextRecord.getLast();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getLast();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getLast();	  header    =    nextRecord.removeFirst();    	non-compiled	[CE]  :  expected	80	None	replace
303	[BUG]  [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.nextRecord();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	62	None	replace
304	[BUG]  [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.nextRecord();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	62	None	replace
305	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.header.nextRecord();  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.header.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.header.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	62	None	replace
306	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  rec.nextRecord();  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  rec.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  rec.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	62	None	replace
307	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.nextRecord();  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	62	None	replace
308	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length  -  1]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordHeader.length  -  1]);	  header    =    nextRecord.toArray(new    String[recordHeader.length    ]);    	non-compiled	[CE]  :  expected	38	None	replace
309	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length  +  1]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordHeader.length  +  1]);	  header    =    nextRecord.toArray(new    String[recordHeader.length    ]);    	non-compiled	[CE]  :  expected	38	None	replace
310	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length  0]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length  0]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordHeader.length  0]);	  header    =    nextRecord.toArray(new    String[recordHeader.length    ]);    	non-compiled	[CE]  :  expected	38	None	replace
311	[BUG]  [BUGGY]  header  =  nextRecord.header(1);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(1);	  header    =    nextRecord.header(0);    	non-compiled	[CE]  :  expected	77	None	replace
312	[BUG]  [BUGGY]  header  =  nextRecord.header(0,  i);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(0,  i);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(0,  i);	  header    =    nextRecord.header(0);    	non-compiled	[CE]  :  expected	77	None	replace
313	[BUG]  [BUGGY]  header  =  nextRecord.header(2);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(2);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(2);	  header    =    nextRecord.header(0);    	non-compiled	[CE]  :  expected	77	None	replace
314	[BUG]  [BUGGY]  header  =  nextRecord.header(0,  rec);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(0,  rec);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(0,  rec);	  header    =    nextRecord.header(0);    	non-compiled	[CE]  :  expected	77	None	replace
315	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[rec.size()  -  1]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[rec.size()  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[rec.size()  -  1]);	  header    =    nextRecord.toArray(new    String[rec.size()    ]);    	non-compiled	[CE]  :  expected	25	None	replace
316	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[rec.size()  +  1]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[rec.size()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[rec.size()  +  1]);	  header    =    nextRecord.toArray(new    String[rec.size()    ]);    	non-compiled	[CE]  :  expected	25	None	replace
317	[BUG]  [BUGGY]  header  =  this.nextRecord.header()  +  1;  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.header()  +  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.header()  +  1;	  header    =    this.nextRecord.header();    	non-compiled	[CE]  :  expected	84	None	replace
318	[BUG]  [BUGGY]  header  =  this.nextRecord.header()  -  1;  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.header()  -  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.header()  -  1;	  header    =    this.nextRecord.header();    	non-compiled	[CE]  :  expected	84	None	replace
319	[BUG]  [BUGGY]  header  =  this.nextRecord.header(rec);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.header(rec);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.header(rec);	  header    =    this.nextRecord.header();    	non-compiled	[CE]  :  expected	84	None	replace
320	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  *  2]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  *  2]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length()  *  2]);	  header    =    nextRecord.toArray(new    String[header.length()    0]);    	non-compiled	[CE]  :  expected	53	None	replace
321	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length()  0]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length()  0]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[headers.length()  0]);	  header    =    nextRecord.toArray(new    String[header.length()    0]);    	non-compiled	[CE]  :  expected	53	None	replace
322	[BUG]  [BUGGY]  header  =  hdrMap.hdrMap(rec);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.hdrMap(rec);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.hdrMap(rec);	  header    =    nextRecord.hdrMap(rec);    	non-compiled	[CE]  :  expected	24	None	replace
323	[BUG]  [BUGGY]  header  =  nextRecord.hdrMap(this.format,  rec);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.hdrMap(this.format,  rec);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.hdrMap(this.format,  rec);	  header    =    nextRecord.hdrMap(rec);    	non-compiled	[CE]  :  expected	24	None	replace
324	[BUG]  [BUGGY]  header  =  rec.header(nextRecord);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  rec.header(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.header(nextRecord);	  header    =    rec.header();    	non-compiled	[CE]  :  expected	11	None	replace
325	[BUG]  [BUGGY]  header  =  this.record.header();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.record.header();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.record.header();	  header    =    rec.header();    	non-compiled	[CE]  :  expected	11	None	replace
326	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(record);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(record);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(header);    	non-compiled	[CE]  :  expected	15	None	replace
327	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(nextRecord);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(nextRecord);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(header);    	non-compiled	[CE]  :  expected	15	None	replace
328	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length()  +  1]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length()  +  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[headers.length()  +  1]);	  header    =    nextRecord.toArray(new    String[headers.length()    ]);    	non-compiled	[CE]  :  expected	63	None	replace
329	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length()  -  1]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length()  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[headers.length()  -  1]);	  header    =    nextRecord.toArray(new    String[headers.length()    ]);    	non-compiled	[CE]  :  expected	63	None	replace
330	[BUG]  [BUGGY]  header  =  nextRecord.header()  +  formatHeader.length  -  1;  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  +  formatHeader.length  -  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  +  formatHeader.length  -  1;	  header    =    nextRecord.header()    +    formatHeader.length;    	non-compiled	[CE]  :  expected	10	None	replace
331	[BUG]  [BUGGY]  header  =  nextRecord.header()  +  formatHeader.length  +  1;  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  +  formatHeader.length  +  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  +  formatHeader.length  +  1;	  header    =    nextRecord.header()    +    formatHeader.length;    	non-compiled	[CE]  :  expected	10	None	replace
332	[BUG]  [BUGGY]  header  =  nextRecord.header()  /  formatHeader.length;  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  /  formatHeader.length;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  /  formatHeader.length;	  header    =    nextRecord.header()    +    formatHeader.length;    	non-compiled	[CE]  :  expected	10	None	replace
333	[BUG]  [BUGGY]  header  =  nextRecord.header()  *  formatHeader.length;  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  *  formatHeader.length;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  *  formatHeader.length;	  header    =    nextRecord.header()    +    formatHeader.length;    	non-compiled	[CE]  :  expected	10	None	replace
334	[BUG]  [BUGGY]  header  =  nextRecord.header()  -  formatHeader.length;  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  -  formatHeader.length;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  -  formatHeader.length;	  header    =    nextRecord.header()    +    formatHeader.length;    	non-compiled	[CE]  :  expected	10	None	replace
335	[BUG]  [BUGGY]  header  =  nextRecord.header()  +  formatHeader.length  -  2;  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  +  formatHeader.length  -  2;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  +  formatHeader.length  -  2;	  header    =    nextRecord.header()    +    formatHeader.length;    	non-compiled	[CE]  :  expected	10	None	replace
336	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[hdrMap.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[hdrMap.size()  ]);	  header    =    hdrMap.hdrMap();    	non-compiled	[CE]  :  expected	22	None	replace
337	[BUG]  [BUGGY]  header  =  hdrMap.get(nextRecord).hdrMap();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.get(nextRecord).hdrMap();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.get(nextRecord).hdrMap();	  header    =    hdrMap.hdrMap();    	non-compiled	[CE]  :  expected	22	None	replace
338	[BUG]  [BUGGY]  header  = " "  +  nextRecord.header();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  = " "  +  nextRecord.header();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  = " "  +  nextRecord.header();	  header    =    nextRecord.header()    +    1;    	non-compiled	[CE]  :  expected	8	None	replace
339	[BUG]  [BUGGY]  header  =  nextRecord.header()  /  1;  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  /  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  /  1;	  header    =    nextRecord.header()    +    1;    	non-compiled	[CE]  :  expected	8	None	replace
340	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.size()  1]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.size()  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.size()  1]);	  header    =    nextRecord.toArray(new    String[header.size()    -    1]);    	non-compiled	[CE]  :  expected	28	None	replace
341	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length++]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.length++]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length++]);	  header    =    nextRecord.toArray(new    String[recordNumber++]);    	non-compiled	[CE]  :  expected	46	None	replace
342	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[headerNumber++]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[headerNumber++]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[headerNumber++]);	  header    =    nextRecord.toArray(new    String[recordNumber++]);    	non-compiled	[CE]  :  expected	46	None	replace
343	[BUG]  [BUGGY]  header  =  this.format.header()  &&  nextRecord.getSkipHeaderRecord().length  >  0;  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.header()  &&  nextRecord.getSkipHeaderRecord().length  >  0;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.header()  &&  nextRecord.getSkipHeaderRecord().length  >  0;	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0;    	non-compiled	[CE]  :  expected	9	None	replace
344	[BUG]  [BUGGY]  header  =  nextRecord.header()  &&  this.format.getHeaderRecord().length  >  0;  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  &&  this.format.getHeaderRecord().length  >  0;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  &&  this.format.getHeaderRecord().length  >  0;	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0;    	non-compiled	[CE]  :  expected	9	None	replace
345	[BUG]  [BUGGY]  header  =  hdrMap.hdrMap(nextRecord);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.hdrMap(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.hdrMap(nextRecord);	  header    =    nextRecord.hdrMap(rec);    	non-compiled	[CE]  :  expected	24	None	replace
346	[BUG]  [BUGGY]  header  =  nextRecord.hdrMap(header,  hdrMap);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.hdrMap(header,  hdrMap);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.hdrMap(header,  hdrMap);	  header    =    nextRecord.hdrMap(rec);    	non-compiled	[CE]  :  expected	24	None	replace
347	[BUG]  [BUGGY]  header  =  nextRecord.recordHeader;  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.recordHeader;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.recordHeader;	  header    =    nextRecord.getSkipHeader();    	non-compiled	[CE]  :  expected	4	None	replace
348	[BUG]  [BUGGY]  hdrMap.put(record,  nextRecord  +  1);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(record,  nextRecord  +  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(record,  nextRecord  +  1);	  hdrMap.put(record,    nextRecord);    	non-compiled	[CE]  :  expected	87	None	replace
349	[BUG]  [BUGGY]  hdrMap.put(record,  new  CSVRecord(nextRecord));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(record,  new  CSVRecord(nextRecord));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(record,  new  CSVRecord(nextRecord));	  hdrMap.put(record,    nextRecord);    	non-compiled	[CE]  :  expected	87	None	replace
350	[BUG]  [BUGGY]  hdrMap.put(record,  new  CSVRecord(header,  nextRecord));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(record,  new  CSVRecord(header,  nextRecord));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(record,  new  CSVRecord(header,  nextRecord));	  hdrMap.put(record,    nextRecord);    	non-compiled	[CE]  :  expected	87	None	replace
351	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  +  formatHeader.length);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  +  formatHeader.length);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  +  formatHeader.length);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    formatHeader);    	non-compiled	[CE]  :  expected	33	None	replace
352	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  -  1]  +  formatHeader);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  -  1]  +  formatHeader);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  -  1]  +  formatHeader);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    formatHeader);    	non-compiled	[CE]  :  expected	33	None	replace
353	[BUG]  [BUGGY]  header  =  this.headerMap.toArray(new  String[header.length()  ]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.headerMap.toArray(new  String[header.length()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.headerMap.toArray(new  String[header.length()  ]);	  header    =    this.headerMap.hdrMap();    	non-compiled	[CE]  :  expected	56	None	replace
354	[BUG]  [BUGGY]  header  =  this.headerMap.values().hashMap();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.headerMap.values().hashMap();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.headerMap.values().hashMap();	  header    =    this.headerMap.hdrMap();    	non-compiled	[CE]  :  expected	56	None	replace
355	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[header.length]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[header.length]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[header.length]);	  header    =    hdrMap.toArray(new    String[recordNumber]);    	non-compiled	[CE]  :  expected	68	None	replace
356	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[headerRecord.length]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[headerRecord.length]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[headerRecord.length]);	  header    =    hdrMap.toArray(new    String[recordNumber]);    	non-compiled	[CE]  :  expected	68	None	replace
357	[BUG]  [BUGGY]  header  =  this.format.toString()  + "  - "  +  nextRecord;  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toString()  + "  - "  +  nextRecord;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toString()  + "  - "  +  nextRecord;	  header    =    nextRecord.toString()    +   "    -   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	66	None	replace
358	[BUG]  [BUGGY]  header  =  this.format.getSkipHeaderRecord()  + "  - "  +  nextRecord;  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getSkipHeaderRecord()  + "  - "  +  nextRecord;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getSkipHeaderRecord()  + "  - "  +  nextRecord;	  header    =    nextRecord.toString()    +   "    -   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	66	None	replace
359	[BUG]  [BUGGY]  header  =  this.format.toString()  + ".  - "  +  nextRecord;  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toString()  + ".  - "  +  nextRecord;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toString()  + ".  - "  +  nextRecord;	  header    =    nextRecord.toString()    +   "    -   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	66	None	replace
360	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(header.length);    	non-compiled	[CE]  :  expected	16	None	replace
361	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(recordHeader.length);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(recordHeader.length);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(recordHeader.length);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(header.length);    	non-compiled	[CE]  :  expected	16	None	replace
362	[BUG]  [BUGGY]  header  =  formatHeader.toString()  +  nextRecord;  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  formatHeader.toString()  +  nextRecord;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  formatHeader.toString()  +  nextRecord;	  header    =    nextRecord.toString()    +    formatHeader;    	non-compiled	[CE]  :  expected	65	None	replace
363	[BUG]  [BUGGY]  header  =  nextRecord.toString()  *  formatHeader;  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toString()  *  formatHeader;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  *  formatHeader;	  header    =    nextRecord.toString()    +    formatHeader;    	non-compiled	[CE]  :  expected	65	None	replace
364	[BUG]  [BUGGY]  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	60	None	replace
365	[BUG]  [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  ArrayList  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	60	None	replace
366	[BUG]  [BUGGY]  hdrMap.put(header,  new  CSVRecord(record));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header,  new  CSVRecord(record));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  new  CSVRecord(record));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  :  expected	88	None	replace
367	[BUG]  [BUGGY]  hdrMap.put(rect,  new  CSVRecord(nextRecord));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(rect,  new  CSVRecord(nextRecord));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(rect,  new  CSVRecord(nextRecord));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  :  expected	88	None	replace
368	[BUG]  [BUGGY]  hdrMap.put(record,  new  CSVRecord(header));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(record,  new  CSVRecord(header));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(record,  new  CSVRecord(header));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  :  expected	88	None	replace
369	[BUG]  [BUGGY]  hdrMap.put(header,  new  CSVRecord(nextRecord,  formatHeader));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header,  new  CSVRecord(nextRecord,  formatHeader));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  new  CSVRecord(nextRecord,  formatHeader));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  :  expected	88	None	replace
370	[BUG]  [BUGGY]  header  =  this.header.hdrMap(recordNumber);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.hdrMap(recordNumber);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.hdrMap(recordNumber);	  header    =    this.header.hdrMap();    	non-compiled	[CE]  :  expected	54	None	replace
371	[BUG]  [BUGGY]  hdrMap  =  new  LinkedList  <  String,  Integer>();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedList  <  String,  Integer>();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedList  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	13	None	replace
372	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(1);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(1);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	13	None	replace
373	[BUG]  [BUGGY]  header  =  this.header.recordHeader;  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.recordHeader;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.recordHeader;	  header    =    this.header.getHeader();    	non-compiled	[CE]  :  expected	73	None	replace
374	[BUG]  [BUGGY]  header  =  this.header.getHeader(nextRecord);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.getHeader(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.getHeader(nextRecord);	  header    =    this.header.getHeader();    	non-compiled	[CE]  :  expected	73	None	replace
375	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[headers.length]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[headers.length]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[headers.length]);	  header    =    nextRecord.toArray(new    String[headers.length]);    	non-compiled	[CE]  :  expected	69	None	replace
376	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length  *  2]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length  *  2]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[headers.length  *  2]);	  header    =    nextRecord.toArray(new    String[headers.length]);    	non-compiled	[CE]  :  expected	69	None	replace
377	[BUG]  [BUGGY]  header  =  hdrMap.initializeHeader(nextRecord);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.initializeHeader(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.initializeHeader(nextRecord);	  header    =    nextRecord.initializeHeader(record);    	non-compiled	[CE]  :  expected	72	None	replace
378	[BUG]  [BUGGY]  header  =  hdrMap.initializeHeader(record);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.initializeHeader(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.initializeHeader(record);	  header    =    nextRecord.initializeHeader(record);    	non-compiled	[CE]  :  expected	72	None	replace
379	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(header);    	non-compiled	[CE]  :  expected	15	None	replace
380	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(recordHeader);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(recordHeader);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(recordHeader);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(header);    	non-compiled	[CE]  :  expected	15	None	replace
381	[BUG]  [BUGGY]  header  =  this.nextRecord.getHeader(recordNumber);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.getHeader(recordNumber);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.getHeader(recordNumber);	  header    =    this.nextRecord.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
382	[BUG]  [BUGGY]  header  =  this.nextRecord.getHeader(record);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.getHeader(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.getHeader(record);	  header    =    this.nextRecord.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
383	[BUG]  [BUGGY]  header  =  this.format.toString()  + ",   "  +  nextRecord;  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toString()  + ",   "  +  nextRecord;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toString()  + ",   "  +  nextRecord;	  header    =    nextRecord.toString()    +   ",   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	40	None	replace
384	[BUG]  [BUGGY]  header  =  this.format.getSkipHeaderRecord()  + ", "  +  nextRecord.toString();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getSkipHeaderRecord()  + ", "  +  nextRecord.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getSkipHeaderRecord()  + ", "  +  nextRecord.toString();	  header    =    nextRecord.toString()    +   ",   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	40	None	replace
385	[BUG]  [BUGGY]  header  =  this.format.getSkipHeaderRecord()  + ", "  +  nextRecord;  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getSkipHeaderRecord()  + ", "  +  nextRecord;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getSkipHeaderRecord()  + ", "  +  nextRecord;	  header    =    nextRecord.toString()    +   ",   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	40	None	replace
386	[BUG]  [BUGGY]  header  =  nextRecord.header(recordNumber);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(recordNumber);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(recordNumber);	  header    =    nextRecord.header(0);    	non-compiled	[CE]  :  expected	77	None	replace
387	[BUG]  [BUGGY]  header  =  nextRecord.header(0,  hdrMap);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(0,  hdrMap);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(0,  hdrMap);	  header    =    nextRecord.header(0);    	non-compiled	[CE]  :  expected	77	None	replace
388	[BUG]  [BUGGY]  header  =  nextRecord.header(0,  formatHeader);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(0,  formatHeader);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(0,  formatHeader);	  header    =    nextRecord.header(0);    	non-compiled	[CE]  :  expected	77	None	replace
389	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  header.length());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  header.length());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  header.length());	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.substring(0,    nextRecord.length());    	non-compiled	[CE]  :  expected	59	None	replace
390	[BUG]  [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length());  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  ArrayList  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length());	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.substring(0,    nextRecord.length());    	non-compiled	[CE]  :  expected	59	None	replace
391	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[initialRecord.size()  ]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[initialRecord.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[initialRecord.size()  ]);	  header    =    hdrMap.toArray(new    String[recordHeader.size()    ]);    	non-compiled	[CE]  :  expected	78	None	replace
392	[BUG]  [BUGGY]  header  =  this.nextRecord.header(0);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.header(0);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.header(0);	  header    =    this.nextRecord.header();    	non-compiled	[CE]  :  expected	84	None	replace
393	[BUG]  [BUGGY]  header  =  this.nextRecord.header()  +  formatHeader;  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.header()  +  formatHeader;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.header()  +  formatHeader;	  header    =    this.nextRecord.header();    	non-compiled	[CE]  :  expected	84	None	replace
394	[BUG]  [BUGGY]  header  =  hdrMap.getHeader(nextRecord);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.getHeader(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.getHeader(nextRecord);	  header    =    hdrMap.hdrMap();    	non-compiled	[CE]  :  expected	22	None	replace
395	[BUG]  [BUGGY]  header  =  hdrMap.toArray(header);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(header);	  header    =    hdrMap.hdrMap();    	non-compiled	[CE]  :  expected	22	None	replace
396	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.nextRecord();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	62	None	replace
397	[BUG]  [BUGGY]  header  =  nextRecord.getLastRecord();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getLastRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getLastRecord();	  header    =    nextRecord.removeFirst();    	non-compiled	[CE]  :  expected	80	None	replace
398	[BUG]  [BUGGY]  header  =  nextRecord.getNext();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.getNext();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getNext();	  header    =    nextRecord.removeFirst();    	non-compiled	[CE]  :  expected	80	None	replace
399	[BUG]  [BUGGY]  header  =  nextRecord.cloneTree();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.cloneTree();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.cloneTree();	  header    =    nextRecord.removeFirst();    	non-compiled	[CE]  :  expected	80	None	replace
400	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.size()  ]  +  1);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.size()  ]  +  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.size()  ]  +  1);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    1);    	non-compiled	[CE]  :  expected	32	None	replace
401	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[record.size()  ]  +  1);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[record.size()  ]  +  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[record.size()  ]  +  1);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    1);    	non-compiled	[CE]  :  expected	32	None	replace
402	[BUG]  [BUGGY]  header  =  this.headerMap.header();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.headerMap.header();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.headerMap.header();	  header    =    hdrMap.header();    	non-compiled	[CE]  :  expected	85	None	replace
403	[BUG]  [BUGGY]  header  =  hdrMap.headerRecord();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.headerRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.headerRecord();	  header    =    hdrMap.header();    	non-compiled	[CE]  :  expected	85	None	replace
404	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[header.length  -  1]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[header.length  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[header.length  -  1]);	  header    =    nextRecord.toArray(new    String[header.length    -    1]);    	non-compiled	[CE]  :  expected	71	None	replace
405	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  -  1]  +  formatHeader);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  -  1]  +  formatHeader);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length  -  1]  +  formatHeader);	  header    =    nextRecord.toArray(new    String[header.length    -    1]);    	non-compiled	[CE]  :  expected	71	None	replace
406	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[headers.length()  ]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[headers.length()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[headers.length()  ]);	  header    =    nextRecord.toArray(new    String[headers.length()    ]);    	non-compiled	[CE]  :  expected	63	None	replace
407	[BUG]  [BUGGY]  header  = " "  +  nextRecord.getHeader();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  = " "  +  nextRecord.getHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  = " "  +  nextRecord.getHeader();	  header    =    nextRecord.getHeader()    +    1;    	non-compiled	[CE]  :  expected	2	None	replace
408	[BUG]  [BUGGY]  header  =  this.nextRecord.toArray(new  String[recordNumber]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.toArray(new  String[recordNumber]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.toArray(new  String[recordNumber]);	  header    =    this.nextRecord.hdrMap();    	non-compiled	[CE]  :  expected	23	None	replace
409	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[rec.length()  ]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[rec.length()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[rec.length()  ]);	  header    =    nextRecord.toArray(new    String[rec.length()    ]);    	non-compiled	[CE]  :  expected	51	None	replace
410	[BUG]  [BUGGY]  header  =  this.format.toArray(new  String[nextRecord.size()  ]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toArray(new  String[nextRecord.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toArray(new  String[nextRecord.size()  ]);	  header    =    nextRecord.toArray(new    String[this.format.size()    ]);    	non-compiled	[CE]  :  expected	79	None	replace
411	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header.add(nextRecord);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header.add(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header.add(nextRecord);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord.add(header);    	non-compiled	[CE]  :  expected	17	None	replace
412	[BUG]  [BUGGY]  header  =  this.header.record(nextRecord,  0);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.record(nextRecord,  0);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.record(nextRecord,  0);	  header    =    this.header.record();    	non-compiled	[CE]  :  expected	86	None	replace
413	[BUG]  [BUGGY]  header  =  this.format.getHeader(nextRecord);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getHeader(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getHeader(nextRecord);	  header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	3	None	replace
414	[BUG]  [BUGGY]  header  =  this.format.getHeader(header);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getHeader(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getHeader(header);	  header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	3	None	replace
415	[BUG]  [BUGGY]  header  =  nextRecord.header(),  this.format.getFormatHeaderRecord());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(),  this.format.getFormatHeaderRecord());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(),  this.format.getFormatHeaderRecord());	  header    =    nextRecord.header(),    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	7	None	replace
416	[BUG]  [BUGGY]  header  =  formatHeader.header(),  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  formatHeader.header(),  this.format.getSkipHeaderRecord());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  formatHeader.header(),  this.format.getSkipHeaderRecord());	  header    =    nextRecord.header(),    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	7	None	replace
417	[BUG]  [BUGGY]  header  =  nextRecord.header(),  this.format.getSkipHeaderRecord(),  header);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(),  this.format.getSkipHeaderRecord(),  header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(),  this.format.getSkipHeaderRecord(),  header);	  header    =    nextRecord.header(),    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	7	None	replace
418	[BUG]  [BUGGY]  hdrMap.put(header,  nextRecord  +  1);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header,  nextRecord  +  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  nextRecord  +  1);	  hdrMap.put(header,    nextRecord);    	non-compiled	[CE]  :  expected	14	None	replace
419	[BUG]  [BUGGY]  if(header!=  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  if(header!=  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);  }  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	if(header!=  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);  }	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =(String[])hdrMap.get(header);    	non-compiled	[CE]  :  expected	89	None	replace
420	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])headerMap.get(header);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])headerMap.get(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])headerMap.get(header);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =(String[])hdrMap.get(header);    	non-compiled	[CE]  :  expected	89	None	replace
421	[BUG]  [BUGGY]  header  =  this.format.toString()  + ": "  +  nextRecord;  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toString()  + ": "  +  nextRecord;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toString()  + ": "  +  nextRecord;	  header    =    nextRecord.toString()    +   ":   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	41	None	replace
422	[BUG]  [BUGGY]  header  =  this.format.getSkipHeaderRecord()  + ": "  +  nextRecord;  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getSkipHeaderRecord()  + ": "  +  nextRecord;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getSkipHeaderRecord()  + ": "  +  nextRecord;	  header    =    nextRecord.toString()    +   ":   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	41	None	replace
423	[BUG]  [BUGGY]  header  =  this.format.toString()  + ".: "  +  nextRecord;  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toString()  + ".: "  +  nextRecord;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toString()  + ".: "  +  nextRecord;	  header    =    nextRecord.toString()    +   ":   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	41	None	replace
424	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[headers.size()  0]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[headers.size()  0]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[headers.size()  0]);	  header    =    nextRecord.toArray(new    String[headers.size()    ]);    	non-compiled	[CE]  :  expected	27	None	replace
425	[BUG]  [BUGGY]  header  =  this.headers.toArray(new  String[headers.size()  ]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.headers.toArray(new  String[headers.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.headers.toArray(new  String[headers.size()  ]);	  header    =    nextRecord.toArray(new    String[headers.size()    ]);    	non-compiled	[CE]  :  expected	27	None	replace
426	[BUG]  [BUGGY]  header  =  nextRecord.substring(0,  this.nextRecord.length());  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.substring(0,  this.nextRecord.length());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.substring(0,  this.nextRecord.length());	  header    =    nextRecord.substring(0,    nextRecord.length()    -    1);    	non-compiled	[CE]  :  expected	83	None	replace
427	[BUG]  [BUGGY]  header  =  nextRecord.substring(0,  formatHeader.length());  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.substring(0,  formatHeader.length());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.substring(0,  formatHeader.length());	  header    =    nextRecord.substring(0,    nextRecord.length()    -    1);    	non-compiled	[CE]  :  expected	83	None	replace
428	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[header.length()  +  formatHeader.length()  ]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[header.length()  +  formatHeader.length()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[header.length()  +  formatHeader.length()  ]);	  header    =    hdrMap.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  :  expected	64	None	replace
429	[BUG]  [BUGGY]  header  =  nextRecord.header(header);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(header);	  header    =    nextRecord.header(rec);    	non-compiled	[CE]  :  expected	76	None	replace
430	[BUG]  [BUGGY]  header  =  nextRecord.header(nextRecord);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(nextRecord);	  header    =    nextRecord.header(rec);    	non-compiled	[CE]  :  expected	76	None	replace
431	[BUG]  [BUGGY]  header  =  nextRecord.header(rec,  header);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(rec,  header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(rec,  header);	  header    =    nextRecord.header(rec);    	non-compiled	[CE]  :  expected	76	None	replace
432	[BUG]  [BUGGY]  head  =  nextRecord.toString();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  head  =  nextRecord.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	head  =  nextRecord.toString();	  header    =    nextRecord.toString()    +    1;    	non-compiled	[CE]  :  expected	44	None	replace
433	[BUG]  [BUGGY]  if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();  }  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();  }	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.getHeader();    	non-compiled	[CE]  :  expected	61	None	replace
434	[BUG]  [BUGGY]  header  =  nextRecord.header()  +  formatHeader[0];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  +  formatHeader[0];  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  +  formatHeader[0];	  header    =    nextRecord.header()    +    formatHeader;    	non-compiled	[CE]  :  expected	74	None	replace
435	[BUG]  [BUGGY]  header  =  nextRecord.header()  +  formatHeader[i];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  +  formatHeader[i];  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  +  formatHeader[i];	  header    =    nextRecord.header()    +    formatHeader;    	non-compiled	[CE]  :  expected	74	None	replace
436	[BUG]  [BUGGY]  header  =  hdrMap.getHeader(rec);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.getHeader(rec);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.getHeader(rec);	  header    =    nextRecord.getHeader(rec);    	non-compiled	[CE]  :  expected	6	None	replace
437	[BUG]  [BUGGY]  header  =  this.header.toString(nextRecord);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.toString(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.toString(nextRecord);	  header    =    this.header.toString();    	non-compiled	[CE]  :  expected	82	None	replace
438	[BUG]  [BUGGY]  header  =  this.header.toString(record);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.toString(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.toString(record);	  header    =    this.header.toString();    	non-compiled	[CE]  :  expected	82	None	replace
439	[BUG]  [BUGGY]  header  =  this.nextRecord.toString()  +  formatHeader;  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.toString()  +  formatHeader;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.toString()  +  formatHeader;	  header    =    this.nextRecord.toString();    	non-compiled	[CE]  :  expected	81	None	replace
440	[BUG]  [BUGGY]  header  =  this.nextRecord.trim();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.trim();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.trim();	  header    =    this.nextRecord.toString();    	non-compiled	[CE]  :  expected	81	None	replace
441	[BUG]  [BUGGY]  header  =  this.nextRecord.toString()  +  hdrMap;  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.toString()  +  hdrMap;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.toString()  +  hdrMap;	  header    =    this.nextRecord.toString();    	non-compiled	[CE]  :  expected	81	None	replace
442	[BUG]  [BUGGY]  header  =  this.format.toString()  + ",   "  +  nextRecord.toString();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toString()  + ",   "  +  nextRecord.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toString()  + ",   "  +  nextRecord.toString();	  header    =    nextRecord.toString()    +   ",   "    +    this.format.getHeaderRecord();    	non-compiled	[CE]  :  expected	67	None	replace
443	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.header.toString();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.header.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.header.toString();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.toString();    	non-compiled	[CE]  :  expected	58	None	replace
444	[BUG]  [BUGGY]  header  =  hdrMap.hdrMap(header);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.hdrMap(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.hdrMap(header);	  header    =    nextRecord.hdrMap(record);    	non-compiled	[CE]  :  expected	57	None	replace
445	[BUG]  [BUGGY]  header  =  this.format.header()  &&  nextRecord.getSkipHeaderRecord().length  >  0);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.header()  &&  nextRecord.getSkipHeaderRecord().length  >  0);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.header()  &&  nextRecord.getSkipHeaderRecord().length  >  0);	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0);    	non-compiled	[CE]  :  expected	12	None	replace
446	[BUG]  [BUGGY]  header  =  hdrMap.header()  -  1;  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.header()  -  1;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.header()  -  1;	  header    =    nextRecord.header()    -    1;    	non-compiled	[CE]  :  expected	75	None	replace
447	[BUG]  [BUGGY]  hdrMap.put(rect.toString(),  header);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(rect.toString(),  header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(rect.toString(),  header);	  hdrMap.put(rect.toString(),    nextRecord);    	non-compiled	[CE]  :  expected	19	None	replace
448	[BUG]  [BUGGY]  hdrMap.put(record.toString(),  nextRecord);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(record.toString(),  nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(record.toString(),  nextRecord);	  hdrMap.put(rect.toString(),    nextRecord);    	non-compiled	[CE]  :  expected	19	None	replace
449	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[this.recordHeader.size()  ]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[this.recordHeader.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[this.recordHeader.size()  ]);	  header    =    nextRecord.toArray(new    String[this.recordHeader.size()    ]);    	non-compiled	[CE]  :  expected	39	None	replace
450	[BUG]  [BUGGY]  header  =  this.recordHeader.toArray(new  String[nextRecord.size()  ]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.recordHeader.toArray(new  String[nextRecord.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.recordHeader.toArray(new  String[nextRecord.size()  ]);	  header    =    nextRecord.toArray(new    String[this.recordHeader.size()    ]);    	non-compiled	[CE]  :  expected	39	None	replace
451	[BUG]  [BUGGY]  header  =  hdrMap.values().hashCode();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.values().hashCode();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.values().hashCode();	  header    =    hdrMap.hdr();    	non-compiled	[CE]  :  expected	55	None	replace
452	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[recordNumber  -  1]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[recordNumber  -  1]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[recordNumber  -  1]);	  header    =    nextRecord.toArray(new    String[recordNumber    -    1]);    	non-compiled	[CE]  :  expected	47	None	replace
453	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  this.nextRecord();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  this.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  this.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    currentRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	18	None	replace
454	[BUG]  [BUGGY]  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    currentRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	18	None	replace
455	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  this.currentRecord  =  nextRecord.nextRecord();  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  this.currentRecord  =  nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  this.currentRecord  =  nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    currentRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	18	None	replace
456	[BUG]  [BUGGY]  header  =  hdrMap.peek();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.peek();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.peek();	  header    =    hdrMap.hdr();    	non-compiled	[CE]  :  expected	55	None	replace
457	[BUG]  [BUGGY]  header  =  this.nextRecord.getSkipHeader();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.getSkipHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.getSkipHeader();	  header    =    nextRecord.getSkipHeader();    	non-compiled	[CE]  :  expected	4	None	replace
458	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[rec.size()  ]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[rec.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[rec.size()  ]);	  header    =    nextRecord.toArray(new    String[rec.size()    ]);    	non-compiled	[CE]  :  expected	25	None	replace
459	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[record.size()  ]  +  formatHeader);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[record.size()  ]  +  formatHeader);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[record.size()  ]  +  formatHeader);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    formatHeader);    	non-compiled	[CE]  :  expected	33	None	replace
460	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.size()  ]  +  formatHeader);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.size()  ]  +  formatHeader);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[this.format.size()  ]  +  formatHeader);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    formatHeader);    	non-compiled	[CE]  :  expected	33	None	replace
461	[BUG]  [BUGGY]  header  =  this.headerMap.getHeader();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.headerMap.getHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.headerMap.getHeader();	  header    =    rec.getHeader();    	non-compiled	[CE]  :  expected	1	None	replace
462	[BUG]  [BUGGY]  header  =  this.format.getHeaderRecord().header()  &&  this.format.getSkipHeaderRecord().length  >  0);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getHeaderRecord().header()  &&  this.format.getSkipHeaderRecord().length  >  0);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getHeaderRecord().header()  &&  this.format.getSkipHeaderRecord().length  >  0);	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0);    	non-compiled	[CE]  :  expected	12	None	replace
463	[BUG]  [BUGGY]  header  =  nextRecord.header()  +  this.format.getSkipHeaderRecord().length  >  0);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  +  this.format.getSkipHeaderRecord().length  >  0);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  +  this.format.getSkipHeaderRecord().length  >  0);	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0);    	non-compiled	[CE]  :  expected	12	None	replace
464	[BUG]  [BUGGY]  header  =  nextRecord.header()  +  this.format.getHeader();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  +  this.format.getHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  +  this.format.getHeader();	  header    =    nextRecord.header()    +    formatHeader.length;    	non-compiled	[CE]  :  expected	10	None	replace
465	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[record.length()  ]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[record.length()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[record.length()  ]);	  header    =    hdrMap.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  :  expected	64	None	replace
466	[BUG]  [BUGGY]  if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.nextRecord();  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.nextRecord();  }  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.nextRecord();  }	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	62	None	replace
467	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.nextRecord.nextRecord();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  this.nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	62	None	replace
468	[BUG]  [BUGGY]  header  =  formatHeader.toString()  + ", "  +  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  formatHeader.toString()  + ", "  +  this.format.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  formatHeader.toString()  + ", "  +  this.format.getSkipHeaderRecord();	  header    =    nextRecord.toString()    +   ",   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	40	None	replace
469	[BUG]  [BUGGY]  header  =  nextRecord.header()  +  this.format.getSkipHeaderRecord().length  >  0;  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header()  +  this.format.getSkipHeaderRecord().length  >  0;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  +  this.format.getSkipHeaderRecord().length  >  0;	  header    =    nextRecord.header()    &&    this.format.getSkipHeaderRecord().length    >    0;    	non-compiled	[CE]  :  expected	9	None	replace
470	[BUG]  [BUGGY]  header  =  nextRecord.substring(0,  currentRecord.length());  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.substring(0,  currentRecord.length());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.substring(0,  currentRecord.length());	  header    =    nextRecord.substring(0,    nextRecord.length()    -    1);    	non-compiled	[CE]  :  expected	83	None	replace
471	[BUG]  [BUGGY]  header  =  this.nextRecord.header()  &&  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.header()  &&  this.format.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.header()  &&  this.format.getSkipHeaderRecord();	  header    =    this.nextRecord.header();    	non-compiled	[CE]  :  expected	84	None	replace
472	[BUG]  [BUGGY]  header  =  this.nextRecord.header()  &&  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.header()  &&  this.format.getSkipHeaderRecord());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.header()  &&  this.format.getSkipHeaderRecord());	  header    =    this.nextRecord.header();    	non-compiled	[CE]  :  expected	84	None	replace
473	[BUG]  [BUGGY]  header  =  this.nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >  0);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >  0);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >  0);	  header    =    this.nextRecord.header();    	non-compiled	[CE]  :  expected	84	None	replace
474	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[0]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[0]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[0]);	  header    =    hdrMap.toArray(new    String[recordNumber]);    	non-compiled	[CE]  :  expected	68	None	replace
475	[BUG]  [BUGGY]  header  =  nextRecord.removeHeader(header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.removeHeader(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.removeHeader(header);	  header    =    nextRecord.getHeader(rec);    	non-compiled	[CE]  :  expected	6	None	replace
476	[BUG]  [BUGGY]  header  =  this.header.recordedHeader;  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.recordedHeader;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.recordedHeader;	  header    =    this.header.getHeader();    	non-compiled	[CE]  :  expected	73	None	replace
477	[BUG]  [BUGGY]  hdrMap.put(record,  this.nextRecord);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(record,  this.nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(record,  this.nextRecord);	  hdrMap.put(record,    nextRecord);    	non-compiled	[CE]  :  expected	87	None	replace
478	[BUG]  [BUGGY]  header  =  hdrMap.header(rec);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.header(rec);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.header(rec);	  header    =    nextRecord.header(rec);    	non-compiled	[CE]  :  expected	76	None	replace
479	[BUG]  [BUGGY]  header  =  this.nextRecord.headerMap();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.headerMap();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.headerMap();	  header    =    this.nextRecord.hdrMap();    	non-compiled	[CE]  :  expected	23	None	replace
480	[BUG]  [BUGGY]  if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);  }  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);  }	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =(String[])hdrMap.get(header);    	non-compiled	[CE]  :  expected	89	None	replace
481	[BUG]  [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =(String[])hdrMap.get(header);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =(String[])hdrMap.get(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  LinkedHashMap  <  String,  Integer>  hdrMap  =(String[])hdrMap.get(header);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =(String[])hdrMap.get(header);    	non-compiled	[CE]  :  expected	89	None	replace
482	[BUG]  [BUGGY]  header  =  this.format.header();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.header();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.header();	  header    =    rec.header();    	non-compiled	[CE]  :  expected	11	None	replace
483	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  +  formatHeader.length]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  +  formatHeader.length]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length  +  formatHeader.length]);	  header    =    nextRecord.toArray(new    String[header.length]);    	non-compiled	[CE]  :  expected	48	None	replace
484	[BUG]  [BUGGY]  header  =  this.format.toString()  + ",  - "  +  nextRecord.getSkipHeaderRecord();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toString()  + ",  - "  +  nextRecord.getSkipHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toString()  + ",  - "  +  nextRecord.getSkipHeaderRecord();	  header    =    nextRecord.toString()    +   "    -   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	66	None	replace
485	[BUG]  [BUGGY]  header  =  this.format.getSkipHeaderRecord()  + "  - "  +  nextRecord.toString();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getSkipHeaderRecord()  + "  - "  +  nextRecord.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getSkipHeaderRecord()  + "  - "  +  nextRecord.toString();	  header    =    nextRecord.toString()    +   "    -   "    +    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	66	None	replace
486	[BUG]  [BUGGY]  hdrMap.put(header,  new  CSVRecord(this.nextRecord));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header,  new  CSVRecord(this.nextRecord));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  new  CSVRecord(this.nextRecord));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  :  expected	88	None	replace
487	[BUG]  [BUGGY]  hdrMap.put(header,  new  CSVRecord(this.format));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header,  new  CSVRecord(this.format));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  new  CSVRecord(this.format));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  :  expected	88	None	replace
488	[BUG]  [BUGGY]  hdrMap.put(header,  new  CSVRecord(this.currentRecord));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header,  new  CSVRecord(this.currentRecord));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  new  CSVRecord(this.currentRecord));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  :  expected	88	None	replace
489	[BUG]  [BUGGY]  hdrMap.put(header,  new  CSVRecord(this.record));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap.put(header,  new  CSVRecord(this.record));  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  new  CSVRecord(this.record));	  hdrMap.put(header,    new    CSVRecord(nextRecord));    	non-compiled	[CE]  :  expected	88	None	replace
490	[BUG]  [BUGGY]  header  =  rec.header()  +  formatHeader;  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  rec.header()  +  formatHeader;  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.header()  +  formatHeader;	  header    =    nextRecord.header()    +    formatHeader;    	non-compiled	[CE]  :  expected	74	None	replace
491	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.length()  ]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.length()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[this.format.length()  ]);	  header    =    nextRecord.toArray(new    String[recordHeader.length()    ]);    	non-compiled	[CE]  :  expected	37	None	replace
492	[BUG]  [BUGGY]  header  =  this.format.getHeaderRecord()  + "., "  +  nextRecord.toString();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.getHeaderRecord()  + "., "  +  nextRecord.toString();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getHeaderRecord()  + "., "  +  nextRecord.toString();	  header    =    nextRecord.toString()    +   ",   "    +    this.format.getHeaderRecord();    	non-compiled	[CE]  :  expected	67	None	replace
493	[BUG]  [BUGGY]  header  =  nextRecord.header(0,  this.format);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.header(0,  this.format);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(0,  this.format);	  header    =    nextRecord.header(0);    	non-compiled	[CE]  :  expected	77	None	replace
494	[BUG]  [BUGGY]  if(header.length  ==  0)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(header);  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  if(header.length  ==  0)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(header);  }  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	if(header.length  ==  0)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(header);  }	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord.add(header);    	non-compiled	[CE]  :  expected	17	None	replace
495	[BUG]  [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header.add(nextRecord);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header.add(nextRecord);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  Map  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header.add(nextRecord);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    nextRecord.add(header);    	non-compiled	[CE]  :  expected	17	None	replace
496	[BUG]  [BUGGY]  header  =  hdrMap.record(header);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.record(header);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.record(header);	  header    =    this.header.record();    	non-compiled	[CE]  :  expected	86	None	replace
497	[BUG]  [BUGGY]  header  =  this.nextRecord.toString()  + ", "  +  this.format.getHeaderRecord();  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.toString()  + ", "  +  this.format.getHeaderRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.toString()  + ", "  +  this.format.getHeaderRecord();	  header    =    this.nextRecord.toString();    	non-compiled	[CE]  :  expected	81	None	replace
498	[BUG]  [BUGGY]  header  =  this.nextRecord.substring(0,  this.record.length()  -  1);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.substring(0,  this.record.length()  -  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.substring(0,  this.record.length()  -  1);	  header    =    this.nextRecord.toString();    	non-compiled	[CE]  :  expected	81	None	replace
499	[BUG]  [BUGGY]  header  =  this.nextRecord.substring(0,  this.header.length()  -  1);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.substring(0,  this.header.length()  -  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.substring(0,  this.header.length()  -  1);	  header    =    this.nextRecord.toString();    	non-compiled	[CE]  :  expected	81	None	replace
500	[BUG]  [BUGGY]  header  =  this.nextRecord.recordHeader();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.recordHeader();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.recordHeader();	  header    =    this.nextRecord.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
501	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[formatHeader.length  ]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[formatHeader.length  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[formatHeader.length  ]);	  header    =    nextRecord.toArray(new    String[recordHeader.length    ]);    	non-compiled	[CE]  :  expected	38	None	replace
502	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.getHeaderRecord().length  ]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.getHeaderRecord().length  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[this.format.getHeaderRecord().length  ]);	  header    =    nextRecord.toArray(new    String[recordHeader.length    ]);    	non-compiled	[CE]  :  expected	38	None	replace
503	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.getHeader().length  ]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.getHeader().length  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[this.format.getHeader().length  ]);	  header    =    nextRecord.toArray(new    String[recordHeader.length    ]);    	non-compiled	[CE]  :  expected	38	None	replace
504	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  this.nextRecord.nextRecord();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  this.nextRecord.nextRecord();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  this.nextRecord.nextRecord();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    currentRecord    =    nextRecord.nextRecord();    	non-compiled	[CE]  :  expected	18	None	replace
505	[BUG]  [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	final  LinkedHashMap  <  String,  Integer>  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length());	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.substring(0,    nextRecord.length());    	non-compiled	[CE]  :  expected	59	None	replace
506	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  this.nextRecord.length());  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  this.nextRecord.length());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  this.nextRecord.length());	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.substring(0,    nextRecord.length());    	non-compiled	[CE]  :  expected	59	None	replace
507	[BUG]  [BUGGY]  if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length());  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length());  }  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	if(header  ==  null)  {  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  nextRecord.length());  }	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.substring(0,    nextRecord.length());    	non-compiled	[CE]  :  expected	59	None	replace
508	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  this.header.length());  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  this.header.length());  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  header.substring(0,  this.header.length());	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    header    =    nextRecord.substring(0,    nextRecord.length());    	non-compiled	[CE]  :  expected	59	None	replace
509	[BUG]  [BUGGY]  header  =  this.format.toArray(new  String[this.header.size()  ]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toArray(new  String[this.header.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toArray(new  String[this.header.size()  ]);	  header    =    nextRecord.toArray(new    String[this.format.size()    ]);    	non-compiled	[CE]  :  expected	79	None	replace
510	[BUG]  [BUGGY]  header  =  this.format.toArray(new  String[header.size()  ]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.format.toArray(new  String[header.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.toArray(new  String[header.size()  ]);	  header    =    nextRecord.toArray(new    String[this.format.size()    ]);    	non-compiled	[CE]  :  expected	79	None	replace
511	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[this.format.size()  ]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[this.format.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[this.format.size()  ]);	  header    =    nextRecord.toArray(new    String[this.format.size()    ]);    	non-compiled	[CE]  :  expected	79	None	replace
512	[BUG]  [BUGGY]  header  =  this.nextRecord.initializeHeader(record);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.nextRecord.initializeHeader(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.initializeHeader(record);	  header    =    nextRecord.initializeHeader(record);    	non-compiled	[CE]  :  expected	72	None	replace
513	[BUG]  [BUGGY]  header  =  this.headerMap.initializeHeader(record);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.headerMap.initializeHeader(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.headerMap.initializeHeader(record);	  header    =    nextRecord.initializeHeader(record);    	non-compiled	[CE]  :  expected	72	None	replace
514	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[formatHeader.length++]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[formatHeader.length++]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[formatHeader.length++]);	  header    =    nextRecord.toArray(new    String[recordNumber++]);    	non-compiled	[CE]  :  expected	46	None	replace
515	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[this.recordNumber.size()  ]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  nextRecord.toArray(new  String[this.recordNumber.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[this.recordNumber.size()  ]);	  header    =    nextRecord.toArray(new    String[recordNumber.size()    ]);    	non-compiled	[CE]  :  expected	26	None	replace
516	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[formatHeader.size()  ]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.toArray(new  String[formatHeader.size()  ]);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[formatHeader.size()  ]);	  header    =    hdrMap.toArray(new    String[recordHeader.size()    ]);    	non-compiled	[CE]  :  expected	78	None	replace
517	[BUG]  [BUGGY]  header  =  this.header.substring(0,  this.header.length()  -  2);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.header.substring(0,  this.header.length()  -  2);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.substring(0,  this.header.length()  -  2);	  header    =    this.header.toString();    	non-compiled	[CE]  :  expected	82	None	replace
518	[BUG]  [BUGGY]  header  =  this.headerMap.hdrMap(record);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.headerMap.hdrMap(record);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.headerMap.hdrMap(record);	  header    =    nextRecord.hdrMap(record);    	non-compiled	[CE]  :  expected	57	None	replace
519	[BUG]  [BUGGY]  hdrMap  =  new  TreeMap  <  String,  Integer>();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  hdrMap  =  new  TreeMap  <  String,  Integer>();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  TreeMap  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	13	None	replace
520	[BUG]  [BUGGY]  header  =  hdrMap.values().hashMap();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  hdrMap.values().hashMap();  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.values().hashMap();	  header    =    hdrMap.hdrMap();    	non-compiled	[CE]  :  expected	22	None	replace
521	[BUG]  [BUGGY]  header  =  this.headerMap.toArray(new  String[record.size()  ]  +  1);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {      [BUGGY]  header  =  this.headerMap.toArray(new  String[record.size()  ]  +  1);  [BUGGY]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.headerMap.toArray(new  String[record.size()  ]  +  1);	  header    =    nextRecord.toArray(new    String[record.size()    ]    +    1);    	non-compiled	[CE]  :  expected	32	None	replace
