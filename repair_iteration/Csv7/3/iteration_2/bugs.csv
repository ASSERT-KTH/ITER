bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  header  =  rec.getHeader();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  rec.getHeader();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.getHeader();	  header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  header  =  nextRecord.getHeader()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.getHeader()  +  1;  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getHeader()  +  1;	  header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  header  =  this.format.getHeader();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  this.format.getHeader();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.format.getHeader();	  header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  header  =  nextRecord.getSkipHeader();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.getSkipHeader();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getSkipHeader();	  header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
5	[BUG]  [BUGGY]  header  =  this.nextRecord.getHeader();  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  this.nextRecord.getHeader();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.getHeader();	  header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
6	[BUG]  [BUGGY]  header  =  nextRecord.getHeader(rec);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.getHeader(rec);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.getHeader(rec);	  header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
7	[BUG]  [BUGGY]  header  =  nextRecord.header(),  this.format.getSkipHeaderRecord());  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.header(),  this.format.getSkipHeaderRecord());  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(),  this.format.getSkipHeaderRecord());	  header    =    nextRecord.header();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  header  =  nextRecord.header()  +  1;  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.header()  +  1;  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  +  1;	  header    =    nextRecord.header();    	non-compiled	[CE]  ')'  expected	6	None	replace
9	[BUG]  [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >  0;  [CE]  ')'  expected  [FE]                      AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >  0;  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >  0;	  header    =    nextRecord.header();    	non-compiled	[CE]  ')'  expected	6	None	replace
10	[BUG]  [BUGGY]  header  =  nextRecord.header()  +  formatHeader.length;  [CE]  ')'  expected  [FE]                        AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.header()  +  formatHeader.length;  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  +  formatHeader.length;	  header    =    nextRecord.header();    	non-compiled	[CE]  ')'  expected	6	None	replace
11	[BUG]  [BUGGY]  header  =  rec.header();  [CE]  ')'  expected  [FE]                          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  rec.header();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.header();	  header    =    nextRecord.header();    	non-compiled	[CE]  ')'  expected	6	None	replace
12	[BUG]  [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >  0);  [CE]  ')'  expected  [FE]                            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >  0);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  &&  this.format.getSkipHeaderRecord().length  >  0);	  header    =    nextRecord.header();    	non-compiled	[CE]  ')'  expected	6	None	replace
13	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  hdrMap.put(header,  nextRecord);  [CE]  ')'  expected  [FE]                      AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap.put(header,  nextRecord);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  nextRecord);	      	non-compiled	[CE]  ')'  expected	7	None	replace
15	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header);  [CE]  ')'  expected  [FE]                        AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header);	      	non-compiled	[CE]  ')'  expected	7	None	replace
16	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length);  [CE]  ')'  expected  [FE]                          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length);	      	non-compiled	[CE]  ')'  expected	7	None	replace
17	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(header);  [CE]  ')'  expected  [FE]                            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(header);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord.add(header);	      	non-compiled	[CE]  ')'  expected	7	None	replace
18	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();  [CE]  illegal  start  of  expression  [FE]                              AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  currentRecord  =  nextRecord.nextRecord();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
19	[BUG]  [BUGGY]  hdrMap.put(rect.toString(),  nextRecord);  [CE]  illegal  start  of  expression  [FE]                                AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap.put(rect.toString(),  nextRecord);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(rect.toString(),  nextRecord);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
20	[BUG]  [BUGGY]  header  =  nextRecord.hashMap();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.hashMap();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.hashMap();	  header    =    nextRecord.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  header  =  rec.hdrMap();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  rec.hdrMap();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.hdrMap();	  header    =    nextRecord.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  header  =  hdrMap.hdrMap();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  hdrMap.hdrMap();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.hdrMap();	  header    =    nextRecord.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  header  =  this.nextRecord.hdrMap();  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  this.nextRecord.hdrMap();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.hdrMap();	  header    =    nextRecord.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  header  =  nextRecord.hdrMap(rec);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.hdrMap(rec);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.hdrMap(rec);	  header    =    nextRecord.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[rec.size()  ]);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[rec.size()  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[rec.size()  ]);	  header    =    nextRecord.toArray(new    String[header.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.size()  ]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.size()  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber.size()  ]);	  header    =    nextRecord.toArray(new    String[header.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[headers.size()  ]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[headers.size()  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[headers.size()  ]);	  header    =    nextRecord.toArray(new    String[header.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
28	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.size()  -  1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[header.size()  -  1]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.size()  -  1]);	  header    =    nextRecord.toArray(new    String[header.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
29	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  -  1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  -  1]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  -  1]);	  header    =    nextRecord.toArray(new    String[record.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
30	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  +  1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  +  1]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  +  1]);	  header    =    nextRecord.toArray(new    String[record.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
31	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[record.size()  ]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  hdrMap.toArray(new  String[record.size()  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[record.size()  ]);	  header    =    nextRecord.toArray(new    String[record.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
32	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  1);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  ]  +  1);	  header    =    nextRecord.toArray(new    String[record.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
33	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  formatHeader);  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  ]  +  formatHeader);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  ]  +  formatHeader);	  header    =    nextRecord.toArray(new    String[record.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
34	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  *  2]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[record.size()  *  2]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[record.size()  *  2]);	  header    =    nextRecord.toArray(new    String[record.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
35	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.size()  -  1]);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.size()  -  1]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordHeader.size()  -  1]);	  header    =    nextRecord.toArray(new    String[recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.size()  +  1]);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.size()  +  1]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordHeader.size()  +  1]);	  header    =    nextRecord.toArray(new    String[recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
37	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length()  ]);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length()  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordHeader.length()  ]);	  header    =    nextRecord.toArray(new    String[recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
38	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length  ]);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[recordHeader.length  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordHeader.length  ]);	  header    =    nextRecord.toArray(new    String[recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[this.recordHeader.size()  ]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[this.recordHeader.size()  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[this.recordHeader.size()  ]);	  header    =    nextRecord.toArray(new    String[recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  header  =  nextRecord.toString()  + ", "  +  this.format.getSkipHeaderRecord();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toString()  + ", "  +  this.format.getSkipHeaderRecord();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  + ", "  +  this.format.getSkipHeaderRecord();	  header    =    nextRecord.toString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  header  =  nextRecord.toString()  + ": "  +  this.format.getSkipHeaderRecord();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toString()  + ": "  +  this.format.getSkipHeaderRecord();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  + ": "  +  this.format.getSkipHeaderRecord();	  header    =    nextRecord.toString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
42	[BUG]  [BUGGY]  header  =  rec.toString();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  rec.toString();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  rec.toString();	  header    =    nextRecord.toString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
43	[BUG]  [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.length;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toString()  +  formatHeader.length;  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  +  formatHeader.length;	  header    =    nextRecord.toString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
44	[BUG]  [BUGGY]  header  =  nextRecord.toString()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toString()  +  1;  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  +  1;	  header    =    nextRecord.toString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
45	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  +  1]);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  +  1]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber  +  1]);	  header    =    nextRecord.toArray(new    String[recordNumber]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
46	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber++]);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber++]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber++]);	  header    =    nextRecord.toArray(new    String[recordNumber]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
47	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  -  1]);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber  -  1]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber  -  1]);	  header    =    nextRecord.toArray(new    String[recordNumber]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
48	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length]);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[header.length]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length]);	  header    =    nextRecord.toArray(new    String[recordNumber]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
49	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  -  1]);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  -  1]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length()  -  1]);	  header    =    nextRecord.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
50	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  +  1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  +  1]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length()  +  1]);	  header    =    nextRecord.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
51	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[rec.length()  ]);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[rec.length()  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[rec.length()  ]);	  header    =    nextRecord.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
52	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.length()  ]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[recordNumber.length()  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[recordNumber.length()  ]);	  header    =    nextRecord.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
53	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  0]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[header.length()  0]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length()  0]);	  header    =    nextRecord.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
54	[BUG]  [BUGGY]  header  =  this.header.hdrMap();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  this.header.hdrMap();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.hdrMap();	  header    =    nextRecord.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
55	[BUG]  [BUGGY]  header  =  hdrMap.hdr();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  hdrMap.hdr();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.hdr();	  header    =    nextRecord.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
56	[BUG]  [BUGGY]  header  =  this.headerMap.hdrMap();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  this.headerMap.hdrMap();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.headerMap.hdrMap();	  header    =    nextRecord.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
57	[BUG]  [BUGGY]  header  =  nextRecord.hdrMap(record);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.hdrMap(record);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.hdrMap(record);	  header    =    nextRecord.hdrMap();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
58	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.toString();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
59	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length());  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length());  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.substring(0,  nextRecord.length());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  nextRecord  =  nextRecord.nextRecord();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
61	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.getHeader();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
62	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.nextRecord();  [CE]  illegal  start  of  expression  [FE]                            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.nextRecord();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =  nextRecord.nextRecord();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
63	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length()  ]);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length()  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[headers.length()  ]);	  header    =    nextRecord.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
64	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[header.length()  ]);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  hdrMap.toArray(new  String[header.length()  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[header.length()  ]);	  header    =    nextRecord.toArray(new    String[header.length()    ]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
65	[BUG]  [BUGGY]  header  =  nextRecord.toString()  +  formatHeader;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toString()  +  formatHeader;  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  +  formatHeader;	  header    =    nextRecord.toString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
66	[BUG]  [BUGGY]  header  =  nextRecord.toString()  + "  - "  +  this.format.getSkipHeaderRecord();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toString()  + "  - "  +  this.format.getSkipHeaderRecord();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  + "  - "  +  this.format.getSkipHeaderRecord();	  header    =    nextRecord.toString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
67	[BUG]  [BUGGY]  header  =  nextRecord.toString()  + ", "  +  this.format.getHeaderRecord();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toString()  + ", "  +  this.format.getHeaderRecord();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toString()  + ", "  +  this.format.getHeaderRecord();	  header    =    nextRecord.toString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[recordNumber]);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  hdrMap.toArray(new  String[recordNumber]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[recordNumber]);	  header    =    nextRecord.toArray(new    String[recordNumber]);    	non-compiled	[CE]  ';'  expected	8	None	replace
69	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[headers.length]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[headers.length]);	  header    =    nextRecord.toArray(new    String[recordNumber]);    	non-compiled	[CE]  ';'  expected	8	None	replace
70	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[header.size()  ]);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  hdrMap.toArray(new  String[header.size()  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[header.size()  ]);	  header    =    nextRecord.toArray(new    String[header.size()    ]);    	non-compiled	[CE]  ';'  expected	5	None	replace
71	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  -  1]);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[header.length  -  1]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[header.length  -  1]);	  header    =    nextRecord.toArray(new    String[header.size()    ]);    	non-compiled	[CE]  ';'  expected	5	None	replace
72	[BUG]  [BUGGY]  header  =  nextRecord.initializeHeader(record);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.initializeHeader(record);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.initializeHeader(record);	  header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
73	[BUG]  [BUGGY]  header  =  this.header.getHeader();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  this.header.getHeader();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.getHeader();	  header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
74	[BUG]  [BUGGY]  header  =  nextRecord.header()  +  formatHeader;  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.header()  +  formatHeader;  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  +  formatHeader;	  header    =    nextRecord.header();    	non-compiled	[CE]  ';'  expected	6	None	replace
75	[BUG]  [BUGGY]  header  =  nextRecord.header()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.header()  -  1;  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header()  -  1;	  header    =    nextRecord.header();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
76	[BUG]  [BUGGY]  header  =  nextRecord.header(rec);  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.header(rec);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(rec);	  header    =    nextRecord.header();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
77	[BUG]  [BUGGY]  header  =  nextRecord.header(0);  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.header(0);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.header(0);	  header    =    nextRecord.header();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
78	[BUG]  [BUGGY]  header  =  hdrMap.toArray(new  String[recordHeader.size()  ]);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  hdrMap.toArray(new  String[recordHeader.size()  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.toArray(new  String[recordHeader.size()  ]);	  header    =    nextRecord.toArray(new    String[recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
79	[BUG]  [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.size()  ]);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.toArray(new  String[this.format.size()  ]);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.toArray(new  String[this.format.size()  ]);	  header    =    nextRecord.toArray(new    String[recordHeader.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
80	[BUG]  [BUGGY]  header  =  nextRecord.removeFirst();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.removeFirst();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.removeFirst();	  header    =    nextRecord.getHeader();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
81	[BUG]  [BUGGY]  header  =  this.nextRecord.toString();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  this.nextRecord.toString();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.toString();	  header    =    nextRecord.toString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
82	[BUG]  [BUGGY]  header  =  this.header.toString();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  this.header.toString();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.toString();	  header    =    nextRecord.toString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
83	[BUG]  [BUGGY]  header  =  nextRecord.substring(0,  nextRecord.length()  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  nextRecord.substring(0,  nextRecord.length()  -  1);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  nextRecord.substring(0,  nextRecord.length()  -  1);	  header    =    nextRecord.toString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
84	[BUG]  [BUGGY]  header  =  this.nextRecord.header();  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  this.nextRecord.header();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.nextRecord.header();	  header    =    nextRecord.header();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
85	[BUG]  [BUGGY]  header  =  hdrMap.header();  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  hdrMap.header();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  hdrMap.header();	  header    =    nextRecord.header();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
86	[BUG]  [BUGGY]  header  =  this.header.record();  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  header  =  this.header.record();  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	header  =  this.header.record();	  header    =    nextRecord.header();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
87	[BUG]  [BUGGY]  hdrMap.put(record,  nextRecord);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap.put(record,  nextRecord);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(record,  nextRecord);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
88	[BUG]  [BUGGY]  hdrMap.put(header,  new  CSVRecord(nextRecord));  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap.put(header,  new  CSVRecord(nextRecord));  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap.put(header,  new  CSVRecord(nextRecord));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
89	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {    [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);  [BUGGY]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	359	359	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  header  =(String[])hdrMap.get(header);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
