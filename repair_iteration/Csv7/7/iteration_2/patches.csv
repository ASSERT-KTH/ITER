bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(this.format.getRecordNumber()  >  0)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()  >  0)  {	  if(this.format.getRecordNumber())    {    	non-compiled	[CE]  :  expected	42	None	replace
2	[BUG]  [BUGGY]  if(this.format.getRecordNumber()  <  header.length)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()  <  header.length)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()  <  header.length)  {	  if(this.format.getRecordNumber())    {    	non-compiled	[CE]  :  expected	42	None	replace
3	[BUG]  [BUGGY]  if(!this.format.getRecordNumber())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(!this.format.getRecordNumber())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(!this.format.getRecordNumber())  {	  if(this.format.getRecordNumber())    {    	non-compiled	[CE]  :  expected	42	None	replace
4	[BUG]  [BUGGY]  if(this.format.getRecordHeader())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordHeader())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordHeader())  {	  if(this.format.getRecordNumber())    {    	non-compiled	[CE]  :  expected	42	None	replace
5	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {  header  }  );  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {  header  }  );  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(formatHeader,  new  String[]  {  header  }  );	  hdrMap.put(formatHeader,    new    String[]    {    }    );    	non-compiled	[CE]  :  expected	55	None	replace
6	[BUG]  [BUGGY]  hdrMap.put(record,  new  String[]  {  }  );  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(record,  new  String[]  {  }  );  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(record,  new  String[]  {  }  );	  hdrMap.put(formatHeader,    new    String[]    {    }    );    	non-compiled	[CE]  :  expected	55	None	replace
7	[BUG]  [BUGGY]  hdrMap.put(format,  new  String[]  {  header  }  );  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(format,  new  String[]  {  header  }  );  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(format,  new  String[]  {  header  }  );	  hdrMap.put(formatHeader,    new    String[]    {    }    );    	non-compiled	[CE]  :  expected	55	None	replace
8	[BUG]  [BUGGY]  hdrMap.put(this.format,  new  String[]  {  }  );  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(this.format,  new  String[]  {  }  );  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(this.format,  new  String[]  {  }  );	  hdrMap.put(formatHeader,    new    String[]    {    }    );    	non-compiled	[CE]  :  expected	55	None	replace
9	[BUG]  [BUGGY]  hdrMap.put(new  String[]  {  formatHeader  }  );  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(new  String[]  {  formatHeader  }  );  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(new  String[]  {  formatHeader  }  );	  hdrMap.put(formatHeader,    new    String[]    {    }    );    	non-compiled	[CE]  :  expected	55	None	replace
10	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  String[0]  {  header  }  );  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(formatHeader,  new  String[0]  {  header  }  );  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(formatHeader,  new  String[0]  {  header  }  );	  hdrMap.put(formatHeader,    new    String[]    {    }    );    	non-compiled	[CE]  :  expected	55	None	replace
11	[BUG]  [BUGGY]  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(this.format    ==    null)    {    	non-compiled	[CE]  :  expected	18	None	replace
12	[BUG]  [BUGGY]  if(this.format!=  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {	  if(this.format    ==    null)    {    	non-compiled	[CE]  :  expected	18	None	replace
13	[BUG]  [BUGGY]  if(this.format!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(this.format    ==    null)    {    	non-compiled	[CE]  :  expected	18	None	replace
14	[BUG]  [BUGGY]  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {	  if(this.format    ==    null)    {    	non-compiled	[CE]  :  expected	18	None	replace
15	[BUG]  [BUGGY]  if(this.format!=  null  ||  this.format.getSkipHeaderRecord()  >=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  ||  this.format.getSkipHeaderRecord()  >=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  ||  this.format.getSkipHeaderRecord()  >=  null)  {	  if(this.format    ==    null)    {    	non-compiled	[CE]  :  expected	18	None	replace
16	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  2  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  2  ||  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length  <  2  ||  header.length  >  0)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	28	None	replace
17	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  4)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  4)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length  <  4)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	28	None	replace
18	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  2  ||  this.format.getSkipHeaderRecord().length()  <  2)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  2  ||  this.format.getSkipHeaderRecord().length()  <  2)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length  <  2  ||  this.format.getSkipHeaderRecord().length()  <  2)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	28	None	replace
19	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  >=  2)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  >=  2)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length  >=  2)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	28	None	replace
20	[BUG]  [BUGGY]  if(this.format.getRecordNumber()!=  null  ||  this.format.getRecordNumber().length()  ==  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()!=  null  ||  this.format.getRecordNumber().length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()!=  null  ||  this.format.getRecordNumber().length()  ==  0)  {	  if(this.format.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
21	[BUG]  [BUGGY]  if(this.format.getRecordNumber()!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(this.format.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
22	[BUG]  [BUGGY]  if(this.format.getRecordNumber()  >=  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()  >=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()  >=  null)  {	  if(this.format.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
23	[BUG]  [BUGGY]  if(this.format.getRecordNumber()  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(this.format.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
24	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  >=  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length  >=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length  >=  0)  {	  if(header    ==    null    ||    header.length!=    0)    {    	non-compiled	[CE]  :  expected	52	None	replace
25	[BUG]  [BUGGY]  if(header!=  null  ||  header.length!=  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  ||  header.length!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  ||  header.length!=  0)  {	  if(header    ==    null    ||    header.length!=    0)    {    	non-compiled	[CE]  :  expected	52	None	replace
26	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  >>  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length  >>  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length  >>  0)  {	  if(header    ==    null    ||    header.length!=    0)    {    	non-compiled	[CE]  :  expected	52	None	replace
27	[BUG]  [BUGGY]  if(formatHeader  ==  null  &&  formatHeader.length  >  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  &&  formatHeader.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  &&  formatHeader.length  >  0)  {	  if(formatHeader!=    null    &&    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	68	None	replace
28	[BUG]  [BUGGY]  if(formatHeader!=  null  &&  formatHeader.length  >  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader!=  null  &&  formatHeader.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader!=  null  &&  formatHeader.length  >  0)  {	  if(formatHeader!=    null    &&    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	68	None	replace
29	[BUG]  [BUGGY]  if(this.format!=  null  &&  formatHeader.length  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  &&  formatHeader.length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  &&  formatHeader.length  ==  0)  {	  if(formatHeader!=    null    &&    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	68	None	replace
30	[BUG]  [BUGGY]  if(this.format.getCSVHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getCSVHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getCSVHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {	  if(this.format.getCSVHeaderRecord())    {    	non-compiled	[CE]  :  expected	61	None	replace
31	[BUG]  [BUGGY]  if(this.format.getCSVHeaderRecord()  >  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getCSVHeaderRecord()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getCSVHeaderRecord()  >  0)  {	  if(this.format.getCSVHeaderRecord())    {    	non-compiled	[CE]  :  expected	61	None	replace
32	[BUG]  [BUGGY]  if(this.format.getRawHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRawHeaderRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRawHeaderRecord())  {	  if(this.format.getCSVHeaderRecord())    {    	non-compiled	[CE]  :  expected	61	None	replace
33	[BUG]  [BUGGY]  if(!this.format.isRecorded())  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(!this.format.isRecorded())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(!this.format.isRecorded())  {	  if(this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	74	None	replace
34	[BUG]  [BUGGY]  if(this.format.isRecorded()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.isRecorded()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.isRecorded()  ||  this.format.getSkipHeaderRecord())  {	  if(this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	74	None	replace
35	[BUG]  [BUGGY]  if(this.format.getRecorded())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecorded())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecorded())  {	  if(this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	74	None	replace
36	[BUG]  [BUGGY]  if(this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.isSkipHeaderRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.isSkipHeaderRecord())  {	  if(this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	74	None	replace
37	[BUG]  [BUGGY]  if(this.format.isRecorded()  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.isRecorded()  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.isRecorded()  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	74	None	replace
38	[BUG]  [BUGGY]  if(this.format.isRecorded()  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.isRecorded()  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.isRecorded()  ||  this.format.getSkipHeaderRecord()  ==  null)  {	  if(this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	74	None	replace
39	[BUG]  [BUGGY]  if(this.format.getRecordName()  ==  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordName()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordName()  ==  null)  {	  if(this.format.getRecordName()!=    null)    {    	non-compiled	[CE]  :  expected	50	None	replace
40	[BUG]  [BUGGY]  if(this.format.getRecordName()!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordName()!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordName()!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(this.format.getRecordName()!=    null)    {    	non-compiled	[CE]  :  expected	50	None	replace
41	[BUG]  [BUGGY]  if(this.format.getRecordName()!=  null  ||  this.format.getRecordName().length()  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordName()!=  null  ||  this.format.getRecordName().length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordName()!=  null  ||  this.format.getRecordName().length()  ==  0)  {	  if(this.format.getRecordName()!=    null)    {    	non-compiled	[CE]  :  expected	50	None	replace
42	[BUG]  [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  1)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  1)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  formatHeader.length  <  1)  {	  if(header    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	63	None	replace
43	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  header.length  <  2)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  header.length  <  2)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  header.length  <  2)  {	  if(header    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	63	None	replace
44	[BUG]  [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  2  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  2  ||  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  formatHeader.length  <  2  ||  header.length  >  0)  {	  if(header    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	63	None	replace
45	[BUG]  [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  hdrMap.length)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  hdrMap.length)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  formatHeader.length  <  hdrMap.length)  {	  if(header    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	63	None	replace
46	[BUG]  [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  hdrMap.size())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  hdrMap.size())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  formatHeader.length  <  hdrMap.size())  {	  if(header    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	63	None	replace
47	[BUG]  [BUGGY]  if(this.format.getCSVHeader()  ==  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getCSVHeader()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getCSVHeader()  ==  null)  {	  if(this.format.getCSVHeader())    {    	non-compiled	[CE]  :  expected	76	None	replace
48	[BUG]  [BUGGY]  if(headers  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(headers    ==    null)    {    	non-compiled	[CE]  :  expected	34	None	replace
49	[BUG]  [BUGGY]  if(headers  ==  null  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers  ==  null  ||  header.length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers  ==  null  ||  header.length()  ==  0)  {	  if(headers    ==    null)    {    	non-compiled	[CE]  :  expected	34	None	replace
50	[BUG]  [BUGGY]  if(headers!=  null  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers!=  null  ||  header.length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers!=  null  ||  header.length()  ==  0)  {	  if(headers    ==    null)    {    	non-compiled	[CE]  :  expected	34	None	replace
51	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length  >  0)  {	  if(header.length    ==    0    ||    header.length    >    0)    {    	non-compiled	[CE]  :  expected	73	None	replace
52	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  ||  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  ||  header.length  >  0)  {	  if(header.length    ==    0    ||    header.length    >    0)    {    	non-compiled	[CE]  :  expected	73	None	replace
53	[BUG]  [BUGGY]  if(header.length  ==  0  ||  header.length!=  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length  ==  0  ||  header.length!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length  ==  0  ||  header.length!=  0)  {	  if(header.length    ==    0    ||    header.length    >    0)    {    	non-compiled	[CE]  :  expected	73	None	replace
54	[BUG]  [BUGGY]  if(header.length  >  0  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length  >  0  ||  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length  >  0  ||  header.length  >  0)  {	  if(header.length    ==    0    ||    header.length    >    0)    {    	non-compiled	[CE]  :  expected	73	None	replace
55	[BUG]  [BUGGY]  if(header.length  ==  0  ||  header.length  <  0)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length  ==  0  ||  header.length  <  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length  ==  0  ||  header.length  <  0)  {	  if(header.length    ==    0    ||    header.length    >    0)    {    	non-compiled	[CE]  :  expected	73	None	replace
56	[BUG]  [BUGGY]  if(header.length  ==  0  ||  header.length  >=  0)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length  ==  0  ||  header.length  >=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length  ==  0  ||  header.length  >=  0)  {	  if(header.length    ==    0    ||    header.length    >    0)    {    	non-compiled	[CE]  :  expected	73	None	replace
57	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length  ==  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length!=  0  ||  header.length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length!=  0  ||  header.length  ==  0)  {	  if(header.length    ==    0    ||    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	72	None	replace
58	[BUG]  [BUGGY]  if(header  >=  null  ||  header.length  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  >=  null  ||  header.length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  >=  null  ||  header.length  ==  0)  {	  if(header.length    ==    0    ||    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	72	None	replace
59	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  1  ||  header.length  >  0)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  1  ||  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length  <  1  ||  header.length  >  0)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    1)    {    	non-compiled	[CE]  :  expected	69	None	replace
60	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  >=  1)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  >=  1)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length  >=  1)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    1)    {    	non-compiled	[CE]  :  expected	69	None	replace
61	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  1  ||  this.format.getSkipHeaderRecord().length()  <  1)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  1  ||  this.format.getSkipHeaderRecord().length()  <  1)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length  <  1  ||  this.format.getSkipHeaderRecord().length()  <  1)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    1)    {    	non-compiled	[CE]  :  expected	69	None	replace
62	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length!=  1)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length!=  1)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length!=  1)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    1)    {    	non-compiled	[CE]  :  expected	69	None	replace
63	[BUG]  [BUGGY]  if(header  ==  null  ||  formatHeader.length()!=  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  formatHeader.length()!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  formatHeader.length()!=  0)  {	  if(header    ==    null    ||    formatHeader.length()    ==    0)    {    	non-compiled	[CE]  :  expected	38	None	replace
64	[BUG]  [BUGGY]  if(header!=  null  ||  formatHeader.length()  ==  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  ||  formatHeader.length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  ||  formatHeader.length()  ==  0)  {	  if(header    ==    null    ||    formatHeader.length()    ==    0)    {    	non-compiled	[CE]  :  expected	38	None	replace
65	[BUG]  [BUGGY]  if(header  ==  null  ||  formatHeader.length()  >=  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  formatHeader.length()  >=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  formatHeader.length()  >=  0)  {	  if(header    ==    null    ||    formatHeader.length()    ==    0)    {    	non-compiled	[CE]  :  expected	38	None	replace
66	[BUG]  [BUGGY]  if(header  ==  null  ||  formatHeader.length()  <  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  formatHeader.length()  <  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  formatHeader.length()  <  0)  {	  if(header    ==    null    ||    formatHeader.length()    ==    0)    {    	non-compiled	[CE]  :  expected	38	None	replace
67	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  =  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  =  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length  <  =  0)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    0)    {    	non-compiled	[CE]  :  expected	48	None	replace
68	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  >  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length  >  0)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    0)    {    	non-compiled	[CE]  :  expected	48	None	replace
69	[BUG]  [BUGGY]  hdrMap.put(header,  htmlHeader);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(header,  htmlHeader);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(header,  htmlHeader);	  hdrMap.put(htmlHeader,    header);    	non-compiled	[CE]  :  expected	54	None	replace
70	[BUG]  [BUGGY]  hdrMap.put(htmlHeader,  formatHeader);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(htmlHeader,  formatHeader);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(htmlHeader,  formatHeader);	  hdrMap.put(htmlHeader,    header);    	non-compiled	[CE]  :  expected	54	None	replace
71	[BUG]  [BUGGY]  hdrMap.put(htmlHeader,  header[0]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(htmlHeader,  header[0]);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(htmlHeader,  header[0]);	  hdrMap.put(htmlHeader,    header);    	non-compiled	[CE]  :  expected	54	None	replace
72	[BUG]  [BUGGY]  hdrMap  =  new  ConcurrentHashMap  <  String,  Integer>();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  ConcurrentHashMap  <  String,  Integer>();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  ConcurrentHashMap  <  String,  Integer>();	  hdrMap    =    new    HashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	13	None	replace
73	[BUG]  [BUGGY]  hdrMap  =  new  TreeMap  <  String,  Integer>();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  TreeMap  <  String,  Integer>();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  TreeMap  <  String,  Integer>();	  hdrMap    =    new    HashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	13	None	replace
74	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  header.length!=  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  header.length!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  header.length!=  0)  {	  if(header    ==    null    ||    formatHeader.length!=    0)    {    	non-compiled	[CE]  :  expected	37	None	replace
75	[BUG]  [BUGGY]  if(header!=  null  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  ||  header.length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  ||  header.length()  ==  0)  {	  if(formatHeader    ==    null    ||    header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	67	None	replace
76	[BUG]  [BUGGY]  if(this.format  ==  null  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  header.length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  header.length()  ==  0)  {	  if(formatHeader    ==    null    ||    header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	67	None	replace
77	[BUG]  [BUGGY]  if(this.format!=  null  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  ||  header.length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  ||  header.length()  ==  0)  {	  if(formatHeader    ==    null    ||    header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	67	None	replace
78	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length()  >=  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length()  >=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length()  >=  0)  {	  if(header    ==    null    ||    header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	9	None	replace
79	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length()  <  =  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length()  <  =  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length()  <  =  0)  {	  if(header    ==    null    ||    header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	9	None	replace
80	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length()  ==  1)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length()  ==  1)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length()  ==  1)  {	  if(header    ==    null    ||    header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	9	None	replace
81	[BUG]  [BUGGY]  if(header  ==  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {	  if(this.format    ==    null    ||    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	64	None	replace
82	[BUG]  [BUGGY]  if(this.format  ==  null  ||  header.length!=  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  header.length!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  header.length!=  0)  {	  if(this.format    ==    null    ||    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	64	None	replace
83	[BUG]  [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  ArrayList  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	12	None	replace
84	[BUG]  [BUGGY]  hdrMap  =  new  LinkedList  <  String,  Integer>();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedList  <  String,  Integer>();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedList  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	12	None	replace
85	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(1);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(1);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(1);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	12	None	replace
86	[BUG]  [BUGGY]  if(this.format  ==  null  ||  formatHeader.length!=  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  formatHeader.length!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  formatHeader.length!=  0)  {	  if(this.format    ==    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	29	None	replace
87	[BUG]  [BUGGY]  if(this.format  ==  null  ||  formatHeader.length()  ==  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  formatHeader.length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  formatHeader.length()  ==  0)  {	  if(this.format    ==    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	29	None	replace
88	[BUG]  [BUGGY]  if(this.format  ==  null  ||  formatHeader.length  >=  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  formatHeader.length  >=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  formatHeader.length  >=  0)  {	  if(this.format    ==    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	29	None	replace
89	[BUG]  [BUGGY]  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  ==  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  ==  0)  {	  if(this.format    ==    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	29	None	replace
90	[BUG]  [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  hdrMap.values();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  hdrMap.values();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	HdrMap  <  String,  Integer>  headerMap  =  hdrMap.values();	  HdrMap    <    String,    Integer>    headerMap    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	16	None	replace
91	[BUG]  [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  headerMap.keySet();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  headerMap.keySet();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	HdrMap  <  String,  Integer>  headerMap  =  headerMap.keySet();	  HdrMap    <    String,    Integer>    headerMap    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	16	None	replace
92	[BUG]  [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  this.hdrMap.keySet();  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  this.hdrMap.keySet();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	HdrMap  <  String,  Integer>  headerMap  =  this.hdrMap.keySet();	  HdrMap    <    String,    Integer>    headerMap    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	16	None	replace
93	[BUG]  [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  hdrMap.get(header);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  hdrMap.get(header);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	HdrMap  <  String,  Integer>  headerMap  =  hdrMap.get(header);	  HdrMap    <    String,    Integer>    headerMap    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	16	None	replace
94	[BUG]  [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  this.headerMap.keySet();  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  this.headerMap.keySet();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	HdrMap  <  String,  Integer>  headerMap  =  this.headerMap.keySet();	  HdrMap    <    String,    Integer>    headerMap    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	16	None	replace
95	[BUG]  [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  hdrMap.get(formatHeader);  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  hdrMap.get(formatHeader);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	HdrMap  <  String,  Integer>  headerMap  =  hdrMap.get(formatHeader);	  HdrMap    <    String,    Integer>    headerMap    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	16	None	replace
96	[BUG]  [BUGGY]  hdrMap.put(header,  formatHeader[0]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(header,  formatHeader[0]);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(header,  formatHeader[0]);	  hdrMap.put(header,    formatHeader);    	non-compiled	[CE]  :  expected	56	None	replace
97	[BUG]  [BUGGY]  hdrMap.put(0,  formatHeader);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(0,  formatHeader);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(0,  formatHeader);	  hdrMap.put(header,    formatHeader);    	non-compiled	[CE]  :  expected	56	None	replace
98	[BUG]  [BUGGY]  if(header  ==  null  &&  header.length  >  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  &&  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  &&  header.length  >  0)  {	  if(header!=    null    &&    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	71	None	replace
99	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  &&  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  &&  header.length  >  0)  {	  if(header!=    null    &&    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	71	None	replace
100	[BUG]  [BUGGY]  if(header  ==  null  &&  header.length!=  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  &&  header.length!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  &&  header.length!=  0)  {	  if(header!=    null    &&    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	71	None	replace
101	[BUG]  [BUGGY]  if(this.format.getRecordCount()  >  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordCount()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordCount()  >  0)  {	  if(this.format.getRecordCount())    {    	non-compiled	[CE]  :  expected	47	None	replace
102	[BUG]  [BUGGY]  if(this.format.getRecordCount()  >  1)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordCount()  >  1)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordCount()  >  1)  {	  if(this.format.getRecordCount())    {    	non-compiled	[CE]  :  expected	47	None	replace
103	[BUG]  [BUGGY]  if(this.format.getRecordCount()  >  0  ||  this.format.getRecordCount()  >  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordCount()  >  0  ||  this.format.getRecordCount()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordCount()  >  0  ||  this.format.getRecordCount()  >  0)  {	  if(this.format.getRecordCount())    {    	non-compiled	[CE]  :  expected	47	None	replace
104	[BUG]  [BUGGY]  if(!this.format.getRecordCount())  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(!this.format.getRecordCount())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(!this.format.getRecordCount())  {	  if(this.format.getRecordCount())    {    	non-compiled	[CE]  :  expected	47	None	replace
105	[BUG]  [BUGGY]  if(this.format.getRawHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRawHeaderRecord()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRawHeaderRecord()  ==  null)  {	  if(this.format.getCSVHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	23	None	replace
106	[BUG]  [BUGGY]  if(this.format.getHeaderRecord()  >  0)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecord()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecord()  >  0)  {	  if(this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	41	None	replace
107	[BUG]  [BUGGY]  if(!this.format.getHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(!this.format.getHeaderRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(!this.format.getHeaderRecord())  {	  if(this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	41	None	replace
108	[BUG]  [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader.length);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader.length);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader.length);	  hdrMap    =    new    HashMap    <    String,    Integer>(formatHeader);    	non-compiled	[CE]  :  expected	15	None	replace
109	[BUG]  [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(header);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(header);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  HashMap  <  String,  Integer>(header);	  hdrMap    =    new    HashMap    <    String,    Integer>(formatHeader);    	non-compiled	[CE]  :  expected	15	None	replace
110	[BUG]  [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader[0]);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader[0]);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader[0]);	  hdrMap    =    new    HashMap    <    String,    Integer>(formatHeader);    	non-compiled	[CE]  :  expected	15	None	replace
111	[BUG]  [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(this.format);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(this.format);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  HashMap  <  String,  Integer>(this.format);	  hdrMap    =    new    HashMap    <    String,    Integer>(formatHeader);    	non-compiled	[CE]  :  expected	15	None	replace
112	[BUG]  [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(recordNumber);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(recordNumber);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  HashMap  <  String,  Integer>(recordNumber);	  hdrMap    =    new    HashMap    <    String,    Integer>(formatHeader);    	non-compiled	[CE]  :  expected	15	None	replace
113	[BUG]  [BUGGY]  hdrMap.put(this.format,  formatHeader);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(this.format,  formatHeader);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(this.format,  formatHeader);	  hdrMap.put(formatHeader,    this.format);    	non-compiled	[CE]  :  expected	53	None	replace
114	[BUG]  [BUGGY]  hdrMap.put(this.format,  header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(this.format,  header);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(this.format,  header);	  hdrMap.put(formatHeader,    this.format);    	non-compiled	[CE]  :  expected	53	None	replace
115	[BUG]  [BUGGY]  hdrMap.put(header,  this.format);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(header,  this.format);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(header,  this.format);	  hdrMap.put(formatHeader,    this.format);    	non-compiled	[CE]  :  expected	53	None	replace
116	[BUG]  [BUGGY]  hdrMap.put(rec,  this.format);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(rec,  this.format);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(rec,  this.format);	  hdrMap.put(formatHeader,    this.format);    	non-compiled	[CE]  :  expected	53	None	replace
117	[BUG]  [BUGGY]  hdrMap.put(template,  this.format);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(template,  this.format);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(template,  this.format);	  hdrMap.put(formatHeader,    this.format);    	non-compiled	[CE]  :  expected	53	None	replace
118	[BUG]  [BUGGY]  if(this.format.getRecords()  >  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecords()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecords()  >  0)  {	  if(this.format.getRecords())    {    	non-compiled	[CE]  :  expected	44	None	replace
119	[BUG]  [BUGGY]  if(!this.format.getRecords())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(!this.format.getRecords())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(!this.format.getRecords())  {	  if(this.format.getRecords())    {    	non-compiled	[CE]  :  expected	44	None	replace
120	[BUG]  [BUGGY]  if(header!=  null  ||  header.length()!=  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  ||  header.length()!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  ||  header.length()!=  0)  {	  if(header    ==    null    ||    header.length()!=    0)    {    	non-compiled	[CE]  :  expected	58	None	replace
121	[BUG]  [BUGGY]  if(headers  ==  null  ||  header.length()!=  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers  ==  null  ||  header.length()!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers  ==  null  ||  header.length()!=  0)  {	  if(header    ==    null    ||    header.length()!=    0)    {    	non-compiled	[CE]  :  expected	58	None	replace
122	[BUG]  [BUGGY]  if(this.format.getBaseHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getBaseHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getBaseHeaderRecord()!=  null)  {	  if(this.format.getHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	1	None	replace
123	[BUG]  [BUGGY]  if(this.format.getRecord()  >  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecord()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecord()  >  0)  {	  if(this.format.getRecord())    {    	non-compiled	[CE]  :  expected	43	None	replace
124	[BUG]  [BUGGY]  if(!this.format.getRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(!this.format.getRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(!this.format.getRecord())  {	  if(this.format.getRecord())    {    	non-compiled	[CE]  :  expected	43	None	replace
125	[BUG]  [BUGGY]  if(this.format.getRecords()!=  null  ||  this.format.getRecords().length  ==  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecords()!=  null  ||  this.format.getRecords().length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecords()!=  null  ||  this.format.getRecords().length  ==  0)  {	  if(this.format.getRecords()    ==    null)    {    	non-compiled	[CE]  :  expected	22	None	replace
126	[BUG]  [BUGGY]  if(this.format.getRecords()!=  null  ||  header  ==  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecords()!=  null  ||  header  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecords()!=  null  ||  header  ==  null)  {	  if(this.format.getRecords()    ==    null)    {    	non-compiled	[CE]  :  expected	22	None	replace
127	[BUG]  [BUGGY]  if(this.format.getBaseHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getBaseHeaderRecord()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getBaseHeaderRecord()  ==  null)  {	  if(this.format.getHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	20	None	replace
128	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  1)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length  <  1)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length  <  1)  {	  if(header    ==    null    ||    header.length    <    2)    {    	non-compiled	[CE]  :  expected	65	None	replace
129	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length  <  2  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(header    ==    null    ||    header.length    <    2)    {    	non-compiled	[CE]  :  expected	65	None	replace
130	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  this.format.getSkipHeaderRecord().values().length  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  this.format.getSkipHeaderRecord().values().length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length  <  2  ||  this.format.getSkipHeaderRecord().values().length  >  0)  {	  if(header    ==    null    ||    header.length    <    2)    {    	non-compiled	[CE]  :  expected	65	None	replace
131	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  this.format.getSkipHeaderRecord().values().length)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  this.format.getSkipHeaderRecord().values().length)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length  <  2  ||  this.format.getSkipHeaderRecord().values().length)  {	  if(header    ==    null    ||    header.length    <    2)    {    	non-compiled	[CE]  :  expected	65	None	replace
132	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  1  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length  <  1  ||  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length  <  1  ||  header.length  >  0)  {	  if(header    ==    null    ||    header.length    <    2)    {    	non-compiled	[CE]  :  expected	65	None	replace
133	[BUG]  [BUGGY]  if(header  ==  null  ||  this.format.getHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  this.format.getHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  this.format.getHeaderRecord()!=  null)  {	  if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	6	None	replace
134	[BUG]  [BUGGY]  if(header  ==  null  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  &&  this.format.getSkipHeaderRecord()!=  null)  {	  if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	6	None	replace
135	[BUG]  [BUGGY]  if(header  ==  null  ||  this.format.getRecordNumber()!=  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  this.format.getRecordNumber()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  this.format.getRecordNumber()!=  null)  {	  if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	6	None	replace
136	[BUG]  [BUGGY]  if(this.format!=  null  ||  header  ==  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  ||  header  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  ||  header  ==  null)  {	  if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	6	None	replace
137	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader);    	non-compiled	[CE]  :  expected	14	None	replace
138	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader[0]);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader[0]);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader[0]);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader);    	non-compiled	[CE]  :  expected	14	None	replace
139	[BUG]  [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>(formatHeader);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>(formatHeader);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  ArrayList  <  String,  Integer>(formatHeader);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader);    	non-compiled	[CE]  :  expected	14	None	replace
140	[BUG]  [BUGGY]  if(this.format.getHeaderRecords()  >  0)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecords()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecords()  >  0)  {	  if(this.format.getHeaderRecords())    {    	non-compiled	[CE]  :  expected	75	None	replace
141	[BUG]  [BUGGY]  if(!this.format.getHeaderRecords())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(!this.format.getHeaderRecords())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(!this.format.getHeaderRecords())  {	  if(this.format.getHeaderRecords())    {    	non-compiled	[CE]  :  expected	75	None	replace
142	[BUG]  [BUGGY]  if(this.format.getCSVHeaderRecords())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getCSVHeaderRecords())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getCSVHeaderRecords())  {	  if(this.format.getHeaderRecords())    {    	non-compiled	[CE]  :  expected	75	None	replace
143	[BUG]  [BUGGY]  if(this.format.getHeaderRecords()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecords()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecords()!=  null)  {	  if(this.format.getHeaderRecords())    {    	non-compiled	[CE]  :  expected	75	None	replace
144	[BUG]  [BUGGY]  if(this.format.getRecords()!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecords()!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecords()!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(this.format.getRecords()!=    null)    {    	non-compiled	[CE]  :  expected	3	None	replace
145	[BUG]  [BUGGY]  if(this.format!=  null  ||  formatHeader.length!=  0)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  ||  formatHeader.length!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  ||  formatHeader.length!=  0)  {	  if(formatHeader    ==    null    ||    formatHeader.length!=    0)    {    	non-compiled	[CE]  :  expected	25	None	replace
146	[BUG]  [BUGGY]  if(this.format.getRecordNumber()!=  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()!=  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()!=  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {	  if(this.format.getRecordNumber()    ==    null)    {    	non-compiled	[CE]  :  expected	21	None	replace
147	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  header.length  >=  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  header.length  >=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  header.length  >=  0)  {	  if(header    ==    null    ||    formatHeader.length    >=    0)    {    	non-compiled	[CE]  :  expected	39	None	replace
148	[BUG]  [BUGGY]  if(header  ==  null  ||  formatHeader.length  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  formatHeader.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  formatHeader.length  >  0)  {	  if(header    ==    null    ||    formatHeader.length    >=    0)    {    	non-compiled	[CE]  :  expected	39	None	replace
149	[BUG]  [BUGGY]  hdrMap.put(template,  header);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(template,  header);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(template,  header);	  hdrMap.put(formatHeader,    header);    	non-compiled	[CE]  :  expected	11	None	replace
150	[BUG]  [BUGGY]  hdrMap.put(rec,  header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(rec,  header);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(rec,  header);	  hdrMap.put(formatHeader,    header);    	non-compiled	[CE]  :  expected	11	None	replace
151	[BUG]  [BUGGY]  hdrMap.put(0,  header);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(0,  header);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(0,  header);	  hdrMap.put(formatHeader,    header);    	non-compiled	[CE]  :  expected	11	None	replace
152	[BUG]  [BUGGY]  if(headers  ==  null  ||  header.length  ==  0)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers  ==  null  ||  header.length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers  ==  null  ||  header.length  ==  0)  {	  if(formatHeader    ==    null    ||    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	36	None	replace
153	[BUG]  [BUGGY]  if(this.format!=  null  ||  header.length  ==  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  ||  header.length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  ||  header.length  ==  0)  {	  if(formatHeader    ==    null    ||    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	36	None	replace
154	[BUG]  [BUGGY]  if(header.length()  ==  0  ||  header.charAt(header.length()  -  1)!=  '/')  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length()  ==  0  ||  header.charAt(header.length()  -  1)!=  '/')  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length()  ==  0  ||  header.charAt(header.length()  -  1)!=  '/')  {	  if(header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	32	None	replace
155	[BUG]  [BUGGY]  if(header.length()  ==  0  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length()  ==  0  ||  header.length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length()  ==  0  ||  header.length()  ==  0)  {	  if(header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	32	None	replace
156	[BUG]  [BUGGY]  if(header.length()!=  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length()!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length()!=  0)  {	  if(header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	32	None	replace
157	[BUG]  [BUGGY]  if(header.length()  ==  0  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length()  ==  0  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length()  ==  0  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	32	None	replace
158	[BUG]  [BUGGY]  if(this.nextRecord!=  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.nextRecord!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.nextRecord!=  null)  {	  if(nextRecord!=    null)    {    	non-compiled	[CE]  :  expected	10	None	replace
159	[BUG]  [BUGGY]  if(nextRecord  ==  null)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(nextRecord  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(nextRecord  ==  null)  {	  if(nextRecord!=    null)    {    	non-compiled	[CE]  :  expected	10	None	replace
160	[BUG]  [BUGGY]  if(this.nextRecord  ==  null)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.nextRecord  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.nextRecord  ==  null)  {	  if(nextRecord!=    null)    {    	non-compiled	[CE]  :  expected	10	None	replace
161	[BUG]  [BUGGY]  if(!this.format.getHeader())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(!this.format.getHeader())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(!this.format.getHeader())  {	  if(this.format.getHeader())    {    	non-compiled	[CE]  :  expected	45	None	replace
162	[BUG]  [BUGGY]  if(this.format!=  null  ||  formatHeader.length()  ==  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  ||  formatHeader.length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  ||  formatHeader.length()  ==  0)  {	  if(this.format!=    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	35	None	replace
163	[BUG]  [BUGGY]  if(this.format!=  null  ||  formatHeader.length  >=  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  ||  formatHeader.length  >=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  ||  formatHeader.length  >=  0)  {	  if(this.format!=    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	35	None	replace
164	[BUG]  [BUGGY]  if(this.format!=  null  ||  formatHeader.length  <  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  ||  formatHeader.length  <  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  ||  formatHeader.length  <  0)  {	  if(this.format!=    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	35	None	replace
165	[BUG]  [BUGGY]  if(headers!=  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers!=  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers!=  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {	  if(headers!=    null)    {    	non-compiled	[CE]  :  expected	19	None	replace
166	[BUG]  [BUGGY]  if(headers!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(headers!=    null)    {    	non-compiled	[CE]  :  expected	19	None	replace
167	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  +  1);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  +  1);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  +  1);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  :  expected	17	None	replace
168	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  :  expected	17	None	replace
169	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  -  1);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  -  1);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  -  1);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  :  expected	17	None	replace
170	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  *  2);  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  *  2);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  *  2);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  :  expected	17	None	replace
171	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  +  2);  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  +  2);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  +  2);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  :  expected	17	None	replace
172	[BUG]  [BUGGY]  hdrMap.put(record,  formatHeader);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(record,  formatHeader);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(record,  formatHeader);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	62	None	replace
173	[BUG]  [BUGGY]  hdrMap.put(record,  header[0]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(record,  header[0]);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(record,  header[0]);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	62	None	replace
174	[BUG]  [BUGGY]  hdrMap.put(header,  record);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(header,  record);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(header,  record);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	62	None	replace
175	[BUG]  [BUGGY]  hdrMap.put(record,  header  +  1);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(record,  header  +  1);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(record,  header  +  1);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	62	None	replace
176	[BUG]  [BUGGY]  if(this.format.getRawHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRawHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRawHeaderRecord()!=  null)  {	  if(this.format.getCSVHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	4	None	replace
177	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  header.length  <  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  header.length  <  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  header.length  <  0)  {	  if(header    ==    null    ||    formatHeader.length    <    0)    {    	non-compiled	[CE]  :  expected	40	None	replace
178	[BUG]  [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  =  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  =  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  formatHeader.length  <  =  0)  {	  if(header    ==    null    ||    formatHeader.length    <    0)    {    	non-compiled	[CE]  :  expected	40	None	replace
179	[BUG]  [BUGGY]  if(header.length  >=  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length  >=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length  >=  0)  {	  if(header.length!=    0)    {    	non-compiled	[CE]  :  expected	33	None	replace
180	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord()  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getSkipHeaderRecord()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getSkipHeaderRecord()  ==  0)  {	  if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	46	None	replace
181	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord()!=  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getSkipHeaderRecord()!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getSkipHeaderRecord()!=  0)  {	  if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	46	None	replace
182	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord()  <  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getSkipHeaderRecord()  <  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getSkipHeaderRecord()  <  0)  {	  if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	46	None	replace
183	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord()  >=  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getSkipHeaderRecord()  >=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getSkipHeaderRecord()  >=  0)  {	  if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	46	None	replace
184	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length!=  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length!=  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  if(header.length    ==    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  :  expected	70	None	replace
185	[BUG]  [BUGGY]  if(header.length()  ==  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length()  ==  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length()  ==  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  if(header.length    ==    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  :  expected	70	None	replace
186	[BUG]  [BUGGY]  if(header!=  null  ||  header.length()  ==  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  ||  header.length()  ==  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  ||  header.length()  ==  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  if(header.length    ==    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  :  expected	70	None	replace
187	[BUG]  [BUGGY]  if(header.length  >=  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length  >=  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length  >=  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  if(header.length    ==    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  :  expected	70	None	replace
188	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length()  ==  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length()  ==  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length()  ==  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  if(header.length    ==    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  :  expected	70	None	replace
189	[BUG]  [BUGGY]  if(header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  if(header.length    ==    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  :  expected	70	None	replace
190	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length()!=  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length()!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length()!=  0)  {	  if(formatHeader    ==    null    ||    formatHeader.length()    ==    0)    {    	non-compiled	[CE]  :  expected	26	None	replace
191	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length()  >=  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length()  >=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length()  >=  0)  {	  if(formatHeader    ==    null    ||    formatHeader.length()    ==    0)    {    	non-compiled	[CE]  :  expected	26	None	replace
192	[BUG]  [BUGGY]  if(header  ==  null  &&  header.length  <  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  &&  header.length  <  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  &&  header.length  <  0)  {	  if(header!=    null    &&    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	71	None	replace
193	[BUG]  [BUGGY]  if(header  >=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  >=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  >=  null)  {	  if(header!=    null)    {    	non-compiled	[CE]  :  expected	7	None	replace
194	[BUG]  [BUGGY]  if(formatHeader!=  null  ||  formatHeader.length  <  1)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader!=  null  ||  formatHeader.length  <  1)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader!=  null  ||  formatHeader.length  <  1)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    1)    {    	non-compiled	[CE]  :  expected	69	None	replace
195	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length!=  2)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length!=  2)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length!=  2)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	28	None	replace
196	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  2  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  2  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length  <  2  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	28	None	replace
197	[BUG]  [BUGGY]  if(this.format.getRecordNumberRecord())  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumberRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumberRecord())  {	  if(this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	74	None	replace
198	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  <  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  ||  header.length  <  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  ||  header.length  <  0)  {	  if(header    ==    null    ||    header.length    <    0)    {    	non-compiled	[CE]  :  expected	59	None	replace
199	[BUG]  [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(1);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(1);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  HashMap  <  String,  Integer>(1);	  hdrMap    =    new    HashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	13	None	replace
200	[BUG]  [BUGGY]  hdrMap.put(template,  formatHeader);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(template,  formatHeader);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(template,  formatHeader);	  hdrMap.put(formatHeader,    header);    	non-compiled	[CE]  :  expected	11	None	replace
201	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  header  +  1);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(formatHeader,  header  +  1);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(formatHeader,  header  +  1);	  hdrMap.put(formatHeader,    header);    	non-compiled	[CE]  :  expected	11	None	replace
202	[BUG]  [BUGGY]  if(this.format  ==  null  ||  this.format.getHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  this.format.getHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  this.format.getHeaderRecord()!=  null)  {	  if(this.format    ==    null)    {    	non-compiled	[CE]  :  expected	18	None	replace
203	[BUG]  [BUGGY]  if(this.format.getRecordHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordHeaderRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordHeaderRecord())  {	  if(this.format.getRecordNumber())    {    	non-compiled	[CE]  :  expected	42	None	replace
204	[BUG]  [BUGGY]  if(this.format.getRecordNumber()  +  header.length()  >  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()  +  header.length()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()  +  header.length()  >  0)  {	  if(this.format.getRecordNumber())    {    	non-compiled	[CE]  :  expected	42	None	replace
205	[BUG]  [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader  +  1);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader  +  1);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader  +  1);	  hdrMap    =    new    HashMap    <    String,    Integer>(formatHeader);    	non-compiled	[CE]  :  expected	15	None	replace
206	[BUG]  [BUGGY]  if(this.format.getHeader()  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeader()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeader()  >  0)  {	  if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	46	None	replace
207	[BUG]  [BUGGY]  if(this.format.getHeaderRecords()  ||  header  ==  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecords()  ||  header  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecords()  ||  header  ==  null)  {	  if(this.format.getHeaderRecords())    {    	non-compiled	[CE]  :  expected	75	None	replace
208	[BUG]  [BUGGY]  if(this.format.getHeaderRecords()  >  1)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecords()  >  1)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecords()  >  1)  {	  if(this.format.getHeaderRecords())    {    	non-compiled	[CE]  :  expected	75	None	replace
209	[BUG]  [BUGGY]  if(headers  ==  null  ||  formatHeader.length  ==  0)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers  ==  null  ||  formatHeader.length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers  ==  null  ||  formatHeader.length  ==  0)  {	  if(formatHeader    ==    null    ||    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	36	None	replace
210	[BUG]  [BUGGY]  hdrMap  =  new  ArrayHashMap  <  String,  Integer>();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  ArrayHashMap  <  String,  Integer>();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  ArrayHashMap  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	12	None	replace
211	[BUG]  [BUGGY]  hdrMap  =  new  java.util.ArrayList  <  String,  Integer>();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  java.util.ArrayList  <  String,  Integer>();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  java.util.ArrayList  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	12	None	replace
212	[BUG]  [BUGGY]  if(header  ==  null  ||  this.header.length()  ==  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  this.header.length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  this.header.length()  ==  0)  {	  if(header    ==    null    ||    header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	9	None	replace
213	[BUG]  [BUGGY]  hdrMap.put(header,  formatHeader  +  1);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(header,  formatHeader  +  1);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(header,  formatHeader  +  1);	  hdrMap.put(header,    formatHeader);    	non-compiled	[CE]  :  expected	56	None	replace
214	[BUG]  [BUGGY]  if(this.format.getRecordHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordHeaderRecord()!=  null)  {	  if(this.format.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
215	[BUG]  [BUGGY]  if(this.format.getRecordHeader()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordHeader()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordHeader()!=  null)  {	  if(this.format.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
216	[BUG]  [BUGGY]  if(this.format.getHeaderRecord()  <  this.header)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecord()  <  this.header)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecord()  <  this.header)  {	  if(this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	41	None	replace
217	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.values());  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.values());  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.values());	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  :  expected	17	None	replace
218	[BUG]  [BUGGY]  if(formatHeader!=  null  ||  header.length  ==  0)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader!=  null  ||  header.length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader!=  null  ||  header.length  ==  0)  {	  if(header!=    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	51	None	replace
219	[BUG]  [BUGGY]  if(this.format.getNumberRecord()!=  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getNumberRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getNumberRecord()!=  null)  {	  if(this.format.getRecord()!=    null)    {    	non-compiled	[CE]  :  expected	5	None	replace
220	[BUG]  [BUGGY]  if(header.length  ==  0  ||  formatHeader.length  ==  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length  ==  0  ||  formatHeader.length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length  ==  0  ||  formatHeader.length  ==  0)  {	  if(header.length    ==    0    ||    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	72	None	replace
221	[BUG]  [BUGGY]  if(this.format.getRecordHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordHeaderRecord()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordHeaderRecord()  ==  null)  {	  if(this.format.getRecordNumber()    ==    null)    {    	non-compiled	[CE]  :  expected	21	None	replace
222	[BUG]  [BUGGY]  if(this.format.getRecordHeader()  ==  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordHeader()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordHeader()  ==  null)  {	  if(this.format.getRecordNumber()    ==    null)    {    	non-compiled	[CE]  :  expected	21	None	replace
223	[BUG]  [BUGGY]  if(formatHeader!=  null  ||  formatHeader.length()  ==  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader!=  null  ||  formatHeader.length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader!=  null  ||  formatHeader.length()  ==  0)  {	  if(formatHeader    ==    null    ||    formatHeader.length()    ==    0)    {    	non-compiled	[CE]  :  expected	26	None	replace
224	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length()  ==  1)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length()  ==  1)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length()  ==  1)  {	  if(formatHeader    ==    null    ||    formatHeader.length()    ==    0)    {    	non-compiled	[CE]  :  expected	26	None	replace
225	[BUG]  [BUGGY]  if(header  ==  null  ||  formatHeader!=  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  formatHeader!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  formatHeader!=  null)  {	  if(header    ==    null    ||    formatHeader.length()    ==    0)    {    	non-compiled	[CE]  :  expected	38	None	replace
226	[BUG]  [BUGGY]  if(header  ==  null  ||  this.format.getHeader()!=  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  this.format.getHeader()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  this.format.getHeader()!=  null)  {	  if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	6	None	replace
227	[BUG]  [BUGGY]  if(header  ==  null  ||  this.format.getRecords()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  this.format.getRecords()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  this.format.getRecords()!=  null)  {	  if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	6	None	replace
228	[BUG]  [BUGGY]  if(this.format.getNumberRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getNumberRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getNumberRecord())  {	  if(this.format.getRecord())    {    	non-compiled	[CE]  :  expected	43	None	replace
229	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  String[0]  {  }  );  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(formatHeader,  new  String[0]  {  }  );  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(formatHeader,  new  String[0]  {  }  );	  hdrMap.put(formatHeader,    new    String[]    {    }    );    	non-compiled	[CE]  :  expected	55	None	replace
230	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {   " "  }  );  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {   " "  }  );  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(formatHeader,  new  String[]  {   " "  }  );	  hdrMap.put(formatHeader,    new    String[]    {    }    );    	non-compiled	[CE]  :  expected	55	None	replace
231	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {  this.format  }  );  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {  this.format  }  );  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(formatHeader,  new  String[]  {  this.format  }  );	  hdrMap.put(formatHeader,    new    String[]    {    }    );    	non-compiled	[CE]  :  expected	55	None	replace
232	[BUG]  [BUGGY]  if(header  ==  null  ||  formatHeader.length!=  2)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  formatHeader.length!=  2)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  formatHeader.length!=  2)  {	  if(header    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	63	None	replace
233	[BUG]  [BUGGY]  if(this.format  >=  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  >=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  >=  null)  {	  if(this.format!=    null)    {    	non-compiled	[CE]  :  expected	8	None	replace
234	[BUG]  [BUGGY]  if(header  ==  null  ||  this.header.length()!=  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  this.header.length()!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  this.header.length()!=  0)  {	  if(header    ==    null    ||    header.length()!=    0)    {    	non-compiled	[CE]  :  expected	58	None	replace
235	[BUG]  [BUGGY]  if(header  >=  null  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  >=  null  ||  header.length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  >=  null  ||  header.length()  ==  0)  {	  if(header    ==    null    ||    header.length()!=    0)    {    	non-compiled	[CE]  :  expected	58	None	replace
236	[BUG]  [BUGGY]  hdrMap.put(format,  this.format);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(format,  this.format);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(format,  this.format);	  hdrMap.put(formatHeader,    this.format);    	non-compiled	[CE]  :  expected	53	None	replace
237	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  [Delete]  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length  [Delete]  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length  [Delete]  0)  {	  if(header    ==    null    ||    header.length!=    0)    {    	non-compiled	[CE]  :  expected	52	None	replace
238	[BUG]  [BUGGY]  if(header!=  null  &&  header.length()  ==  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  &&  header.length()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  &&  header.length()  ==  0)  {	  if(header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	32	None	replace
239	[BUG]  [BUGGY]  if(rec  ==  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(rec  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(rec  ==  null)  {	  if(nextRecord!=    null)    {    	non-compiled	[CE]  :  expected	10	None	replace
240	[BUG]  [BUGGY]  if(header  ==  null  &&  formatHeader.length  ==  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  &&  formatHeader.length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  &&  formatHeader.length  ==  0)  {	  if(formatHeader!=    null    &&    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	68	None	replace
241	[BUG]  [BUGGY]  if(formatHeader  ==  null  &&  formatHeader.length!=  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  &&  formatHeader.length!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  &&  formatHeader.length!=  0)  {	  if(formatHeader!=    null    &&    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	68	None	replace
242	[BUG]  [BUGGY]  hdrMap.put(header,  recordHeader);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(header,  recordHeader);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(header,  recordHeader);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	62	None	replace
243	[BUG]  [BUGGY]  hdrMap.put(recordNumber,  header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(recordNumber,  header);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(recordNumber,  header);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	62	None	replace
244	[BUG]  [BUGGY]  hdrMap.put(record,  header  +  formatHeader);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(record,  header  +  formatHeader);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(record,  header  +  formatHeader);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	62	None	replace
245	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length  <  2  ||  header.length  >  0)  {	  if(header    ==    null    ||    header.length    <    2)    {    	non-compiled	[CE]  :  expected	65	None	replace
246	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  formatHeader.length  >  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  formatHeader.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length  <  2  ||  formatHeader.length  >  0)  {	  if(header    ==    null    ||    header.length    <    2)    {    	non-compiled	[CE]  :  expected	65	None	replace
247	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length  <  2  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(header    ==    null    ||    header.length    <    2)    {    	non-compiled	[CE]  :  expected	65	None	replace
248	[BUG]  [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  hdrMap.getHeaderMap();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  hdrMap.getHeaderMap();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	HdrMap  <  String,  Integer>  headerMap  =  hdrMap.getHeaderMap();	  HdrMap    <    String,    Integer>    headerMap    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	16	None	replace
249	[BUG]  [BUGGY]  HashMap  <  String,  Integer>  headerMap  =  hdrMap.values();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  HashMap  <  String,  Integer>  headerMap  =  hdrMap.values();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	HashMap  <  String,  Integer>  headerMap  =  hdrMap.values();	  HdrMap    <    String,    Integer>    headerMap    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	16	None	replace
250	[BUG]  [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  this.hdrMap.values();  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  this.hdrMap.values();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	HdrMap  <  String,  Integer>  headerMap  =  this.hdrMap.values();	  HdrMap    <    String,    Integer>    headerMap    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	16	None	replace
251	[BUG]  [BUGGY]  if(this.format.getRecord()!=  null  ||  header  ==  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecord()!=  null  ||  header  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecord()!=  null  ||  header  ==  null)  {	  if(this.format.getRecord()!=    null)    {    	non-compiled	[CE]  :  expected	5	None	replace
252	[BUG]  [BUGGY]  if(this.format.getRecordNumber()  ==  null  ||  this.format.getRecordNumber()!=  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()  ==  null  ||  this.format.getRecordNumber()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()  ==  null  ||  this.format.getRecordNumber()!=  null)  {	  if(this.format.getRecordNumber()    ==    null)    {    	non-compiled	[CE]  :  expected	21	None	replace
253	[BUG]  [BUGGY]  if(this.format.getRecordNumber()  ==  null  ||  this.format.getRecordNumber().length  <  2)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()  ==  null  ||  this.format.getRecordNumber().length  <  2)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()  ==  null  ||  this.format.getRecordNumber().length  <  2)  {	  if(this.format.getRecordNumber()    ==    null)    {    	non-compiled	[CE]  :  expected	21	None	replace
254	[BUG]  [BUGGY]  if(this.format.getNumberHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getNumberHeaderRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getNumberHeaderRecord())  {	  if(this.format.getCSVHeaderRecord())    {    	non-compiled	[CE]  :  expected	61	None	replace
255	[BUG]  [BUGGY]  if(this.format.getRecordNumber()!=  null  &&  this.nextRecord.values()  >  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()!=  null  &&  this.nextRecord.values()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()!=  null  &&  this.nextRecord.values()  >  0)  {	  if(this.format.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
256	[BUG]  [BUGGY]  if(this.format.getRecordNumber()!=  null  ||  this.format.getRecordNumber().length  ==  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()!=  null  ||  this.format.getRecordNumber().length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()!=  null  ||  this.format.getRecordNumber().length  ==  0)  {	  if(this.format.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
257	[BUG]  [BUGGY]  if(this.format.getRecordNumber()!=  null  &&  this.nextRecord.size()  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()!=  null  &&  this.nextRecord.size()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()!=  null  &&  this.nextRecord.size()  >  0)  {	  if(this.format.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
258	[BUG]  [BUGGY]  if(this.format.getRecordNumber()!=  null  &&  this.nextRecord.values().length  >  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()!=  null  &&  this.nextRecord.values().length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()!=  null  &&  this.nextRecord.values().length  >  0)  {	  if(this.format.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
259	[BUG]  [BUGGY]  if(formatHeader  ==  null  &&  formatHeader.length  ==  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  &&  formatHeader.length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  &&  formatHeader.length  ==  0)  {	  if(formatHeader!=    null    &&    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	68	None	replace
260	[BUG]  [BUGGY]  if(header.length  <  =  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length  <  =  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length  <  =  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  if(header.length    ==    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  :  expected	70	None	replace
261	[BUG]  [BUGGY]  if(this.format.getRecords()  ==  null  ||  this.format.getRecords().length  ==  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecords()  ==  null  ||  this.format.getRecords().length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecords()  ==  null  ||  this.format.getRecords().length  ==  0)  {	  if(this.format.getRecords()    ==    null)    {    	non-compiled	[CE]  :  expected	22	None	replace
262	[BUG]  [BUGGY]  if(this.format.getRecords()  ==  null  ||  header.values().length  ==  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecords()  ==  null  ||  header.values().length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecords()  ==  null  ||  header.values().length  ==  0)  {	  if(this.format.getRecords()    ==    null)    {    	non-compiled	[CE]  :  expected	22	None	replace
263	[BUG]  [BUGGY]  if(this.format  ==  null  ||  this.format!=  null)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  this.format!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  this.format!=  null)  {	  if(this.format    ==    null)    {    	non-compiled	[CE]  :  expected	18	None	replace
264	[BUG]  [BUGGY]  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  <  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  <  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  <  null)  {	  if(this.format    ==    null)    {    	non-compiled	[CE]  :  expected	18	None	replace
265	[BUG]  [BUGGY]  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  >=  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  >=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  >=  null)  {	  if(this.format    ==    null)    {    	non-compiled	[CE]  :  expected	18	None	replace
266	[BUG]  [BUGGY]  if(this.format  ==  null  ||  formatHeader.length  <  2)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  formatHeader.length  <  2)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  formatHeader.length  <  2)  {	  if(this.format    ==    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	29	None	replace
267	[BUG]  [BUGGY]  if(this.format  ==  null  ||  this.format.getHeaderCount()  ==  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  this.format.getHeaderCount()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  this.format.getHeaderCount()  ==  0)  {	  if(this.format    ==    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	29	None	replace
268	[BUG]  [BUGGY]  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  this.format.getSkipHeaderRecord())  {	  if(this.format    ==    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	29	None	replace
269	[BUG]  [BUGGY]  if(header  ==  null  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  this.format.getSkipHeaderRecord())  {	  if(this.format    ==    null    ||    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	64	None	replace
270	[BUG]  [BUGGY]  if(header  ==  null  ||  this.format.getHeaderCount()  ==  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  this.format.getHeaderCount()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  this.format.getHeaderCount()  ==  0)  {	  if(this.format    ==    null    ||    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	64	None	replace
271	[BUG]  [BUGGY]  if(header.length  <  0  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length  <  0  ||  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length  <  0  ||  header.length  >  0)  {	  if(header.length    ==    0    ||    header.length    >    0)    {    	non-compiled	[CE]  :  expected	73	None	replace
272	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length!=  0  ||  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length!=  0  ||  header.length  >  0)  {	  if(header.length    ==    0    ||    header.length    >    0)    {    	non-compiled	[CE]  :  expected	73	None	replace
273	[BUG]  [BUGGY]  if(header.length  <  =  0  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length  <  =  0  ||  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length  <  =  0  ||  header.length  >  0)  {	  if(header.length    ==    0    ||    header.length    >    0)    {    	non-compiled	[CE]  :  expected	73	None	replace
274	[BUG]  [BUGGY]  if(header.length  >=  0  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length  >=  0  ||  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length  >=  0  ||  header.length  >  0)  {	  if(header.length    ==    0    ||    header.length    >    0)    {    	non-compiled	[CE]  :  expected	73	None	replace
275	[BUG]  [BUGGY]  if(this.format.getNumberHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getNumberHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getNumberHeaderRecord()!=  null)  {	  if(this.format.getCSVHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	4	None	replace
276	[BUG]  [BUGGY]  if(this.format.getCSVHeaderRecord()  >=  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getCSVHeaderRecord()  >=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getCSVHeaderRecord()  >=  null)  {	  if(this.format.getCSVHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	4	None	replace
277	[BUG]  [BUGGY]  hdrMap.put(record,  this.format);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(record,  this.format);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(record,  this.format);	  hdrMap.put(formatHeader,    this.format);    	non-compiled	[CE]  :  expected	53	None	replace
278	[BUG]  [BUGGY]  if(header!=  null  ||  formatHeader.length!=  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  ||  formatHeader.length!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  ||  formatHeader.length!=  0)  {	  if(header    ==    null    ||    formatHeader.length!=    0)    {    	non-compiled	[CE]  :  expected	37	None	replace
279	[BUG]  [BUGGY]  if(headers!=  null  &&  header.length  >  0)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers!=  null  &&  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers!=  null  &&  header.length  >  0)  {	  if(headers!=    null)    {    	non-compiled	[CE]  :  expected	19	None	replace
280	[BUG]  [BUGGY]  if(headers!=  null  &&  header.length()  >  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers!=  null  &&  header.length()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers!=  null  &&  header.length()  >  0)  {	  if(headers!=    null)    {    	non-compiled	[CE]  :  expected	19	None	replace
281	[BUG]  [BUGGY]  if(headers!=  null  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers!=  null  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers!=  null  &&  this.format.getSkipHeaderRecord()  ==  null)  {	  if(headers!=    null)    {    	non-compiled	[CE]  :  expected	19	None	replace
282	[BUG]  [BUGGY]  if(headers!=  null  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers!=  null  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers!=  null  &&  this.format.getSkipHeaderRecord()!=  null)  {	  if(headers!=    null)    {    	non-compiled	[CE]  :  expected	19	None	replace
283	[BUG]  [BUGGY]  if(headers!=  null  &&  this.format.getHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers!=  null  &&  this.format.getHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers!=  null  &&  this.format.getHeaderRecord()!=  null)  {	  if(headers!=    null)    {    	non-compiled	[CE]  :  expected	19	None	replace
284	[BUG]  [BUGGY]  if(header.length!=  1)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length!=  1)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length!=  1)  {	  if(header.length!=    0)    {    	non-compiled	[CE]  :  expected	33	None	replace
285	[BUG]  [BUGGY]  if(this.format.getHeaderRecords()  ||  this.format.getHeaderRecords())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecords()  ||  this.format.getHeaderRecords())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecords()  ||  this.format.getHeaderRecords())  {	  if(this.format.getHeaderRecords())    {    	non-compiled	[CE]  :  expected	75	None	replace
286	[BUG]  [BUGGY]  if(this.format.getHeaderRecords()  <  header.length)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecords()  <  header.length)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecords()  <  header.length)  {	  if(this.format.getHeaderRecords())    {    	non-compiled	[CE]  :  expected	75	None	replace
287	[BUG]  [BUGGY]  if(this.format.getHeaderRecords()  ||  this.format.getHeaderRecords()  ==  header)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecords()  ||  this.format.getHeaderRecords()  ==  header)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecords()  ||  this.format.getHeaderRecords()  ==  header)  {	  if(this.format.getHeaderRecords())    {    	non-compiled	[CE]  :  expected	75	None	replace
288	[BUG]  [BUGGY]  if(header.length()  <  =  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length()  <  =  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length()  <  =  0)  {	  if(header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	32	None	replace
289	[BUG]  [BUGGY]  if(header.length()  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header.length()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header.length()  >  0)  {	  if(header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	32	None	replace
290	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(headers);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(headers);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(headers);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader);    	non-compiled	[CE]  :  expected	14	None	replace
291	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(this.format);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(this.format);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(this.format);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader);    	non-compiled	[CE]  :  expected	14	None	replace
292	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  this.format.getSkipHeaderRecord().size()  >  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  header.length  <  2  ||  this.format.getSkipHeaderRecord().size()  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  header.length  <  2  ||  this.format.getSkipHeaderRecord().size()  >  0)  {	  if(header    ==    null    ||    header.length    <    2)    {    	non-compiled	[CE]  :  expected	65	None	replace
293	[BUG]  [BUGGY]  if(this.format.getHeaderRecord()  ==  header)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecord()  ==  header)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecord()  ==  header)  {	  if(this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	41	None	replace
294	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(2);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(2);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(2);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	12	None	replace
295	[BUG]  [BUGGY]  if(this.format.getHeaderRecord()!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecord()!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecord()!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(this.format.getHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	1	None	replace
296	[BUG]  [BUGGY]  if(this.format.getHeaderRecord()!=  null  ||  this.format.getHeaderRecord().values()!=  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecord()!=  null  ||  this.format.getHeaderRecord().values()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecord()!=  null  ||  this.format.getHeaderRecord().values()!=  null)  {	  if(this.format.getHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	1	None	replace
297	[BUG]  [BUGGY]  if(this.format.getHeaderRecord()!=  null  ||  header.equals(this.format.getHeaderRecord()))  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecord()!=  null  ||  header.equals(this.format.getHeaderRecord()))  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecord()!=  null  ||  header.equals(this.format.getHeaderRecord()))  {	  if(this.format.getHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	1	None	replace
298	[BUG]  [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader.values());  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader.values());  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader.values());	  hdrMap    =    new    HashMap    <    String,    Integer>(formatHeader);    	non-compiled	[CE]  :  expected	15	None	replace
299	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  <  =  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  ||  header.length  <  =  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  ||  header.length  <  =  0)  {	  if(header    ==    null    ||    header.length    <    =    0)    {    	non-compiled	[CE]  :  expected	66	None	replace
300	[BUG]  [BUGGY]  if(header  ==  null  &&  header.length  ==  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  &&  header.length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  &&  header.length  ==  0)  {	  if(header!=    null    &&    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	71	None	replace
301	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.size());  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.size());  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.size());	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  :  expected	17	None	replace
302	[BUG]  [BUGGY]  hdrMap.put(header,  header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(header,  header);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(header,  header);	  hdrMap.put(htmlHeader,    header);    	non-compiled	[CE]  :  expected	54	None	replace
303	[BUG]  [BUGGY]  if(this.format.getRecordName()!=  null  &&  this.format.getRecordName().length  >  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordName()!=  null  &&  this.format.getRecordName().length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordName()!=  null  &&  this.format.getRecordName().length  >  0)  {	  if(this.format.getRecordName()!=    null)    {    	non-compiled	[CE]  :  expected	50	None	replace
304	[BUG]  [BUGGY]  if(this.format.getRecordName()!=  null  ||  header.equals(this.format.getRecordName()))  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordName()!=  null  ||  header.equals(this.format.getRecordName()))  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordName()!=  null  ||  header.equals(this.format.getRecordName()))  {	  if(this.format.getRecordName()!=    null)    {    	non-compiled	[CE]  :  expected	50	None	replace
305	[BUG]  [BUGGY]  if(header!=  null  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  &&  this.format.getSkipHeaderRecord()  ==  null)  {	  if(header!=    null)    {    	non-compiled	[CE]  :  expected	7	None	replace
306	[BUG]  [BUGGY]  if(header!=  null  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  &&  this.format.getSkipHeaderRecord())  {	  if(header!=    null)    {    	non-compiled	[CE]  :  expected	7	None	replace
307	[BUG]  [BUGGY]  if(header!=  null  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  &&  this.format.getSkipHeaderRecord()!=  null)  {	  if(header!=    null)    {    	non-compiled	[CE]  :  expected	7	None	replace
308	[BUG]  [BUGGY]  if(header!=  null  &&  this.format.getSkipHeaderRecord()  >=  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  &&  this.format.getSkipHeaderRecord()  >=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  &&  this.format.getSkipHeaderRecord()  >=  null)  {	  if(header!=    null)    {    	non-compiled	[CE]  :  expected	7	None	replace
309	[BUG]  [BUGGY]  if(header!=  null  &&  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  &&  this.format.isSkipHeaderRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  &&  this.format.isSkipHeaderRecord())  {	  if(header!=    null)    {    	non-compiled	[CE]  :  expected	7	None	replace
310	[BUG]  [BUGGY]  if(header!=  null  &&  formatHeader.length  ==  0)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header!=  null  &&  formatHeader.length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header!=  null  &&  formatHeader.length  ==  0)  {	  if(header!=    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	51	None	replace
311	[BUG]  [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  2  ||  header.length  >  4)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  2  ||  header.length  >  4)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  formatHeader.length  <  2  ||  header.length  >  4)  {	  if(header    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	63	None	replace
312	[BUG]  [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  1  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(header  ==  null  ||  formatHeader.length  <  1  ||  header.length  >  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(header  ==  null  ||  formatHeader.length  <  1  ||  header.length  >  0)  {	  if(header    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	63	None	replace
313	[BUG]  [BUGGY]  hdrMap.put(header,  new  String[]  {  }  );  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(header,  new  String[]  {  }  );  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(header,  new  String[]  {  }  );	  hdrMap.put(formatHeader,    new    String[]    {    }    );    	non-compiled	[CE]  :  expected	55	None	replace
314	[BUG]  [BUGGY]  hdrMap.put(template,  new  String[]  {  }  );  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(template,  new  String[]  {  }  );  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(template,  new  String[]  {  }  );	  hdrMap.put(formatHeader,    new    String[]    {    }    );    	non-compiled	[CE]  :  expected	55	None	replace
315	[BUG]  [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  hdrMap.entrySet();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  HdrMap  <  String,  Integer>  headerMap  =  hdrMap.entrySet();  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	HdrMap  <  String,  Integer>  headerMap  =  hdrMap.entrySet();	  HdrMap    <    String,    Integer>    headerMap    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	16	None	replace
316	[BUG]  [BUGGY]  if(headers  ==  null  ||  header.length  <  2)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers  ==  null  ||  header.length  <  2)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers  ==  null  ||  header.length  <  2)  {	  if(headers    ==    null)    {    	non-compiled	[CE]  :  expected	34	None	replace
317	[BUG]  [BUGGY]  if(headers  ==  null  ||  header.size()  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers  ==  null  ||  header.size()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers  ==  null  ||  header.size()  ==  0)  {	  if(headers    ==    null)    {    	non-compiled	[CE]  :  expected	34	None	replace
318	[BUG]  [BUGGY]  if(headers  ==  null  ||  header.length!=  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers  ==  null  ||  header.length!=  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers  ==  null  ||  header.length!=  0)  {	  if(headers    ==    null)    {    	non-compiled	[CE]  :  expected	34	None	replace
319	[BUG]  [BUGGY]  if(headers  ==  null  ||  header.length  <  =  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(headers  ==  null  ||  header.length  <  =  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(headers  ==  null  ||  header.length  <  =  0)  {	  if(headers    ==    null)    {    	non-compiled	[CE]  :  expected	34	None	replace
320	[BUG]  [BUGGY]  if(this.format.getHeaderRecord()  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecord()  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecord()  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  if(this.format.getHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	20	None	replace
321	[BUG]  [BUGGY]  if(this.format.getHeaderRecord()  ==  null  ||  this.format.getHeaderRecord().values()!=  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeaderRecord()  ==  null  ||  this.format.getHeaderRecord().values()!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeaderRecord()  ==  null  ||  this.format.getHeaderRecord().values()!=  null)  {	  if(this.format.getHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	20	None	replace
322	[BUG]  [BUGGY]  if(this.format.isRecorded()  &&  this.nextRecord!=  null)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.isRecorded()  &&  this.nextRecord!=  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.isRecorded()  &&  this.nextRecord!=  null)  {	  if(this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	74	None	replace
323	[BUG]  [BUGGY]  if(this.format.getRecordNumber()!=  header.length)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecordNumber()!=  header.length)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecordNumber()!=  header.length)  {	  if(this.format.getRecordNumber())    {    	non-compiled	[CE]  :  expected	42	None	replace
324	[BUG]  [BUGGY]  if(this.format!=  null  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  &&  this.format.getSkipHeaderRecord()  ==  null)  {	  if(this.format!=    null)    {    	non-compiled	[CE]  :  expected	8	None	replace
325	[BUG]  [BUGGY]  if(this.format!=  null  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  &&  this.format.getSkipHeaderRecord())  {	  if(this.format!=    null)    {    	non-compiled	[CE]  :  expected	8	None	replace
326	[BUG]  [BUGGY]  if(this.format!=  null  ||  this.format.getSkipHeaderRecord().length  ==  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  ||  this.format.getSkipHeaderRecord().length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  ||  this.format.getSkipHeaderRecord().length  ==  0)  {	  if(this.format!=    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	35	None	replace
327	[BUG]  [BUGGY]  if(this.format  ==  null  ||  this.format.getHeader().length  ==  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  this.format.getHeader().length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  this.format.getHeader().length  ==  0)  {	  if(this.format!=    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	35	None	replace
328	[BUG]  [BUGGY]  if(this.format!=  null  ||  this.format.getSkipHeaderRecord()  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format!=  null  ||  this.format.getSkipHeaderRecord()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format!=  null  ||  this.format.getSkipHeaderRecord()  ==  0)  {	  if(this.format!=    null    ||    formatHeader.length    ==    0)    {    	non-compiled	[CE]  :  expected	35	None	replace
329	[BUG]  [BUGGY]  if(this.format.getRecords()!=  null  ||  header.values().length  ==  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecords()!=  null  ||  header.values().length  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecords()!=  null  ||  header.values().length  ==  0)  {	  if(this.format.getRecords()!=    null)    {    	non-compiled	[CE]  :  expected	3	None	replace
330	[BUG]  [BUGGY]  if(this.format.getRecords()!=  null  ||  header.size()  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getRecords()!=  null  ||  header.size()  ==  0)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getRecords()!=  null  ||  header.size()  ==  0)  {	  if(this.format.getRecords()!=    null)    {    	non-compiled	[CE]  :  expected	3	None	replace
331	[BUG]  [BUGGY]  if(this.format  ==  null  ||  header  ==  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  header  ==  null)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  header  ==  null)  {	  if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	6	None	replace
332	[BUG]  [BUGGY]  if(this.format  ==  null  ||  formatHeader.length  <  1)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format  ==  null  ||  formatHeader.length  <  1)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format  ==  null  ||  formatHeader.length  <  1)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    1)    {    	non-compiled	[CE]  :  expected	69	None	replace
333	[BUG]  [BUGGY]  if(this.format.getCSVHeader()!=  header)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getCSVHeader()!=  header)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getCSVHeader()!=  header)  {	  if(this.format.getCSVHeader())    {    	non-compiled	[CE]  :  expected	76	None	replace
334	[BUG]  [BUGGY]  if(this.format.getCSVHeader()  ==  header)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getCSVHeader()  ==  header)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getCSVHeader()  ==  header)  {	  if(this.format.getCSVHeader())    {    	non-compiled	[CE]  :  expected	76	None	replace
335	[BUG]  [BUGGY]  hdrMap.put(record,  this.header);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  hdrMap.put(record,  this.header);  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	hdrMap.put(record,  this.header);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	62	None	replace
336	[BUG]  [BUGGY]  if(this.format.getNumberRecords())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getNumberRecords())  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getNumberRecords())  {	  if(this.format.getHeader())    {    	non-compiled	[CE]  :  expected	45	None	replace
337	[BUG]  [BUGGY]  if(this.format.getHeader()!=  header)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(this.format.getHeader()!=  header)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(this.format.getHeader()!=  header)  {	  if(this.format.getHeader())    {    	non-compiled	[CE]  :  expected	45	None	replace
338	[BUG]  [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  2  ||  header.length  >  4)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader  ==  null  ||  formatHeader.length  <  2  ||  header.length  >  4)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader  ==  null  ||  formatHeader.length  <  2  ||  header.length  >  4)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	28	None	replace
339	[BUG]  [BUGGY]  if(formatHeader!=  null  ||  formatHeader.length  <  2)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;      [BUGGY]  if(formatHeader!=  null  ||  formatHeader.length  <  2)  {  [BUGGY]        final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	355	355	1	replace	if(formatHeader!=  null  ||  formatHeader.length  <  2)  {	  if(formatHeader    ==    null    ||    formatHeader.length    <    2)    {    	non-compiled	[CE]  :  expected	28	None	replace
