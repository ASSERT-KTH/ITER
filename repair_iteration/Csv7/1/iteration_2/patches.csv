bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.nextRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.nextRecord();	  final    CSVRecord    nextRecord    =    currentRecord.nextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	66	None	replace
2	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getNumberRecord();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  formatHeader.getNumberRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNumberRecord();    	non-compiled	[CE]  ';'  expected	62	None	replace
3	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  header.getNumberRecord();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  header.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  header.getNumberRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNumberRecord();    	non-compiled	[CE]  ';'  expected	62	None	replace
4	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  recordHeader.getNumberRecord();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  recordHeader.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  recordHeader.getNumberRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNumberRecord();    	non-compiled	[CE]  ';'  expected	62	None	replace
5	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  this.format.getNumberRecord();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  this.format.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  this.format.getNumberRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNumberRecord();    	non-compiled	[CE]  <identifier>  expected	62	None	replace
6	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  formatHeader.getNumberRecord();  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  formatHeader.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  formatHeader.getNumberRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNumberRecord();    	non-compiled	[CE]  ';'  expected	62	None	replace
7	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  header.getNumberRecord();  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  header.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  header.getNumberRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNumberRecord();    	non-compiled	[CE]  ';'  expected	62	None	replace
8	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  hdrMap.getNumberRecord();  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  hdrMap.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  hdrMap.getNumberRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNumberRecord();    	non-compiled	[CE]  ';'  expected	62	None	replace
9	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.hdrMap.nextRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.hdrMap.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.hdrMap.nextRecord();	  final    CSVRecord    nextRecord    =    hdrMap.nextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	40	None	replace
10	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.hdrMap.nextRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.hdrMap.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.hdrMap.nextRecord();	  final    CSVRecord    nextRecord    =    hdrMap.nextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	40	None	replace
11	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.get(rec.length).nextRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.get(rec.length).nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.get(rec.length).nextRecord();	  final    CSVRecord    nextRecord    =    hdrMap.nextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	40	None	replace
12	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.get(rec.size()  -  1);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.get(rec.size()  -  1);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.get(rec.size()  -  1);	  final    CSVRecord    nextRecord    =    hdrMap.nextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	40	None	replace
13	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.recordNextRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.recordNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.recordNextRecord();	  final    CSVRecord    nextRecord    =    this.format.recordNextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	79	None	replace
14	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.recordNextHeader();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.recordNextHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.recordNextHeader();	  final    CSVRecord    nextRecord    =    this.format.recordNextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	79	None	replace
15	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.recordNextRecord(header);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.recordNextRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.recordNextRecord(header);	  final    CSVRecord    nextRecord    =    this.format.recordNextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	79	None	replace
16	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.recordFirstRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.recordFirstRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.recordFirstRecord();	  final    CSVRecord    nextRecord    =    this.format.recordNextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	79	None	replace
17	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getNextRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.current.getNextRecord();	  final    CSVRecord    nextRecord    =    current.getNextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	15	None	replace
18	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVRecord.getNextRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVRecord.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.cSVRecord.getNextRecord();	  final    CSVRecord    nextRecord    =    current.getNextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	15	None	replace
19	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getNextRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.rec.getNextRecord();	  final    CSVRecord    nextRecord    =    current.getNextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	15	None	replace
20	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.nextRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.nextRecord();	  final    CSVRecord    nextRecord    =    current.nextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	43	None	replace
21	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.current.getRecord();	  final    CSVRecord    nextRecord    =    current.nextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	43	None	replace
22	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.newInstance();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.newInstance();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleEdge.newInstance();	  final    CSVRecord    nextRecord    =    RectangleEdge.currentRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	30	None	replace
23	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getNextRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleEdge.getNextRecord();	  final    CSVRecord    nextRecord    =    RectangleEdge.currentRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	30	None	replace
24	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getCurrentRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getCurrentRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleEdge.getCurrentRecord();	  final    CSVRecord    nextRecord    =    RectangleEdge.currentRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	30	None	replace
25	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.createCSVRecord(rec);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.createCSVRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleEdge.createCSVRecord(rec);	  final    CSVRecord    nextRecord    =    RectangleEdge.currentRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	30	None	replace
26	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.createCSVRecord(header);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.createCSVRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleEdge.createCSVRecord(header);	  final    CSVRecord    nextRecord    =    RectangleEdge.currentRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	30	None	replace
27	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.currentRecord(),  header);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.currentRecord(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.currentRecord(),  header);	  final    CSVRecord    nextRecord    =    RectangleConstants.currentRecord();    	non-compiled	[CE]  ';'  expected	28	None	replace
28	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.currentRecord(),  header;  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.currentRecord(),  header;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.currentRecord(),  header;	  final    CSVRecord    nextRecord    =    RectangleConstants.currentRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	28	None	replace
29	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.firstRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.firstRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.firstRecord();	  final    CSVRecord    nextRecord    =    RectangleConstants.currentRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	28	None	replace
30	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.currentRecord(header);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.currentRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.currentRecord(header);	  final    CSVRecord    nextRecord    =    RectangleConstants.currentRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	28	None	replace
31	[BUG]  [BUGGY]  hdrMap.put(rec.toString(),  header);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(rec.toString(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(rec.toString(),  header);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	21	None	replace
32	[BUG]  [BUGGY]  hdrMap.put(header.toString(),  formatHeader);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header.toString(),  formatHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header.toString(),  formatHeader);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	21	None	replace
33	[BUG]  [BUGGY]  hdrMap.put(formatHeader.toString(),  header);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(formatHeader.toString(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(formatHeader.toString(),  header);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	21	None	replace
34	[BUG]  [BUGGY]  hdrMap.put(header.toString(),  rect);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header.toString(),  rect);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header.toString(),  rect);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	21	None	replace
35	[BUG]  [BUGGY]  hdrMap.put(header.toString(),  header);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header.toString(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header.toString(),  header);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	21	None	replace
36	[BUG]  [BUGGY]  hdrMap.put(rect,  formatHeader.toString(),  header);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(rect,  formatHeader.toString(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(rect,  formatHeader.toString(),  header);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	21	None	replace
37	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNextRecord(header);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNextRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNextRecord(header);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecord(header);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	64	None	replace
38	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecord(header,  hdrMap);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecord(header,  hdrMap);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNumberRecord(header,  hdrMap);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecord(header);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
39	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecord(header,  formatHeader);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecord(header,  formatHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNumberRecord(header,  formatHeader);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecord(header);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
40	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getUpperRecord(header);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getUpperRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getUpperRecord(header);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecord(header);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
41	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecord(header,  0);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecord(header,  0);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNumberRecord(header,  0);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecord(header);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
42	[BUG]  [BUGGY]  Integer  nextRecord  =  headerMap.get(hdr);  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  Integer  nextRecord  =  headerMap.get(hdr);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	Integer  nextRecord  =  headerMap.get(hdr);	  Integer    nextRecord    =    hdrMap.get(header);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
43	[BUG]  [BUGGY]  Integer  nextRecord  =  headerMap.get(hdrMap);  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  Integer  nextRecord  =  headerMap.get(hdrMap);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	Integer  nextRecord  =  headerMap.get(hdrMap);	  Integer    nextRecord    =    hdrMap.get(header);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
44	[BUG]  [BUGGY]  Integer  header  =  hdrMap.get(header);  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  Integer  header  =  hdrMap.get(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	Integer  header  =  hdrMap.get(header);	  Integer    nextRecord    =    hdrMap.get(header);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
45	[BUG]  [BUGGY]  Integer  headerRecord  =  hdrMap.get(header);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  Integer  headerRecord  =  hdrMap.get(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	Integer  headerRecord  =  hdrMap.get(header);	  Integer    nextRecord    =    hdrMap.get(header);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	24	None	replace
46	[BUG]  [BUGGY]  Integer  nextRecord  =  header.get(hdrMap);  [CE]  not  a  statement  [FE]                                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  Integer  nextRecord  =  header.get(hdrMap);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	Integer  nextRecord  =  header.get(hdrMap);	  Integer    nextRecord    =    hdrMap.get(header);    	non-compiled	[CE]  not  a  statement	24	None	replace
47	[BUG]  [BUGGY]  Integer  nextRecord  =  headerMap.get(hdrName);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  Integer  nextRecord  =  headerMap.get(hdrName);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	Integer  nextRecord  =  headerMap.get(hdrName);	  Integer    nextRecord    =    hdrMap.get(header);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	24	None	replace
48	[BUG]  [BUGGY]  Integer  nextRecord  =  headerMap.get(hdrHeader);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  Integer  nextRecord  =  headerMap.get(hdrHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	Integer  nextRecord  =  headerMap.get(hdrHeader);	  Integer    nextRecord    =    hdrMap.get(header);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	24	None	replace
49	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNextRecord(rec);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNextRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNextRecord(rec);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecord(rec);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	78	None	replace
50	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getUpperRecord(rec);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getUpperRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getUpperRecord(rec);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecord(rec);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	78	None	replace
51	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(rec);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(rec);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecord(rec);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	78	None	replace
52	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRawRecord(rec);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRawRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getRawRecord(rec);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecord(rec);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	78	None	replace
53	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecord(rec,  header);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecord(rec,  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNumberRecord(rec,  header);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecord(rec);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	78	None	replace
54	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.record.getNextRecord();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.record.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.record.getNextRecord();	  final    CSVRecord    nextRecord    =    rec.getNextRecord();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	13	None	replace
55	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getNextRecord();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.nextRecord.getNextRecord();	  final    CSVRecord    nextRecord    =    rec.getNextRecord();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	13	None	replace
56	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.data.getNextRecord();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.data.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.data.getNextRecord();	  final    CSVRecord    nextRecord    =    rec.getNextRecord();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	13	None	replace
57	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  header.getNextRecord();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  header.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  header.getNextRecord();	  final    CSVRecord    nextRecord    =    rec.getNextRecord();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	13	None	replace
58	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.record.getRecord();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.record.getRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.record.getRecord();	  final    CSVRecord    nextRecord    =    this.record.currentRecord();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	57	None	replace
59	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.record.getSkipHeaderRecord();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.record.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.record.getSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    this.record.currentRecord();    	non-compiled	[CE]  not  a  statement	57	None	replace
60	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.record.values();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.record.values();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.record.values();	  final    CSVRecord    nextRecord    =    this.record.currentRecord();    	non-compiled	[CE]  not  a  statement	57	None	replace
61	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.record.firstRecord();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.record.firstRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.record.firstRecord();	  final    CSVRecord    nextRecord    =    this.record.currentRecord();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	57	None	replace
62	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  hdrMap.getNextRecord();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  hdrMap.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  hdrMap.getNextRecord();	  final    CSVRecord    nextRecord    =    this.format,    rec.getNextRecord();    	non-compiled	[CE]  ';'  expected	17	None	replace
63	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  header.getNextRecord();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  header.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  header.getNextRecord();	  final    CSVRecord    nextRecord    =    this.format,    rec.getNextRecord();    	non-compiled	[CE]  ';'  expected	17	None	replace
64	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  rec.getSkipHeaderRecord();  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  rec.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  rec.getSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    rec.getNextRecord();    	non-compiled	[CE]  ';'  expected	17	None	replace
65	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  rec.getNextHeader();  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  rec.getNextHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  rec.getNextHeader();	  final    CSVRecord    nextRecord    =    this.format,    rec.getNextRecord();    	non-compiled	[CE]  ';'  expected	17	None	replace
66	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  current.getNextRecord();  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  current.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  current.getNextRecord();	  final    CSVRecord    nextRecord    =    this.format,    rec.getNextRecord();    	non-compiled	[CE]  ';'  expected	17	None	replace
67	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.record.getHeaderRecord();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.record.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.record.getHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getHeaderRecord();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	replace
68	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getHeaderRecord();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.current.getHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getHeaderRecord();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	replace
69	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getHeaderRecord();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.nextRecord.getHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	1	None	replace
70	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  header.getHeaderRecord();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  header.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  header.getHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	1	None	replace
71	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.data.getHeaderRecord();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.data.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.data.getHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	1	None	replace
72	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.getCSVHeaderRecord();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.getCSVHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.getCSVHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format.getCSVHeaderRecord();    	non-compiled	[CE]  ';'  expected	50	None	replace
73	[BUG]  [BUGGY]  CSVRecord  rec  =  headerMap.get(hdr);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  CSVRecord  rec  =  headerMap.get(hdr);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	CSVRecord  rec  =  headerMap.get(hdr);	  CSVRecord    rec    =    hdrMap.get(header);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
74	[BUG]  [BUGGY]  CSVRecord  rec  =  headerMap.get(header);  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  CSVRecord  rec  =  headerMap.get(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	CSVRecord  rec  =  headerMap.get(header);	  CSVRecord    rec    =    hdrMap.get(header);    	non-compiled	[CE]  ';'  expected	51	None	replace
75	[BUG]  [BUGGY]  CSVRecord  rec  =  hdrMap.get(formatHeader);  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  CSVRecord  rec  =  hdrMap.get(formatHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	CSVRecord  rec  =  hdrMap.get(formatHeader);	  CSVRecord    rec    =    hdrMap.get(header);    	non-compiled	[CE]  ';'  expected	51	None	replace
76	[BUG]  [BUGGY]  CSVRecord  rec  =  hdrMap.get(header,  formatHeader);  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  CSVRecord  rec  =  hdrMap.get(header,  formatHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	CSVRecord  rec  =  hdrMap.get(header,  formatHeader);	  CSVRecord    rec    =    hdrMap.get(header);    	non-compiled	[CE]  ';'  expected	51	None	replace
77	[BUG]  [BUGGY]  CSVRecord  rec  =  header.get(hdrMap);  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  CSVRecord  rec  =  header.get(hdrMap);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	CSVRecord  rec  =  header.get(hdrMap);	  CSVRecord    rec    =    hdrMap.get(header);    	non-compiled	[CE]  ';'  expected	51	None	replace
78	[BUG]  [BUGGY]  CSVRecord  rec  =  headerMap.get(hdrHeader);  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  CSVRecord  rec  =  headerMap.get(hdrHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	CSVRecord  rec  =  headerMap.get(hdrHeader);	  CSVRecord    rec    =    hdrMap.get(header);    	non-compiled	[CE]  ';'  expected	51	None	replace
79	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.hdrMap.getNumberRecord();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.hdrMap.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.hdrMap.getNumberRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getNumberRecord();    	non-compiled	[CE]  ';'  expected	32	None	replace
80	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  headerMap.getNumberRecord();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  headerMap.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  headerMap.getNumberRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getNumberRecord();    	non-compiled	[CE]  ';'  expected	32	None	replace
81	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.dataMap.getNumberRecord();  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.dataMap.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.dataMap.getNumberRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getNumberRecord();    	non-compiled	[CE]  ';'  expected	32	None	replace
82	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getNumberRecord(header);  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getNumberRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.getNumberRecord(header);	  final    CSVRecord    nextRecord    =    hdrMap.getNumberRecord();    	non-compiled	[CE]  ';'  expected	32	None	replace
83	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getHeader();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getHeader();	  final    CSVRecord    nextRecord    =    this.format.recordHeader();    	non-compiled	[CE]  ';'  expected	74	None	replace
84	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.recordHeader();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.recordHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.recordHeader();	  final    CSVRecord    nextRecord    =    this.format.recordHeader();    	non-compiled	[CE]  ';'  expected	74	None	replace
85	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.recordHeader(header);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.recordHeader(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.recordHeader(header);	  final    CSVRecord    nextRecord    =    this.format.recordHeader();    	non-compiled	[CE]  ';'  expected	74	None	replace
86	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRecordHeader();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRecordHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getRecordHeader();	  final    CSVRecord    nextRecord    =    this.format.recordHeader();    	non-compiled	[CE]  ';'  expected	74	None	replace
87	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.get(header);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.get(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.get(header);	  final    CSVRecord    nextRecord    =    _format.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	75	None	replace
88	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.get(rec);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.get(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.get(rec);	  final    CSVRecord    nextRecord    =    _format.getNumberRecord();    	non-compiled	[CE]  ';'  expected	77	None	replace
89	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  _format.getNextRecord();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  _format.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  _format.getNextRecord();	  final    CSVRecord    nextRecord    =    _format.getNumberRecord();    	non-compiled	[CE]  ';'  expected	77	None	replace
90	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  current.record.nextRecord();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  current.record.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  current.record.nextRecord();	  final    CSVRecord    nextRecord    =    this.record.nextRecord();    	non-compiled	[CE]  ';'  expected	42	None	replace
91	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.record.nextRecord();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.record.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.record.nextRecord();	  final    CSVRecord    nextRecord    =    this.record.nextRecord();    	non-compiled	[CE]  ';'  expected	42	None	replace
92	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.first.getNextRecord();  [CE]  cannot  find  symbol  bodyMap  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.first.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.first.getNextRecord();	  final    CSVRecord    nextRecord    =    RectangleConstants.getNextRecord();    	non-compiled	[CE]  cannot  find  symbol  bodyMap	16	None	replace
93	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNextRecord(header);  [CE]  cannot  find  symbol  bodyMap  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNextRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.getNextRecord(header);	  final    CSVRecord    nextRecord    =    RectangleConstants.getNextRecord();    	non-compiled	[CE]  cannot  find  symbol  bodyMap	16	None	replace
94	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNextRecord(rec);  [CE]  cannot  find  symbol  bodyMap  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNextRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.getNextRecord(rec);	  final    CSVRecord    nextRecord    =    RectangleConstants.getNextRecord();    	non-compiled	[CE]  cannot  find  symbol  bodyMap	16	None	replace
95	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.newInstance();  [CE]  cannot  find  symbol  bodyMap  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.newInstance();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.newInstance();	  final    CSVRecord    nextRecord    =    RectangleConstants.getNextRecord();    	non-compiled	[CE]  cannot  find  symbol  bodyMap	16	None	replace
96	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  header.getHeaderRecord();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  header.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  header.getHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    header.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	3	None	replace
97	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  header.getSkipHeaderRecord();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  header.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  header.getSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    header.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	3	None	replace
98	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getHeader();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  formatHeader.getHeader();	  final    CSVRecord    nextRecord    =    this.format,    header.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	3	None	replace
99	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  current.getHeaderRecord();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  current.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  current.getHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    header.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	3	None	replace
100	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.record();  [CE]  cannot  find  symbol  length  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.record();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.record();	  final    CSVRecord    nextRecord    =    current.record();    	non-compiled	[CE]  cannot  find  symbol  length	49	None	replace
101	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.current.record();  [CE]  cannot  find  symbol  bodyMap  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.current.record();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.current.record();	  final    CSVRecord    nextRecord    =    current.record();    	non-compiled	[CE]  cannot  find  symbol  bodyMap	49	None	replace
102	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record();  [CE]  cannot  find  symbol  bodyMap  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.record();	  final    CSVRecord    nextRecord    =    current.record();    	non-compiled	[CE]  cannot  find  symbol  bodyMap	49	None	replace
103	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.record.record();  [CE]  cannot  find  symbol  bodyMap  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.record.record();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.record.record();	  final    CSVRecord    nextRecord    =    current.record();    	non-compiled	[CE]  cannot  find  symbol  bodyMap	49	None	replace
104	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.record();  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.record();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.record();	  final    CSVRecord    nextRecord    =    current.record();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
105	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  formatHeader.record();  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  formatHeader.record();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  formatHeader.record();	  final    CSVRecord    nextRecord    =    current.record();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
106	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.record();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.record();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.record();	  final    CSVRecord    nextRecord    =    current.record();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	49	None	replace
107	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.data.nextRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.data.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.data.nextRecord();	  final    CSVRecord    nextRecord    =    this.data.nextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	47	None	replace
108	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.data.get(header);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.data.get(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.data.get(header);	  final    CSVRecord    nextRecord    =    this.data.nextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	47	None	replace
109	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.data.nextRecord(header);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.data.nextRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.data.nextRecord(header);	  final    CSVRecord    nextRecord    =    this.data.nextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	47	None	replace
110	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.headerMap.nextRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.headerMap.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.headerMap.nextRecord();	  final    CSVRecord    nextRecord    =    header.nextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	44	None	replace
111	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.header.nextRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.header.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.header.nextRecord();	  final    CSVRecord    nextRecord    =    header.nextRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	44	None	replace
112	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.data();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.data();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.data();	  final    CSVRecord    nextRecord    =    this.currentRecord.data();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	72	None	replace
113	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.rect();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.rect();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.rect();	  final    CSVRecord    nextRecord    =    this.currentRecord.data();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	72	None	replace
114	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.data(header);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.data(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.data(header);	  final    CSVRecord    nextRecord    =    this.currentRecord.data();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	72	None	replace
115	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.next();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.next();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.next();	  final    CSVRecord    nextRecord    =    this.currentRecord.data();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	72	None	replace
116	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.data();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.data();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.data();	  final    CSVRecord    nextRecord    =    this.currentRecord.data();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	72	None	replace
117	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.getPreviousRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.getPreviousRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.getPreviousRecord();	  final    CSVRecord    nextRecord    =    this.format.getPreviousRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	61	None	replace
118	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getPreviousRecord();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getPreviousRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.getPreviousRecord();	  final    CSVRecord    nextRecord    =    this.format.getPreviousRecord();    	non-compiled	[CE]  :  expected	61	None	replace
119	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  rec.getPreviousRecord();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  rec.getPreviousRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  rec.getPreviousRecord();	  final    CSVRecord    nextRecord    =    this.format.getPreviousRecord();    	non-compiled	[CE]  :  expected	61	None	replace
120	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  current.getPreviousRecord();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  current.getPreviousRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  current.getPreviousRecord();	  final    CSVRecord    nextRecord    =    this.format.getPreviousRecord();    	non-compiled	[CE]  :  expected	61	None	replace
121	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getNextHeaderRecord();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.rec.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    current.getNextHeaderRecord();    	non-compiled	[CE]  :  expected	10	None	replace
122	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVFormat.getNextHeaderRecord();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVFormat.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.cSVFormat.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    current.getNextHeaderRecord();    	non-compiled	[CE]  :  expected	10	None	replace
123	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.data.getNextHeaderRecord();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.data.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.data.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    current.getNextHeaderRecord();    	non-compiled	[CE]  :  expected	10	None	replace
124	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getNextHeaderRecord();  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.current.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    current.getNextHeaderRecord();    	non-compiled	[CE]  :  expected	10	None	replace
125	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNextHeaderRecord();  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    current.getNextHeaderRecord();    	non-compiled	[CE]  :  expected	10	None	replace
126	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(header);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(header);	  final    CSVRecord    nextRecord    =    RectangleConstants.getNumberRecord();    	non-compiled	[CE]  :  expected	33	None	replace
127	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(rec);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(rec);	  final    CSVRecord    nextRecord    =    RectangleConstants.getNumberRecord();    	non-compiled	[CE]  :  expected	33	None	replace
128	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.first.getNumberRecord();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.first.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.first.getNumberRecord();	  final    CSVRecord    nextRecord    =    RectangleConstants.getNumberRecord();    	non-compiled	[CE]  :  expected	33	None	replace
129	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.NUMBER_RECORD;  [CE]  inconvertible  types  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.NUMBER_RECORD;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.NUMBER_RECORD;	  final    CSVRecord    nextRecord    =    RectangleConstants.getNumberRecord();    	non-compiled	[CE]  inconvertible  types	33	None	replace
130	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(),  header);  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(),  header);	  final    CSVRecord    nextRecord    =    RectangleConstants.getNumberRecord();    	non-compiled	[CE]  ';'  expected	33	None	replace
131	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.hdrMap.getNextHeaderRecord();  [CE]  inconvertible  types  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.hdrMap.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.hdrMap.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getNextHeaderRecord();    	non-compiled	[CE]  inconvertible  types	8	None	replace
132	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.headerMap.getNextHeaderRecord();  [CE]  inconvertible  types  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.headerMap.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.headerMap.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getNextHeaderRecord();    	non-compiled	[CE]  inconvertible  types	8	None	replace
133	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  headerMap.getNextHeaderRecord();  [CE]  inconvertible  types  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  headerMap.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  headerMap.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getNextHeaderRecord();    	non-compiled	[CE]  inconvertible  types	8	None	replace
134	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.dataMap.getNextHeaderRecord();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.dataMap.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.dataMap.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getNextHeaderRecord();    	non-compiled	[CE]  :  expected	8	None	replace
135	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  header.getSkipHeaderRecord(),  this.format;  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  header.getSkipHeaderRecord(),  this.format;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  header.getSkipHeaderRecord(),  this.format;	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header;    	non-compiled	[CE]  :  expected	38	None	replace
136	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.getSkipHeaderRecord(),  header;  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.getSkipHeaderRecord(),  header;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.getSkipHeaderRecord(),  header;	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header;    	non-compiled	[CE]  :  expected	38	None	replace
137	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(),  header.values();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(),  header.values();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(),  header.values();	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header;    	non-compiled	[CE]  :  expected	38	None	replace
138	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(),  header.length;  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(),  header.length;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(),  header.length;	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header;    	non-compiled	[CE]  :  expected	38	None	replace
139	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(),  header  +  1;  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(),  header  +  1;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(),  header  +  1;	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header;    	non-compiled	[CE]  :  expected	38	None	replace
140	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  header.getNextHeaderRecord();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  header.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  header.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    header.getNextHeaderRecord();    	non-compiled	[CE]  :  expected	12	None	replace
141	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getNextHeaderRecord();  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  formatHeader.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    header.getNextHeaderRecord();    	non-compiled	[CE]  :  expected	12	None	replace
142	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  header.getNextSkipHeaderRecord();  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  header.getNextSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  header.getNextSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    header.getNextHeaderRecord();    	non-compiled	[CE]  :  expected	12	None	replace
143	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getFirstRecord();  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getFirstRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getFirstRecord();	  final    CSVRecord    nextRecord    =    this.format.removeFirstRecord();    	non-compiled	[CE]  :  expected	68	None	replace
144	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.removeFirstRecord();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.removeFirstRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.removeFirstRecord();	  final    CSVRecord    nextRecord    =    this.format.removeFirstRecord();    	non-compiled	[CE]  :  expected	68	None	replace
145	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getLastRecord();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getLastRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getLastRecord();	  final    CSVRecord    nextRecord    =    this.format.removeFirstRecord();    	non-compiled	[CE]  :  expected	68	None	replace
146	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.removeLastRecord();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.removeLastRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.removeLastRecord();	  final    CSVRecord    nextRecord    =    this.format.removeFirstRecord();    	non-compiled	[CE]  :  expected	68	None	replace
147	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.format.nextRecord();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.format.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.format.nextRecord();	  final    CSVRecord    nextRecord    =    current.format.nextRecord();    	non-compiled	[CE]  :  expected	41	None	replace
148	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  format.nextRecord();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  format.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  format.nextRecord();	  final    CSVRecord    nextRecord    =    current.format.nextRecord();    	non-compiled	[CE]  :  expected	41	None	replace
149	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.content.nextRecord();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.content.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.content.nextRecord();	  final    CSVRecord    nextRecord    =    this.content.nextRecord();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
150	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  current.content.nextRecord();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  current.content.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  current.content.nextRecord();	  final    CSVRecord    nextRecord    =    this.content.nextRecord();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
151	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.content.getRecord();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.content.getRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.content.getRecord();	  final    CSVRecord    nextRecord    =    this.content.nextRecord();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
152	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  header.getNumberRecord();  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  header.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  header.getNumberRecord();	  final    CSVRecord    nextRecord    =    formatHeader.getNumberRecord();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
153	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  cmdrMap.getNumberRecord();  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  cmdrMap.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  cmdrMap.getNumberRecord();	  final    CSVRecord    nextRecord    =    formatHeader.getNumberRecord();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
154	[BUG]  [BUGGY]  hdrMap.put(header,  nextRecord);  [CE]  cannot  find  symbol  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  nextRecord);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  nextRecord);	  hdrMap.put(header,    header);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
155	[BUG]  [BUGGY]  hdrMap.put(header,  this.formatHeader);  [CE]  cannot  find  symbol  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  this.formatHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  this.formatHeader);	  hdrMap.put(header,    header);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
156	[BUG]  [BUGGY]  hdrMap.put(header,  recordNumber);  [CE]  cannot  find  symbol  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  recordNumber);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  recordNumber);	  hdrMap.put(header,    header);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
157	[BUG]  [BUGGY]  hdrMap.put(this.format,  header);  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(this.format,  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(this.format,  header);	  hdrMap.put(header,    this.format);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
158	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  this.format);  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(formatHeader,  this.format);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(formatHeader,  this.format);	  hdrMap.put(header,    this.format);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
159	[BUG]  [BUGGY]  hdrMap.put(rec,  this.format);  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(rec,  this.format);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(rec,  this.format);	  hdrMap.put(header,    this.format);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
160	[BUG]  [BUGGY]  hdrMap.put(record,  this.format);  [CE]  cannot  find  symbol  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(record,  this.format);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(record,  this.format);	  hdrMap.put(header,    this.format);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
161	[BUG]  [BUGGY]  hdrMap.put(rect,  this.format);  [CE]  cannot  find  symbol  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(rect,  this.format);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(rect,  this.format);	  hdrMap.put(header,    this.format);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
162	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  header);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(formatHeader,  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(formatHeader,  header);	  hdrMap.put(header,    this.format);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	52	None	replace
163	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.values();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.values();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.values();	  final    CSVRecord    nextRecord    =    this.currentRecord.values();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	58	None	replace
164	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.getHeader();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.getHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.getHeader();	  final    CSVRecord    nextRecord    =    this.currentRecord.values();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	58	None	replace
165	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.getValue();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.getValue();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.getValue();	  final    CSVRecord    nextRecord    =    this.currentRecord.values();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	58	None	replace
166	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.getValues();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.getValues();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.getValues();	  final    CSVRecord    nextRecord    =    this.currentRecord.values();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	58	None	replace
167	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.getNext();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.getNext();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.getNext();	  final    CSVRecord    nextRecord    =    this.currentRecord.values();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	58	None	replace
168	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getNumberRecord();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.current.getNumberRecord();	  final    CSVRecord    nextRecord    =    current.getNumberRecord();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	34	None	replace
169	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVRecord.getNumberRecord();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVRecord.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.cSVRecord.getNumberRecord();	  final    CSVRecord    nextRecord    =    current.getNumberRecord();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	34	None	replace
170	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getNumberRecord();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.rec.getNumberRecord();	  final    CSVRecord    nextRecord    =    current.getNumberRecord();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	34	None	replace
171	[BUG]  [BUGGY]  hdrMap.put(record,  nextRecord);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(record,  nextRecord);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(record,  nextRecord);	  hdrMap.put(record,    header);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	20	None	replace
172	[BUG]  [BUGGY]  hdrMap.put(record,  formatHeader);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(record,  formatHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(record,  formatHeader);	  hdrMap.put(record,    header);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	20	None	replace
173	[BUG]  [BUGGY]  hdrMap.put(header,  record);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  record);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  record);	  hdrMap.put(record,    header);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	20	None	replace
174	[BUG]  [BUGGY]  hdrMap.put(record,  this.header);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(record,  this.header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(record,  this.header);	  hdrMap.put(record,    header);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	20	None	replace
175	[BUG]  [BUGGY]  hdrMap.put(record,  header[0]);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(record,  header[0]);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(record,  header[0]);	  hdrMap.put(record,    header);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	20	None	replace
176	[BUG]  [BUGGY]  hdrMap.put(record,  header;  [CE]  ')'  expected  [FE]                                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(record,  header;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(record,  header;	  hdrMap.put(record,    header);    	non-compiled	[CE]  ')'  expected	20	None	replace
177	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getValue();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getValue();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.nextRecord.getValue();	  final    CSVRecord    nextRecord    =    this.nextRecord.nextRecord();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	65	None	replace
178	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getHeader();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.nextRecord.getHeader();	  final    CSVRecord    nextRecord    =    this.nextRecord.nextRecord();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	65	None	replace
179	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.getNumberRecords();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.getNumberRecords();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.getNumberRecords();	  final    CSVRecord    nextRecord    =    this.format.getNumberRecords();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	70	None	replace
180	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRecords();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRecords();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getRecords();	  final    CSVRecord    nextRecord    =    this.format.getNumberRecords();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	70	None	replace
181	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getHeaderRecords();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getHeaderRecords();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getHeaderRecords();	  final    CSVRecord    nextRecord    =    this.format.getNumberRecords();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
182	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecords()  +  1;  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecords()  +  1;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNumberRecords()  +  1;	  final    CSVRecord    nextRecord    =    this.format.getNumberRecords();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	70	None	replace
183	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  _format.getNextSkipHeaderRecord();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  _format.getNextSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  _format.getNextSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    _format.getNextHeaderRecord();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	67	None	replace
184	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.header.record();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.header.record();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.header.record();	  final    CSVRecord    nextRecord    =    this.header.nextRecord();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	60	None	replace
185	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.header.getRecord();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.header.getRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.header.getRecord();	  final    CSVRecord    nextRecord    =    this.header.nextRecord();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	60	None	replace
186	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.header.record(header);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.header.record(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.header.record(header);	  final    CSVRecord    nextRecord    =    this.header.nextRecord();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	60	None	replace
187	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.header.values();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.header.values();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.header.values();	  final    CSVRecord    nextRecord    =    this.header.nextRecord();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	60	None	replace
188	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getCurrentRecord();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getCurrentRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.getCurrentRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getNextRecord();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	14	None	replace
189	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getLastRecord();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getLastRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.getLastRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getNextRecord();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>)	14	None	replace
190	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getFirstRecord();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getFirstRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.getFirstRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getNextRecord();    	non-compiled	[CE]  ';'  expected	14	None	replace
191	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getHeaderRecord(),  header);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getHeaderRecord(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getHeaderRecord(),  header);	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  ';'  expected	37	None	replace
192	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecord(),  header);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecord(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNumberRecord(),  header);	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  not  a  statement	37	None	replace
193	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRawHeaderRecord(),  header);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRawHeaderRecord(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getRawHeaderRecord(),  header);	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  ';'  expected	37	None	replace
194	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.getSkipHeaderRecord(),  header);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.getSkipHeaderRecord(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.getSkipHeaderRecord(),  header);	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  ';'  expected	37	None	replace
195	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(),  header  +  1);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(),  header  +  1);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord(),  header  +  1);	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  ';'  expected	37	None	replace
196	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNextRecord(),  header);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNextRecord(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNextRecord(),  header);	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  ';'  expected	37	None	replace
197	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  hdrMap.getNextHeaderRecord();  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  hdrMap.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  hdrMap.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    rec.getNextHeaderRecord();    	non-compiled	[CE]  ';'  expected	9	None	replace
198	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  current.getNextHeaderRecord();  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  current.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  current.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    rec.getNextHeaderRecord();    	non-compiled	[CE]  ';'  expected	9	None	replace
199	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRecord();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getRecord();	  final    CSVRecord    nextRecord    =    this.format.currentRecord();    	non-compiled	[CE]  ';'  expected	26	None	replace
200	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.rect.currentRecord();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.rect.currentRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.rect.currentRecord();	  final    CSVRecord    nextRecord    =    rec.currentRecord();    	non-compiled	[CE]  ';'  expected	25	None	replace
201	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.currentRecord();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.currentRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.nextRecord.currentRecord();	  final    CSVRecord    nextRecord    =    rec.currentRecord();    	non-compiled	[CE]  ';'  expected	25	None	replace
202	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getSkipHeaderRecord();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.current.getSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    this.current.nextRecord();    	non-compiled	[CE]  ';'  expected	46	None	replace
203	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.current.rec.nextRecord();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.current.rec.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.current.rec.nextRecord();	  final    CSVRecord    nextRecord    =    this.current.nextRecord();    	non-compiled	[CE]  ';'  expected	46	None	replace
204	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getRecord(rec);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.current.getRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.current.getRecord(rec);	  final    CSVRecord    nextRecord    =    this.current.nextRecord();    	non-compiled	[CE]  ';'  expected	46	None	replace
205	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  formatHeader.getHeaderRecord();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  formatHeader.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  formatHeader.getHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    formatHeader.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	73	None	replace
206	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getSkipHeaderRecord();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  formatHeader.getSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    formatHeader.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	73	None	replace
207	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getNextRecord();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  formatHeader.getNextRecord();	  final    CSVRecord    nextRecord    =    this.format,    formatHeader.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	73	None	replace
208	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.reset();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.reset();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  formatHeader.reset();	  final    CSVRecord    nextRecord    =    this.format,    formatHeader.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	73	None	replace
209	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.toString();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.toString();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  formatHeader.toString();	  final    CSVRecord    nextRecord    =    this.format,    formatHeader.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	73	None	replace
210	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.skippedHeader.nextRecord();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.skippedHeader.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.skippedHeader.nextRecord();	  final    CSVRecord    nextRecord    =    this.skippedHeader.nextRecord();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
211	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.skippedHeader.getRecord();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.skippedHeader.getRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.skippedHeader.getRecord();	  final    CSVRecord    nextRecord    =    this.skippedHeader.nextRecord();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
212	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.skippedHeader.record();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.skippedHeader.record();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.skippedHeader.record();	  final    CSVRecord    nextRecord    =    this.skippedHeader.nextRecord();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
213	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.skippedHeader.record(header);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.skippedHeader.record(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.skippedHeader.record(header);	  final    CSVRecord    nextRecord    =    this.skippedHeader.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
214	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.skippedHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.skippedHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.skippedHeaderRecord();	  final    CSVRecord    nextRecord    =    this.skippedHeader.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
215	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.rec.getHeaderRecord();	  final    CSVRecord    nextRecord    =    current.getHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
216	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVFormat.getHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVFormat.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.cSVFormat.getHeaderRecord();	  final    CSVRecord    nextRecord    =    current.getHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
217	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.getHeaderRecord();	  final    CSVRecord    nextRecord    =    current.getHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
218	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.hdrMap.currentRecord();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.hdrMap.currentRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.hdrMap.currentRecord();	  final    CSVRecord    nextRecord    =    hdrMap.currentRecord();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
219	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getCSVRecord();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getCSVRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.getCSVRecord();	  final    CSVRecord    nextRecord    =    hdrMap.currentRecord();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
220	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getRecord();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.getRecord();	  final    CSVRecord    nextRecord    =    hdrMap.currentRecord();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
221	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.record(header);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.record(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.record(header);	  final    CSVRecord    nextRecord    =    hdrMap.currentRecord();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
222	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  hdrMap.getHeaderRecord();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  hdrMap.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  hdrMap.getHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    hdrMap.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	55	None	replace
223	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  headerMap.getHeaderRecord();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  headerMap.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  headerMap.getHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    hdrMap.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	55	None	replace
224	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(header);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.record(header);	  final    CSVRecord    nextRecord    =    this.format.record(rec);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
225	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(header,  rec);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(header,  rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.record(header,  rec);	  final    CSVRecord    nextRecord    =    this.format.record(rec);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
226	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.record(rec);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.record(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.record(rec);	  final    CSVRecord    nextRecord    =    this.format.record(rec);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
227	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(header,  hdrMap);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(header,  hdrMap);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.record(header,  hdrMap);	  final    CSVRecord    nextRecord    =    this.format.record(rec);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
228	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(header,  formatHeader);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(header,  formatHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.record(header,  formatHeader);	  final    CSVRecord    nextRecord    =    this.format.record(rec);    	non-compiled	[CE]  not  a  statement	69	None	replace
229	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  formatHeader.record(rec);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  formatHeader.record(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  formatHeader.record(rec);	  final    CSVRecord    nextRecord    =    this.format.record(rec);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
230	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.record.getNextHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.record.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.record.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getNextHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
231	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getNextHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.nextRecord.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getNextHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
232	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  header.getNextHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  header.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  header.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getNextHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
233	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.getRawHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.getRawHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.getRawHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format.getRawHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
234	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getRawHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getRawHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.getRawHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format.getRawHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
235	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  rec.getRawHeaderRecord();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  rec.getRawHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  rec.getRawHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format.getRawHeaderRecord();    	non-compiled	[CE]  ';'  expected	39	None	replace
236	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  current.getRawHeaderRecord();  [CE]  cannot  find  symbol  body  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  current.getRawHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  current.getRawHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format.getRawHeaderRecord();    	non-compiled	[CE]  cannot  find  symbol  body	39	None	replace
237	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  header.getRawHeaderRecord();  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  header.getRawHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  header.getRawHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format.getRawHeaderRecord();    	non-compiled	[CE]  ';'  expected	39	None	replace
238	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  formatHeader.getRawHeaderRecord();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  formatHeader.getRawHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  formatHeader.getRawHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format.getRawHeaderRecord();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	39	None	replace
239	[BUG]  [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap  =  new  ArrayList  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	18	None	replace
240	[BUG]  [BUGGY]  hdrMap  =  new  ArrayHashMap  <  String,  Integer>();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap  =  new  ArrayHashMap  <  String,  Integer>();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap  =  new  ArrayHashMap  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	18	None	replace
241	[BUG]  [BUGGY]  hdrMap  =  new  java.util.ArrayList  <  String,  Integer>();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap  =  new  java.util.ArrayList  <  String,  Integer>();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap  =  new  java.util.ArrayList  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	18	None	replace
242	[BUG]  [BUGGY]  hdrMap  =  new  java.util.LinkedHashMap  <  String,  Integer>();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap  =  new  java.util.LinkedHashMap  <  String,  Integer>();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap  =  new  java.util.LinkedHashMap  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	18	None	replace
243	[BUG]  [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap  =  new  HashMap  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	18	None	replace
244	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.record(header);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.record(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.record(header);	  final    CSVRecord    nextRecord    =    this.currentRecord.record();    	non-compiled	[CE]  not  a  statement	71	None	replace
245	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.get();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.get();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.get();	  final    CSVRecord    nextRecord    =    this.currentRecord.record();    	non-compiled	[CE]  not  a  statement	71	None	replace
246	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  rec.getHeader();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  rec.getHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  rec.getHeader();	  final    CSVRecord    nextRecord    =    this.format,    rec.getNumberRecord();    	non-compiled	[CE]  not  a  statement	63	None	replace
247	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.hdrMap.getHeaderRecord();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.hdrMap.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.hdrMap.getHeaderRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getHeaderRecord();    	non-compiled	[CE]  not  a  statement	2	None	replace
248	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.headerMap.getHeaderRecord();  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>,boolean)  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.headerMap.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.headerMap.getHeaderRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getHeaderRecord();    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Map<String,Integer>,Map<String,Integer>,boolean)	2	None	replace
249	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  headerMap.getHeaderRecord();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  headerMap.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  headerMap.getHeaderRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getHeaderRecord();    	non-compiled	[CE]  not  a  statement	2	None	replace
250	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.dataMap.getHeaderRecord();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.dataMap.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.dataMap.getHeaderRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getHeaderRecord();    	non-compiled	[CE]  not  a  statement	2	None	replace
251	[BUG]  [BUGGY]  hdrMap.put(header,  formatHeader[i]);  [CE]  cannot  find  symbol  type  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  formatHeader[i]);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  formatHeader[i]);	  hdrMap.put(header,    formatHeader);    	non-compiled	[CE]  cannot  find  symbol  type	23	None	replace
252	[BUG]  [BUGGY]  hdrMap.put(header,  formatHeader[0]);  [CE]  cannot  find  symbol  type  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  formatHeader[0]);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  formatHeader[0]);	  hdrMap.put(header,    formatHeader);    	non-compiled	[CE]  cannot  find  symbol  type	23	None	replace
253	[BUG]  [BUGGY]  hdrMap.put(header,  formatHeader,  this.format);  [CE]  cannot  find  symbol  type  [FE]                                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  formatHeader,  this.format);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  formatHeader,  this.format);	  hdrMap.put(header,    formatHeader);    	non-compiled	[CE]  cannot  find  symbol  type	23	None	replace
254	[BUG]  [BUGGY]  hdrMap.put(header,  formatHeader[1]);  [CE]  not  a  statement  [FE]                                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  formatHeader[1]);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  formatHeader[1]);	  hdrMap.put(header,    formatHeader);    	non-compiled	[CE]  not  a  statement	23	None	replace
255	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  this.format.getHeaderRecord();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  this.format.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  this.format.getHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getHeaderRecord();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
256	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  recordHeader.getHeaderRecord();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  recordHeader.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  recordHeader.getHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getHeaderRecord();    	non-compiled	[CE]  not  a  statement	56	None	replace
257	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  fileHeader.getHeaderRecord();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  fileHeader.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  fileHeader.getHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	56	None	replace
258	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  header.nextRecord(this.format);  [CE]  cannot  assign  a  value  to  final  variable  headerMap  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  header.nextRecord(this.format);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  header.nextRecord(this.format);	  final    CSVRecord    nextRecord    =    this.format.nextRecord(header);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  headerMap	53	None	replace
259	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.nextRecord(header,  hdrMap);  [CE]  cannot  assign  a  value  to  final  variable  headerMap  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.nextRecord(header,  hdrMap);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.nextRecord(header,  hdrMap);	  final    CSVRecord    nextRecord    =    this.format.nextRecord(header);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  headerMap	53	None	replace
260	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.nextRecord(header,  formatHeader);  [CE]  cannot  assign  a  value  to  final  variable  headerMap  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.nextRecord(header,  formatHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.nextRecord(header,  formatHeader);	  final    CSVRecord    nextRecord    =    this.format.nextRecord(header);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  headerMap	53	None	replace
261	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.nextRecord(header);  [CE]  cannot  assign  a  value  to  final  variable  headerMap  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.nextRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.nextRecord(header);	  final    CSVRecord    nextRecord    =    this.format.nextRecord(header);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  headerMap	53	None	replace
262	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.nextRecord(rec);  [CE]  cannot  assign  a  value  to  final  variable  headerMap  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.nextRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.nextRecord(rec);	  final    CSVRecord    nextRecord    =    this.format.nextRecord(header);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  headerMap	53	None	replace
263	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.nextRecord(header,  header);  [CE]  cannot  assign  a  value  to  final  variable  headerMap  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.nextRecord(header,  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.nextRecord(header,  header);	  final    CSVRecord    nextRecord    =    this.format.nextRecord(header);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  headerMap	53	None	replace
264	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  recordHeader.getNextHeaderRecord();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  recordHeader.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  recordHeader.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNextHeaderRecord();    	non-compiled	[CE]  ';'  expected	54	None	replace
265	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  this.format.getNextHeaderRecord();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  this.format.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  this.format.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNextHeaderRecord();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
266	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec,  formatHeader.getNextHeaderRecord();  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec,  formatHeader.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec,  formatHeader.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNextHeaderRecord();    	non-compiled	[CE]  ';'  expected	54	None	replace
267	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getSkipHeaderRecord();  [CE]  cannot  assign  a  value  to  final  variable  headerMap  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.rec.getSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getSkipHeaderRecord();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  headerMap	36	None	replace
268	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.rect.getSkipHeaderRecord();  [CE]  cannot  assign  a  value  to  final  variable  headerMap  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.rect.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.rect.getSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getSkipHeaderRecord();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  headerMap	36	None	replace
269	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.data.getSkipHeaderRecord();  [CE]  cannot  assign  a  value  to  final  variable  headerMap  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.data.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.data.getSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getSkipHeaderRecord();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  headerMap	36	None	replace
270	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVRecord.getSkipHeaderRecord();  [CE]  cannot  assign  a  value  to  final  variable  headerMap  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVRecord.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.cSVRecord.getSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getSkipHeaderRecord();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  headerMap	36	None	replace
271	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.rect.getNumberRecord();  [CE]  cannot  assign  a  value  to  final  variable  headerMap  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.rect.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.rect.getNumberRecord();	  final    CSVRecord    nextRecord    =    rec.getNumberRecord();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  headerMap	31	None	replace
272	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.record.getNumberRecord();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.record.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.record.getNumberRecord();	  final    CSVRecord    nextRecord    =    rec.getNumberRecord();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
273	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getNumberRecord();  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.nextRecord.getNumberRecord();	  final    CSVRecord    nextRecord    =    rec.getNumberRecord();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
274	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.recordNumber();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.recordNumber();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.recordNumber();	  final    CSVRecord    nextRecord    =    this.format.recordNumber();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
275	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRecordNumber();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRecordNumber();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getRecordNumber();	  final    CSVRecord    nextRecord    =    this.format.recordNumber();    	non-compiled	[CE]  ';'  expected	76	None	replace
276	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumber();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumber();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNumber();	  final    CSVRecord    nextRecord    =    this.format.recordNumber();    	non-compiled	[CE]  ';'  expected	76	None	replace
277	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  header.recordNumber();  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  header.recordNumber();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  header.recordNumber();	  final    CSVRecord    nextRecord    =    this.format.recordNumber();    	non-compiled	[CE]  ';'  expected	76	None	replace
278	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length);  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(header.length);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
279	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  +  1);  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  +  1);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  +  1);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
280	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  -  1);  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  -  1);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length  -  1);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
281	[BUG]  [BUGGY]  hdrMap  =  new  ArrayHashMap  <  String,  Integer>(formatHeader.length);  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap  =  new  ArrayHashMap  <  String,  Integer>(formatHeader.length);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap  =  new  ArrayHashMap  <  String,  Integer>(formatHeader.length);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
282	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(headers.length);  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(headers.length);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(headers.length);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
283	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.firstRecord();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.firstRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.rec.firstRecord();	  final    CSVRecord    nextRecord    =    this.rec.currentRecord();    	non-compiled	[CE]  ';'  expected	27	None	replace
284	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getRecord();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.rec.getRecord();	  final    CSVRecord    nextRecord    =    this.rec.currentRecord();    	non-compiled	[CE]  ';'  expected	27	None	replace
285	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  header.record();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  header.record();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  header.record();	  final    CSVRecord    nextRecord    =    current.record();    	non-compiled	[CE]  ';'  expected	49	None	replace
286	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.values();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.values();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.rec.values();	  final    CSVRecord    nextRecord    =    this.rec.currentRecord();    	non-compiled	[CE]  ';'  expected	27	None	replace
287	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.record.encodeCSV(header);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.record.encodeCSV(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.record.encodeCSV(header);	  final    CSVRecord    nextRecord    =    this.record.currentRecord();    	non-compiled	[CE]  ';'  expected	57	None	replace
288	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.record.asCSV();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.record.asCSV();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.record.asCSV();	  final    CSVRecord    nextRecord    =    this.record.currentRecord();    	non-compiled	[CE]  ';'  expected	57	None	replace
289	[BUG]  [BUGGY]  Integer  headerRecord  =  headerMap.get(hdrMap);  [CE]  ';'  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  Integer  headerRecord  =  headerMap.get(hdrMap);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	Integer  headerRecord  =  headerMap.get(hdrMap);	  Integer    nextRecord    =    hdrMap.get(header);    	non-compiled	[CE]  ';'  expected	24	None	replace
290	[BUG]  [BUGGY]  Integer  nextRecord  =  headerMap.get(header);  [CE]  ';'  expected  [FE]                                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  Integer  nextRecord  =  headerMap.get(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	Integer  nextRecord  =  headerMap.get(header);	  Integer    nextRecord    =    hdrMap.get(header);    	non-compiled	[CE]  ';'  expected	24	None	replace
291	[BUG]  [BUGGY]  final  CSVRecord  currentRecord  =  this.format.nextRecord();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  currentRecord  =  this.format.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  currentRecord  =  this.format.nextRecord();	  final    CSVRecord    nextRecord    =    current.format.nextRecord();    	non-compiled	[CE]  ';'  expected	41	None	replace
292	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.recordHeader();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.recordHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.recordHeader();	  final    CSVRecord    nextRecord    =    this.format.recordHeader();    	non-compiled	[CE]  ';'  expected	74	None	replace
293	[BUG]  [BUGGY]  hdrMap.put(header,  recordHeader);  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  recordHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  recordHeader);	  hdrMap.put(record,    header);    	non-compiled	[CE]  ';'  expected	20	None	replace
294	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  recordHeader.getNextRecord();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  recordHeader.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  recordHeader.getNextRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNextHeaderRecord();    	non-compiled	[CE]  ';'  expected	54	None	replace
295	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.findHeaderRecord(header);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.findHeaderRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.findHeaderRecord(header);	  final    CSVRecord    nextRecord    =    hdrMap.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	2	None	replace
296	[BUG]  [BUGGY]  hdrMap.put(rect,  header.toString(),  header);  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(rect,  header.toString(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(rect,  header.toString(),  header);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  ';'  expected	21	None	replace
297	[BUG]  [BUGGY]  hdrMap.put(rect.toString(),  formatHeader);  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(rect.toString(),  formatHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(rect.toString(),  formatHeader);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  ';'  expected	21	None	replace
298	[BUG]  [BUGGY]  hdrMap.put(rect,  header.toString(),  formatHeader);  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(rect,  header.toString(),  formatHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(rect,  header.toString(),  formatHeader);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  ';'  expected	21	None	replace
299	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getSkipHeaderRecord(),  this.format;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getSkipHeaderRecord(),  this.format;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.getSkipHeaderRecord(),  this.format;	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header;    	non-compiled	[CE]  ';'  expected	38	None	replace
300	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  formatHeader.getSkipHeaderRecord(),  this.format;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  formatHeader.getSkipHeaderRecord(),  this.format;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  formatHeader.getSkipHeaderRecord(),  this.format;	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header;    	non-compiled	[CE]  ';'  expected	38	None	replace
301	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.values();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.nextRecord.values();	  final    CSVRecord    nextRecord    =    this.nextRecord.nextRecord();    	non-compiled	[CE]  ';'  expected	65	None	replace
302	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.reset();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.reset();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.nextRecord.reset();	  final    CSVRecord    nextRecord    =    this.nextRecord.nextRecord();    	non-compiled	[CE]  ';'  expected	65	None	replace
303	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.content.getNextRecord();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.content.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.content.getNextRecord();	  final    CSVRecord    nextRecord    =    this.content.nextRecord();    	non-compiled	[CE]  ';'  expected	59	None	replace
304	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.nextRecord(header);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.nextRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.nextRecord(header);	  final    CSVRecord    nextRecord    =    this.format.nextRecord(header);    	non-compiled	[CE]  ';'  expected	53	None	replace
305	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.nextRecord(rec,  header);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.nextRecord(rec,  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.nextRecord(rec,  header);	  final    CSVRecord    nextRecord    =    this.format.nextRecord(header);    	non-compiled	[CE]  ';'  expected	53	None	replace
306	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.current.values();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.current.values();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.current.values();	  final    CSVRecord    nextRecord    =    this.current.nextRecord();    	non-compiled	[CE]  ';'  expected	46	None	replace
307	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getNameRecord();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getNameRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  formatHeader.getNameRecord();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNumberRecord();    	non-compiled	[CE]  ';'  expected	62	None	replace
308	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getLength();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getLength();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  formatHeader.getLength();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNumberRecord();    	non-compiled	[CE]  ';'  expected	62	None	replace
309	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  _format.getHeaderRecord(header);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  _format.getHeaderRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  _format.getHeaderRecord(header);	  final    CSVRecord    nextRecord    =    _format.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	75	None	replace
310	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =(CSVRecord)rec.getHeaderRecord();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =(CSVRecord)rec.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =(CSVRecord)rec.getHeaderRecord();	  final    CSVRecord    nextRecord    =    _format.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	75	None	replace
311	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.DEFAULT_TITLE_FONT;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.DEFAULT_TITLE_FONT;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.DEFAULT_TITLE_FONT;	  final    CSVRecord    nextRecord    =    RectangleConstants.getNextRecord();    	non-compiled	[CE]  ';'  expected	16	None	replace
312	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.DEFAULT_RECTION;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.DEFAULT_RECTION;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.DEFAULT_RECTION;	  final    CSVRecord    nextRecord    =    RectangleConstants.getNextRecord();    	non-compiled	[CE]  ';'  expected	16	None	replace
313	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVRecord.nextRecord();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVRecord.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.cSVRecord.nextRecord();	  final    CSVRecord    nextRecord    =    current.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
314	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  headerMap.getNextRecord();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  headerMap.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  headerMap.getNextRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getNextRecord();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
315	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getNextRecord(header);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getNextRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.getNextRecord(header);	  final    CSVRecord    nextRecord    =    hdrMap.getNextRecord();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
316	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.toArray(new  CSVRecord[rec.size()  ]);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.toArray(new  CSVRecord[rec.size()  ]);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.toArray(new  CSVRecord[rec.size()  ]);	  final    CSVRecord    nextRecord    =    this.currentRecord.values();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
317	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.values();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.values();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.values();	  final    CSVRecord    nextRecord    =    this.currentRecord.values();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
318	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.values();  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.values();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.values();	  final    CSVRecord    nextRecord    =    this.currentRecord.values();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
319	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getCSVHeaderRecord(),  header);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getCSVHeaderRecord(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getCSVHeaderRecord(),  header);	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  ';'  expected	37	None	replace
320	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.header.getHeaderRecord();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.header.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.header.getHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getHeaderRecord();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
321	[BUG]  [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>(formatHeader.length);  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>(formatHeader.length);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap  =  new  ArrayList  <  String,  Integer>(formatHeader.length);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
322	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  current.getNumberRecord();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  current.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  current.getNumberRecord();	  final    CSVRecord    nextRecord    =    this.format,    rec.getNumberRecord();    	non-compiled	[CE]  ';'  expected	63	None	replace
323	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.recordNumber();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.recordNumber();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.recordNumber();	  final    CSVRecord    nextRecord    =    this.format.recordNumber();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
324	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.headerMap.getNumberRecord();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.headerMap.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.headerMap.getNumberRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getNumberRecord();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
325	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.record.nextRecord(header);  [CE]  cannot  find  symbol  sourceMap  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.record.nextRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.record.nextRecord(header);	  final    CSVRecord    nextRecord    =    this.record.nextRecord();    	non-compiled	[CE]  cannot  find  symbol  sourceMap	42	None	replace
326	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(header,  RectangleConstants.BOTTOM);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(header,  RectangleConstants.BOTTOM);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.record(header,  RectangleConstants.BOTTOM);	  final    CSVRecord    nextRecord    =    this.format.record(rec);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
327	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(header,  RectangleConstants.HORIZONTAL);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(header,  RectangleConstants.HORIZONTAL);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.record(header,  RectangleConstants.HORIZONTAL);	  final    CSVRecord    nextRecord    =    this.format.record(rec);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
328	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getNextHeaderRecord();  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleEdge.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    current.getNextHeaderRecord();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
329	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  cmdrMap.getNextHeaderRecord();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  cmdrMap.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  cmdrMap.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    _format.getNextHeaderRecord();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
330	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  _format.getPreviousHeaderRecord();  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  _format.getPreviousHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  _format.getPreviousHeaderRecord();	  final    CSVRecord    nextRecord    =    _format.getNextHeaderRecord();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
331	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.first.getNextRecord();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.first.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.first.getNextRecord();	  final    CSVRecord    nextRecord    =    current.getNextRecord();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
332	[BUG]  [BUGGY]  CSVRecord  rec  =  hdrMap.get(recordHeader);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  CSVRecord  rec  =  hdrMap.get(recordHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	CSVRecord  rec  =  hdrMap.get(recordHeader);	  CSVRecord    rec    =    hdrMap.get(header);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
333	[BUG]  [BUGGY]  hdrMap.put(header,  fileHeader);  [CE]  cannot  find  symbol  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  fileHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  fileHeader);	  hdrMap.put(header,    header);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
334	[BUG]  [BUGGY]  hdrMap.put(header,  FormatHeader.NUMBER_INTENT);  [CE]  not  a  statement  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  FormatHeader.NUMBER_INTENT);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  FormatHeader.NUMBER_INTENT);	  hdrMap.put(header,    header);    	non-compiled	[CE]  not  a  statement	22	None	replace
335	[BUG]  [BUGGY]  hdrMap.put(format,  header);  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(format,  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(format,  header);	  hdrMap.put(header,    this.format);    	non-compiled	[CE]  not  a  statement	52	None	replace
336	[BUG]  [BUGGY]  hdrMap.put(format,  this.format);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(format,  this.format);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(format,  this.format);	  hdrMap.put(header,    this.format);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
337	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNextRecords();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNextRecords();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNextRecords();	  final    CSVRecord    nextRecord    =    this.format.getNumberRecords();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
338	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecords(header);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecords(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNumberRecords(header);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecords();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
339	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  cmdrMap.nextRecord();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  cmdrMap.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  cmdrMap.nextRecord();	  final    CSVRecord    nextRecord    =    header.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
340	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.data.getNumberRecord();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.data.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.data.getNumberRecord();	  final    CSVRecord    nextRecord    =    rec.getNumberRecord();    	non-compiled	[CE]  not  a  statement	31	None	replace
341	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  recordHeader.getRawHeaderRecord();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  recordHeader.getRawHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  recordHeader.getRawHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format.getRawHeaderRecord();    	non-compiled	[CE]  not  a  statement	39	None	replace
342	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getCSVRecord();  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getCSVRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleEdge.getCSVRecord();	  final    CSVRecord    nextRecord    =    RectangleEdge.currentRecord();    	non-compiled	[CE]  not  a  statement	30	None	replace
343	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getCSVRecord(header);  [CE]  not  a  statement  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getCSVRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleEdge.getCSVRecord(header);	  final    CSVRecord    nextRecord    =    RectangleEdge.currentRecord();    	non-compiled	[CE]  not  a  statement	30	None	replace
344	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getInstance();  [CE]  not  a  statement  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getInstance();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleEdge.getInstance();	  final    CSVRecord    nextRecord    =    RectangleEdge.currentRecord();    	non-compiled	[CE]  not  a  statement	30	None	replace
345	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  _format.getRecord();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  _format.getRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  _format.getRecord();	  final    CSVRecord    nextRecord    =    _format.getNumberRecord();    	non-compiled	[CE]  not  a  statement	77	None	replace
346	[BUG]  [BUGGY]  hdrMap.put(header,  formatHeader[recordNumber]);  [CE]  not  a  statement  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  formatHeader[recordNumber]);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  formatHeader[recordNumber]);	  hdrMap.put(header,    formatHeader);    	non-compiled	[CE]  not  a  statement	23	None	replace
347	[BUG]  [BUGGY]  hdrMap.put(header,  formatHeader[index]);  [CE]  not  a  statement  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  formatHeader[index]);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  formatHeader[index]);	  hdrMap.put(header,    formatHeader);    	non-compiled	[CE]  not  a  statement	23	None	replace
348	[BUG]  [BUGGY]  hdrMap.put(header,  formatHeader[formatHeader.length]);  [CE]  not  a  statement  [FE]                                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(header,  formatHeader[formatHeader.length]);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(header,  formatHeader[formatHeader.length]);	  hdrMap.put(header,    formatHeader);    	non-compiled	[CE]  not  a  statement	23	None	replace
349	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getRecord(header);  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.getRecord(header);	  final    CSVRecord    nextRecord    =    hdrMap.currentRecord();    	non-compiled	[CE]  not  a  statement	29	None	replace
350	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  headerMap.currentRecord();  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  headerMap.currentRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  headerMap.currentRecord();	  final    CSVRecord    nextRecord    =    hdrMap.currentRecord();    	non-compiled	[CE]  not  a  statement	29	None	replace
351	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  headerMap.nextRecord();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  headerMap.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  headerMap.nextRecord();	  final    CSVRecord    nextRecord    =    hdrMap.nextRecord();    	non-compiled	[CE]  not  a  statement	40	None	replace
352	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  formatHeader.getNextRecord();  [CE]  not  a  statement  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  formatHeader.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  formatHeader.getNextRecord();	  final    CSVRecord    nextRecord    =    formatHeader.getNextHeaderRecord();    	non-compiled	[CE]  not  a  statement	11	None	replace
353	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getCSVRecord(rec);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getCSVRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getCSVRecord(rec);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecord(rec);    	non-compiled	[CE]  not  a  statement	78	None	replace
354	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.DEFAULT_NUMBER_RECORD;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.DEFAULT_NUMBER_RECORD;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.DEFAULT_NUMBER_RECORD;	  final    CSVRecord    nextRecord    =    RectangleConstants.getNumberRecord();    	non-compiled	[CE]  not  a  statement	33	None	replace
355	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.DEFAULT_NUMBER_RECTION;  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.DEFAULT_NUMBER_RECTION;  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.DEFAULT_NUMBER_RECTION;	  final    CSVRecord    nextRecord    =    RectangleConstants.getNumberRecord();    	non-compiled	[CE]  not  a  statement	33	None	replace
356	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  record.getHeaderRecord();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  record.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  record.getHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    rec.getHeaderRecord();    	non-compiled	[CE]  not  a  statement	4	None	replace
357	[BUG]  [BUGGY]  CSVRecord  rec  =  hdrMap.get(recordNumber);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  CSVRecord  rec  =  hdrMap.get(recordNumber);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	CSVRecord  rec  =  hdrMap.get(recordNumber);	  CSVRecord    rec    =    hdrMap.get(header);    	non-compiled	[CE]  not  a  statement	51	None	replace
358	[BUG]  [BUGGY]  CSVRecord  rec  =  hdrMap.get(header,  formatHeader.length);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  CSVRecord  rec  =  hdrMap.get(header,  formatHeader.length);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	CSVRecord  rec  =  hdrMap.get(header,  formatHeader.length);	  CSVRecord    rec    =    hdrMap.get(header);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
359	[BUG]  [BUGGY]  CSVRecord  rec  =  hdrMap.get(record);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  CSVRecord  rec  =  hdrMap.get(record);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	CSVRecord  rec  =  hdrMap.get(record);	  CSVRecord    rec    =    hdrMap.get(header);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
360	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.exp.nextRecord();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.exp.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.exp.nextRecord();	  final    CSVRecord    nextRecord    =    current.nextRecord();    	non-compiled	[CE]  not  a  statement	43	None	replace
361	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.recordLastRecord();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.recordLastRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.recordLastRecord();	  final    CSVRecord    nextRecord    =    this.format.recordNextRecord();    	non-compiled	[CE]  not  a  statement	79	None	replace
362	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getHeader();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.rec.getHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.rec.getHeader();	  final    CSVRecord    nextRecord    =    this.rec.currentRecord();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
363	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNext();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNext();	  final    CSVRecord    nextRecord    =    this.format.removeFirstRecord();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
364	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  currentRecord.getHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  currentRecord.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  currentRecord.getHeaderRecord();	  final    CSVRecord    nextRecord    =    formatHeader.getHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
365	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.record.encodeCSV(rec);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.record.encodeCSV(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.record.encodeCSV(rec);	  final    CSVRecord    nextRecord    =    this.record.currentRecord();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
366	[BUG]  [BUGGY]  hdrMap.put(backer,  formatHeader);  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(backer,  formatHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(backer,  formatHeader);	  hdrMap.put(header,    formatHeader);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
367	[BUG]  [BUGGY]  hdrMap  =  new  TreeMap  <  String,  Integer>();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap  =  new  TreeMap  <  String,  Integer>();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap  =  new  TreeMap  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
368	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getHeaderRecord(rec);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getHeaderRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getHeaderRecord(rec);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecord(rec);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
369	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =(CSVRecord)this.format.getNextHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =(CSVRecord)this.format.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =(CSVRecord)this.format.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    _format.getNextHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
370	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  _format.getNextHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  static  final  CSVRecord  nextRecord  =  _format.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	static  final  CSVRecord  nextRecord  =  _format.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    _format.getNextHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
371	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.nextHeader.getNextHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.nextHeader.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.nextHeader.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getNextHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
372	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getName();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getName();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  formatHeader.getName();	  final    CSVRecord    nextRecord    =    this.format,    recordHeader.getNumberRecord();    	non-compiled	[CE]  ';'  expected	62	None	replace
373	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getCSVHeaderRecord(header);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getCSVHeaderRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getCSVHeaderRecord(header);	  final    CSVRecord    nextRecord    =    this.format.getCSVHeaderRecord();    	non-compiled	[CE]  not  a  statement	50	None	replace
374	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.currentRecord();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.currentRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.currentRecord();	  final    CSVRecord    nextRecord    =    rec.currentRecord();    	non-compiled	[CE]  not  a  statement	25	None	replace
375	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVRecord.currentRecord();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.cSVRecord.currentRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.cSVRecord.currentRecord();	  final    CSVRecord    nextRecord    =    rec.currentRecord();    	non-compiled	[CE]  not  a  statement	25	None	replace
376	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  currentHeader.getHeaderRecord();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  currentHeader.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  currentHeader.getHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    header.getHeaderRecord();    	non-compiled	[CE]  not  a  statement	3	None	replace
377	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  _format.getRawHeaderRecord();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  _format.getRawHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  _format.getRawHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format.getRawHeaderRecord();    	non-compiled	[CE]  not  a  statement	39	None	replace
378	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRowRecords();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRowRecords();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getRowRecords();	  final    CSVRecord    nextRecord    =    this.format.getNumberRecords();    	non-compiled	[CE]  not  a  statement	70	None	replace
379	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.header.reset();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.header.reset();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.header.reset();	  final    CSVRecord    nextRecord    =    this.header.nextRecord();    	non-compiled	[CE]  not  a  statement	60	None	replace
380	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  hdrMap.getHeaderRecord(header);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  hdrMap.getHeaderRecord(header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  hdrMap.getHeaderRecord(header);	  final    CSVRecord    nextRecord    =    this.format,    hdrMap.getHeaderRecord();    	non-compiled	[CE]  not  a  statement	55	None	replace
381	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getSkipHeaderRecord();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.nextRecord.getSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    rec.getSkipHeaderRecord();    	non-compiled	[CE]  not  a  statement	36	None	replace
382	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  rec.getLastHeaderRecord();  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  rec.getLastHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  rec.getLastHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    rec.getNextHeaderRecord();    	non-compiled	[CE]  not  a  statement	9	None	replace
383	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  currentRecord.getNumberRecord();  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  currentRecord.getNumberRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  currentRecord.getNumberRecord();	  final    CSVRecord    nextRecord    =    formatHeader.getNumberRecord();    	non-compiled	[CE]  not  a  statement	35	None	replace
384	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.record();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.nextRecord.record();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.nextRecord.record();	  final    CSVRecord    nextRecord    =    current.record();    	non-compiled	[CE]  not  a  statement	49	None	replace
385	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  rec.trim().nextRecord();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  rec.trim().nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  rec.trim().nextRecord();	  final    CSVRecord    nextRecord    =    this.content.nextRecord();    	non-compiled	[CE]  not  a  statement	59	None	replace
386	[BUG]  [BUGGY]  hdrMap.put(formatHeader.toString(),  rect);  [CE]  not  a  statement  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(formatHeader.toString(),  rect);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(formatHeader.toString(),  rect);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  not  a  statement	21	None	replace
387	[BUG]  [BUGGY]  hdrMap.put(record.toString(),  header);  [CE]  not  a  statement  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(record.toString(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(record.toString(),  header);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  not  a  statement	21	None	replace
388	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.nextHeaderMap.getNextHeaderRecord();  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.nextHeaderMap.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.nextHeaderMap.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    hdrMap.getNextHeaderRecord();    	non-compiled	[CE]  not  a  statement	8	None	replace
389	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getHeaderRecord(),  header);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  formatHeader.getHeaderRecord(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  formatHeader.getHeaderRecord(),  header);	  final    CSVRecord    nextRecord    =    this.format,    formatHeader.getHeaderRecord();    	non-compiled	[CE]  not  a  statement	73	None	replace
390	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(this.format);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(this.format);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(this.format);	  final    CSVRecord    nextRecord    =    RectangleConstants.getNumberRecord();    	non-compiled	[CE]  not  a  statement	33	None	replace
391	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(i);  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(i);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.getNumberRecord(i);	  final    CSVRecord    nextRecord    =    RectangleConstants.getNumberRecord();    	non-compiled	[CE]  not  a  statement	33	None	replace
392	[BUG]  [BUGGY]  Integer  header  =  headerMap.get(hdrMap);  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  Integer  header  =  headerMap.get(hdrMap);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	Integer  header  =  headerMap.get(hdrMap);	  Integer    nextRecord    =    hdrMap.get(header);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
393	[BUG]  [BUGGY]  Integer  nextRecord  =  headerMap.get(htmlHeader);  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  Integer  nextRecord  =  headerMap.get(htmlHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	Integer  nextRecord  =  headerMap.get(htmlHeader);	  Integer    nextRecord    =    hdrMap.get(header);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
394	[BUG]  [BUGGY]  Integer  nextRecord  =  headermap.get(hdrMap);  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  Integer  nextRecord  =  headermap.get(hdrMap);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	Integer  nextRecord  =  headermap.get(hdrMap);	  Integer    nextRecord    =    hdrMap.get(header);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
395	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.recordPreviousRecord();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.recordPreviousRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.recordPreviousRecord();	  final    CSVRecord    nextRecord    =    this.format.getPreviousRecord();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
396	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRowHeaderRecord(),  header);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRowHeaderRecord(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getRowHeaderRecord(),  header);	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
397	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecords(),  header);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecords(),  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNumberRecords(),  header);	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
398	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  header.getLastHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format,  header.getLastHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format,  header.getLastHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format,    header.getNextHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
399	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecord(header,  i);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecord(header,  i);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getNumberRecord(header,  i);	  final    CSVRecord    nextRecord    =    this.format.getNumberRecord(header);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
400	[BUG]  [BUGGY]  hdrMap.put(record,  currentRecord);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(record,  currentRecord);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(record,  currentRecord);	  hdrMap.put(record,    header);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
401	[BUG]  [BUGGY]  hdrMap.put(record,  this.formatHeader);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(record,  this.formatHeader);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(record,  this.formatHeader);	  hdrMap.put(record,    header);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
402	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getCSVRecord(rec);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleEdge.getCSVRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleEdge.getCSVRecord(rec);	  final    CSVRecord    nextRecord    =    RectangleEdge.currentRecord();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
403	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.headerMap.getNextRecord();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.headerMap.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.headerMap.getNextRecord();	  final    CSVRecord    nextRecord    =    rec.getNextRecord();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
404	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.toArray(new  CSVRecord[this.recordNumber]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.toArray(new  CSVRecord[this.recordNumber]);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.toArray(new  CSVRecord[this.recordNumber]);	  final    CSVRecord    nextRecord    =    this.currentRecord.values();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
405	[BUG]  [BUGGY]  hdrMap.put(receiver,  this.format);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap.put(receiver,  this.format);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap.put(receiver,  this.format);	  hdrMap.put(header,    this.format);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
406	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.getDataRecord();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.getDataRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.getDataRecord();	  final    CSVRecord    nextRecord    =    this.currentRecord.data();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
407	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.recorded();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.currentRecord.recorded();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.currentRecord.recorded();	  final    CSVRecord    nextRecord    =    this.currentRecord.data();    	non-compiled	[CE]  ';'  expected	72	None	replace
408	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.current.values().nextRecord();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.current.values().nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.current.values().nextRecord();	  final    CSVRecord    nextRecord    =    this.current.nextRecord();    	non-compiled	[CE]  ';'  expected	46	None	replace
409	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(headers);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(headers);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.record(headers);	  final    CSVRecord    nextRecord    =    this.format.record(rec);    	non-compiled	[CE]  ';'  expected	69	None	replace
410	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(rec,  header);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.record(rec,  header);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.record(rec,  header);	  final    CSVRecord    nextRecord    =    this.format.record(rec);    	non-compiled	[CE]  ';'  expected	69	None	replace
411	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRecord(rec);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.format.getRecord(rec);	  final    CSVRecord    nextRecord    =    this.format.record(rec);    	non-compiled	[CE]  ';'  expected	69	None	replace
412	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.header.getNextHeaderRecord();  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.header.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.header.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    current.getNextHeaderRecord();    	non-compiled	[CE]  ';'  expected	10	None	replace
413	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  formatHeader.record(this.format.getNextHeaderRecord());  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  formatHeader.record(this.format.getNextHeaderRecord());  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  formatHeader.record(this.format.getNextHeaderRecord());	  final    CSVRecord    nextRecord    =    formatHeader.getNextHeaderRecord();    	non-compiled	[CE]  ';'  expected	11	None	replace
414	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.currentRecord(rec);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.currentRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.currentRecord(rec);	  final    CSVRecord    nextRecord    =    RectangleConstants.currentRecord();    	non-compiled	[CE]  ';'  expected	28	None	replace
415	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(this.formatHeader.length);  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(this.formatHeader.length);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(this.formatHeader.length);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>(formatHeader.length);    	non-compiled	[CE]  ';'  expected	19	None	replace
416	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.current.format.nextRecord();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.current.format.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.current.format.nextRecord();	  final    CSVRecord    nextRecord    =    current.format.nextRecord();    	non-compiled	[CE]  ';'  expected	41	None	replace
417	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getNextRecord(rec);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getNextRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.getNextRecord(rec);	  final    CSVRecord    nextRecord    =    hdrMap.getNextRecord();    	non-compiled	[CE]  ';'  expected	14	None	replace
418	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =(CSVRecord)this.format.getHeaderRecord();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =(CSVRecord)this.format.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =(CSVRecord)this.format.getHeaderRecord();	  final    CSVRecord    nextRecord    =    _format.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	75	None	replace
419	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  _format.getHeaderRecord();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  static  final  CSVRecord  nextRecord  =  _format.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	static  final  CSVRecord  nextRecord  =  _format.getHeaderRecord();	  final    CSVRecord    nextRecord    =    _format.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	75	None	replace
420	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getRecord(rec);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  hdrMap.getRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  hdrMap.getRecord(rec);	  final    CSVRecord    nextRecord    =    hdrMap.currentRecord();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
421	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.data.nextRecord(rec);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  this.data.nextRecord(rec);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  this.data.nextRecord(rec);	  final    CSVRecord    nextRecord    =    this.data.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
422	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.NONE.getNextRecord();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.NONE.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.NONE.getNextRecord();	  final    CSVRecord    nextRecord    =    RectangleConstants.getNextRecord();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
423	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNextRecord(this.format);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();  String[]  header  =  null;  if  (formatHeader.length  ==  0)  {        [BUGGY]  final  CSVRecord  nextRecord  =  RectangleConstants.getNextRecord(this.format);  [BUGGY]      if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	357	357	1	replace	final  CSVRecord  nextRecord  =  RectangleConstants.getNextRecord(this.format);	  final    CSVRecord    nextRecord    =    RectangleConstants.getNextRecord();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
