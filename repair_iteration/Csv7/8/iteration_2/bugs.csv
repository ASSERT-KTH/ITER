bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  hdrMap.put(header[0],  Integer.valueOf(0));  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  hdrMap.put(header[0],  Integer.valueOf(0));  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	hdrMap.put(header[0],  Integer.valueOf(0));	      	non-compiled	[CE]  :  expected	5	None	replace
2	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	hdrMap.put(header[i],  Integer.valueOf(i));	      	non-compiled	[CE]  :  expected	5	None	replace
3	[BUG]  [BUGGY]  hdrMap.put(rect.toString(),  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  hdrMap.put(rect.toString(),  this.format.getSkipHeaderRecord());  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	hdrMap.put(rect.toString(),  this.format.getSkipHeaderRecord());	      	non-compiled	[CE]  :  expected	5	None	replace
4	[BUG]  [BUGGY]  Lexer  hdrMap  =  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  Lexer  hdrMap  =  this.format.getSkipHeaderRecord();  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Lexer  hdrMap  =  this.format.getSkipHeaderRecord();	      	non-compiled	[CE]  :  expected	5	None	replace
5	[BUG]  [BUGGY]  hdrMap.put(rec,  header);  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  hdrMap.put(rec,  header);  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	hdrMap.put(rec,  header);	      	non-compiled	[CE]  :  expected	5	None	replace
6	[BUG]  [BUGGY]  hdrMap.put(header[0],  Integer.valueOf(i));  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  hdrMap.put(header[0],  Integer.valueOf(i));  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	hdrMap.put(header[0],  Integer.valueOf(i));	      	non-compiled	[CE]  :  expected	5	None	replace
7	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  >=  0)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  ==  null  ||  header.length  >=  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  ==  null  ||  header.length  >=  0)  {	  if(header    ==    null    ||    header.length!=    0)    {    	non-compiled	[CE]  :  expected	3	None	replace
8	[BUG]  [BUGGY]  if(header!=  null  ||  header.length!=  0)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header!=  null  ||  header.length!=  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header!=  null  ||  header.length!=  0)  {	  if(header    ==    null    ||    header.length!=    0)    {    	non-compiled	[CE]  :  expected	3	None	replace
9	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  0)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  ==  null  ||  header.length  <  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  ==  null  ||  header.length  <  0)  {	  if(header    ==    null    ||    header.length!=    0)    {    	non-compiled	[CE]  :  expected	3	None	replace
10	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  >>  0)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  ==  null  ||  header.length  >>  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  ==  null  ||  header.length  >>  0)  {	  if(header    ==    null    ||    header.length!=    0)    {    	non-compiled	[CE]  :  expected	3	None	replace
11	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  >  0)  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header!=  null  ||  header.length  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header!=  null  ||  header.length  >  0)  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	8	None	replace
12	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  >  0)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  ==  null  ||  header.length  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  ==  null  ||  header.length  >  0)  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	8	None	replace
13	[BUG]  [BUGGY]  if(header  ==  null  &&  header.length  >  0)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  ==  null  &&  header.length  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  ==  null  &&  header.length  >  0)  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	8	None	replace
14	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  <  =  0)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header!=  null  &&  header.length  <  =  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header!=  null  &&  header.length  <  =  0)  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	8	None	replace
15	[BUG]  [BUGGY]  if(header  >=  null  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  >=  null  ||  header.length  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  >=  null  ||  header.length  >  0)  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	8	None	replace
16	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  =  0)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  ==  null  ||  header.length  <  =  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  ==  null  ||  header.length  <  =  0)  {	  if(header    ==    null    ||    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	4	None	replace
17	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  ==  1)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  ==  null  ||  header.length  ==  1)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  ==  null  ||  header.length  ==  1)  {	  if(header    ==    null    ||    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	4	None	replace
18	[BUG]  [BUGGY]  if(rec  ==  null  &&  header!=  null  &&  header.length  ==  0)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(rec  ==  null  &&  header!=  null  &&  header.length  ==  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(rec  ==  null  &&  header!=  null  &&  header.length  ==  0)  {	  if(header!=    null    &&    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	10	None	replace
19	[BUG]  [BUGGY]  if(header  >=  null  ||  header.length  ==  0)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  >=  null  ||  header.length  ==  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  >=  null  ||  header.length  ==  0)  {	  if(header!=    null    &&    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	10	None	replace
20	[BUG]  [BUGGY]  if(header!=  null  &&  header.size()  >  0)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header!=  null  &&  header.size()  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header!=  null  &&  header.size()  >  0)  {	  if(header!=    null    &&    nextRecord.size()    >    0)    {    	non-compiled	[CE]  :  expected	9	None	replace
21	[BUG]  [BUGGY]  if(header!=  null  ||  nextRecord.size()  >  0)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header!=  null  ||  nextRecord.size()  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header!=  null  ||  nextRecord.size()  >  0)  {	  if(header!=    null    &&    nextRecord.size()    >    0)    {    	non-compiled	[CE]  :  expected	9	None	replace
22	[BUG]  [BUGGY]  if(header!=  null  ||  header.size()  >  0)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header!=  null  ||  header.size()  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header!=  null  ||  header.size()  >  0)  {	  if(header!=    null    &&    nextRecord.size()    >    0)    {    	non-compiled	[CE]  :  expected	9	None	replace
23	[BUG]  [BUGGY]  if(header  ==  null  &&  nextRecord.size()  >  0)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  ==  null  &&  nextRecord.size()  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  ==  null  &&  nextRecord.size()  >  0)  {	  if(header!=    null    &&    nextRecord.size()    >    0)    {    	non-compiled	[CE]  :  expected	9	None	replace
24	[BUG]  [BUGGY]  if(header  ==  null  ||  nextRecord.size()  >  0)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  ==  null  ||  nextRecord.size()  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  ==  null  ||  nextRecord.size()  >  0)  {	  if(header!=    null    &&    nextRecord.size()    >    0)    {    	non-compiled	[CE]  :  expected	9	None	replace
25	[BUG]  [BUGGY]  if(header  ==  null  &&  header.size()  >  0)  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  ==  null  &&  header.size()  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  ==  null  &&  header.size()  >  0)  {	  if(header!=    null    &&    nextRecord.size()    >    0)    {    	non-compiled	[CE]  :  expected	9	None	replace
26	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  <  0)  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header!=  null  &&  header.length  <  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header!=  null  &&  header.length  <  0)  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	8	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }	      	non-compiled	[CE]  :  expected	5	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }	      	non-compiled	[CE]  :  expected	5	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	      	non-compiled	[CE]  :  expected	5	None	replace
30	[BUG]  [BUGGY]  hdrMap.put(header[0],  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  hdrMap.put(header[0],  this.format.getSkipHeaderRecord());  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	hdrMap.put(header[0],  this.format.getSkipHeaderRecord());	      	non-compiled	[CE]  :  expected	5	None	replace
31	[BUG]  [BUGGY]  String  header[]  =  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  String  header[]  =  this.format.getSkipHeaderRecord();  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	String  header[]  =  this.format.getSkipHeaderRecord();	      	non-compiled	[CE]  :  expected	5	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  int.valueOf(i));  }  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  int.valueOf(i));  }  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  int.valueOf(i));  }	      	non-compiled	[CE]  :  expected	5	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  String.valueOf(i));  }  [CE]  :  expected  [FE]                            AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  String.valueOf(i));  }  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  String.valueOf(i));  }	      	non-compiled	[CE]  :  expected	5	None	replace
34	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >=  0)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header!=  null  &&  header.length  >=  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header!=  null  &&  header.length  >=  0)  {	  if(header!=    null    ||    header.length    >=    0)    {    	non-compiled	[CE]  :  expected	7	None	replace
35	[BUG]  [BUGGY]  if(header  ==  null  &&  header.length!=  0)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  ==  null  &&  header.length!=  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  ==  null  &&  header.length!=  0)  {	  if(header!=    null    &&    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	10	None	replace
36	[BUG]  [BUGGY]  if(header  >=  null  &&  header.length  >  0)  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  >=  null  &&  header.length  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  >=  null  &&  header.length  >  0)  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	8	None	replace
37	[BUG]  [BUGGY]  if(header!=  null  &&  header.length!=  0)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header!=  null  &&  header.length!=  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header!=  null  &&  header.length!=  0)  {	  if(header    ==    null    ||    header.length!=    0)    {    	non-compiled	[CE]  :  expected	3	None	replace
38	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  <  2)  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header!=  null  ||  header.length  <  2)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header!=  null  ||  header.length  <  2)  {	  if(header!=    null    ||    header.length    <    0)    {    	non-compiled	[CE]  :  expected	6	None	replace
39	[BUG]  [BUGGY]  if(header!=  null  &&  receiver.size()  >  0)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header!=  null  &&  receiver.size()  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header!=  null  &&  receiver.size()  >  0)  {	  if(header!=    null    &&    nextRecord.size()    >    0)    {    	non-compiled	[CE]  :  expected	9	None	replace
40	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  2)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  ==  null  ||  header.length  <  2)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  ==  null  ||  header.length  <  2)  {	  if(header    ==    null    ||    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	4	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i),  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i),  this.format.getSkipHeaderRecord());  }  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i),  this.format.getSkipHeaderRecord());  }	      	non-compiled	[CE]  :  expected	5	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i,  Integer.valueOf(i));  }  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i,  Integer.valueOf(i));  }  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i,  Integer.valueOf(i));  }	      	non-compiled	[CE]  :  expected	5	None	replace
43	[BUG]  [BUGGY]  if(header  ==  null  &&  header.length  ==  0)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }      [BUGGY]  if(header  ==  null  &&  header.length  ==  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if(header  ==  null  &&  header.length  ==  0)  {	  if(header!=    null    &&    header.length    ==    0)    {    	non-compiled	[CE]  :  expected	10	None	replace
