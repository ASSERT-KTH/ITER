bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  formatHeader);  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  hdrMap.put(formatHeader,  formatHeader);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  formatHeader);	      	non-compiled	[CE]  :  expected	8	None	replace
2	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>();	      	non-compiled	[CE]  :  expected	8	None	replace
3	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>());  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>());  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>());	      	non-compiled	[CE]  :  expected	8	None	replace
4	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  this.format);  [CE]  :  expected  [FE]                            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  hdrMap.put(formatHeader,  this.format);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  this.format);	      	non-compiled	[CE]  :  expected	8	None	replace
5	[BUG]  [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>();  [CE]  :  expected  [FE]                              AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap  =  new  HashMap  <  String,  Integer>();	      	non-compiled	[CE]  :  expected	8	None	replace
6	[BUG]  [BUGGY]  hdrMap.putAll(formatHeader);  [CE]  :  expected  [FE]                                AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  hdrMap.putAll(formatHeader);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.putAll(formatHeader);	      	non-compiled	[CE]  :  expected	8	None	replace
7	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  header);  [CE]  :  expected  [FE]                                  AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  hdrMap.put(formatHeader,  header);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  header);	      	non-compiled	[CE]  :  expected	8	None	replace
8	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeader(hdrMap);  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  this.format.getHeader(hdrMap);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeader(hdrMap);	  String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
9	[BUG]  [BUGGY]  String[]  header  =  formatHeader.getHeader();  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  formatHeader.getHeader();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.getHeader();	  String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
10	[BUG]  [BUGGY]  String[]  header  =  this.format.getRecordHeader();  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  this.format.getRecordHeader();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getRecordHeader();	  String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
11	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeaderRecord();  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  this.format.getHeaderRecord();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeaderRecord();	  String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
12	[BUG]  [BUGGY]  String[]  header  =  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  this.format.getSkipHeaderRecord();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getSkipHeaderRecord();	  String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
13	[BUG]  [BUGGY]  String[]  header  =  hdrMap.getHeader();  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.getHeader();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.getHeader();	  String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
14	[BUG]  [BUGGY]  String[]  header  =  formatHeader;  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  formatHeader;  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader;	  String[]    header    =    hdrMap;    	non-compiled	[CE]  :  expected	6	None	replace
15	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.size()  ];  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[formatHeader.size()  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.size()  ];	  String[]    header    =    hdrMap;    	non-compiled	[CE]  :  expected	6	None	replace
16	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  +  1];  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[record.values().size()  +  1];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  +  1];	  String[]    header    =    new    String[record.values().size()    ];    	non-compiled	[CE]  :  expected	10	None	replace
17	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.values().size()  ];  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[formatHeader.values().size()  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.values().size()  ];	  String[]    header    =    new    String[record.values().size()    ];    	non-compiled	[CE]  :  expected	10	None	replace
18	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  +  2];  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[record.values().size()  +  2];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  +  2];	  String[]    header    =    new    String[record.values().size()    ];    	non-compiled	[CE]  :  expected	10	None	replace
19	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  *  2];  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[record.values().size()  *  2];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  *  2];	  String[]    header    =    new    String[record.values().size()    ];    	non-compiled	[CE]  :  expected	10	None	replace
20	[BUG]  [BUGGY]  String[]  header  =  new  String[record.size()  ];  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[record.size()  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.size()  ];	  String[]    header    =    new    String[record.values().size()    ];    	non-compiled	[CE]  :  expected	10	None	replace
21	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  1];  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  1];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  +  1];	  String[]    header    =    new    String[hdrMap.size()    ];    	non-compiled	[CE]  :  expected	4	None	replace
22	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  ];  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.size()    ];    	non-compiled	[CE]  :  expected	4	None	replace
23	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  -  1];  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.size()  -  1];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  -  1];	  String[]    header    =    new    String[hdrMap.size()    ];    	non-compiled	[CE]  :  expected	4	None	replace
24	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  2];  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  2];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  *  2];	  String[]    header    =    new    String[hdrMap.size()    ];    	non-compiled	[CE]  :  expected	4	None	replace
25	[BUG]  [BUGGY]  String[]  header  =  formatHeader.keySet();  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  formatHeader.keySet();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.keySet();	  String[]    header    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	3	None	replace
26	[BUG]  [BUGGY]  String[]  header  =  hdrMap.getHeaders();  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.getHeaders();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.getHeaders();	  String[]    header    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	3	None	replace
27	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  +  1];  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  +  1];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().size()  +  1];	  String[]    header    =    new    String[initializeHeader().values().size()    ];    	non-compiled	[CE]  :  expected	9	None	replace
28	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap().size()  ];  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap().size()  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hdrMap().size()  ];	  String[]    header    =    new    String[initializeHeader().values().size()    ];    	non-compiled	[CE]  :  expected	9	None	replace
29	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.size()  ];  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.size()  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hdrMap.size()  ];	  String[]    header    =    new    String[initializeHeader().values().size()    ];    	non-compiled	[CE]  :  expected	9	None	replace
30	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  +  2];  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  +  2];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().size()  +  2];	  String[]    header    =    new    String[initializeHeader().values().size()    ];    	non-compiled	[CE]  :  expected	9	None	replace
31	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.values()  ];  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[formatHeader.values()  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.values()  ];	  String[]    header    =    new    String[hdrMap.values()    ];    	non-compiled	[CE]  :  expected	12	None	replace
32	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  1];  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  1];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  +  1];	  String[]    header    =    new    String[hdrMap.values()    ];    	non-compiled	[CE]  :  expected	12	None	replace
33	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  ];  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.values()    ];    	non-compiled	[CE]  :  expected	12	None	replace
34	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.keySet()  ];  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.keySet()  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.keySet()  ];	  String[]    header    =    new    String[hdrMap.values()    ];    	non-compiled	[CE]  :  expected	12	None	replace
35	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.toArray(new  String[hdrMap.size()  ]);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    new    String[hdrMap.values()    ];    	non-compiled	[CE]  :  expected	12	None	replace
36	[BUG]  [BUGGY]  String[]  header  =  formatHeader.values();  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  formatHeader.values();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.values();	  String[]    header    =    hdrMap.values();    	non-compiled	[CE]  :  expected	2	None	replace
37	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  1];  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  1];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  +  1];	  String[]    header    =    new    String[hdrMap.values().size()    ];    	non-compiled	[CE]  :  expected	11	None	replace
38	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().size()  ];  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().size()  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.keySet().size()  ];	  String[]    header    =    new    String[hdrMap.values().size()    ];    	non-compiled	[CE]  :  expected	11	None	replace
39	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  ];  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.values().size()    ];    	non-compiled	[CE]  :  expected	11	None	replace
40	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  ];  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  ];	  String[]    header    =    new    String[hdrMap.values().size()    ];    	non-compiled	[CE]  :  expected	11	None	replace
41	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[formatHeader.size()  ]);  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[formatHeader.size()  ]);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[formatHeader.size()  ]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	1	None	replace
42	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  ]);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	1	None	replace
43	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  -  1]);  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  -  1]);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  -  1]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	1	None	replace
44	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[formatHeader.size()  ]);  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[formatHeader.size()  ]);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[formatHeader.size()  ]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	1	None	replace
45	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  +  1]);  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  +  1]);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  +  1]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	1	None	replace
46	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  0]);  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  0]);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  0]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	1	None	replace
47	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.length);  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.length);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.length);	  String[]    header    =    hdrMap.get(formatHeader);    	non-compiled	[CE]  :  expected	7	None	replace
48	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString());  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString());  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.toString());	  String[]    header    =    hdrMap.get(formatHeader);    	non-compiled	[CE]  :  expected	7	None	replace
49	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  rec);  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  rec);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader,  rec);	  String[]    header    =    hdrMap.get(formatHeader);    	non-compiled	[CE]  :  expected	7	None	replace
50	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  recordNumber);  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  recordNumber);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader,  recordNumber);	  String[]    header    =    hdrMap.get(formatHeader);    	non-compiled	[CE]  :  expected	7	None	replace
51	[BUG]  [BUGGY]  String[]  header  =  formatHeader.get(hdrMap);  [CE]  :  expected  [FE]                            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  formatHeader.get(hdrMap);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.get(hdrMap);	  String[]    header    =    hdrMap.get(formatHeader);    	non-compiled	[CE]  :  expected	7	None	replace
52	[BUG]  [BUGGY]  String[]  header  =  this.hdrMap.values();  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  this.hdrMap.values();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.hdrMap.values();	  String[]    header    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	3	None	replace
53	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeaders();  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  this.format.getHeaders();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeaders();	  String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
54	[BUG]  [BUGGY]  final  String[]  header  =  this.format.getHeader();  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  final  String[]  header  =  this.format.getHeader();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	final  String[]  header  =  this.format.getHeader();	  String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
55	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeader(recordNumber);  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  this.format.getHeader(recordNumber);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeader(recordNumber);	  String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
56	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(new  String[hdrMap.size()  ]);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    new    String[initializeHeader().values().size()    ];    	non-compiled	[CE]  :  expected	9	None	replace
57	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap)];  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap)];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap)];	  String[]    header    =    new    String[initializeHeader().values().size()    ];    	non-compiled	[CE]  :  expected	9	None	replace
58	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  >  0  ];  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.size()  >  0  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  >  0  ];	  String[]    header    =    new    String[hdrMap.size()    ];    	non-compiled	[CE]  :  expected	4	None	replace
59	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader  +  1);  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.get(formatHeader  +  1);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader  +  1);	  String[]    header    =    hdrMap.get(formatHeader);    	non-compiled	[CE]  :  expected	7	None	replace
60	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.length()  ]);  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.length()  ]);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.length()  ]);	  String[]    header    =    hdrMap.values();    	non-compiled	[CE]  :  expected	2	None	replace
61	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader()  ];  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader()  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader()  ];	  String[]    header    =    new    String[hdrMap.values()    ];    	non-compiled	[CE]  :  expected	12	None	replace
62	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[HdrMap.size()  ]);  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[HdrMap.size()  ]);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[HdrMap.size()  ]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	1	None	replace
63	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  hdrMap);  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  hdrMap.put(formatHeader,  hdrMap);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  hdrMap);	      	non-compiled	[CE]  :  expected	8	None	replace
64	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  hdr);  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  hdrMap.put(formatHeader,  hdr);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  hdr);	      	non-compiled	[CE]  :  expected	8	None	replace
65	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  Integer(0));  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  hdrMap.put(formatHeader,  new  Integer(0));  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  Integer(0));	      	non-compiled	[CE]  :  expected	8	None	replace
66	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  null);  [CE]  :  expected  [FE]                            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  hdrMap.put(formatHeader,  null);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  null);	      	non-compiled	[CE]  :  expected	8	None	replace
67	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(hdrMap)];  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[record.values().toArray(hdrMap)];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(hdrMap)];	  String[]    header    =    new    String[record.values().size()    ];    	non-compiled	[CE]  :  expected	10	None	replace
68	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  -  1];  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[record.values().size()  -  1];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  -  1];	  String[]    header    =    new    String[record.values().size()    ];    	non-compiled	[CE]  :  expected	10	None	replace
69	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[hdrMap.size()  ]);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    new    String[hdrMap.values().size()    ];    	non-compiled	[CE]  :  expected	11	None	replace
70	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  -  1];  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  -  1];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  -  1];	  String[]    header    =    new    String[hdrMap.values().size()    ];    	non-compiled	[CE]  :  expected	11	None	replace
71	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().length  ];  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.values().length  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().length  ];	  String[]    header    =    new    String[hdrMap.values().size()    ];    	non-compiled	[CE]  :  expected	11	None	replace
72	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().size()  ];  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().size()  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader().size()  ];	  String[]    header    =    new    String[hdrMap.values().size()    ];    	non-compiled	[CE]  :  expected	11	None	replace
73	[BUG]  [BUGGY]  String[]  header  =  this.headerMap.values();  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  this.headerMap.values();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.headerMap.values();	  String[]    header    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	3	None	replace
74	[BUG]  [BUGGY]  String[]  header  =  this.format.keySet();  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  this.format.keySet();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.keySet();	  String[]    header    =    hdrMap.keySet();    	non-compiled	[CE]  :  expected	3	None	replace
75	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeaderList();  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  this.format.getHeaderList();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeaderList();	  String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
76	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeaderData();  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  this.format.getHeaderData();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeaderData();	  String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	5	None	replace
77	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  ],  formatHeader);  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  ],  formatHeader);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  ],  formatHeader);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	1	None	replace
78	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[record.size()  ]);  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[record.size()  ]);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(new  String[record.size()  ]);	  String[]    header    =    new    String[record.values().size()    ];    	non-compiled	[CE]  :  expected	10	None	replace
79	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  +  formatHeader.length  ];  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[record.values().size()  +  formatHeader.length  ];  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  +  formatHeader.length  ];	  String[]    header    =    new    String[record.values().size()    ];    	non-compiled	[CE]  :  expected	10	None	replace
80	[BUG]  [BUGGY]  Integer[]  formatHeader  =  this.format.getFormatHeader();  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  Integer[]  formatHeader  =  this.format.getFormatHeader();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	Integer[]  formatHeader  =  this.format.getFormatHeader();	      	non-compiled	[CE]  :  expected	8	None	replace
81	[BUG]  [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader);  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.values().get(formatHeader);	  String[]    header    =    hdrMap.get(formatHeader);    	non-compiled	[CE]  :  expected	7	None	replace
82	[BUG]  [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader);  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader);  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.keySet().get(formatHeader);	  String[]    header    =    hdrMap.get(formatHeader);    	non-compiled	[CE]  :  expected	7	None	replace
83	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values();  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();    [BUGGY]  String[]  header  =  new  String[hdrMap.values();  [BUGGY]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values();	  String[]    header    =    new    String[hdrMap.values()    ];    	non-compiled	[CE]  :  expected	12	None	replace
