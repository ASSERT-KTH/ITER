bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  Integer(initializeHeader));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  Integer(initializeHeader));  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  Integer(initializeHeader));	  hdrMap.put(formatHeader,    hdrMap);    	non-compiled	[CE]  :  expected	63	None	replace
2	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {  format  }  );  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {  format  }  );  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  String[]  {  format  }  );	  hdrMap.put(formatHeader,    hdrMap);    	non-compiled	[CE]  :  expected	63	None	replace
3	[BUG]  [BUGGY]  String[]  header  =  new  String[Record.values().size()];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[Record.values().size()];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[Record.values().size()];	  String[]    header    =    new    String[record.values().size()    -    1];    	non-compiled	[CE]  :  expected	68	None	replace
4	[BUG]  [BUGGY]  String[]  header  =  new  String[str.values().size()];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[str.values().size()];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[str.values().size()];	  String[]    header    =    new    String[record.values().size()    -    1];    	non-compiled	[CE]  :  expected	68	None	replace
5	[BUG]  [BUGGY]  String[]  header  =  new  String[rc.values().size()];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[rc.values().size()];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[rc.values().size()];	  String[]    header    =    new    String[record.values().size()    -    1];    	non-compiled	[CE]  :  expected	68	None	replace
6	[BUG]  [BUGGY]  Integer[]  formatHeader  =  this.format.getFormatHeader(hdrMap);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  Integer[]  formatHeader  =  this.format.getFormatHeader(hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	Integer[]  formatHeader  =  this.format.getFormatHeader(hdrMap);	  Integer[]    formatHeader    =    this.format.getFormatHeader();    	non-compiled	[CE]  :  expected	80	None	replace
7	[BUG]  [BUGGY]  Integer[]  formatHeader  =  this.format.getFormatHeaders();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  Integer[]  formatHeader  =  this.format.getFormatHeaders();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	Integer[]  formatHeader  =  this.format.getFormatHeaders();	  Integer[]    formatHeader    =    this.format.getFormatHeader();    	non-compiled	[CE]  :  expected	80	None	replace
8	[BUG]  [BUGGY]  Integer[]  formatHeader  =  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  Integer[]  formatHeader  =  this.format.getSkipHeaderRecord();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	Integer[]  formatHeader  =  this.format.getSkipHeaderRecord();	  Integer[]    formatHeader    =    this.format.getFormatHeader();    	non-compiled	[CE]  :  expected	80	None	replace
9	[BUG]  [BUGGY]  Integer[]  formatHeader  =  this.format.getSkipHeader();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  Integer[]  formatHeader  =  this.format.getSkipHeader();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	Integer[]  formatHeader  =  this.format.getSkipHeader();	  Integer[]    formatHeader    =    this.format.getFormatHeader();    	non-compiled	[CE]  :  expected	80	None	replace
10	[BUG]  [BUGGY]  Integer[]  formatHeader  =  this.format.getRecordHeader();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  Integer[]  formatHeader  =  this.format.getRecordHeader();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	Integer[]  formatHeader  =  this.format.getRecordHeader();	  Integer[]    formatHeader    =    this.format.getFormatHeader();    	non-compiled	[CE]  :  expected	80	None	replace
11	[BUG]  [BUGGY]  Integer[]  formatHeader  =  this.format.getFormatHeader(0);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  Integer[]  formatHeader  =  this.format.getFormatHeader(0);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	Integer[]  formatHeader  =  this.format.getFormatHeader(0);	  Integer[]    formatHeader    =    this.format.getFormatHeader();    	non-compiled	[CE]  :  expected	80	None	replace
12	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.toArray(new  String[formatHeader.size()  ]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.toArray(new  String[formatHeader.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.toArray(new  String[formatHeader.size()  ]);	  String[]    header    =    new    String[hdrMap.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	35	None	replace
13	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.toArray(new  String[hdrMap.size()  -  1]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.toArray(new  String[hdrMap.size()  -  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.toArray(new  String[hdrMap.size()  -  1]);	  String[]    header    =    new    String[hdrMap.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	35	None	replace
14	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.toArray(new  String[hdrMap.size()  +  1]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.toArray(new  String[hdrMap.size()  +  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.toArray(new  String[hdrMap.size()  +  1]);	  String[]    header    =    new    String[hdrMap.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	35	None	replace
15	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.toArray(new  String[formatHeader.size()  ]);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.toArray(new  String[formatHeader.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.toArray(new  String[formatHeader.size()  ]);	  String[]    header    =    new    String[hdrMap.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	35	None	replace
16	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(rect,  formatHeader);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(rect,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(rect,  formatHeader);	  String[]    header    =    hdrMap.get(formatHeader,    rec);    	non-compiled	[CE]  :  expected	49	None	replace
17	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(rec,  formatHeader);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(rec,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(rec,  formatHeader);	  String[]    header    =    hdrMap.get(formatHeader,    rec);    	non-compiled	[CE]  :  expected	49	None	replace
18	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(record,  formatHeader);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(record,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(record,  formatHeader);	  String[]    header    =    hdrMap.get(formatHeader,    rec);    	non-compiled	[CE]  :  expected	49	None	replace
19	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(rec);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(rec);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(rec);	  String[]    header    =    hdrMap.get(formatHeader,    rec);    	non-compiled	[CE]  :  expected	49	None	replace
20	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(recordNumber,  formatHeader);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(recordNumber,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(recordNumber,  formatHeader);	  String[]    header    =    hdrMap.get(formatHeader,    rec);    	non-compiled	[CE]  :  expected	49	None	replace
21	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(this.format,  formatHeader);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(this.format,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(this.format,  formatHeader);	  String[]    header    =    hdrMap.get(formatHeader,    rec);    	non-compiled	[CE]  :  expected	49	None	replace
22	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  +  formatHeader.length  -  1];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  +  formatHeader.length  -  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  +  formatHeader.length  -  1];	  String[]    header    =    new    String[record.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	79	None	replace
23	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  *  formatHeader.length  ];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  *  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  *  formatHeader.length  ];	  String[]    header    =    new    String[record.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	79	None	replace
24	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  /  formatHeader.length  ];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  /  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  /  formatHeader.length  ];	  String[]    header    =    new    String[record.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	79	None	replace
25	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  +  formatHeader.length  -  2];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  +  formatHeader.length  -  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  +  formatHeader.length  -  2];	  String[]    header    =    new    String[record.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	79	None	replace
26	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  +  formatHeader.length  /  2];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  +  formatHeader.length  /  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  +  formatHeader.length  /  2];	  String[]    header    =    new    String[record.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	79	None	replace
27	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  -  formatHeader.length  ];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  -  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  -  formatHeader.length  ];	  String[]    header    =    new    String[record.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	79	None	replace
28	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[formatHeader.length()  ]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[formatHeader.length()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[formatHeader.length()  ]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.length()    ]);    	non-compiled	[CE]  :  expected	60	None	replace
29	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[formatHeader.length()  ]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[formatHeader.length()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[formatHeader.length()  ]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.length()    ]);    	non-compiled	[CE]  :  expected	60	None	replace
30	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.length()  +  1]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.length()  +  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.length()  +  1]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.length()    ]);    	non-compiled	[CE]  :  expected	60	None	replace
31	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.length()  -  1]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.length()  -  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.length()  -  1]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.length()    ]);    	non-compiled	[CE]  :  expected	60	None	replace
32	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.length()  ]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.length()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[hdrMap.length()  ]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.length()    ]);    	non-compiled	[CE]  :  expected	60	None	replace
33	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap().size()  +  1];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap().size()  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hdrMap().size()  +  1];	  String[]    header    =    new    String[initializeHeader().hdrMap().size()    ];    	non-compiled	[CE]  :  expected	28	None	replace
34	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.hdrMap().size()  ];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.hdrMap().size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.hdrMap().size()  ];	  String[]    header    =    new    String[initializeHeader().hdrMap().size()    ];    	non-compiled	[CE]  :  expected	28	None	replace
35	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap().values().size()  ];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap().values().size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hdrMap().values().size()  ];	  String[]    header    =    new    String[initializeHeader().hdrMap().size()    ];    	non-compiled	[CE]  :  expected	28	None	replace
36	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap().size()  +  formatHeader.length  ];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap().size()  +  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hdrMap().size()  +  formatHeader.length  ];	  String[]    header    =    new    String[initializeHeader().hdrMap().size()    ];    	non-compiled	[CE]  :  expected	28	None	replace
37	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap().toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap().toArray(new  String[hdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hdrMap().toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    new    String[initializeHeader().hdrMap().size()    ];    	non-compiled	[CE]  :  expected	28	None	replace
38	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap().keySet().size()  ];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap().keySet().size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hdrMap().keySet().size()  ];	  String[]    header    =    new    String[initializeHeader().hdrMap().size()    ];    	non-compiled	[CE]  :  expected	28	None	replace
39	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeader(recordNumber,  hdrMap);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeader(recordNumber,  hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeader(recordNumber,  hdrMap);	  String[]    header    =    this.format.getHeader(recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
40	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeader(i);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeader(i);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeader(i);	  String[]    header    =    this.format.getHeader(recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
41	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeader(recordNumber  +  1);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeader(recordNumber  +  1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeader(recordNumber  +  1);	  String[]    header    =    this.format.getHeader(recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
42	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeader(initializeHeader);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeader(initializeHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeader(initializeHeader);	  String[]    header    =    this.format.getHeader(recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
43	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeader(recordNumber,  formatHeader);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeader(recordNumber,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeader(recordNumber,  formatHeader);	  String[]    header    =    this.format.getHeader(recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
44	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeader(record);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeader(record);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeader(record);	  String[]    header    =    this.format.getHeader(recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
45	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  this);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  this);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  this);	  hdrMap.put(formatHeader,    null);    	non-compiled	[CE]  :  expected	66	None	replace
46	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  rec);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  rec);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  rec);	  hdrMap.put(formatHeader,    null);    	non-compiled	[CE]  :  expected	66	None	replace
47	[BUG]  [BUGGY]  String[]  header  =  new  String[record.size()  +  1];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.size()  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.size()  +  1];	  String[]    header    =    new    String[record.size()    ];    	non-compiled	[CE]  :  expected	20	None	replace
48	[BUG]  [BUGGY]  String[]  header  =  new  String[record.size()  +  formatHeader.length  ];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.size()  +  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.size()  +  formatHeader.length  ];	  String[]    header    =    new    String[record.size()    ];    	non-compiled	[CE]  :  expected	20	None	replace
49	[BUG]  [BUGGY]  String[]  header  =  new  String[record.size()  -  1];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.size()  -  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.size()  -  1];	  String[]    header    =    new    String[record.size()    ];    	non-compiled	[CE]  :  expected	20	None	replace
50	[BUG]  [BUGGY]  String[]  header  =  new  String[record.size()  *  2];  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.size()  *  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.size()  *  2];	  String[]    header    =    new    String[record.size()    ];    	non-compiled	[CE]  :  expected	20	None	replace
51	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  *  1]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  *  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  *  1]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    -    1]);    	non-compiled	[CE]  :  expected	43	None	replace
52	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  1]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  1]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    -    1]);    	non-compiled	[CE]  :  expected	43	None	replace
53	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  2]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  2]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  2]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    -    1]);    	non-compiled	[CE]  :  expected	43	None	replace
54	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  -  1]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  -  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  -  1]);	  String[]    header    =    formatHeader.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	42	None	replace
55	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  +  1]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  +  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  +  1]);	  String[]    header    =    formatHeader.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	42	None	replace
56	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  0]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  0]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  0]);	  String[]    header    =    formatHeader.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	42	None	replace
57	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.size()  +  1];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.size()  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hdrMap.size()  +  1];	  String[]    header    =    new    String[initializeHeader().hdrMap.size()    ];    	non-compiled	[CE]  :  expected	29	None	replace
58	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.hdrMap.size()  ];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.hdrMap.size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.hdrMap.size()  ];	  String[]    header    =    new    String[initializeHeader().hdrMap.size()    ];    	non-compiled	[CE]  :  expected	29	None	replace
59	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.size()  +  formatHeader.length  ];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.size()  +  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hdrMap.size()  +  formatHeader.length  ];	  String[]    header    =    new    String[initializeHeader().hdrMap.size()    ];    	non-compiled	[CE]  :  expected	29	None	replace
60	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.toArray(new  String[hdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hdrMap.toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    new    String[initializeHeader().hdrMap.size()    ];    	non-compiled	[CE]  :  expected	29	None	replace
61	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.keySet()  ];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.keySet()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hdrMap.keySet()  ];	  String[]    header    =    new    String[initializeHeader().hdrMap.size()    ];    	non-compiled	[CE]  :  expected	29	None	replace
62	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.size()  -  1];  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.size()  -  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hdrMap.size()  -  1];	  String[]    header    =    new    String[initializeHeader().hdrMap.size()    ];    	non-compiled	[CE]  :  expected	29	None	replace
63	[BUG]  [BUGGY]  String[]  header  =  formatHeader.getHeaders();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.getHeaders();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.getHeaders();	  String[]    header    =    hdrMap.getHeaders();    	non-compiled	[CE]  :  expected	26	None	replace
64	[BUG]  [BUGGY]  String[]  header  =  hdrMap.getHeaders(formatHeader);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.getHeaders(formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.getHeaders(formatHeader);	  String[]    header    =    hdrMap.getHeaders();    	non-compiled	[CE]  :  expected	26	None	replace
65	[BUG]  [BUGGY]  String[]  header  =  hdrMap.getHeader(formatHeader);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.getHeader(formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.getHeader(formatHeader);	  String[]    header    =    hdrMap.getHeaders();    	non-compiled	[CE]  :  expected	26	None	replace
66	[BUG]  [BUGGY]  String[]  header  =  hdrMap.getHeaderNames();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.getHeaderNames();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.getHeaderNames();	  String[]    header    =    hdrMap.getHeaders();    	non-compiled	[CE]  :  expected	26	None	replace
67	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.values().length  ];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.values().length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.values().length  ];	  String[]    header    =    new    String[hdrMap.values().length    ];    	non-compiled	[CE]  :  expected	71	None	replace
68	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().length  -  1];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().length  -  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().length  -  1];	  String[]    header    =    new    String[hdrMap.values().length    ];    	non-compiled	[CE]  :  expected	71	None	replace
69	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().length  +  1];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().length  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().length  +  1];	  String[]    header    =    new    String[hdrMap.values().length    ];    	non-compiled	[CE]  :  expected	71	None	replace
70	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().length  ];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.keySet().length  ];	  String[]    header    =    new    String[hdrMap.values().length    ];    	non-compiled	[CE]  :  expected	71	None	replace
71	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().length  -  2];  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().length  -  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().length  -  2];	  String[]    header    =    new    String[hdrMap.values().length    ];    	non-compiled	[CE]  :  expected	71	None	replace
72	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toString();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toString();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toString();	  String[]    header    =    formatHeader;    	non-compiled	[CE]  :  expected	14	None	replace
73	[BUG]  [BUGGY]  hdrMap.put(this.format,  formatHeader);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(this.format,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(this.format,  formatHeader);	  hdrMap.put(formatHeader,    this.format);    	non-compiled	[CE]  :  expected	4	None	replace
74	[BUG]  [BUGGY]  hdrMap.put(format,  this.format);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(format,  this.format);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(format,  this.format);	  hdrMap.put(formatHeader,    this.format);    	non-compiled	[CE]  :  expected	4	None	replace
75	[BUG]  [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader);	  hdrMap    =    new    HashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	5	None	replace
76	[BUG]  [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader.length);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader.length);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap  =  new  HashMap  <  String,  Integer>(formatHeader.length);	  hdrMap    =    new    HashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	5	None	replace
77	[BUG]  [BUGGY]  hdrMap  =  new  TreeMap  <  String,  Integer>();  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap  =  new  TreeMap  <  String,  Integer>();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap  =  new  TreeMap  <  String,  Integer>();	  hdrMap    =    new    HashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	5	None	replace
78	[BUG]  [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(1);  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap  =  new  HashMap  <  String,  Integer>(1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap  =  new  HashMap  <  String,  Integer>(1);	  hdrMap    =    new    HashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	5	None	replace
79	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  2];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  +  2];	  String[]    header    =    new    String[hdrMap.size()    *    2];    	non-compiled	[CE]  :  expected	24	None	replace
80	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  1];  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  1];	  String[]    header    =    new    String[hdrMap.size()    *    2];    	non-compiled	[CE]  :  expected	24	None	replace
81	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  /  2];  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  /  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  /  2];	  String[]    header    =    new    String[hdrMap.size()    *    2];    	non-compiled	[CE]  :  expected	24	None	replace
82	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  2];  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  2];	  String[]    header    =    new    String[hdrMap.size()    *    2];    	non-compiled	[CE]  :  expected	24	None	replace
83	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  2];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  2];	  String[]    header    =    new    String[record.values().size()    +    2];    	non-compiled	[CE]  :  expected	18	None	replace
84	[BUG]  [BUGGY]  String[]  header  =  formatHeader.getHeaderList();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.getHeaderList();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.getHeaderList();	  String[]    header    =    this.format.getHeaderList();    	non-compiled	[CE]  :  expected	75	None	replace
85	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeaderNames();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeaderNames();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeaderNames();	  String[]    header    =    this.format.getHeaderList();    	non-compiled	[CE]  :  expected	75	None	replace
86	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeaderList(hdrMap);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeaderList(hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeaderList(hdrMap);	  String[]    header    =    this.format.getHeaderList();    	non-compiled	[CE]  :  expected	75	None	replace
87	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[HdrMap.size()  ]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[HdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[HdrMap.size()  ]);	  String[]    header    =    hdrMap.toArray(new    String[HdrMap.size()    ]);    	non-compiled	[CE]  :  expected	62	None	replace
88	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[HdrMap.size()  +  1]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[HdrMap.size()  +  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[HdrMap.size()  +  1]);	  String[]    header    =    hdrMap.toArray(new    String[HdrMap.size()    ]);    	non-compiled	[CE]  :  expected	62	None	replace
89	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[HdrMap.size()  -  1]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[HdrMap.size()  -  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[HdrMap.size()  -  1]);	  String[]    header    =    hdrMap.toArray(new    String[HdrMap.size()    ]);    	non-compiled	[CE]  :  expected	62	None	replace
90	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  3]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  3]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  3]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    +    1]);    	non-compiled	[CE]  :  expected	45	None	replace
91	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.values()  +  1];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.values()  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.values()  +  1];	  String[]    header    =    new    String[formatHeader.values()    ];    	non-compiled	[CE]  :  expected	31	None	replace
92	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.length()  ];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.length()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.length()  ];	  String[]    header    =    new    String[formatHeader.values()    ];    	non-compiled	[CE]  :  expected	31	None	replace
93	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.toString()  ];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.toString()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.toString()  ];	  String[]    header    =    new    String[formatHeader.values()    ];    	non-compiled	[CE]  :  expected	31	None	replace
94	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.hdrMap()  ];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.hdrMap()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.hdrMap()  ];	  String[]    header    =    new    String[formatHeader.values()    ];    	non-compiled	[CE]  :  expected	31	None	replace
95	[BUG]  [BUGGY]  hdrMap.putAll(formatHeader,  header);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.putAll(formatHeader,  header);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.putAll(formatHeader,  header);	  hdrMap.putAll(formatHeader);    	non-compiled	[CE]  :  expected	6	None	replace
96	[BUG]  [BUGGY]  hdrMap.putAll(this.format.getHeader());  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.putAll(this.format.getHeader());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.putAll(this.format.getHeader());	  hdrMap.putAll(formatHeader);    	non-compiled	[CE]  :  expected	6	None	replace
97	[BUG]  [BUGGY]  hdrMap.putAll(formatHeader,  this.format);  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.putAll(formatHeader,  this.format);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.putAll(formatHeader,  this.format);	  hdrMap.putAll(formatHeader);    	non-compiled	[CE]  :  expected	6	None	replace
98	[BUG]  [BUGGY]  hdrMap.putAll(formatHeader,  true);  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.putAll(formatHeader,  true);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.putAll(formatHeader,  true);	  hdrMap.putAll(formatHeader);    	non-compiled	[CE]  :  expected	6	None	replace
99	[BUG]  [BUGGY]  hdrMap.putAll(formatHeader,  false);  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.putAll(formatHeader,  false);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.putAll(formatHeader,  false);	  hdrMap.putAll(formatHeader);    	non-compiled	[CE]  :  expected	6	None	replace
100	[BUG]  [BUGGY]  hdrMap.putAll(this.format.values());  [CE]  :  expected  [FE]                                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.putAll(this.format.values());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.putAll(this.format.values());	  hdrMap.putAll(formatHeader);    	non-compiled	[CE]  :  expected	6	None	replace
101	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().size()  +  1];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().size()  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader().size()  +  1];	  String[]    header    =    new    String[hdrMap.getHeader().size()    ];    	non-compiled	[CE]  :  expected	72	None	replace
102	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().size()  +  formatHeader.length  ];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().size()  +  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader().size()  +  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.getHeader().size()    ];    	non-compiled	[CE]  :  expected	72	None	replace
103	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().size()  -  1];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().size()  -  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader().size()  -  1];	  String[]    header    =    new    String[hdrMap.getHeader().size()    ];    	non-compiled	[CE]  :  expected	72	None	replace
104	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().values()  ];  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().values()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader().values()  ];	  String[]    header    =    new    String[hdrMap.getHeader().size()    ];    	non-compiled	[CE]  :  expected	72	None	replace
105	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().length()  ];  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().length()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader().length()  ];	  String[]    header    =    new    String[hdrMap.getHeader().size()    ];    	non-compiled	[CE]  :  expected	72	None	replace
106	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  *  1];  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  *  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  *  1];	  String[]    header    =    new    String[record.values().size()    +    1];    	non-compiled	[CE]  :  expected	16	None	replace
107	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  1];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  1];	  String[]    header    =    new    String[record.values().size()    +    1];    	non-compiled	[CE]  :  expected	16	None	replace
108	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  [0];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  [0];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  [0];	  String[]    header    =    new    String[record.values().size()    +    1];    	non-compiled	[CE]  :  expected	16	None	replace
109	[BUG]  [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader.length);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader.length);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.keySet().get(formatHeader.length);	  String[]    header    =    hdrMap.keySet().get(formatHeader);    	non-compiled	[CE]  :  expected	82	None	replace
110	[BUG]  [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader.toString());  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader.toString());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.keySet().get(formatHeader.toString());	  String[]    header    =    hdrMap.keySet().get(formatHeader);    	non-compiled	[CE]  :  expected	82	None	replace
111	[BUG]  [BUGGY]  String[]  header  =  formatHeader.keySet().get(hdrMap);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.keySet().get(hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.keySet().get(hdrMap);	  String[]    header    =    hdrMap.keySet().get(formatHeader);    	non-compiled	[CE]  :  expected	82	None	replace
112	[BUG]  [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader.toCharArray());  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader.toCharArray());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.keySet().get(formatHeader.toCharArray());	  String[]    header    =    hdrMap.keySet().get(formatHeader);    	non-compiled	[CE]  :  expected	82	None	replace
113	[BUG]  [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader.trim());  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader.trim());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.keySet().get(formatHeader.trim());	  String[]    header    =    hdrMap.keySet().get(formatHeader);    	non-compiled	[CE]  :  expected	82	None	replace
114	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  [0];  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  [0];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().size()  [0];	  String[]    header    =    new    String[initializeHeader().values().size()    +    1];    	non-compiled	[CE]  :  expected	27	None	replace
115	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  *  1];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  *  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().size()  *  1];	  String[]    header    =    new    String[initializeHeader().values().size()    +    1];    	non-compiled	[CE]  :  expected	27	None	replace
116	[BUG]  [BUGGY]  String[]  header  =  new  String[InitializeHeader().values().size()];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[InitializeHeader().values().size()];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[InitializeHeader().values().size()];	  String[]    header    =    new    String[initializeHeader().values().size()    +    1];    	non-compiled	[CE]  :  expected	27	None	replace
117	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  2];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().size()  2];	  String[]    header    =    new    String[initializeHeader().values().size()    +    1];    	non-compiled	[CE]  :  expected	27	None	replace
118	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.values();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.values();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.values();	  String[]    header    =    new    String[hdrMap.values();    	non-compiled	[CE]  :  expected	83	None	replace
119	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.keySet();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.keySet();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.keySet();	  String[]    header    =    new    String[hdrMap.values();    	non-compiled	[CE]  :  expected	83	None	replace
120	[BUG]  [BUGGY]  final  String[]  header  =  new  String[hdrMap.values();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  final  String[]  header  =  new  String[hdrMap.values();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	final  String[]  header  =  new  String[hdrMap.values();	  String[]    header    =    new    String[hdrMap.values();    	non-compiled	[CE]  :  expected	83	None	replace
121	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.get(formatHeader.length()  -  1);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.get(formatHeader.length()  -  1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.get(formatHeader.length()  -  1);	  String[]    header    =    new    String[hdrMap.values();    	non-compiled	[CE]  :  expected	83	None	replace
122	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length;  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length;  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length;	  String[]    header    =    new    String[hdrMap.values();    	non-compiled	[CE]  :  expected	83	None	replace
123	[BUG]  [BUGGY]  String[]  header  =  formatHeader.getHeaderData();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.getHeaderData();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.getHeaderData();	  String[]    header    =    this.format.getHeaderData();    	non-compiled	[CE]  :  expected	76	None	replace
124	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeaderData(hdrMap);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeaderData(hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeaderData(hdrMap);	  String[]    header    =    this.format.getHeaderData();    	non-compiled	[CE]  :  expected	76	None	replace
125	[BUG]  [BUGGY]  String[]  header  =  this.format.getRecordHeaderData();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getRecordHeaderData();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getRecordHeaderData();	  String[]    header    =    this.format.getHeaderData();    	non-compiled	[CE]  :  expected	76	None	replace
126	[BUG]  [BUGGY]  String[]  header  =  hdrMap.getHeaderData();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.getHeaderData();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.getHeaderData();	  String[]    header    =    this.format.getHeaderData();    	non-compiled	[CE]  :  expected	76	None	replace
127	[BUG]  [BUGGY]  String[]  header  =  formatHeader.getSkipHeaderRecord();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.getSkipHeaderRecord();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.getSkipHeaderRecord();	  String[]    header    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	12	None	replace
128	[BUG]  [BUGGY]  final  String[]  header  =  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  final  String[]  header  =  this.format.getSkipHeaderRecord();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	final  String[]  header  =  this.format.getSkipHeaderRecord();	  String[]    header    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	12	None	replace
129	[BUG]  [BUGGY]  String[]  header  =  formatHeader.getSkipHeader();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.getSkipHeader();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.getSkipHeader();	  String[]    header    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	12	None	replace
130	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.size()  +  1];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.size()  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.size()  +  1];	  String[]    header    =    new    String[formatHeader.size()    ];    	non-compiled	[CE]  :  expected	15	None	replace
131	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.size()  -  1];  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.size()  -  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.size()  -  1];	  String[]    header    =    new    String[formatHeader.size()    ];    	non-compiled	[CE]  :  expected	15	None	replace
132	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.size()  >  0?  formatHeader.toString()  :  hdrMap;  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.size()  >  0?  formatHeader.toString()  :  hdrMap;  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.size()  >  0?  formatHeader.toString()  :  hdrMap;	  String[]    header    =    new    String[formatHeader.size()    ];    	non-compiled	[CE]  :  expected	15	None	replace
133	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  *  2]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  *  2]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  *  2]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    0]);    	non-compiled	[CE]  :  expected	46	None	replace
134	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeaders(hdrMap);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeaders(hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeaders(hdrMap);	  String[]    header    =    this.format.getHeaders();    	non-compiled	[CE]  :  expected	53	None	replace
135	[BUG]  [BUGGY]  String[]  header  =  this.format.getRecordedHeaders();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getRecordedHeaders();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getRecordedHeaders();	  String[]    header    =    this.format.getHeaders();    	non-compiled	[CE]  :  expected	53	None	replace
136	[BUG]  [BUGGY]  String[]  header  =  this.format.getRecordHeaders();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getRecordHeaders();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getRecordHeaders();	  String[]    header    =    this.format.getHeaders();    	non-compiled	[CE]  :  expected	53	None	replace
137	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().toArray(new  String[hdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.keySet().toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    new    String[hdrMap.values().toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	69	None	replace
138	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[hdrMap.size()  -  1]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[hdrMap.size()  -  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().toArray(new  String[hdrMap.size()  -  1]);	  String[]    header    =    new    String[hdrMap.values().toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	69	None	replace
139	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.values().toArray(new  String[formatHeader.size()  ]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.values().toArray(new  String[formatHeader.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.values().toArray(new  String[formatHeader.size()  ]);	  String[]    header    =    new    String[hdrMap.values().toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	69	None	replace
140	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[hdrMap.size()  +  1]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[hdrMap.size()  +  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().toArray(new  String[hdrMap.size()  +  1]);	  String[]    header    =    new    String[hdrMap.values().toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	69	None	replace
141	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[formatHeader.size()  ]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[formatHeader.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().toArray(new  String[formatHeader.size()  ]);	  String[]    header    =    new    String[hdrMap.values().toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	69	None	replace
142	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.length  +  1);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.length  +  1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.length  +  1);	  String[]    header    =    hdrMap.get(formatHeader    +    1);    	non-compiled	[CE]  :  expected	59	None	replace
143	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader  *  1);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader  *  1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader  *  1);	  String[]    header    =    hdrMap.get(formatHeader    +    1);    	non-compiled	[CE]  :  expected	59	None	replace
144	[BUG]  [BUGGY]  String[]  header  =  formatHeader.get(hdrMap.size()  +  1);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.get(hdrMap.size()  +  1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.get(hdrMap.size()  +  1);	  String[]    header    =    hdrMap.get(formatHeader    +    1);    	non-compiled	[CE]  :  expected	59	None	replace
145	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader  +  2);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader  +  2);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader  +  2);	  String[]    header    =    hdrMap.get(formatHeader    +    1);    	non-compiled	[CE]  :  expected	59	None	replace
146	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  *  1];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  *  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  *  1];	  String[]    header    =    new    String[hdrMap.values().size()    +    1];    	non-compiled	[CE]  :  expected	37	None	replace
147	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  1];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  1];	  String[]    header    =    new    String[hdrMap.values().size()    +    1];    	non-compiled	[CE]  :  expected	37	None	replace
148	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  [0];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  [0];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  [0];	  String[]    header    =    new    String[hdrMap.values().size()    +    1];    	non-compiled	[CE]  :  expected	37	None	replace
149	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  2];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  2];	  String[]    header    =    new    String[hdrMap.values().size()    +    1];    	non-compiled	[CE]  :  expected	37	None	replace
150	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  this.header);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  this.header);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  this.header);	  hdrMap.put(formatHeader,    header);    	non-compiled	[CE]  :  expected	7	None	replace
151	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {  header  }  );  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {  header  }  );  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  String[]  {  header  }  );	  hdrMap.put(formatHeader,    header);    	non-compiled	[CE]  :  expected	7	None	replace
152	[BUG]  [BUGGY]  hdrMap.put(header,  formatHeader);  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(header,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(header,  formatHeader);	  hdrMap.put(formatHeader,    header);    	non-compiled	[CE]  :  expected	7	None	replace
153	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[formatHeader.size()  -  1]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[formatHeader.size()  -  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[formatHeader.size()  -  1]);	  String[]    header    =    formatHeader.toArray(new    String[formatHeader.size()    ]);    	non-compiled	[CE]  :  expected	41	None	replace
154	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[formatHeader.size()  +  1]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[formatHeader.size()  +  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[formatHeader.size()  +  1]);	  String[]    header    =    formatHeader.toArray(new    String[formatHeader.size()    ]);    	non-compiled	[CE]  :  expected	41	None	replace
155	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[recordNumber.size()  ]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[recordNumber.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[recordNumber.size()  ]);	  String[]    header    =    formatHeader.toArray(new    String[formatHeader.size()    ]);    	non-compiled	[CE]  :  expected	41	None	replace
156	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[header.size()  ]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[header.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[header.size()  ]);	  String[]    header    =    formatHeader.toArray(new    String[formatHeader.size()    ]);    	non-compiled	[CE]  :  expected	41	None	replace
157	[BUG]  [BUGGY]  final  String[]  header  =  this.format.getHeader(hdrMap);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  final  String[]  header  =  this.format.getHeader(hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	final  String[]  header  =  this.format.getHeader(hdrMap);	  final    String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	54	None	replace
158	[BUG]  [BUGGY]  final  String[]  header  =  this.format.getRecordHeader();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  final  String[]  header  =  this.format.getRecordHeader();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	final  String[]  header  =  this.format.getRecordHeader();	  final    String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	54	None	replace
159	[BUG]  [BUGGY]  final  String[]  header  =  this.format.getHeaderRecord();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  final  String[]  header  =  this.format.getHeaderRecord();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	final  String[]  header  =  this.format.getHeaderRecord();	  final    String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	54	None	replace
160	[BUG]  [BUGGY]  final  String[]  header  =  this.format.getHeader(),  hdrMap);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  final  String[]  header  =  this.format.getHeader(),  hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	final  String[]  header  =  this.format.getHeader(),  hdrMap);	  final    String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	54	None	replace
161	[BUG]  [BUGGY]  final  String[]  header  =  this.format.getHeaders();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  final  String[]  header  =  this.format.getHeaders();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	final  String[]  header  =  this.format.getHeaders();	  final    String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	54	None	replace
162	[BUG]  [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader.length);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader.length);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.values().get(formatHeader.length);	  String[]    header    =    hdrMap.values().get(formatHeader);    	non-compiled	[CE]  :  expected	81	None	replace
163	[BUG]  [BUGGY]  String[]  header  =  formatHeader.values().get(hdrMap);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.values().get(hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.values().get(hdrMap);	  String[]    header    =    hdrMap.values().get(formatHeader);    	non-compiled	[CE]  :  expected	81	None	replace
164	[BUG]  [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader.toString());  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader.toString());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.values().get(formatHeader.toString());	  String[]    header    =    hdrMap.values().get(formatHeader);    	non-compiled	[CE]  :  expected	81	None	replace
165	[BUG]  [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader.toArray());  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader.toArray());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.values().get(formatHeader.toArray());	  String[]    header    =    hdrMap.values().get(formatHeader);    	non-compiled	[CE]  :  expected	81	None	replace
166	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().size()  +  1];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().size()  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.keySet().size()  +  1];	  String[]    header    =    new    String[hdrMap.keySet().size()    ];    	non-compiled	[CE]  :  expected	38	None	replace
167	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().size()  +  formatHeader.length  ];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().size()  +  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.keySet().size()  +  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.keySet().size()    ];    	non-compiled	[CE]  :  expected	38	None	replace
168	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().size()  -  1];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().size()  -  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.keySet().size()  -  1];	  String[]    header    =    new    String[hdrMap.keySet().size()    ];    	non-compiled	[CE]  :  expected	38	None	replace
169	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.keySet().size()  ];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.keySet().size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.keySet().size()  ];	  String[]    header    =    new    String[hdrMap.keySet().size()    ];    	non-compiled	[CE]  :  expected	38	None	replace
170	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(hdrMap);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(hdrMap);	  String[]    header    =    formatHeader.getHeader();    	non-compiled	[CE]  :  expected	9	None	replace
171	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  /  2];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  /  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  /  2];	  String[]    header    =    new    String[record.values().size()    *    2];    	non-compiled	[CE]  :  expected	19	None	replace
172	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  ],  formatHeader);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  ],  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  ],  formatHeader);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ],    formatHeader);    	non-compiled	[CE]  :  expected	77	None	replace
173	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  +  formatHeader.length  ],  formatHeader);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  +  formatHeader.length  ],  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  +  formatHeader.length  ],  formatHeader);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ],    formatHeader);    	non-compiled	[CE]  :  expected	77	None	replace
174	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  ],  hdr);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  ],  hdr);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  ],  hdr);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ],    formatHeader);    	non-compiled	[CE]  :  expected	77	None	replace
175	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  ],  formatHeader,  rec);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  ],  formatHeader,  rec);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  ],  formatHeader,  rec);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ],    formatHeader);    	non-compiled	[CE]  :  expected	77	None	replace
176	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  -  1],  formatHeader);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  -  1],  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  -  1],  formatHeader);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ],    formatHeader);    	non-compiled	[CE]  :  expected	77	None	replace
177	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  ],  formatHeader,  recordNumber);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  ],  formatHeader,  recordNumber);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  ],  formatHeader,  recordNumber);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ],    formatHeader);    	non-compiled	[CE]  :  expected	77	None	replace
178	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(1));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(1));  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(1));	  hdrMap.put(formatHeader,    new    HashMap    <    String,    Integer>());    	non-compiled	[CE]  :  expected	3	None	replace
179	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(2));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(2));  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(2));	  hdrMap.put(formatHeader,    new    HashMap    <    String,    Integer>());    	non-compiled	[CE]  :  expected	3	None	replace
180	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(3));  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(3));  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(3));	  hdrMap.put(formatHeader,    new    HashMap    <    String,    Integer>());    	non-compiled	[CE]  :  expected	3	None	replace
181	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(0));  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(0));  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(0));	  hdrMap.put(formatHeader,    new    HashMap    <    String,    Integer>());    	non-compiled	[CE]  :  expected	3	None	replace
182	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(8));  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(8));  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(8));	  hdrMap.put(formatHeader,    new    HashMap    <    String,    Integer>());    	non-compiled	[CE]  :  expected	3	None	replace
183	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  -  1];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  -  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  -  1];	  String[]    header    =    new    String[hdrMap.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	39	None	replace
184	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  *  formatHeader.length  ];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  *  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  *  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	39	None	replace
185	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  /  formatHeader.length  ];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  /  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  /  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	39	None	replace
186	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  -  2];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  -  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  -  2];	  String[]    header    =    new    String[hdrMap.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	39	None	replace
187	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  /  2];  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  /  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  /  2];	  String[]    header    =    new    String[hdrMap.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	39	None	replace
188	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  *  2];  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  *  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  *  2];	  String[]    header    =    new    String[hdrMap.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	39	None	replace
189	[BUG]  [BUGGY]  String[]  header  =  this.format.getRecordHeader(hdrMap);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getRecordHeader(hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getRecordHeader(hdrMap);	  String[]    header    =    this.format.getRecordHeader();    	non-compiled	[CE]  :  expected	10	None	replace
190	[BUG]  [BUGGY]  String[]  header  =  formatHeader.getRecordHeader();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.getRecordHeader();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.getRecordHeader();	  String[]    header    =    this.format.getRecordHeader();    	non-compiled	[CE]  :  expected	10	None	replace
191	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString()  +  1);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString()  +  1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.toString()  +  1);	  String[]    header    =    hdrMap.get(formatHeader.toString());    	non-compiled	[CE]  :  expected	48	None	replace
192	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString(),  rec);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString(),  rec);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.toString(),  rec);	  String[]    header    =    hdrMap.get(formatHeader.toString());    	non-compiled	[CE]  :  expected	48	None	replace
193	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.length());  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.length());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.length());	  String[]    header    =    hdrMap.get(formatHeader.toString());    	non-compiled	[CE]  :  expected	48	None	replace
194	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString(),  recordNumber);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString(),  recordNumber);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.toString(),  recordNumber);	  String[]    header    =    hdrMap.get(formatHeader.toString());    	non-compiled	[CE]  :  expected	48	None	replace
195	[BUG]  [BUGGY]  String[]  header  =  formatHeader.get(hdrMap.toString());  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.get(hdrMap.toString());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.get(hdrMap.toString());	  String[]    header    =    hdrMap.get(formatHeader.toString());    	non-compiled	[CE]  :  expected	48	None	replace
196	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.values().toArray(hdrMap)];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.values().toArray(hdrMap)];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.values().toArray(hdrMap)];	  String[]    header    =    new    String[initializeHeader().values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	57	None	replace
197	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(formatHeader)];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(formatHeader)];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().toArray(formatHeader)];	  String[]    header    =    new    String[initializeHeader().values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	57	None	replace
198	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(formatHeaderMap)];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(formatHeaderMap)];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().toArray(formatHeaderMap)];	  String[]    header    =    new    String[initializeHeader().values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	57	None	replace
199	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap,  formatHeader)];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap,  formatHeader)];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap,  formatHeader)];	  String[]    header    =    new    String[initializeHeader().values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	57	None	replace
200	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap)+  1];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap)+  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap)+  1];	  String[]    header    =    new    String[initializeHeader().values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	57	None	replace
201	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap),  formatHeader);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap),  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap),  formatHeader);	  String[]    header    =    new    String[initializeHeader().values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	57	None	replace
202	[BUG]  [BUGGY]  String[]  header  =  this.headerMap.toArray(hdrMap);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.headerMap.toArray(hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.headerMap.toArray(hdrMap);	  String[]    header    =    this.headerMap.values();    	non-compiled	[CE]  :  expected	73	None	replace
203	[BUG]  [BUGGY]  String[]  header  =  this.headerMap.toArray(new  String[this.headerMap.size()  ]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.headerMap.toArray(new  String[this.headerMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.headerMap.toArray(new  String[this.headerMap.size()  ]);	  String[]    header    =    this.headerMap.values();    	non-compiled	[CE]  :  expected	73	None	replace
204	[BUG]  [BUGGY]  String[]  header  =  this.headerMap.getHeader();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.headerMap.getHeader();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.headerMap.getHeader();	  String[]    header    =    this.headerMap.values();    	non-compiled	[CE]  :  expected	73	None	replace
205	[BUG]  [BUGGY]  String[]  header  =  this.headerMap.toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.headerMap.toArray(new  String[hdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.headerMap.toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    this.headerMap.values();    	non-compiled	[CE]  :  expected	73	None	replace
206	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  [0];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  [0];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  [0];	  String[]    header    =    new    String[hdrMap.values()    +    1];    	non-compiled	[CE]  :  expected	32	None	replace
207	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  *  1];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  *  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  *  1];	  String[]    header    =    new    String[hdrMap.values()    +    1];    	non-compiled	[CE]  :  expected	32	None	replace
208	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  1];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  1];	  String[]    header    =    new    String[hdrMap.values()    +    1];    	non-compiled	[CE]  :  expected	32	None	replace
209	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  [1];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  [1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  [1];	  String[]    header    =    new    String[hdrMap.values()    +    1];    	non-compiled	[CE]  :  expected	32	None	replace
210	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  Integer(1));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  Integer(1));  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  Integer(1));	  hdrMap.put(formatHeader,    new    Integer(0));    	non-compiled	[CE]  :  expected	65	None	replace
211	[BUG]  [BUGGY]  hdrMap.put(new  Integer(0),  formatHeader);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(new  Integer(0),  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(new  Integer(0),  formatHeader);	  hdrMap.put(formatHeader,    new    Integer(0));    	non-compiled	[CE]  :  expected	65	None	replace
212	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  Integer(2));  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  Integer(2));  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  Integer(2));	  hdrMap.put(formatHeader,    new    Integer(0));    	non-compiled	[CE]  :  expected	65	None	replace
213	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  Integer(0),  header);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  Integer(0),  header);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  Integer(0),  header);	  hdrMap.put(formatHeader,    new    Integer(0));    	non-compiled	[CE]  :  expected	65	None	replace
214	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.getHeader()  ];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.getHeader()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.getHeader()  ];	  String[]    header    =    new    String[hdrMap.getHeader()    ];    	non-compiled	[CE]  :  expected	61	None	replace
215	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader()  +  1];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader()  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader()  +  1];	  String[]    header    =    new    String[hdrMap.getHeader()    ];    	non-compiled	[CE]  :  expected	61	None	replace
216	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader()  +  formatHeader.length  ];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader()  +  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader()  +  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.getHeader()    ];    	non-compiled	[CE]  :  expected	61	None	replace
217	[BUG]  [BUGGY]  String[]  header  =  new  String[this.format.getHeader()  ];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[this.format.getHeader()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[this.format.getHeader()  ];	  String[]    header    =    new    String[hdrMap.getHeader()    ];    	non-compiled	[CE]  :  expected	61	None	replace
218	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader()  *  2];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader()  *  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader()  *  2];	  String[]    header    =    new    String[hdrMap.getHeader()    ];    	non-compiled	[CE]  :  expected	61	None	replace
219	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  formatHeader[0]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  formatHeader[0]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  formatHeader[0]);	  hdrMap.put(formatHeader,    formatHeader);    	non-compiled	[CE]  :  expected	1	None	replace
220	[BUG]  [BUGGY]  String[]  header  =  this.format.hdrMap();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.hdrMap();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.hdrMap();	  String[]    header    =    this.format.keySet();    	non-compiled	[CE]  :  expected	74	None	replace
221	[BUG]  [BUGGY]  String[]  header  =  this.format.values();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.values();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.values();	  String[]    header    =    this.format.keySet();    	non-compiled	[CE]  :  expected	74	None	replace
222	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray();	  String[]    header    =    formatHeader.values();    	non-compiled	[CE]  :  expected	36	None	replace
223	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  Integer(recordNumber));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  Integer(recordNumber));  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  Integer(recordNumber));	  hdrMap.put(formatHeader,    hdr);    	non-compiled	[CE]  :  expected	64	None	replace
224	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.keySet()  +  1];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.keySet()  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.keySet()  +  1];	  String[]    header    =    new    String[hdrMap.keySet()    ];    	non-compiled	[CE]  :  expected	34	None	replace
225	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.keySet()  +  formatHeader.length  ];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.keySet()  +  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.keySet()  +  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.keySet()    ];    	non-compiled	[CE]  :  expected	34	None	replace
226	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.keySet()  ];  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.keySet()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.keySet()  ];	  String[]    header    =    new    String[hdrMap.keySet()    ];    	non-compiled	[CE]  :  expected	34	None	replace
227	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  i);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  i);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader,  i);	  String[]    header    =    hdrMap.get(formatHeader,    recordNumber);    	non-compiled	[CE]  :  expected	50	None	replace
228	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(recordHeader,  formatHeader);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(recordHeader,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(recordHeader,  formatHeader);	  String[]    header    =    hdrMap.get(formatHeader,    recordNumber);    	non-compiled	[CE]  :  expected	50	None	replace
229	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  formatHeader.length);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  formatHeader.length);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader,  formatHeader.length);	  String[]    header    =    hdrMap.get(formatHeader,    recordNumber);    	non-compiled	[CE]  :  expected	50	None	replace
230	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(i,  formatHeader);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(i,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(i,  formatHeader);	  String[]    header    =    hdrMap.get(formatHeader,    recordNumber);    	non-compiled	[CE]  :  expected	50	None	replace
231	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  recordNumber  +  1);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  recordNumber  +  1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader,  recordNumber  +  1);	  String[]    header    =    hdrMap.get(formatHeader,    recordNumber);    	non-compiled	[CE]  :  expected	50	None	replace
232	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[formatHeader.size()  -  1]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[formatHeader.size()  -  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[formatHeader.size()  -  1]);	  String[]    header    =    hdrMap.toArray(new    String[formatHeader.size()    ]);    	non-compiled	[CE]  :  expected	44	None	replace
233	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[formatHeader.size()  +  1]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[formatHeader.size()  +  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[formatHeader.size()  +  1]);	  String[]    header    =    hdrMap.toArray(new    String[formatHeader.size()    ]);    	non-compiled	[CE]  :  expected	44	None	replace
234	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[formatHeader.size()  0]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[formatHeader.size()  0]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[formatHeader.size()  0]);	  String[]    header    =    hdrMap.toArray(new    String[formatHeader.size()    ]);    	non-compiled	[CE]  :  expected	44	None	replace
235	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(formatHeader)];  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().toArray(formatHeader)];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(formatHeader)];	  String[]    header    =    new    String[record.values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	67	None	replace
236	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(formatHeaderMap)];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().toArray(formatHeaderMap)];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(formatHeaderMap)];	  String[]    header    =    new    String[record.values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	67	None	replace
237	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(hdrMap,  formatHeader)];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().toArray(hdrMap,  formatHeader)];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(hdrMap,  formatHeader)];	  String[]    header    =    new    String[record.values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	67	None	replace
238	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(hdrMap)+  1];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().toArray(hdrMap)+  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(hdrMap)+  1];	  String[]    header    =    new    String[record.values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	67	None	replace
239	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(hdrMap),  formatHeader);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().toArray(hdrMap),  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(hdrMap),  formatHeader);	  String[]    header    =    new    String[record.values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	67	None	replace
240	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(hdrMap,  formatHeader.length)];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().toArray(hdrMap,  formatHeader.length)];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(hdrMap,  formatHeader.length)];	  String[]    header    =    new    String[record.values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	67	None	replace
241	[BUG]  [BUGGY]  String[]  header  =  formatHeader.get(hdrMap,  rec);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.get(hdrMap,  rec);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.get(hdrMap,  rec);	  String[]    header    =    formatHeader.get(hdrMap);    	non-compiled	[CE]  :  expected	51	None	replace
242	[BUG]  [BUGGY]  String[]  header  =  formatHeader.get(hdrMap,  recordNumber);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.get(hdrMap,  recordNumber);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.get(hdrMap,  recordNumber);	  String[]    header    =    formatHeader.get(hdrMap);    	non-compiled	[CE]  :  expected	51	None	replace
243	[BUG]  [BUGGY]  String[]  header  =  formatHeader.get(recordNumber);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.get(recordNumber);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.get(recordNumber);	  String[]    header    =    formatHeader.get(hdrMap);    	non-compiled	[CE]  :  expected	51	None	replace
244	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[record.size()  -  1]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[record.size()  -  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(new  String[record.size()  -  1]);	  String[]    header    =    new    String[record.values().toArray(new    String[record.size()    ]);    	non-compiled	[CE]  :  expected	78	None	replace
245	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[record.size()  +  1]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[record.size()  +  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(new  String[record.size()  +  1]);	  String[]    header    =    new    String[record.values().toArray(new    String[record.size()    ]);    	non-compiled	[CE]  :  expected	78	None	replace
246	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[record.size()  ]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[record.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().toArray(new  String[record.size()  ]);	  String[]    header    =    new    String[record.values().toArray(new    String[record.size()    ]);    	non-compiled	[CE]  :  expected	78	None	replace
247	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[record.size()  0]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[record.size()  0]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(new  String[record.size()  0]);	  String[]    header    =    new    String[record.values().toArray(new    String[record.size()    ]);    	non-compiled	[CE]  :  expected	78	None	replace
248	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[record.length()  ]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[record.length()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(new  String[record.length()  ]);	  String[]    header    =    new    String[record.values().toArray(new    String[record.size()    ]);    	non-compiled	[CE]  :  expected	78	None	replace
249	[BUG]  [BUGGY]  String[]  header  =  this.hdrMap.toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.hdrMap.toArray(new  String[hdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.hdrMap.toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    this.hdrMap.values();    	non-compiled	[CE]  :  expected	52	None	replace
250	[BUG]  [BUGGY]  String[]  header  =  this.hdrMap.getHeader();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.hdrMap.getHeader();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.hdrMap.getHeader();	  String[]    header    =    this.hdrMap.values();    	non-compiled	[CE]  :  expected	52	None	replace
251	[BUG]  [BUGGY]  String[]  header  =  this.hdrMap.getHeaders();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.hdrMap.getHeaders();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.hdrMap.getHeaders();	  String[]    header    =    this.hdrMap.values();    	non-compiled	[CE]  :  expected	52	None	replace
252	[BUG]  [BUGGY]  String[]  header  =  this.hdrMap.toArray(new  String[this.format.getHeader()  ]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.hdrMap.toArray(new  String[this.format.getHeader()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.hdrMap.toArray(new  String[this.format.getHeader()  ]);	  String[]    header    =    this.hdrMap.values();    	non-compiled	[CE]  :  expected	52	None	replace
253	[BUG]  [BUGGY]  String[]  header  =  new  String[HdrMap.values().size()];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[HdrMap.values().size()];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[HdrMap.values().size()];	  String[]    header    =    new    String[hdrMap.values().size()    -    1];    	non-compiled	[CE]  :  expected	70	None	replace
254	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  1];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  *  1];	  String[]    header    =    new    String[hdrMap.size()    +    1];    	non-compiled	[CE]  :  expected	21	None	replace
255	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  3];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  3];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  3];	  String[]    header    =    new    String[hdrMap.size()    +    1];    	non-compiled	[CE]  :  expected	21	None	replace
256	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  *  2];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  *  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().size()  *  2];	  String[]    header    =    new    String[initializeHeader().values().size()    +    2];    	non-compiled	[CE]  :  expected	30	None	replace
257	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	2	None	replace
258	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(formatHeader.length);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	2	None	replace
259	[BUG]  [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap  =  new  ArrayList  <  String,  Integer>();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap  =  new  ArrayList  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	2	None	replace
260	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(1);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(1);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	2	None	replace
261	[BUG]  [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(2);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap  =  new  LinkedHashMap  <  String,  Integer>(2);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap  =  new  LinkedHashMap  <  String,  Integer>(2);	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	2	None	replace
262	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  +  1];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  +  1];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length()    ];    	non-compiled	[CE]  :  expected	40	None	replace
263	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  formatHeader.length()  ];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  formatHeader.length()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  *  formatHeader.length()  ];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length()    ];    	non-compiled	[CE]  :  expected	40	None	replace
264	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  *  2];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  *  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  *  2];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length()    ];    	non-compiled	[CE]  :  expected	40	None	replace
265	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  -  1];  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  -  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  -  1];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length()    ];    	non-compiled	[CE]  :  expected	40	None	replace
266	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.size()  +  hdrMap.length()  ];  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.size()  +  hdrMap.length()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.size()  +  hdrMap.length()  ];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length()    ];    	non-compiled	[CE]  :  expected	40	None	replace
267	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  -  formatHeader.length()  ];  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  -  formatHeader.length()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  -  formatHeader.length()  ];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length()    ];    	non-compiled	[CE]  :  expected	40	None	replace
268	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  [0];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  [0];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  [0];	  String[]    header    =    new    String[hdrMap.size()    -    1];    	non-compiled	[CE]  :  expected	23	None	replace
269	[BUG]  [BUGGY]  String[]  header  =  hdrMap.getHeader(0);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.getHeader(0);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.getHeader(0);	  String[]    header    =    hdrMap.getHeader();    	non-compiled	[CE]  :  expected	13	None	replace
270	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeader(formatHeader);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeader(formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeader(formatHeader);	  String[]    header    =    this.format.getHeader(hdrMap);    	non-compiled	[CE]  :  expected	8	None	replace
271	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeader(formatHeaderMap);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeader(formatHeaderMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeader(formatHeaderMap);	  String[]    header    =    this.format.getHeader(hdrMap);    	non-compiled	[CE]  :  expected	8	None	replace
272	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeader(hdrMap,  formatHeader);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeader(hdrMap,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeader(hdrMap,  formatHeader);	  String[]    header    =    this.format.getHeader(hdrMap);    	non-compiled	[CE]  :  expected	8	None	replace
273	[BUG]  [BUGGY]  String[]  header  =  formatHeader.getHeaderRecord();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.getHeaderRecord();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.getHeaderRecord();	  String[]    header    =    this.format.getHeaderRecord();    	non-compiled	[CE]  :  expected	11	None	replace
274	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeaderRecord(hdrMap);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeaderRecord(hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeaderRecord(hdrMap);	  String[]    header    =    this.format.getHeaderRecord();    	non-compiled	[CE]  :  expected	11	None	replace
275	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeaderRecords();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeaderRecords();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeaderRecords();	  String[]    header    =    this.format.getHeaderRecord();    	non-compiled	[CE]  :  expected	11	None	replace
276	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.values().size()  +  1];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.values().size()  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.values().size()  +  1];	  String[]    header    =    new    String[formatHeader.values().size()    ];    	non-compiled	[CE]  :  expected	17	None	replace
277	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.getValues().size()  ];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.getValues().size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.getValues().size()  ];	  String[]    header    =    new    String[formatHeader.values().size()    ];    	non-compiled	[CE]  :  expected	17	None	replace
278	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.length  -  1);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.length  -  1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.length  -  1);	  String[]    header    =    hdrMap.get(formatHeader.length);    	non-compiled	[CE]  :  expected	47	None	replace
279	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.length  -  2);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.length  -  2);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.length  -  2);	  String[]    header    =    hdrMap.get(formatHeader.length);    	non-compiled	[CE]  :  expected	47	None	replace
280	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  >  1  ];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  >  1  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  >  1  ];	  String[]    header    =    new    String[hdrMap.size()    >    0    ];    	non-compiled	[CE]  :  expected	58	None	replace
281	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  >  2  ];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  >  2  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  >  2  ];	  String[]    header    =    new    String[hdrMap.size()    >    0    ];    	non-compiled	[CE]  :  expected	58	None	replace
282	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  0  ];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  0  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  *  0  ];	  String[]    header    =    new    String[hdrMap.size()    >    0    ];    	non-compiled	[CE]  :  expected	58	None	replace
283	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.size()  >  0  ];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.size()  >  0  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.size()  >  0  ];	  String[]    header    =    new    String[hdrMap.size()    >    0    ];    	non-compiled	[CE]  :  expected	58	None	replace
284	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  -  1];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  -  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  -  1];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	22	None	replace
285	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  formatHeader.length  ];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  *  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	22	None	replace
286	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  -  2];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  -  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  -  2];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	22	None	replace
287	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.size()  +  hdrMap.length  ];  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.size()  +  hdrMap.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.size()  +  hdrMap.length  ];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	22	None	replace
288	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  /  2];  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  /  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  /  2];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	22	None	replace
289	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  -  1];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  -  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  -  1];	  String[]    header    =    new    String[hdrMap.values()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	33	None	replace
290	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.values()  +  hdrMap.length  ];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.values()  +  hdrMap.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.values()  +  hdrMap.length  ];	  String[]    header    =    new    String[hdrMap.values()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	33	None	replace
291	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  /  formatHeader.length  ];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  /  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  /  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.values()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	33	None	replace
292	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  *  formatHeader.length  ];  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  *  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  *  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.values()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	33	None	replace
293	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.values()  +  formatHeader.length  ];  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.values()  +  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.values()  +  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.values()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	33	None	replace
294	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(new  String[formatHeader.size()  ]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(new  String[formatHeader.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().toArray(new  String[formatHeader.size()  ]);	  String[]    header    =    new    String[initializeHeader().values().toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	56	None	replace
295	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.values().toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.values().toArray(new  String[hdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.values().toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    new    String[initializeHeader().values().toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	56	None	replace
296	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(new  String[formatHeader.length()  ]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(new  String[formatHeader.length()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().toArray(new  String[formatHeader.length()  ]);	  String[]    header    =    new    String[initializeHeader().values().toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	56	None	replace
297	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(new  String[hdrMap.size()  -  1]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(new  String[hdrMap.size()  -  1]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().toArray(new  String[hdrMap.size()  -  1]);	  String[]    header    =    new    String[initializeHeader().values().toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	56	None	replace
298	[BUG]  [BUGGY]  String[]  header  =  hdrMap.values().toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.values().toArray(new  String[hdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.values().toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    hdrMap.values().get(formatHeader);    	non-compiled	[CE]  :  expected	81	None	replace
299	[BUG]  [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader.trim());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader.trim());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.values().get(formatHeader.trim());	  String[]    header    =    hdrMap.values().get(formatHeader);    	non-compiled	[CE]  :  expected	81	None	replace
300	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(initializeHeader)];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(initializeHeader)];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().toArray(initializeHeader)];	  String[]    header    =    new    String[initializeHeader().values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	57	None	replace
301	[BUG]  [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  ],  hdrMap);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  ],  hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.toArray(new  String[hdrMap.size()  ],  hdrMap);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ],    formatHeader);    	non-compiled	[CE]  :  expected	77	None	replace
302	[BUG]  [BUGGY]  String[]  header  =  this.hdrMap.toArray(new  String[this.headerMap.size()  ]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.hdrMap.toArray(new  String[this.headerMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.hdrMap.toArray(new  String[this.headerMap.size()  ]);	  String[]    header    =    this.hdrMap.values();    	non-compiled	[CE]  :  expected	52	None	replace
303	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.toArray()  ];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.toArray()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.toArray()  ];	  String[]    header    =    new    String[formatHeader.values()    ];    	non-compiled	[CE]  :  expected	31	None	replace
304	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  0);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  0);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader,  0);	  String[]    header    =    hdrMap.get(formatHeader,    recordNumber);    	non-compiled	[CE]  :  expected	50	None	replace
305	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  formatNumber  +  1);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  formatNumber  +  1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader,  formatNumber  +  1);	  String[]    header    =    hdrMap.get(formatHeader,    recordNumber);    	non-compiled	[CE]  :  expected	50	None	replace
306	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  formatHeader);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader,  formatHeader);	  String[]    header    =    hdrMap.get(formatHeader,    recordNumber);    	non-compiled	[CE]  :  expected	50	None	replace
307	[BUG]  [BUGGY]  String[]  header  =  this.format.toArray(new  String[this.format.size()  ]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.toArray(new  String[this.format.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.toArray(new  String[this.format.size()  ]);	  String[]    header    =    this.format.keySet();    	non-compiled	[CE]  :  expected	74	None	replace
308	[BUG]  [BUGGY]  String[]  header  =  this.format.headerMap();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.headerMap();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.headerMap();	  String[]    header    =    this.format.keySet();    	non-compiled	[CE]  :  expected	74	None	replace
309	[BUG]  [BUGGY]  hdrMap.putAll(this.formatHeader);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.putAll(this.formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.putAll(this.formatHeader);	  hdrMap.putAll(formatHeader);    	non-compiled	[CE]  :  expected	6	None	replace
310	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  +  1];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  +  formatHeader.length  +  1];	  String[]    header    =    new    String[hdrMap.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	39	None	replace
311	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader  +  3);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader  +  3);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader  +  3);	  String[]    header    =    hdrMap.get(formatHeader    +    1);    	non-compiled	[CE]  :  expected	59	None	replace
312	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[hdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    new    String[record.values().toArray(new    String[record.size()    ]);    	non-compiled	[CE]  :  expected	78	None	replace
313	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  String[0]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  String[0]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  String[0]);	  hdrMap.put(formatHeader,    hdrMap);    	non-compiled	[CE]  :  expected	63	None	replace
314	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  4]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  4]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  4]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    -    1]);    	non-compiled	[CE]  :  expected	43	None	replace
315	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(rec0,  formatHeader);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(rec0,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(rec0,  formatHeader);	  String[]    header    =    hdrMap.get(formatHeader,    rec);    	non-compiled	[CE]  :  expected	49	None	replace
316	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(receiver,  formatHeader);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(receiver,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(receiver,  formatHeader);	  String[]    header    =    hdrMap.get(formatHeader,    rec);    	non-compiled	[CE]  :  expected	49	None	replace
317	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.length()  0]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.length()  0]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.length()  0]);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.length()    ]);    	non-compiled	[CE]  :  expected	60	None	replace
318	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>()  +  1);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>()  +  1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>()  +  1);	  hdrMap.put(formatHeader,    new    HashMap    <    String,    Integer>());    	non-compiled	[CE]  :  expected	3	None	replace
319	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  2  +  1];  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  2  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  *  2  +  1];	  String[]    header    =    new    String[hdrMap.size()    *    2];    	non-compiled	[CE]  :  expected	24	None	replace
320	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  2  +  formatHeader.length];  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  2  +  formatHeader.length];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  *  2  +  formatHeader.length];	  String[]    header    =    new    String[hdrMap.size()    *    2];    	non-compiled	[CE]  :  expected	24	None	replace
321	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  2  +  formatHeader.length  -  1];  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  *  2  +  formatHeader.length  -  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  *  2  +  formatHeader.length  -  1];	  String[]    header    =    new    String[hdrMap.size()    *    2];    	non-compiled	[CE]  :  expected	24	None	replace
322	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {  }  );  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {  }  );  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  String[]  {  }  );	  hdrMap.put(formatHeader,    null);    	non-compiled	[CE]  :  expected	66	None	replace
323	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  1];  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().size()  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().size()  1];	  String[]    header    =    new    String[initializeHeader().values().size()    +    1];    	non-compiled	[CE]  :  expected	27	None	replace
324	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader()  +  2];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader()  +  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader()  +  2];	  String[]    header    =    new    String[hdrMap.getHeader()    ];    	non-compiled	[CE]  :  expected	61	None	replace
325	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().length  +  2];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().length  +  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().length  +  2];	  String[]    header    =    new    String[hdrMap.values().length    ];    	non-compiled	[CE]  :  expected	71	None	replace
326	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[HdrMap.size()  ]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[HdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().toArray(new  String[HdrMap.size()  ]);	  String[]    header    =    new    String[hdrMap.values().toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	69	None	replace
327	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  +  1];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length  +  1];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	22	None	replace
328	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  recordNumber);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  recordNumber);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  recordNumber);	  hdrMap.put(formatHeader,    header);    	non-compiled	[CE]  :  expected	7	None	replace
329	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().values().size()  ];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().values().size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader().values().size()  ];	  String[]    header    =    new    String[hdrMap.getHeader().size()    ];    	non-compiled	[CE]  :  expected	72	None	replace
330	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toCharArray());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toCharArray());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.toCharArray());	  String[]    header    =    hdrMap.get(formatHeader.toString());    	non-compiled	[CE]  :  expected	48	None	replace
331	[BUG]  [BUGGY]  String[]  header  =  hdrMap.keySet().toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.keySet().toArray(new  String[hdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.keySet().toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    hdrMap.keySet().get(formatHeader);    	non-compiled	[CE]  :  expected	82	None	replace
332	[BUG]  [BUGGY]  String[]  header  =  this.format.toString();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.toString();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.toString();	  String[]    header    =    formatHeader;    	non-compiled	[CE]  :  expected	14	None	replace
333	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  +  formatHeader.length  +  1];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  +  formatHeader.length  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  +  formatHeader.length  +  1];	  String[]    header    =    new    String[record.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	79	None	replace
334	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  +  formatHeader.length  *  2];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  +  formatHeader.length  *  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  +  formatHeader.length  *  2];	  String[]    header    =    new    String[record.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	79	None	replace
335	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  Integer(0)  +  1);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  Integer(0)  +  1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  Integer(0)  +  1);	  hdrMap.put(formatHeader,    new    Integer(0));    	non-compiled	[CE]  :  expected	65	None	replace
336	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  Integer(3));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  Integer(3));  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  Integer(3));	  hdrMap.put(formatHeader,    new    Integer(0));    	non-compiled	[CE]  :  expected	65	None	replace
337	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  1;  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  1;  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  +  1;	  String[]    header    =    new    String[hdrMap.values();    	non-compiled	[CE]  :  expected	83	None	replace
338	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  -  1;  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  -  1;  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  -  1;	  String[]    header    =    new    String[hdrMap.values();    	non-compiled	[CE]  :  expected	83	None	replace
339	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader();  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader();	  String[]    header    =    new    String[hdrMap.values();    	non-compiled	[CE]  :  expected	83	None	replace
340	[BUG]  [BUGGY]  String[]  header  =  this.format.toArray(new  String[formatHeader.size()  ]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.toArray(new  String[formatHeader.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.toArray(new  String[formatHeader.size()  ]);	  String[]    header    =    formatHeader.toArray(new    String[formatHeader.size()    ]);    	non-compiled	[CE]  :  expected	41	None	replace
341	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.keySet()  +  3];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.keySet()  +  3];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.keySet()  +  3];	  String[]    header    =    new    String[hdrMap.keySet()    ];    	non-compiled	[CE]  :  expected	34	None	replace
342	[BUG]  [BUGGY]  final  String[]  header  =  this.format.getHeaderData();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  final  String[]  header  =  this.format.getHeaderData();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	final  String[]  header  =  this.format.getHeaderData();	  final    String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	54	None	replace
343	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeader(formatHeader,  hdrMap);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeader(formatHeader,  hdrMap);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeader(formatHeader,  hdrMap);	  String[]    header    =    this.format.getHeader(hdrMap);    	non-compiled	[CE]  :  expected	8	None	replace
344	[BUG]  [BUGGY]  String[]  header  =  formatHeader  ==  null?  this.format.getHeader()  :  formatHeader;  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader  ==  null?  this.format.getHeader()  :  formatHeader;  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader  ==  null?  this.format.getHeader()  :  formatHeader;	  String[]    header    =    formatHeader.getHeader();    	non-compiled	[CE]  :  expected	9	None	replace
345	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.values().toArray(new  String[formatHeader.length()  ]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.values().toArray(new  String[formatHeader.length()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.values().toArray(new  String[formatHeader.length()  ]);	  String[]    header    =    new    String[formatHeader.values().size()    ];    	non-compiled	[CE]  :  expected	17	None	replace
346	[BUG]  [BUGGY]  String[]  header  =  this.headerMap.keySet();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.headerMap.keySet();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.headerMap.keySet();	  String[]    header    =    this.headerMap.values();    	non-compiled	[CE]  :  expected	73	None	replace
347	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  *  2];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  *  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  *  2];	  String[]    header    =    new    String[hdrMap.values()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	33	None	replace
348	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  -  2];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  -  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  -  2];	  String[]    header    =    new    String[hdrMap.values()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	33	None	replace
349	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[header.size()  ]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[header.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[header.size()  ]);	  String[]    header    =    hdrMap.toArray(new    String[formatHeader.size()    ]);    	non-compiled	[CE]  :  expected	44	None	replace
350	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  *  2  +  1];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  *  2  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  *  2  +  1];	  String[]    header    =    new    String[record.values().size()    *    2];    	non-compiled	[CE]  :  expected	19	None	replace
351	[BUG]  [BUGGY]  final  Integer[]  formatHeader  =  this.format.getFormatHeader();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  final  Integer[]  formatHeader  =  this.format.getFormatHeader();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	final  Integer[]  formatHeader  =  this.format.getFormatHeader();	  Integer[]    formatHeader    =    this.format.getFormatHeader();    	non-compiled	[CE]  :  expected	80	None	replace
352	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeaderDataRecord();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeaderDataRecord();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeaderDataRecord();	  String[]    header    =    this.format.getHeaderData();    	non-compiled	[CE]  :  expected	76	None	replace
353	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(recordHeader)];  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(recordHeader)];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().toArray(recordHeader)];	  String[]    header    =    new    String[record.values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	67	None	replace
354	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[recordNumber])];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().toArray(new  String[recordNumber])];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(new  String[recordNumber])];	  String[]    header    =    new    String[record.values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	67	None	replace
355	[BUG]  [BUGGY]  hdrMap  =  new  LinkedList  <  String,  Integer>();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap  =  new  LinkedList  <  String,  Integer>();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap  =  new  LinkedList  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	2	None	replace
356	[BUG]  [BUGGY]  hdrMap  =  new  java.util.ArrayList  <  String,  Integer>();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap  =  new  java.util.ArrayList  <  String,  Integer>();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap  =  new  java.util.ArrayList  <  String,  Integer>();	  hdrMap    =    new    LinkedHashMap    <    String,    Integer>();    	non-compiled	[CE]  :  expected	2	None	replace
357	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  getFormat());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  getFormat());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  getFormat());	  hdrMap.put(formatHeader,    formatHeader);    	non-compiled	[CE]  :  expected	1	None	replace
358	[BUG]  [BUGGY]  String[]  header  =  hdrMap.getFormatHeader();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.getFormatHeader();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.getFormatHeader();	  String[]    header    =    formatHeader.get(hdrMap);    	non-compiled	[CE]  :  expected	51	None	replace
359	[BUG]  [BUGGY]  String[]  header  =  this.format.toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.toArray(new  String[hdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    formatHeader.toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	42	None	replace
360	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  +  2];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  +  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  +  formatHeader.length()  +  2];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length()    ];    	non-compiled	[CE]  :  expected	40	None	replace
361	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.toString()  ];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  +  formatHeader.toString()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  +  formatHeader.toString()  ];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length()    ];    	non-compiled	[CE]  :  expected	40	None	replace
362	[BUG]  [BUGGY]  String[]  header  =  new  String[recordNumber().values().toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[recordNumber().values().toArray(new  String[hdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[recordNumber().values().toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    new    String[initializeHeader().values().toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	56	None	replace
363	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().hdrMap.size()  ];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().hdrMap.size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().hdrMap.size()  ];	  String[]    header    =    new    String[initializeHeader().hdrMap.size()    ];    	non-compiled	[CE]  :  expected	29	None	replace
364	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(4));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(4));  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  HashMap  <  String,  Integer>(4));	  hdrMap.put(formatHeader,    new    HashMap    <    String,    Integer>());    	non-compiled	[CE]  :  expected	3	None	replace
365	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().toArray(new  String[hdrMap.size()  ]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().toArray(new  String[hdrMap.size()  ]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().toArray(new  String[hdrMap.size()  ]);	  String[]    header    =    new    String[initializeHeader().values().toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	56	None	replace
366	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  Integer(this.format));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  Integer(this.format));  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  Integer(this.format));	  hdrMap.put(formatHeader,    this.format);    	non-compiled	[CE]  :  expected	4	None	replace
367	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {  this.format  }  );  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  String[]  {  this.format  }  );  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  String[]  {  this.format  }  );	  hdrMap.put(formatHeader,    this.format);    	non-compiled	[CE]  :  expected	4	None	replace
368	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString())+  1;  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString())+  1;  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.toString())+  1;	  String[]    header    =    hdrMap.get(formatHeader.toString());    	non-compiled	[CE]  :  expected	48	None	replace
369	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString(),  this.format);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString(),  this.format);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.toString(),  this.format);	  String[]    header    =    hdrMap.get(formatHeader.toString());    	non-compiled	[CE]  :  expected	48	None	replace
370	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString()  + "n ");  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString()  + "n ");  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.toString()  + "n ");	  String[]    header    =    hdrMap.get(formatHeader.toString());    	non-compiled	[CE]  :  expected	48	None	replace
371	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString()  + ": ");  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(formatHeader.toString()  + ": ");  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(formatHeader.toString()  + ": ");	  String[]    header    =    hdrMap.get(formatHeader.toString());    	non-compiled	[CE]  :  expected	48	None	replace
372	[BUG]  [BUGGY]  String[]  header  =  this.headerMap.toArray();  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.headerMap.toArray();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.headerMap.toArray();	  String[]    header    =    this.headerMap.values();    	non-compiled	[CE]  :  expected	73	None	replace
373	[BUG]  [BUGGY]  final  String[]  header  =  this.format.getHeader(recordNumber);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  final  String[]  header  =  this.format.getHeader(recordNumber);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	final  String[]  header  =  this.format.getHeader(recordNumber);	  final    String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	54	None	replace
374	[BUG]  [BUGGY]  final  String[]  header  =  this.format.getHeaderList();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  final  String[]  header  =  this.format.getHeaderList();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	final  String[]  header  =  this.format.getHeaderList();	  final    String[]    header    =    this.format.getHeader();    	non-compiled	[CE]  :  expected	54	None	replace
375	[BUG]  [BUGGY]  String[]  header  =  this.headerMap.getHeaders();  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.headerMap.getHeaders();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.headerMap.getHeaders();	  String[]    header    =    hdrMap.getHeaders();    	non-compiled	[CE]  :  expected	26	None	replace
376	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeaderSize();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeaderSize();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeaderSize();	  String[]    header    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	12	None	replace
377	[BUG]  [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader  +  1);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader  +  1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.values().get(formatHeader  +  1);	  String[]    header    =    hdrMap.get(formatHeader    +    1);    	non-compiled	[CE]  :  expected	59	None	replace
378	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  3];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  3];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  3];	  String[]    header    =    new    String[hdrMap.values().size()    +    1];    	non-compiled	[CE]  :  expected	37	None	replace
379	[BUG]  [BUGGY]  Integer[]  formatHeader  =  this.format.getFormatHeader(recordNumber);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  Integer[]  formatHeader  =  this.format.getFormatHeader(recordNumber);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	Integer[]  formatHeader  =  this.format.getFormatHeader(recordNumber);	  Integer[]    formatHeader    =    this.format.getFormatHeader();    	non-compiled	[CE]  :  expected	80	None	replace
380	[BUG]  [BUGGY]  Integer[]  formatHeader  =  this.format.getFormatHeaderRecord();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  Integer[]  formatHeader  =  this.format.getFormatHeaderRecord();  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	Integer[]  formatHeader  =  this.format.getFormatHeaderRecord();	  Integer[]    formatHeader    =    this.format.getFormatHeader();    	non-compiled	[CE]  :  expected	80	None	replace
381	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  1);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  1);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  +  1);	  String[]    header    =    new    String[hdrMap.values();    	non-compiled	[CE]  :  expected	83	None	replace
382	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length);	  String[]    header    =    new    String[hdrMap.values();    	non-compiled	[CE]  :  expected	83	None	replace
383	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.size()  >  0?  formatHeader.trim()  :  null;  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.size()  >  0?  formatHeader.trim()  :  null;  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.size()  >  0?  formatHeader.trim()  :  null;	  String[]    header    =    new    String[formatHeader.size()    ];    	non-compiled	[CE]  :  expected	15	None	replace
384	[BUG]  [BUGGY]  String[]  header  =  new  String[header.size()  ];  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[header.size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[header.size()  ];	  String[]    header    =    new    String[formatHeader.size()    ];    	non-compiled	[CE]  :  expected	15	None	replace
385	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  +  1];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  +  1];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values()  +  formatHeader.length  +  1];	  String[]    header    =    new    String[hdrMap.values()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	33	None	replace
386	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().toArray(htmlHeaderMap)];  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().toArray(htmlHeaderMap)];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().toArray(htmlHeaderMap)];	  String[]    header    =    new    String[record.values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	67	None	replace
387	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader()  +  formatHeader.values()  ];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader()  +  formatHeader.values()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader()  +  formatHeader.values()  ];	  String[]    header    =    new    String[hdrMap.getHeader()    ];    	non-compiled	[CE]  :  expected	61	None	replace
388	[BUG]  [BUGGY]  String[]  header  =  this.format.getHeader(recordNumber,  i);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getHeader(recordNumber,  i);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getHeader(recordNumber,  i);	  String[]    header    =    this.format.getHeader(recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
389	[BUG]  [BUGGY]  String[]  header  =  formatHeader.get(this.format);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  formatHeader.get(this.format);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  formatHeader.get(this.format);	  String[]    header    =    formatHeader.get(hdrMap);    	non-compiled	[CE]  :  expected	51	None	replace
390	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().values().size()  ];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.keySet().values().size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.keySet().values().size()  ];	  String[]    header    =    new    String[hdrMap.keySet().size()    ];    	non-compiled	[CE]  :  expected	38	None	replace
391	[BUG]  [BUGGY]  String[]  header  =  this.format.getRecordHeader(recordNumber);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  this.format.getRecordHeader(recordNumber);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  this.format.getRecordHeader(recordNumber);	  String[]    header    =    this.format.getRecordHeader();    	non-compiled	[CE]  :  expected	10	None	replace
392	[BUG]  [BUGGY]  String[]  header  =  hdrMap.getHeader(recordNumber);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.getHeader(recordNumber);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.getHeader(recordNumber);	  String[]    header    =    hdrMap.getHeader();    	non-compiled	[CE]  :  expected	13	None	replace
393	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  -  formatHeader.length  ];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().size()  -  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().size()  -  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.values().size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	39	None	replace
394	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  >  4  ];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  >  4  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  >  4  ];	  String[]    header    =    new    String[hdrMap.size()    >    0    ];    	non-compiled	[CE]  :  expected	58	None	replace
395	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  <  0  ];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  <  0  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  <  0  ];	  String[]    header    =    new    String[hdrMap.size()    >    0    ];    	non-compiled	[CE]  :  expected	58	None	replace
396	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[hdrMap.size()  0]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().toArray(new  String[hdrMap.size()  0]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().toArray(new  String[hdrMap.size()  0]);	  String[]    header    =    new    String[hdrMap.values().toArray(new    String[hdrMap.size()    ]);    	non-compiled	[CE]  :  expected	69	None	replace
397	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  i);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  i);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  i);	  hdrMap.put(formatHeader,    hdr);    	non-compiled	[CE]  :  expected	64	None	replace
398	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  0);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  0);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  0);	  hdrMap.put(formatHeader,    hdr);    	non-compiled	[CE]  :  expected	64	None	replace
399	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  +  formatHeader.length()  ],  formatHeader);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  +  formatHeader.length()  ],  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  +  formatHeader.length()  ],  formatHeader);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ],    formatHeader);    	non-compiled	[CE]  :  expected	77	None	replace
400	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  -  formatHeader.length  ],  formatHeader);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  -  formatHeader.length  ],  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  -  formatHeader.length  ],  formatHeader);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ],    formatHeader);    	non-compiled	[CE]  :  expected	77	None	replace
401	[BUG]  [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  -  formatHeader.length()  ],  formatHeader);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  -  formatHeader.length()  ],  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.toArray(new  String[hdrMap.size()  -  formatHeader.length()  ],  formatHeader);	  String[]    header    =    hdrMap.toArray(new    String[hdrMap.size()    ],    formatHeader);    	non-compiled	[CE]  :  expected	77	None	replace
402	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.toString().size()  ];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.toString().size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.toString().size()  ];	  String[]    header    =    new    String[formatHeader.values().size()    ];    	non-compiled	[CE]  :  expected	17	None	replace
403	[BUG]  [BUGGY]  String[]  header  =  new  String[formatHeader.getHeader().size()  ];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[formatHeader.getHeader().size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[formatHeader.getHeader().size()  ];	  String[]    header    =    new    String[formatHeader.values().size()    ];    	non-compiled	[CE]  :  expected	17	None	replace
404	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.values()  ];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().hdrMap.values()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hdrMap.values()  ];	  String[]    header    =    new    String[initializeHeader().hdrMap.size()    ];    	non-compiled	[CE]  :  expected	29	None	replace
405	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  this.record);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  this.record);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  this.record);	  hdrMap.put(formatHeader,    header);    	non-compiled	[CE]  :  expected	7	None	replace
406	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().hashMap().size()  ];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().hashMap().size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().hashMap().size()  ];	  String[]    header    =    new    String[initializeHeader().hdrMap().size()    ];    	non-compiled	[CE]  :  expected	28	None	replace
407	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  -  formatHeader.length  ];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  -  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  -  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	22	None	replace
408	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.size()  /  formatHeader.length  ];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.size()  /  formatHeader.length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.size()  /  formatHeader.length  ];	  String[]    header    =    new    String[hdrMap.size()    +    formatHeader.length    ];    	non-compiled	[CE]  :  expected	22	None	replace
409	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.keySet()  +  formatHeader.values()  ];  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.keySet()  +  formatHeader.values()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.keySet()  +  formatHeader.values()  ];	  String[]    header    =    new    String[hdrMap.keySet()    ];    	non-compiled	[CE]  :  expected	34	None	replace
410	[BUG]  [BUGGY]  String[]  header  =  hdrMap.get(relativeNumber,  formatHeader);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.get(relativeNumber,  formatHeader);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.get(relativeNumber,  formatHeader);	  String[]    header    =    hdrMap.get(formatHeader,    rec);    	non-compiled	[CE]  :  expected	49	None	replace
411	[BUG]  [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader.intValue());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.values().get(formatHeader.intValue());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.values().get(formatHeader.intValue());	  String[]    header    =    hdrMap.values().get(formatHeader);    	non-compiled	[CE]  :  expected	81	None	replace
412	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().toArray(formatHeader)];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().toArray(formatHeader)];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().toArray(formatHeader)];	  String[]    header    =    new    String[initializeHeader().values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	57	None	replace
413	[BUG]  [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap,  formatHeader.length)];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap,  formatHeader.length)];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[initializeHeader().values().toArray(hdrMap,  formatHeader.length)];	  String[]    header    =    new    String[initializeHeader().values().toArray(hdrMap)];    	non-compiled	[CE]  :  expected	57	None	replace
414	[BUG]  [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader.intValue());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader.intValue());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.keySet().get(formatHeader.intValue());	  String[]    header    =    hdrMap.keySet().get(formatHeader);    	non-compiled	[CE]  :  expected	82	None	replace
415	[BUG]  [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader.values());  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  hdrMap.keySet().get(formatHeader.values());  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  hdrMap.keySet().get(formatHeader.values());	  String[]    header    =    hdrMap.keySet().get(formatHeader);    	non-compiled	[CE]  :  expected	82	None	replace
416	[BUG]  [BUGGY]  String[]  header  =  new  String[record.values().size()  3];  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.values().size()  3];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.values().size()  3];	  String[]    header    =    new    String[record.values().size()    +    1];    	non-compiled	[CE]  :  expected	16	None	replace
417	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  Integer(this.format.getSkipHeader()));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  Integer(this.format.getSkipHeader()));  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  Integer(this.format.getSkipHeader()));	  hdrMap.put(formatHeader,    hdrMap);    	non-compiled	[CE]  :  expected	63	None	replace
418	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().length  ];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.getHeader().length  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.getHeader().length  ];	  String[]    header    =    new    String[hdrMap.values().length    ];    	non-compiled	[CE]  :  expected	71	None	replace
419	[BUG]  [BUGGY]  String[]  header  =  new  String[hdrMap.values().length  *  2];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[hdrMap.values().length  *  2];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[hdrMap.values().length  *  2];	  String[]    header    =    new    String[hdrMap.values().length    ];    	non-compiled	[CE]  :  expected	71	None	replace
420	[BUG]  [BUGGY]  hdrMap.put(formatHeader,  new  Integer[0]);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  hdrMap.put(formatHeader,  new  Integer[0]);  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	hdrMap.put(formatHeader,  new  Integer[0]);	  hdrMap.put(formatHeader,    new    Integer(0));    	non-compiled	[CE]  :  expected	65	None	replace
421	[BUG]  [BUGGY]  String[]  header  =  new  String[record.size().size()  ];  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.size().size()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.size().size()  ];	  String[]    header    =    new    String[record.values().size()    *    2];    	non-compiled	[CE]  :  expected	19	None	replace
422	[BUG]  [BUGGY]  String[]  header  =  new  String[record.size()  +  formatHeader.toString()  ];  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      private  Map<String,  Integer>  initializeHeader()  throws  IOException  {  Map<String,  Integer>  hdrMap  =  null;  final  String[]  formatHeader  =  this.format.getHeader();  if  (formatHeader  !=  null)  {  hdrMap  =  new  LinkedHashMap<String,  Integer>();      [BUGGY]  String[]  header  =  new  String[record.size()  +  formatHeader.toString()  ];  [BUGGY]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	354	354	1	replace	String[]  header  =  new  String[record.size()  +  formatHeader.toString()  ];	  String[]    header    =    new    String[record.size()    ];    	non-compiled	[CE]  :  expected	20	None	replace
