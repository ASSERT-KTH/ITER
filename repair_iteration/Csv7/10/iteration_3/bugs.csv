bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  formatHeader[i]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  formatHeader[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i),  formatHeader[i]);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    header[i]);    	non-compiled	[CE]  :  expected	39	None	replace
2	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.valueOf(i),  header[i]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.valueOf(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.valueOf(i),  header[i]);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    header[i]);    	non-compiled	[CE]  :  expected	39	None	replace
3	[BUG]  [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i),  header[i]);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i),  header[i]);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    header[i]);    	non-compiled	[CE]  :  expected	39	None	replace
4	[BUG]  [BUGGY]  hdrMap.put(rect.i,  RectangleEdge.valueOf(i),  header[i]);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.i,  RectangleEdge.valueOf(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.i,  RectangleEdge.valueOf(i),  header[i]);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    header[i]);    	non-compiled	[CE]  :  expected	39	None	replace
5	[BUG]  [BUGGY]  hdrMap.put(rect.nextRecord,  RectangleEdge.valueOf(i),  header[i]);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.nextRecord,  RectangleEdge.valueOf(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.nextRecord,  RectangleEdge.valueOf(i),  header[i]);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    header[i]);    	non-compiled	[CE]  :  expected	39	None	replace
6	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.getHeaderRecord());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.getHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.getHeaderRecord());	  hdrMap.put(header[i],    this.format.getHeaderRecord());    	non-compiled	[CE]  :  expected	14	None	replace
7	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getHeaderRecord(i));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getHeaderRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getHeaderRecord(i));	  hdrMap.put(header[i],    this.format.getHeaderRecord());    	non-compiled	[CE]  :  expected	14	None	replace
8	[BUG]  [BUGGY]  hdrMap.put(i,  this.format.getHeaderRecord());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  this.format.getHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  this.format.getHeaderRecord());	  hdrMap.put(header[i],    this.format.getHeaderRecord());    	non-compiled	[CE]  :  expected	14	None	replace
9	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecord());  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getRecord());	  hdrMap.put(header[i],    this.format.getHeaderRecord());    	non-compiled	[CE]  :  expected	14	None	replace
10	[BUG]  [BUGGY]  hdrMap.put(rec.header[i],  header.valueOf(i));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec.header[i],  header.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec.header[i],  header.valueOf(i));	  hdrMap.put(header[i],    rec.valueOf(i));    	non-compiled	[CE]  :  expected	38	None	replace
11	[BUG]  [BUGGY]  hdrMap.put(header[i],  header.valueOf(i));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  header.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  header.valueOf(i));	  hdrMap.put(header[i],    rec.valueOf(i));    	non-compiled	[CE]  :  expected	38	None	replace
12	[BUG]  [BUGGY]  hdrMap.put(record[i],  header.valueOf(i));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header.valueOf(i));	  hdrMap.put(header[i],    rec.valueOf(i));    	non-compiled	[CE]  :  expected	38	None	replace
13	[BUG]  [BUGGY]  hdrMap.put(rec.getHeader(i),  header.valueOf(i));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec.getHeader(i),  header.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec.getHeader(i),  header.valueOf(i));	  hdrMap.put(header[i],    rec.valueOf(i));    	non-compiled	[CE]  :  expected	38	None	replace
14	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader.valueOf(i));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader.valueOf(i));	  hdrMap.put(header[i],    rec.valueOf(i));    	non-compiled	[CE]  :  expected	38	None	replace
15	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord(i));  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getSkipHeaderRecord(i));	  hdrMap.put(header[i],    rec.valueOf(i));    	non-compiled	[CE]  :  expected	38	None	replace
16	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.intValue());  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.intValue());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.intValue());	  hdrMap.put(record[i],    header[i].intValue());    	non-compiled	[CE]  :  expected	64	None	replace
17	[BUG]  [BUGGY]  hdrMap.put(header[i],  record[i].intValue());  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  record[i].intValue());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  record[i].intValue());	  hdrMap.put(record[i],    header[i].intValue());    	non-compiled	[CE]  :  expected	64	None	replace
18	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].intValue()  +  1);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].intValue()  +  1);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].intValue()  +  1);	  hdrMap.put(record[i],    header[i].intValue());    	non-compiled	[CE]  :  expected	64	None	replace
19	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.recordNumber[i].intValue());  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.recordNumber[i].intValue());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.recordNumber[i].intValue());	  hdrMap.put(record[i],    header[i].intValue());    	non-compiled	[CE]  :  expected	64	None	replace
20	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.getFormatRecord());  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.getFormatRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.getFormatRecord());	  hdrMap.put(header[i],    this.format.getFormatRecord());    	non-compiled	[CE]  :  expected	79	None	replace
21	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getFormatRecord());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getFormatRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getFormatRecord());	  hdrMap.put(header[i],    this.format.getFormatRecord());    	non-compiled	[CE]  :  expected	79	None	replace
22	[BUG]  [BUGGY]  hdrMap.put(this.format.getFormatRecord(),  header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getFormatRecord(),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getFormatRecord(),  header);	  hdrMap.put(header[i],    this.format.getFormatRecord());    	non-compiled	[CE]  :  expected	79	None	replace
23	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  formatHeader[i]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  formatHeader[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(0),  formatHeader[i]);	  hdrMap.put(header[i],    Integer.valueOf(0),    header[i]);    	non-compiled	[CE]  :  expected	44	None	replace
24	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  recordNumber[i]);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  recordNumber[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(0),  recordNumber[i]);	  hdrMap.put(header[i],    Integer.valueOf(0),    header[i]);    	non-compiled	[CE]  :  expected	44	None	replace
25	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header[i].record);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header[i].record);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(0),  header[i].record);	  hdrMap.put(header[i],    Integer.valueOf(0),    header[i]);    	non-compiled	[CE]  :  expected	44	None	replace
26	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header[i],  rec);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header[i],  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(0),  header[i],  rec);	  hdrMap.put(header[i],    Integer.valueOf(0),    header[i]);    	non-compiled	[CE]  :  expected	44	None	replace
27	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  rec);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(0),  rec);	  hdrMap.put(header[i],    Integer.valueOf(0),    header[i]);    	non-compiled	[CE]  :  expected	44	None	replace
28	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header[i].toString());  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header[i].toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(0),  header[i].toString());	  hdrMap.put(header[i],    Integer.valueOf(0),    header[i]);    	non-compiled	[CE]  :  expected	44	None	replace
29	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getRecordNumber());  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getRecordNumber());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getRecordNumber());	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	68	None	replace
30	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  rec.getSkipHeaderRecord());  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  rec.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  rec.getSkipHeaderRecord());	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	68	None	replace
31	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeaderRecord());  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getHeaderRecord());	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	68	None	replace
32	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord(rec));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord(rec));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord(rec));	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	68	None	replace
33	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getRawHeaderRecord());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getRawHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getRawHeaderRecord());	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	68	None	replace
34	[BUG]  [BUGGY]  hdrMap.put(i,  this.format.getSkipHeaderRecord(),  header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  this.format.getSkipHeaderRecord(),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  this.format.getSkipHeaderRecord(),  header);	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	68	None	replace
35	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length  +  1));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length  +  1));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i,    header.length));    	non-compiled	[CE]  :  expected	81	None	replace
36	[BUG]  [BUGGY]  hdrMap.put(rect.i,  RectangleEdge.valueOf(i,  header.length));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.i,  RectangleEdge.valueOf(i,  header.length));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.i,  RectangleEdge.valueOf(i,  header.length));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i,    header.length));    	non-compiled	[CE]  :  expected	81	None	replace
37	[BUG]  [BUGGY]  hdrMap.put(rec,  RectangleEdge.valueOf(i,  header.length));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec,  RectangleEdge.valueOf(i,  header.length));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec,  RectangleEdge.valueOf(i,  header.length));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i,    header.length));    	non-compiled	[CE]  :  expected	81	None	replace
38	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length),  rec);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length),  rec);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i,    header.length));    	non-compiled	[CE]  :  expected	81	None	replace
39	[BUG]  [BUGGY]  hdrMap.put(rect.nextRecord,  RectangleEdge.valueOf(i,  header.length));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.nextRecord,  RectangleEdge.valueOf(i,  header.length));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.nextRecord,  RectangleEdge.valueOf(i,  header.length));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i,    header.length));    	non-compiled	[CE]  :  expected	81	None	replace
40	[BUG]  [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i,  header.length));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i,  header.length));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i,  header.length));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i,    header.length));    	non-compiled	[CE]  :  expected	81	None	replace
41	[BUG]  [BUGGY]  hdrMap.put(rect,  header[i],  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect,  header[i],  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect,  header[i],  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    rec,    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	67	None	replace
42	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader,  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader,  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader,  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    rec,    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	67	None	replace
43	[BUG]  [BUGGY]  hdrMap.put(record[i],  header,  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header,  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header,  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    rec,    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	67	None	replace
44	[BUG]  [BUGGY]  hdrMap.put(rect[i],  header,  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect[i],  header,  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect[i],  header,  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    rec,    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	67	None	replace
45	[BUG]  [BUGGY]  hdrMap.put(rect.i,  header[i],  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.i,  header[i],  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.i,  header[i],  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    rec,    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	67	None	replace
46	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec,  formatHeader,  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec,  formatHeader,  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec,  formatHeader,  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    rec,    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	67	None	replace
47	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecordName(i),  rec);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRecordName(i),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getRecordName(i),  rec);	  hdrMap.put(header[i],    this.format.getRecordName(i));    	non-compiled	[CE]  :  expected	57	None	replace
48	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.getRecordName(i));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.getRecordName(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.getRecordName(i));	  hdrMap.put(header[i],    this.format.getRecordName(i));    	non-compiled	[CE]  :  expected	57	None	replace
49	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecordName(i),  header[i]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRecordName(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getRecordName(i),  header[i]);	  hdrMap.put(header[i],    this.format.getRecordName(i));    	non-compiled	[CE]  :  expected	57	None	replace
50	[BUG]  [BUGGY]  hdrMap.put(i,  this.format.getRecordName(i));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  this.format.getRecordName(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  this.format.getRecordName(i));	  hdrMap.put(header[i],    this.format.getRecordName(i));    	non-compiled	[CE]  :  expected	57	None	replace
51	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecordName(i),  formatHeader);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRecordName(i),  formatHeader);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getRecordName(i),  formatHeader);	  hdrMap.put(header[i],    this.format.getRecordName(i));    	non-compiled	[CE]  :  expected	57	None	replace
52	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  formatHeader);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  formatHeader);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i  +  1),  formatHeader);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
53	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  rec);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i  +  1),  rec);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
54	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  header.length);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  header.length);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i  +  1),  header.length);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
55	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordHeader);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordHeader);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordHeader);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
56	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  Integer.valueOf(i  +  1),  recordNumber);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  Integer.valueOf(i  +  1),  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  Integer.valueOf(i  +  1),  recordNumber);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
57	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  this.format);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i  +  1),  this.format);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
58	[BUG]  [BUGGY]  hdrMap.put(rec,  Integer.valueOf(i  +  1),  header);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec,  Integer.valueOf(i  +  1),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec,  Integer.valueOf(i  +  1),  header);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
59	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.toString());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.toString());	  hdrMap.put(i,    header[i],    rec.toString());    	non-compiled	[CE]  :  expected	7	None	replace
60	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  formatHeader.toString());  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  formatHeader.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  formatHeader.toString());	  hdrMap.put(i,    header[i],    rec.toString());    	non-compiled	[CE]  :  expected	7	None	replace
61	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  format.toString());  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  format.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  format.toString());	  hdrMap.put(i,    header[i],    rec.toString());    	non-compiled	[CE]  :  expected	7	None	replace
62	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  current.toString());  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  current.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  current.toString());	  hdrMap.put(i,    header[i],    rec.toString());    	non-compiled	[CE]  :  expected	7	None	replace
63	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  rec);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  rec);	  hdrMap.put(i,    header[i]);    	non-compiled	[CE]  :  expected	28	None	replace
64	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format);	  hdrMap.put(i,    header[i]);    	non-compiled	[CE]  :  expected	28	None	replace
65	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  format);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  format);	  hdrMap.put(i,    header[i]);    	non-compiled	[CE]  :  expected	28	None	replace
66	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  recordNumber);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  recordNumber);	  hdrMap.put(i,    header[i]);    	non-compiled	[CE]  :  expected	28	None	replace
67	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  formatHeader);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  formatHeader);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  formatHeader);	  hdrMap.put(i,    header[i]);    	non-compiled	[CE]  :  expected	28	None	replace
68	[BUG]  [BUGGY]  hdrMap.put(record[i],  formatHeader[i],  header[i]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  formatHeader[i],  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  formatHeader[i],  header[i]);	  hdrMap.put(header[i],    formatHeader[i],    header[i]);    	non-compiled	[CE]  :  expected	76	None	replace
69	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  recordNumber[i]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  recordNumber[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  recordNumber[i]);	  hdrMap.put(header[i],    formatHeader[i],    header[i]);    	non-compiled	[CE]  :  expected	76	None	replace
70	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  this.format.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  this.format.getSkipHeaderRecord());	  hdrMap.put(header[i],    formatHeader[i],    header[i]);    	non-compiled	[CE]  :  expected	76	None	replace
71	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  rec,  header[i]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  rec,  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  rec,  header[i]);	  hdrMap.put(header[i],    formatHeader[i],    header[i]);    	non-compiled	[CE]  :  expected	76	None	replace
72	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  header[i].record);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  header[i].record);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  header[i].record);	  hdrMap.put(header[i],    formatHeader[i],    header[i]);    	non-compiled	[CE]  :  expected	76	None	replace
73	[BUG]  [BUGGY]  hdrMap.put(header[i],  format,  this.format);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  format,  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  format,  this.format);	  hdrMap.put(header[i],    format);    	non-compiled	[CE]  :  expected	50	None	replace
74	[BUG]  [BUGGY]  hdrMap.put(header[i],  format,  rec);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  format,  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  format,  rec);	  hdrMap.put(header[i],    format);    	non-compiled	[CE]  :  expected	50	None	replace
75	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getHeader(i),  rec);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getHeader(i),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getHeader(i),  rec);	  hdrMap.put(header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	85	None	replace
76	[BUG]  [BUGGY]  hdrMap.put(i,  this.format.getHeader(i));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  this.format.getHeader(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  this.format.getHeader(i));	  hdrMap.put(header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	85	None	replace
77	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecord(i));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getRecord(i));	  hdrMap.put(header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	85	None	replace
78	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getHeader(i));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getHeader(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getHeader(i));	  hdrMap.put(header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	85	None	replace
79	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getHeader(i),  recordNumber);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getHeader(i),  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getHeader(i),  recordNumber);	  hdrMap.put(header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	85	None	replace
80	[BUG]  [BUGGY]  hdrMap.put(i,  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  this.format.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  this.format.getSkipHeaderRecord());	  hdrMap.put(header,    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	80	None	replace
81	[BUG]  [BUGGY]  hdrMap.put(rec,  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec,  this.format.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec,  this.format.getSkipHeaderRecord());	  hdrMap.put(header,    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	80	None	replace
82	[BUG]  [BUGGY]  hdrMap.put(i,  header.getSkipHeaderRecord());  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header.getSkipHeaderRecord());	  hdrMap.put(header,    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	80	None	replace
83	[BUG]  [BUGGY]  hdrMap.put(header,  this.format.getRecordNumber());  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  this.format.getRecordNumber());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  this.format.getRecordNumber());	  hdrMap.put(header,    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	80	None	replace
84	[BUG]  [BUGGY]  hdrMap.put(header,  rec.getSkipHeaderRecord());  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  rec.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  rec.getSkipHeaderRecord());	  hdrMap.put(header,    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	80	None	replace
85	[BUG]  [BUGGY]  hdrMap.put(header,  this.format.getSkipHeaderRecord(i));  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  this.format.getSkipHeaderRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  this.format.getSkipHeaderRecord(i));	  hdrMap.put(header,    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	80	None	replace
86	[BUG]  [BUGGY]  hdrMap.put(header[i],  recordNumber[i]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  recordNumber[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  recordNumber[i]);	  hdrMap.put(header[i],    header[i]);    	non-compiled	[CE]  :  expected	48	None	replace
87	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  formatHeader[i]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  formatHeader[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i  +  1),  formatHeader[i]);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    header[i]);    	non-compiled	[CE]  :  expected	54	None	replace
88	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordNumber[i]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordNumber[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordNumber[i]);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    header[i]);    	non-compiled	[CE]  :  expected	54	None	replace
89	[BUG]  [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(i  +  1),  header[i]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(i  +  1),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  Integer.valueOf(i  +  1),  header[i]);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    header[i]);    	non-compiled	[CE]  :  expected	54	None	replace
90	[BUG]  [BUGGY]  hdrMap.put(rec,  Integer.valueOf(i  +  1),  header[i]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec,  Integer.valueOf(i  +  1),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec,  Integer.valueOf(i  +  1),  header[i]);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    header[i]);    	non-compiled	[CE]  :  expected	54	None	replace
91	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(0));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(0));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleEdge.valueOf(0));	  hdrMap.put(i,    header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	42	None	replace
92	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  Integer.toString(record[i]));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  Integer.toString(record[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  Integer.toString(record[i]));	  hdrMap.put(i,    header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	42	None	replace
93	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(recordNumber[i]));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(recordNumber[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  Integer(recordNumber[i]));	  hdrMap.put(i,    header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	42	None	replace
94	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getHeaderRecord());  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getHeaderRecord());	  hdrMap.put(record[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	23	None	replace
95	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getRecordNumber());  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getRecordNumber());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getRecordNumber());	  hdrMap.put(record[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	23	None	replace
96	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].getSkipHeaderRecord());  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].getSkipHeaderRecord());	  hdrMap.put(record[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	23	None	replace
97	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getRawHeaderRecord());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getRawHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getRawHeaderRecord());	  hdrMap.put(record[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	23	None	replace
98	[BUG]  [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(),  record[i]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(),  record[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getSkipHeaderRecord(),  record[i]);	  hdrMap.put(record[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	23	None	replace
99	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  RectangleEdge.valueOf(i));	  hdrMap.put(record[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	66	None	replace
100	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getSkipHeaderRecord(i));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getSkipHeaderRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getSkipHeaderRecord(i));	  hdrMap.put(record[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	66	None	replace
101	[BUG]  [BUGGY]  hdrMap.put(record[i],  header.toString());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header.toString());	  hdrMap.put(record[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	66	None	replace
102	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  header[i]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  header[i]);	  hdrMap.put(i,    header[i],    RectangleConstraint.NONE);    	non-compiled	[CE]  :  expected	70	None	replace
103	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  rec);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  rec);	  hdrMap.put(i,    header[i],    RectangleConstraint.NONE);    	non-compiled	[CE]  :  expected	70	None	replace
104	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  this.format);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  this.format);	  hdrMap.put(i,    header[i],    RectangleConstraint.NONE);    	non-compiled	[CE]  :  expected	70	None	replace
105	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE  ||  header[i]!=  RectangleConstraint.BOTTOM);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE  ||  header[i]!=  RectangleConstraint.BOTTOM);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstraint.NONE  ||  header[i]!=  RectangleConstraint.BOTTOM);	  hdrMap.put(i,    header[i],    RectangleConstraint.NONE);    	non-compiled	[CE]  :  expected	70	None	replace
106	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  Integer.toString(i  +  1));  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  Integer.toString(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  Integer.toString(i  +  1));	  hdrMap.put(header[i],    Integer.toString(i    +    1));    	non-compiled	[CE]  :  expected	19	None	replace
107	[BUG]  [BUGGY]  hdrMap.put(record[i],  Integer.toString(i  +  1));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  Integer.toString(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  Integer.toString(i  +  1));	  hdrMap.put(header[i],    Integer.toString(i    +    1));    	non-compiled	[CE]  :  expected	19	None	replace
108	[BUG]  [BUGGY]  hdrMap.put(i,  Integer.toString(i  +  1));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  Integer.toString(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  Integer.toString(i  +  1));	  hdrMap.put(header[i],    Integer.toString(i    +    1));    	non-compiled	[CE]  :  expected	19	None	replace
109	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeader(i),  rec);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeader(i),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getHeader(i),  rec);	  hdrMap.put(i,    header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	75	None	replace
110	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  rec.getHeader(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  rec.getHeader(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  rec.getHeader(i));	  hdrMap.put(i,    header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	75	None	replace
111	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getRecord(i));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getRecord(i));	  hdrMap.put(i,    header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	75	None	replace
112	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeader(i  +  1));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeader(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getHeader(i  +  1));	  hdrMap.put(i,    header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	75	None	replace
113	[BUG]  [BUGGY]  hdrMap.put(record[i],  Integer.toString(i),  header[i]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  Integer.toString(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  Integer.toString(i),  header[i]);	  hdrMap.put(record[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	8	None	replace
114	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format,  rec);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format,  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format,  rec);	  hdrMap.put(header[i],    this.format);    	non-compiled	[CE]  :  expected	47	None	replace
115	[BUG]  [BUGGY]  hdrMap.put(this.format[i],  header);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format[i],  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format[i],  header);	  hdrMap.put(header[i],    this.format);    	non-compiled	[CE]  :  expected	47	None	replace
116	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format,  recordNumber);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format,  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format,  recordNumber);	  hdrMap.put(header[i],    this.format);    	non-compiled	[CE]  :  expected	47	None	replace
117	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format,  formatHeader);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format,  formatHeader);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format,  formatHeader);	  hdrMap.put(header[i],    this.format);    	non-compiled	[CE]  :  expected	47	None	replace
118	[BUG]  [BUGGY]  hdrMap.put(i,  header.length);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header.length);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header.length);	  hdrMap.put(i,    header);    	non-compiled	[CE]  :  expected	33	None	replace
119	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  header[i]);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  header[i]);	  hdrMap.put(i,    header);    	non-compiled	[CE]  :  expected	33	None	replace
120	[BUG]  [BUGGY]  hdrMap.put(i,  header.toString());  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header.toString());	  hdrMap.put(i,    header);    	non-compiled	[CE]  :  expected	33	None	replace
121	[BUG]  [BUGGY]  hdrMap.put(i,  header.length  +  1);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header.length  +  1);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header.length  +  1);	  hdrMap.put(i,    header);    	non-compiled	[CE]  :  expected	33	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],  rec);  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],  rec);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],  rec);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    rec);    }    	non-compiled	[CE]  :  expected	31	None	replace
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i++)  {  hdrMap.put(header[i],  rec);  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i++)  {  hdrMap.put(header[i],  rec);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length  -  2;  i++)  {  hdrMap.put(header[i],  rec);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    rec);    }    	non-compiled	[CE]  :  expected	31	None	replace
124	[BUG]  [BUGGY]  Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  rec);  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  rec);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  rec);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    rec);    }    	non-compiled	[CE]  :  expected	31	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rec.length;  i++)  {  hdrMap.put(header[i],  header);  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  rec.length;  i++)  {  hdrMap.put(header[i],  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  rec.length;  i++)  {  hdrMap.put(header[i],  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    rec);    }    	non-compiled	[CE]  :  expected	31	None	replace
126	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  rec);  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  rec);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  rec);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    rec);    }    	non-compiled	[CE]  :  expected	31	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format);  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    rec);    }    	non-compiled	[CE]  :  expected	31	None	replace
128	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecordNumber()));  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecordNumber()));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getRecordNumber()));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	51	None	replace
129	[BUG]  [BUGGY]  hdrMap.put(rec,  new  CSVFormat(this.format.getSkipHeaderRecord()));  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec,  new  CSVFormat(this.format.getSkipHeaderRecord()));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec,  new  CSVFormat(this.format.getSkipHeaderRecord()));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	51	None	replace
130	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getHeaderRecord()));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getHeaderRecord()));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getHeaderRecord()));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	51	None	replace
131	[BUG]  [BUGGY]  hdrMap.put(i,  new  CSVFormat(this.format.getSkipHeaderRecord()));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  new  CSVFormat(this.format.getSkipHeaderRecord()));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  new  CSVFormat(this.format.getSkipHeaderRecord()));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	51	None	replace
132	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord(i)));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord(i)));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	51	None	replace
133	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()),  rec);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()),  rec);	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	51	None	replace
134	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()  +  1));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()  +  1));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	51	None	replace
135	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader,  recordNumber);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader,  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader,  recordNumber);	  hdrMap.put(header[i],    recordNumber);    	non-compiled	[CE]  :  expected	52	None	replace
136	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format,  formatHeader[i]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format,  formatHeader[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format,  formatHeader[i]);	  hdrMap.put(record[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	25	None	replace
137	[BUG]  [BUGGY]  hdrMap.put(rec.getHeader(i),  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec.getHeader(i),  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec.getHeader(i),  RectangleEdge.valueOf(i));	  hdrMap.put(rect.getHeader(i),    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	36	None	replace
138	[BUG]  [BUGGY]  hdrMap.put(rec.getHeader(i),  RectangleEdge.valueOf(i  +  1));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec.getHeader(i),  RectangleEdge.valueOf(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec.getHeader(i),  RectangleEdge.valueOf(i  +  1));	  hdrMap.put(rect.getHeader(i),    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	36	None	replace
139	[BUG]  [BUGGY]  hdrMap.put(rect.getHeader(i),  header.valueOf(i));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.getHeader(i),  header.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.getHeader(i),  header.valueOf(i));	  hdrMap.put(rect.getHeader(i),    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	36	None	replace
140	[BUG]  [BUGGY]  hdrMap.put(rec.getHeader(i),  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec.getHeader(i),  this.format.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec.getHeader(i),  this.format.getSkipHeaderRecord());	  hdrMap.put(rect.getHeader(i),    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	36	None	replace
141	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader,  rec);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader,  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader,  rec);	  hdrMap.put(header[i],    formatHeader);    	non-compiled	[CE]  :  expected	46	None	replace
142	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i]  + ",  recordNumber: ");  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i]  + ",  recordNumber: ");  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i]  + ",  recordNumber: ");	  hdrMap.put(header[i],    formatHeader[i]    +   ":   ");    	non-compiled	[CE]  :  expected	72	None	replace
143	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i]  + ",  rec: ");  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i]  + ",  rec: ");  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i]  + ",  rec: ");	  hdrMap.put(header[i],    formatHeader[i]    +   ":   ");    	non-compiled	[CE]  :  expected	72	None	replace
144	[BUG]  [BUGGY]  hdrMap.put(record[i],  formatHeader[i]  + ": ");  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  formatHeader[i]  + ": ");  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  formatHeader[i]  + ": ");	  hdrMap.put(header[i],    formatHeader[i]    +   ":   ");    	non-compiled	[CE]  :  expected	72	None	replace
145	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord()  + ": ");  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord()  + ": ");  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getSkipHeaderRecord()  + ": ");	  hdrMap.put(header[i],    formatHeader[i]    +   ":   ");    	non-compiled	[CE]  :  expected	72	None	replace
146	[BUG]  [BUGGY]  hdrMap.put(i,  header[i]  + ": ");  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i]  + ": ");  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i]  + ": ");	  hdrMap.put(header[i],    formatHeader[i]    +   ":   ");    	non-compiled	[CE]  :  expected	72	None	replace
147	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].valueOf(0));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].valueOf(0));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].valueOf(0));	  hdrMap.put(record[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	24	None	replace
148	[BUG]  [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(0),  header[i]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(0),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  Integer.valueOf(0),  header[i]);	  hdrMap.put(record[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	24	None	replace
149	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].valueOf(i),  this.format);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].valueOf(i),  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].valueOf(i),  this.format);	  hdrMap.put(record[i],    header[i].valueOf(i));    	non-compiled	[CE]  :  expected	22	None	replace
150	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].valueOf(i  +  1));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].valueOf(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].valueOf(i  +  1));	  hdrMap.put(record[i],    header[i].valueOf(i));    	non-compiled	[CE]  :  expected	22	None	replace
151	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].getValue(i));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].getValue(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].getValue(i));	  hdrMap.put(record[i],    header[i].valueOf(i));    	non-compiled	[CE]  :  expected	22	None	replace
152	[BUG]  [BUGGY]  hdrMap.put(header[i],  record[i].valueOf(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  record[i].valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  record[i].valueOf(i));	  hdrMap.put(record[i],    header[i].valueOf(i));    	non-compiled	[CE]  :  expected	22	None	replace
153	[BUG]  [BUGGY]  hdrMap.put(rect[i],  Integer.toString(i),  header);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect[i],  Integer.toString(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect[i],  Integer.toString(i),  header);	  hdrMap.put(header[i],    Integer.toString(i),    rec);    	non-compiled	[CE]  :  expected	9	None	replace
154	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.toString(i),  formatHeader);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.toString(i),  formatHeader);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.toString(i),  formatHeader);	  hdrMap.put(header[i],    Integer.toString(i),    rec);    	non-compiled	[CE]  :  expected	9	None	replace
155	[BUG]  [BUGGY]  hdrMap.put(record[i],  Integer.toString(i),  header);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  Integer.toString(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  Integer.toString(i),  header);	  hdrMap.put(header[i],    Integer.toString(i),    rec);    	non-compiled	[CE]  :  expected	9	None	replace
156	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  Integer.toString(i),  rec);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  Integer.toString(i),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  Integer.toString(i),  rec);	  hdrMap.put(header[i],    Integer.toString(i),    rec);    	non-compiled	[CE]  :  expected	9	None	replace
157	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader,  Integer.toString(i),  rec);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader,  Integer.toString(i),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader,  Integer.toString(i),  rec);	  hdrMap.put(header[i],    Integer.toString(i),    rec);    	non-compiled	[CE]  :  expected	9	None	replace
158	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.toString(i),  this.format);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.toString(i),  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.toString(i),  this.format);	  hdrMap.put(header[i],    Integer.toString(i),    rec);    	non-compiled	[CE]  :  expected	9	None	replace
159	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.getFormatHeaderRecord());  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.getFormatHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.getFormatHeaderRecord());	  hdrMap.put(header[i],    this.format.getFormatHeaderRecord());    	non-compiled	[CE]  :  expected	78	None	replace
160	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecordHeader(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRecordHeader(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getRecordHeader(i));	  hdrMap.put(header[i],    this.format.getFormatHeaderRecord());    	non-compiled	[CE]  :  expected	78	None	replace
161	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getFormatHeaderRecord());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getFormatHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getFormatHeaderRecord());	  hdrMap.put(header[i],    this.format.getFormatHeaderRecord());    	non-compiled	[CE]  :  expected	78	None	replace
162	[BUG]  [BUGGY]  hdrMap.put(i,  this.format.getFormatHeaderRecord());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  this.format.getFormatHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  this.format.getFormatHeaderRecord());	  hdrMap.put(header[i],    this.format.getFormatHeaderRecord());    	non-compiled	[CE]  :  expected	78	None	replace
163	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader.toString(i),  rec);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader.toString(i),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader.toString(i),  rec);	  hdrMap.put(header[i],    formatHeader.toString(i));    	non-compiled	[CE]  :  expected	53	None	replace
164	[BUG]  [BUGGY]  hdrMap.put(record[i],  formatHeader.toString(i));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  formatHeader.toString(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  formatHeader.toString(i));	  hdrMap.put(header[i],    formatHeader.toString(i));    	non-compiled	[CE]  :  expected	53	None	replace
165	[BUG]  [BUGGY]  hdrMap.put(i,  formatHeader.toString(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  formatHeader.toString(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  formatHeader.toString(i));	  hdrMap.put(header[i],    formatHeader.toString(i));    	non-compiled	[CE]  :  expected	53	None	replace
166	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.toString());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.toString());	  hdrMap.put(header[i],    formatHeader.toString(i));    	non-compiled	[CE]  :  expected	53	None	replace
167	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader.toString(i,  rec));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader.toString(i,  rec));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader.toString(i,  rec));	  hdrMap.put(header[i],    formatHeader.toString(i));    	non-compiled	[CE]  :  expected	53	None	replace
168	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader.toString(i  +  1));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader.toString(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader.toString(i  +  1));	  hdrMap.put(header[i],    formatHeader.toString(i));    	non-compiled	[CE]  :  expected	53	None	replace
169	[BUG]  [BUGGY]  hdrMap.put(rec.formatHeader[i],  header[i]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec.formatHeader[i],  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec.formatHeader[i],  header[i]);	  hdrMap.put(header[i],    rec.formatHeader[i]);    	non-compiled	[CE]  :  expected	77	None	replace
170	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.formatHeader[i]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.formatHeader[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.formatHeader[i]);	  hdrMap.put(header[i],    rec.formatHeader[i]);    	non-compiled	[CE]  :  expected	77	None	replace
171	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.formatHeader[i]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.formatHeader[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.formatHeader[i]);	  hdrMap.put(header[i],    rec.formatHeader[i]);    	non-compiled	[CE]  :  expected	77	None	replace
172	[BUG]  [BUGGY]  hdrMap.put(rec.header[i],  header[i]);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec.header[i],  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec.header[i],  header[i]);	  hdrMap.put(header[i],    rec.formatHeader[i]);    	non-compiled	[CE]  :  expected	77	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	30	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecord();  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecord();  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.getSkipHeaderRecord();  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	30	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	30	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	30	None	replace
177	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	30	None	replace
178	[BUG]  [BUGGY]  int  i  =  0;  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  int  i  =  0;  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	int  i  =  0;  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	30	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header,  rec);  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header,  rec);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header,  rec);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header,    rec);    }    	non-compiled	[CE]  :  expected	35	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(rec,  header);  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(rec,  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(rec,  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header,    rec);    }    	non-compiled	[CE]  :  expected	35	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rec.length;  i++)  {  hdrMap.put(header,  recordNumber);  }  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  rec.length;  i++)  {  hdrMap.put(header,  recordNumber);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  rec.length;  i++)  {  hdrMap.put(header,  recordNumber);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header,    rec);    }    	non-compiled	[CE]  :  expected	35	None	replace
182	[BUG]  [BUGGY]  Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  rec);  }  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  rec);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  rec);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header,    rec);    }    	non-compiled	[CE]  :  expected	35	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(rect,  header);  }  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(rect,  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(rect,  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header,    rec);    }    	non-compiled	[CE]  :  expected	35	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(header,  rec);  }  [CE]  :  expected  [FE]                                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(header,  rec);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(header,  rec);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header,    rec);    }    	non-compiled	[CE]  :  expected	35	None	replace
185	[BUG]  [BUGGY]  hdrMap.put(record[i],  formatHeader[i],  header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  formatHeader[i],  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  formatHeader[i],  header);	  hdrMap.put(header[i],    formatHeader[i],    rec);    	non-compiled	[CE]  :  expected	26	None	replace
186	[BUG]  [BUGGY]  hdrMap.put(rect[i],  formatHeader[i],  header);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect[i],  formatHeader[i],  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect[i],  formatHeader[i],  header);	  hdrMap.put(header[i],    formatHeader[i],    rec);    	non-compiled	[CE]  :  expected	26	None	replace
187	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  this.format);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  this.format);	  hdrMap.put(header[i],    formatHeader[i],    rec);    	non-compiled	[CE]  :  expected	26	None	replace
188	[BUG]  [BUGGY]  hdrMap.put(rect,  formatHeader[i],  header);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect,  formatHeader[i],  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect,  formatHeader[i],  header);	  hdrMap.put(header[i],    formatHeader[i],    rec);    	non-compiled	[CE]  :  expected	26	None	replace
189	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  recordNumber);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  recordNumber);	  hdrMap.put(header[i],    formatHeader[i],    rec);    	non-compiled	[CE]  :  expected	26	None	replace
190	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  record);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  record);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  record);	  hdrMap.put(header[i],    formatHeader[i],    rec);    	non-compiled	[CE]  :  expected	26	None	replace
191	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.getNumberRecord());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.getNumberRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.getNumberRecord());	  hdrMap.put(header[i],    this.format.getNumberRecord());    	non-compiled	[CE]  :  expected	16	None	replace
192	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getLongRecord());  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getLongRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getLongRecord());	  hdrMap.put(header[i],    this.format.getNumberRecord());    	non-compiled	[CE]  :  expected	16	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(recordNumber,    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	32	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecord();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecord();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.getSkipHeaderRecord();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(recordNumber,    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	32	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(recordNumber,    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	32	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(recordNumber,    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	32	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(recordNumber,    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	32	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.size();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.size();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.size();  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(recordNumber,    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	32	None	replace
199	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  2]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  2]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i  +  2]);	  hdrMap.put(header[i],    formatHeader[i    +    1]);    	non-compiled	[CE]  :  expected	27	None	replace
200	[BUG]  [BUGGY]  hdrMap.put(record[i],  formatHeader[i  +  1]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  formatHeader[i  +  1]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  formatHeader[i  +  1]);	  hdrMap.put(header[i],    formatHeader[i    +    1]);    	non-compiled	[CE]  :  expected	27	None	replace
201	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  3]);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  3]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i  +  3]);	  hdrMap.put(header[i],    formatHeader[i    +    1]);    	non-compiled	[CE]  :  expected	27	None	replace
202	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(recordHeader[i]));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(recordHeader[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  Integer(recordHeader[i]));	  hdrMap.put(i,    header[i],    new    Integer(header[i]));    	non-compiled	[CE]  :  expected	74	None	replace
203	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(formatHeader[i]));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(formatHeader[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  Integer(formatHeader[i]));	  hdrMap.put(i,    header[i],    new    Integer(header[i]));    	non-compiled	[CE]  :  expected	74	None	replace
204	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(this.format.getSkipHeaderRecord(i)));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(this.format.getSkipHeaderRecord(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  Integer(this.format.getSkipHeaderRecord(i)));	  hdrMap.put(i,    header[i],    new    Integer(header[i]));    	non-compiled	[CE]  :  expected	74	None	replace
205	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(currentRecord[i]));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(currentRecord[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  Integer(currentRecord[i]));	  hdrMap.put(i,    header[i],    new    Integer(header[i]));    	non-compiled	[CE]  :  expected	74	None	replace
206	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(this.format.getSkipHeaderRecord()));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(this.format.getSkipHeaderRecord()));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  Integer(this.format.getSkipHeaderRecord()));	  hdrMap.put(i,    header[i],    new    Integer(header[i]));    	non-compiled	[CE]  :  expected	74	None	replace
207	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[0]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[0]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[0]);	  hdrMap.put(record[i],    header);    	non-compiled	[CE]  :  expected	49	None	replace
208	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i  +  1]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i  +  1]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i  +  1]);	  hdrMap.put(record[i],    header);    	non-compiled	[CE]  :  expected	49	None	replace
209	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i++]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i++]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i++]);	  hdrMap.put(record[i],    header);    	non-compiled	[CE]  :  expected	49	None	replace
210	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i  +  1));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i  +  1));	  hdrMap.put(i,    header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
211	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i),  rec);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i),  rec);	  hdrMap.put(i,    header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
212	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i),  this.format);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i),  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i),  this.format);	  hdrMap.put(i,    header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
213	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i),  recordNumber);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i),  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i),  recordNumber);	  hdrMap.put(i,    header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
214	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.getRawHeaderRecord());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.getRawHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.getRawHeaderRecord());	  hdrMap.put(header[i],    this.format.getRawHeaderRecord());    	non-compiled	[CE]  :  expected	15	None	replace
215	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getNumberHeaderRecord());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getNumberHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getNumberHeaderRecord());	  hdrMap.put(header[i],    this.format.getRawHeaderRecord());    	non-compiled	[CE]  :  expected	15	None	replace
216	[BUG]  [BUGGY]  hdrMap.put(this.format.getRawHeaderRecord(),  header);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getRawHeaderRecord(),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getRawHeaderRecord(),  header);	  hdrMap.put(header[i],    this.format.getRawHeaderRecord());    	non-compiled	[CE]  :  expected	15	None	replace
217	[BUG]  [BUGGY]  hdrMap.put(record[i],  formatHeader[i++]);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  formatHeader[i++]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  formatHeader[i++]);	  hdrMap.put(header[i],    formatHeader[i++]);    	non-compiled	[CE]  :  expected	29	None	replace
218	[BUG]  [BUGGY]  hdrMap.put(recordNumber[i],  formatHeader[i++]);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(recordNumber[i],  formatHeader[i++]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(recordNumber[i],  formatHeader[i++]);	  hdrMap.put(header[i],    formatHeader[i++]);    	non-compiled	[CE]  :  expected	29	None	replace
219	[BUG]  [BUGGY]  hdrMap.put(i,  formatHeader[i++]);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  formatHeader[i++]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  formatHeader[i++]);	  hdrMap.put(header[i],    formatHeader[i++]);    	non-compiled	[CE]  :  expected	29	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	59	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	59	None	replace
222	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	59	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	59	None	replace
224	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	59	None	replace
225	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord(),  this.format);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord(),  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getSkipHeaderRecord(),  this.format);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    this.format);    	non-compiled	[CE]  :  expected	40	None	replace
226	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format,  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format,  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format,  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    this.format);    	non-compiled	[CE]  :  expected	40	None	replace
227	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  this.format,  rec);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  this.format,  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i),  this.format,  rec);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    this.format);    	non-compiled	[CE]  :  expected	40	None	replace
228	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.valueOf(i),  this.format);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.valueOf(i),  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.valueOf(i),  this.format);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    this.format);    	non-compiled	[CE]  :  expected	40	None	replace
229	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  this.format,  recordNumber);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  this.format,  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i),  this.format,  recordNumber);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    this.format);    	non-compiled	[CE]  :  expected	40	None	replace
230	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.getFormat());  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.getFormat());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.getFormat());	  hdrMap.put(header[i],    this.format.getFormat());    	non-compiled	[CE]  :  expected	17	None	replace
231	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecordName());  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRecordName());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getRecordName());	  hdrMap.put(header[i],    this.format.getFormat());    	non-compiled	[CE]  :  expected	17	None	replace
232	[BUG]  [BUGGY]  hdrMap.put(header[i],  format.getFormat());  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  format.getFormat());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  format.getFormat());	  hdrMap.put(header[i],    this.format.getFormat());    	non-compiled	[CE]  :  expected	17	None	replace
233	[BUG]  [BUGGY]  hdrMap.put(this.format.getHeaderRecord(),  header);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getHeaderRecord(),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getHeaderRecord(),  header);	  hdrMap.put(this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  :  expected	56	None	replace
234	[BUG]  [BUGGY]  hdrMap.put(this.format.getRecordNumber(),  header);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getRecordNumber(),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getRecordNumber(),  header);	  hdrMap.put(this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  :  expected	56	None	replace
235	[BUG]  [BUGGY]  hdrMap.put(header.getName(),  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header.getName(),  this.format.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header.getName(),  this.format.getSkipHeaderRecord());	  hdrMap.put(this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  :  expected	56	None	replace
236	[BUG]  [BUGGY]  hdrMap.put(header.getSkipHeaderRecord(),  this.format);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header.getSkipHeaderRecord(),  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header.getSkipHeaderRecord(),  this.format);	  hdrMap.put(this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  :  expected	56	None	replace
237	[BUG]  [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(),  header,  rec);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(),  header,  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getSkipHeaderRecord(),  header,  rec);	  hdrMap.put(this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  :  expected	56	None	replace
238	[BUG]  [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(),  header[i]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getSkipHeaderRecord(),  header[i]);	  hdrMap.put(this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  :  expected	56	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    formatHeader[i]);    }    	non-compiled	[CE]  :  expected	34	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length  -  2;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    formatHeader[i]);    }    	non-compiled	[CE]  :  expected	34	None	replace
241	[BUG]  [BUGGY]  Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    formatHeader[i]);    }    	non-compiled	[CE]  :  expected	34	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  formatHeader.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  formatHeader.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  formatHeader.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    formatHeader[i]);    }    	non-compiled	[CE]  :  expected	34	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    formatHeader[i]);    }    	non-compiled	[CE]  :  expected	34	None	replace
244	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  formatHeader[i]!=  null)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  formatHeader[i]!=  null)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length  &&  formatHeader[i]!=  null)  {  hdrMap.put(header[i],  formatHeader[i]);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    formatHeader[i]);    }    	non-compiled	[CE]  :  expected	34	None	replace
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],   "   ");  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],   "   ");  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(header[i],   "   ");  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],   "   ");    }    	non-compiled	[CE]  :  expected	62	None	replace
246	[BUG]  [BUGGY]  Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],   "   ");  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],   "   ");  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],   "   ");  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],   "   ");    }    	non-compiled	[CE]  :  expected	62	None	replace
247	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  rec.toString());  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  rec.toString());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  rec.toString());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],   "   ");    }    	non-compiled	[CE]  :  expected	62	None	replace
248	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i++)  {  hdrMap.put(header[i],   "   ");  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i++)  {  hdrMap.put(header[i],   "   ");  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length  -  2;  i++)  {  hdrMap.put(header[i],   "   ");  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],   "   ");    }    	non-compiled	[CE]  :  expected	62	None	replace
249	[BUG]  [BUGGY]  Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	Format.for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],   "   ");    }    	non-compiled	[CE]  :  expected	62	None	replace
250	[BUG]  [BUGGY]  hdrMap.put(i,  new  CSVFormat(recordNumber,  Integer.toString(i)));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  new  CSVFormat(recordNumber,  Integer.toString(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  new  CSVFormat(recordNumber,  Integer.toString(i)));	  hdrMap.put(header[i],    new    CSVFormat(recordNumber,    Integer.toString(i)));    	non-compiled	[CE]  :  expected	82	None	replace
251	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(formatHeader,  Integer.toString(i)));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(formatHeader,  Integer.toString(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(formatHeader,  Integer.toString(i)));	  hdrMap.put(header[i],    new    CSVFormat(recordNumber,    Integer.toString(i)));    	non-compiled	[CE]  :  expected	82	None	replace
252	[BUG]  [BUGGY]  hdrMap.put(rec,  new  CSVFormat(recordNumber,  Integer.toString(i)));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec,  new  CSVFormat(recordNumber,  Integer.toString(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec,  new  CSVFormat(recordNumber,  Integer.toString(i)));	  hdrMap.put(header[i],    new    CSVFormat(recordNumber,    Integer.toString(i)));    	non-compiled	[CE]  :  expected	82	None	replace
253	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(format,  Integer.toString(i)));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(format,  Integer.toString(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(format,  Integer.toString(i)));	  hdrMap.put(header[i],    new    CSVFormat(recordNumber,    Integer.toString(i)));    	non-compiled	[CE]  :  expected	82	None	replace
254	[BUG]  [BUGGY]  hdrMap.put(rect.i,  new  CSVFormat(recordNumber,  Integer.toString(i)));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.i,  new  CSVFormat(recordNumber,  Integer.toString(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.i,  new  CSVFormat(recordNumber,  Integer.toString(i)));	  hdrMap.put(header[i],    new    CSVFormat(recordNumber,    Integer.toString(i)));    	non-compiled	[CE]  :  expected	82	None	replace
255	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format,  Integer.toString(i)));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format,  Integer.toString(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format,  Integer.toString(i)));	  hdrMap.put(header[i],    new    CSVFormat(recordNumber,    Integer.toString(i)));    	non-compiled	[CE]  :  expected	82	None	replace
256	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(record,  Integer.toString(i)));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(record,  Integer.toString(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(record,  Integer.toString(i)));	  hdrMap.put(header[i],    new    CSVFormat(recordNumber,    Integer.toString(i)));    	non-compiled	[CE]  :  expected	82	None	replace
257	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader.toString());  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader.toString());	  hdrMap.put(header[i],    rec.toString());    	non-compiled	[CE]  :  expected	10	None	replace
258	[BUG]  [BUGGY]  hdrMap.put(header[i],  header.toString());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  header.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  header.toString());	  hdrMap.put(header[i],    rec.toString());    	non-compiled	[CE]  :  expected	10	None	replace
259	[BUG]  [BUGGY]  hdrMap.put(header[i],  format.toString());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  format.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  format.toString());	  hdrMap.put(header[i],    rec.toString());    	non-compiled	[CE]  :  expected	10	None	replace
260	[BUG]  [BUGGY]  hdrMap.put(rect.i,  header.toString());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.i,  header.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.i,  header.toString());	  hdrMap.put(header[i],    rec.toString());    	non-compiled	[CE]  :  expected	10	None	replace
261	[BUG]  [BUGGY]  hdrMap.put(header[i],  header);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  header);	  hdrMap.put(rect[i],    header);    	non-compiled	[CE]  :  expected	45	None	replace
262	[BUG]  [BUGGY]  hdrMap.put(header[i],  rect);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rect);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rect);	  hdrMap.put(rect[i],    header);    	non-compiled	[CE]  :  expected	45	None	replace
263	[BUG]  [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i  +  1));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i  +  1));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	41	None	replace
264	[BUG]  [BUGGY]  hdrMap.put(rect.i,  RectangleEdge.valueOf(i  +  1));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.i,  RectangleEdge.valueOf(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.i,  RectangleEdge.valueOf(i  +  1));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	41	None	replace
265	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.valueOf(i  +  1));  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.valueOf(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.valueOf(i  +  1));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	41	None	replace
266	[BUG]  [BUGGY]  hdrMap.put(rect.length[i],  RectangleEdge.valueOf(i  +  1));  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.length[i],  RectangleEdge.valueOf(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.length[i],  RectangleEdge.valueOf(i  +  1));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	41	None	replace
267	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i  +  1]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i  +  1]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  formatHeader[i  +  1]);	  hdrMap.put(i,    header[i],    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	5	None	replace
268	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(i  +  1));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  Integer(i  +  1));	  hdrMap.put(i,    header[i],    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	5	None	replace
269	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i  +  1));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  formatHeader[i  +  1));	  hdrMap.put(i,    header[i],    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	5	None	replace
270	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  rec.valueOf(i  +  1));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  rec.valueOf(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  rec.valueOf(i  +  1));	  hdrMap.put(i,    header[i],    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	5	None	replace
271	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  Integer.toString(recordNumber));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  Integer.toString(recordNumber));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  Integer.toString(recordNumber));	  hdrMap.put(i,    header[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	4	None	replace
272	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.toString(i));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.toString(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleEdge.toString(i));	  hdrMap.put(i,    header[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	4	None	replace
273	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i].toString());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i].toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  formatHeader[i].toString());	  hdrMap.put(i,    header[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	4	None	replace
274	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.toString(rec));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.toString(rec));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleEdge.toString(rec));	  hdrMap.put(i,    header[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	4	None	replace
275	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i].record,  rec);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i].record,  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i].record,  rec);	  hdrMap.put(header[i],    formatHeader[i].record);    	non-compiled	[CE]  :  expected	71	None	replace
276	[BUG]  [BUGGY]  hdrMap.put(rec,  formatHeader[i].record);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec,  formatHeader[i].record);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec,  formatHeader[i].record);	  hdrMap.put(header[i],    formatHeader[i].record);    	non-compiled	[CE]  :  expected	71	None	replace
277	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i].record,  recordNumber);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i].record,  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i].record,  recordNumber);	  hdrMap.put(header[i],    formatHeader[i].record);    	non-compiled	[CE]  :  expected	71	None	replace
278	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.formatHeader[i].record);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.formatHeader[i].record);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.formatHeader[i].record);	  hdrMap.put(header[i],    formatHeader[i].record);    	non-compiled	[CE]  :  expected	71	None	replace
279	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].getName());  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].getName());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].getName());	  hdrMap.put(record[i],    header[i].toString());    	non-compiled	[CE]  :  expected	63	None	replace
280	[BUG]  [BUGGY]  hdrMap.put(header[i],  record[i].toString());  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  record[i].toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  record[i].toString());	  hdrMap.put(record[i],    header[i].toString());    	non-compiled	[CE]  :  expected	63	None	replace
281	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].getHeader());  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].getHeader());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].getHeader());	  hdrMap.put(record[i],    header[i].toString());    	non-compiled	[CE]  :  expected	63	None	replace
282	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].getHeaderName());  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].getHeaderName());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].getHeaderName());	  hdrMap.put(record[i],    header[i].toString());    	non-compiled	[CE]  :  expected	63	None	replace
283	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getHeaderRecord(i),  header);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getHeaderRecord(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getHeaderRecord(i),  header);	  hdrMap.put(record[i],    this.format.getHeaderRecord(i));    	non-compiled	[CE]  :  expected	65	None	replace
284	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getHeaderRecord(i),  header[i]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getHeaderRecord(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getHeaderRecord(i),  header[i]);	  hdrMap.put(record[i],    this.format.getHeaderRecord(i));    	non-compiled	[CE]  :  expected	65	None	replace
285	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getHeaderRecord(i  +  1));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getHeaderRecord(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getHeaderRecord(i  +  1));	  hdrMap.put(record[i],    this.format.getHeaderRecord(i));    	non-compiled	[CE]  :  expected	65	None	replace
286	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getRecord(i));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getRecord(i));	  hdrMap.put(record[i],    this.format.getHeaderRecord(i));    	non-compiled	[CE]  :  expected	65	None	replace
287	[BUG]  [BUGGY]  hdrMap.put(header[i],  format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  format.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  format.getSkipHeaderRecord());	  hdrMap.put(header[i],    rec.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	13	None	replace
288	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.getRecordNumber());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.getRecordNumber());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.getRecordNumber());	  hdrMap.put(header[i],    rec.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	13	None	replace
289	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.getSkipHeaderRecord(i));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.getSkipHeaderRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.getSkipHeaderRecord(i));	  hdrMap.put(header[i],    rec.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	13	None	replace
290	[BUG]  [BUGGY]  hdrMap.put(rect[i],  RectangleEdge.valueOf(header[i]),  header);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect[i],  RectangleEdge.valueOf(header[i]),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect[i],  RectangleEdge.valueOf(header[i]),  header);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    rec);    	non-compiled	[CE]  :  expected	37	None	replace
291	[BUG]  [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(i),  header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  RectangleEdge.valueOf(i),  header);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    rec);    	non-compiled	[CE]  :  expected	37	None	replace
292	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  formatHeader);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  formatHeader);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i),  formatHeader);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    rec);    	non-compiled	[CE]  :  expected	37	None	replace
293	[BUG]  [BUGGY]  hdrMap.put(rect[i],  RectangleEdge.valueOf(i),  header);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect[i],  RectangleEdge.valueOf(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect[i],  RectangleEdge.valueOf(i),  header);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    rec);    	non-compiled	[CE]  :  expected	37	None	replace
294	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  format.valueOf(i));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  format.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  format.valueOf(i));	  hdrMap.put(i,    header[i],    rec.valueOf(i));    	non-compiled	[CE]  :  expected	3	None	replace
295	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  formatHeader.valueOf(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  formatHeader.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  formatHeader.valueOf(i));	  hdrMap.put(i,    header[i],    rec.valueOf(i));    	non-compiled	[CE]  :  expected	3	None	replace
296	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  rec.valueOf(i),  header[i]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  rec.valueOf(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  rec.valueOf(i),  header[i]);	  hdrMap.put(i,    header[i],    rec.valueOf(i));    	non-compiled	[CE]  :  expected	3	None	replace
297	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  formatHeader[i]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  formatHeader[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  formatHeader[i]);	  hdrMap.put(record,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	73	None	replace
298	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  Integer.valueOf(recordNumber));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  Integer.valueOf(recordNumber));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  Integer.valueOf(recordNumber));	  hdrMap.put(record,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	73	None	replace
299	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  this.format.getSkipHeaderRecord(i));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  this.format.getSkipHeaderRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  this.format.getSkipHeaderRecord(i));	  hdrMap.put(record,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	73	None	replace
300	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  Integer.toString(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  Integer.toString(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  Integer.toString(i));	  hdrMap.put(record,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	73	None	replace
301	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  Integer.valueOf(i  +  1));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  Integer.valueOf(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  Integer.valueOf(i  +  1));	  hdrMap.put(record,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	73	None	replace
302	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecordHeader());  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRecordHeader());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getRecordHeader());	  hdrMap.put(header[i],    this.format.getRecordNumber());    	non-compiled	[CE]  :  expected	12	None	replace
303	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecordIndex());  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRecordIndex());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getRecordIndex());	  hdrMap.put(header[i],    this.format.getRecordNumber());    	non-compiled	[CE]  :  expected	12	None	replace
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	61	None	replace
305	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	61	None	replace
306	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	61	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	61	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getHeaderRecord()));  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	61	None	replace
309	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	61	None	replace
310	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.toString(i),  rec);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.toString(i),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.toString(i),  rec);	  hdrMap.put(header[i],    RectangleEdge.toString(i));    	non-compiled	[CE]  :  expected	11	None	replace
311	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.toString(i),  this.format);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.toString(i),  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.toString(i),  this.format);	  hdrMap.put(header[i],    RectangleEdge.toString(i));    	non-compiled	[CE]  :  expected	11	None	replace
312	[BUG]  [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.toString(i));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.toString(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.getHeader(i),  RectangleEdge.toString(i));	  hdrMap.put(header[i],    RectangleEdge.toString(i));    	non-compiled	[CE]  :  expected	11	None	replace
313	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.toString(i),  header[i]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.toString(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.toString(i),  header[i]);	  hdrMap.put(header[i],    RectangleEdge.toString(i));    	non-compiled	[CE]  :  expected	11	None	replace
314	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.valueOf(0));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.valueOf(0));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.valueOf(0));	  hdrMap.put(header[i],    RectangleEdge.valueOf(0));    	non-compiled	[CE]  :  expected	43	None	replace
315	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.MAX_VALUE);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.MAX_VALUE);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.MAX_VALUE);	  hdrMap.put(header[i],    RectangleEdge.valueOf(0));    	non-compiled	[CE]  :  expected	43	None	replace
316	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(0),  header[i]);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(0),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(0),  header[i]);	  hdrMap.put(header[i],    RectangleEdge.valueOf(0));    	non-compiled	[CE]  :  expected	43	None	replace
317	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.VALUE_STRING);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.VALUE_STRING);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.VALUE_STRING);	  hdrMap.put(header[i],    RectangleEdge.valueOf(0));    	non-compiled	[CE]  :  expected	43	None	replace
318	[BUG]  [BUGGY]  hdrMap.put(record[i],  formatHeader[i  +  1));  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  formatHeader[i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  formatHeader[i  +  1));	  hdrMap.put(header[i],    formatHeader[i    +    1));    	non-compiled	[CE]  :  expected	83	None	replace
319	[BUG]  [BUGGY]  hdrMap.put(i,  header[i  +  1]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i  +  1]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i  +  1]);	  hdrMap.put(header[i],    formatHeader[i    +    1));    	non-compiled	[CE]  :  expected	83	None	replace
320	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE,  header[i]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE,  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstants.NONE,  header[i]);	  hdrMap.put(i,    header[i],    RectangleConstants.NONE);    	non-compiled	[CE]  :  expected	6	None	replace
321	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE,  rec);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE,  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstants.NONE,  rec);	  hdrMap.put(i,    header[i],    RectangleConstants.NONE);    	non-compiled	[CE]  :  expected	6	None	replace
322	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE,  this.format);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE,  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstants.NONE,  this.format);	  hdrMap.put(i,    header[i],    RectangleConstants.NONE);    	non-compiled	[CE]  :  expected	6	None	replace
323	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE,  true);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE,  true);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstants.NONE,  true);	  hdrMap.put(i,    header[i],    RectangleConstants.NONE);    	non-compiled	[CE]  :  expected	6	None	replace
324	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  Integer.MAX_VALUE);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  Integer.MAX_VALUE);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  Integer.MAX_VALUE);	  hdrMap.put(header[i],    Integer.MAX_VALUE);    	non-compiled	[CE]  :  expected	58	None	replace
325	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.MAX_VALUE,  header[i]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.MAX_VALUE,  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.MAX_VALUE,  header[i]);	  hdrMap.put(header[i],    Integer.MAX_VALUE);    	non-compiled	[CE]  :  expected	58	None	replace
326	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleConstants.MAX_VALUE);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleConstants.MAX_VALUE);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleConstants.MAX_VALUE);	  hdrMap.put(header[i],    Integer.MAX_VALUE);    	non-compiled	[CE]  :  expected	58	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  record.length;  i++)  {  hdrMap.put(record,  header);  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  record.length;  i++)  {  hdrMap.put(record,  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  record.length;  i++)  {  hdrMap.put(record,  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    header);    }    	non-compiled	[CE]  :  expected	60	None	replace
328	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(record,  header);  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(record,  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(record,  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    header);    }    	non-compiled	[CE]  :  expected	60	None	replace
329	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(record,  header);  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(record,  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  hdrMap.put(record,  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    header);    }    	non-compiled	[CE]  :  expected	60	None	replace
330	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(record,  header);  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(record,  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.header.length;  i++)  {  hdrMap.put(record,  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    header);    }    	non-compiled	[CE]  :  expected	60	None	replace
331	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rec.length;  i++)  {  hdrMap.put(record,  header);  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  rec.length;  i++)  {  hdrMap.put(record,  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  rec.length;  i++)  {  hdrMap.put(record,  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    header);    }    	non-compiled	[CE]  :  expected	60	None	replace
332	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  record.length;  i++)  {  hdrMap.put(record,  header);  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  record.length;  i++)  {  hdrMap.put(record,  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	For(int  i  =  0;  i  <  record.length;  i++)  {  hdrMap.put(record,  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    header);    }    	non-compiled	[CE]  :  expected	60	None	replace
333	[BUG]  [BUGGY]  hdrMap.put(record[i],  Integer.toHexString(i  +  1));  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  Integer.toHexString(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  Integer.toHexString(i  +  1));	  hdrMap.put(record[i],    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	18	None	replace
334	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeaderRecord(i));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeaderRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getHeaderRecord(i));	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord(i));    	non-compiled	[CE]  :  expected	69	None	replace
335	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord(i),  rec);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord(i),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord(i),  rec);	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord(i));    	non-compiled	[CE]  :  expected	69	None	replace
336	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  rec.getSkipHeaderRecord(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  rec.getSkipHeaderRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  rec.getSkipHeaderRecord(i));	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord(i));    	non-compiled	[CE]  :  expected	69	None	replace
337	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord(i  +  1));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord(i  +  1));	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord(i));    	non-compiled	[CE]  :  expected	69	None	replace
338	[BUG]  [BUGGY]  hdrMap.put(i,  this.format.getSkipHeaderRecord(i));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  this.format.getSkipHeaderRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  this.format.getSkipHeaderRecord(i));	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord(i));    	non-compiled	[CE]  :  expected	69	None	replace
339	[BUG]  [BUGGY]  hdrMap.put(header[i],  record[i]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  record[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  record[i]);	  hdrMap.put(record[i],    header[i]);    	non-compiled	[CE]  :  expected	21	None	replace
340	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i],  this.format);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i],  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i],  this.format);	  hdrMap.put(record[i],    header[i]);    	non-compiled	[CE]  :  expected	21	None	replace
341	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i],  formatHeader[i]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i],  formatHeader[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i],  formatHeader[i]);	  hdrMap.put(record[i],    header[i]);    	non-compiled	[CE]  :  expected	21	None	replace
342	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i],  rec);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i],  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  formatHeader[i],  rec);	  hdrMap.put(i,    header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	1	None	replace
343	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  rec.formatHeader[i]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  rec.formatHeader[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  rec.formatHeader[i]);	  hdrMap.put(i,    header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	1	None	replace
344	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i],  this.format);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i],  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  formatHeader[i],  this.format);	  hdrMap.put(i,    header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	1	None	replace
345	[BUG]  [BUGGY]  hdrMap.put(i,  Integer.valueOf(i));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  Integer.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  Integer.valueOf(i));	  hdrMap.put(i,    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	20	None	replace
346	[BUG]  [BUGGY]  hdrMap.put(i,  Integer.toHexString(i  +  1));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  Integer.toHexString(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  Integer.toHexString(i  +  1));	  hdrMap.put(i,    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	20	None	replace
347	[BUG]  [BUGGY]  hdrMap.put(header[i],  format,  recordNumber);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  format,  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  format,  recordNumber);	  hdrMap.put(header[i],    format);    	non-compiled	[CE]  :  expected	50	None	replace
348	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i  +  1));  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i  +  1));	  hdrMap.put(record[i],    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	18	None	replace
349	[BUG]  [BUGGY]  hdrMap.put(record.getHeader(i),  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record.getHeader(i),  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record.getHeader(i),  RectangleEdge.valueOf(i));	  hdrMap.put(rect.getHeader(i),    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	36	None	replace
350	[BUG]  [BUGGY]  hdrMap.put(this.format.getHeader(i),  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getHeader(i),  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getHeader(i),  RectangleEdge.valueOf(i));	  hdrMap.put(rect.getHeader(i),    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	36	None	replace
351	[BUG]  [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(header[i]));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(header[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(header[i]));	  hdrMap.put(rect.getHeader(i),    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	36	None	replace
352	[BUG]  [BUGGY]  hdrMap.put(rec.getHeader(i),  RectangleEdge.valueOf(header[i]));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec.getHeader(i),  RectangleEdge.valueOf(header[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec.getHeader(i),  RectangleEdge.valueOf(header[i]));	  hdrMap.put(rect.getHeader(i),    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	36	None	replace
353	[BUG]  [BUGGY]  hdrMap.put(record[i],  formatHeader[i].record);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  formatHeader[i].record);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  formatHeader[i].record);	  hdrMap.put(header[i],    formatHeader[i].record);    	non-compiled	[CE]  :  expected	71	None	replace
354	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i].record  +  1);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i].record  +  1);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i].record  +  1);	  hdrMap.put(header[i],    formatHeader[i].record);    	non-compiled	[CE]  :  expected	71	None	replace
355	[BUG]  [BUGGY]  hdrMap.put(rect[i],  header.toString());  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect[i],  header.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect[i],  header.toString());	  hdrMap.put(header[i],    rec.toString());    	non-compiled	[CE]  :  expected	10	None	replace
356	[BUG]  [BUGGY]  hdrMap.put(header[i],  record.toString());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  record.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  record.toString());	  hdrMap.put(header[i],    rec.toString());    	non-compiled	[CE]  :  expected	10	None	replace
357	[BUG]  [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(i  +  1),  header);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(i  +  1),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  Integer.valueOf(i  +  1),  header);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
358	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordNumber,  header.length);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordNumber,  header.length);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordNumber,  header.length);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
359	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordHeader.length;  i++)  {  hdrMap.put(record,  header);  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  recordHeader.length;  i++)  {  hdrMap.put(record,  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  recordHeader.length;  i++)  {  hdrMap.put(record,  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    header);    }    	non-compiled	[CE]  :  expected	60	None	replace
360	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(record,  header);  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(record,  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	For(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(record,  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    header);    }    	non-compiled	[CE]  :  expected	60	None	replace
361	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordCount;  i++)  {  hdrMap.put(record,  header);  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  recordCount;  i++)  {  hdrMap.put(record,  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  recordCount;  i++)  {  hdrMap.put(record,  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    header);    }    	non-compiled	[CE]  :  expected	60	None	replace
362	[BUG]  [BUGGY]  hdrMap.put(i,  this.format.getSkipHeaderRecord(i),  header);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  this.format.getSkipHeaderRecord(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  this.format.getSkipHeaderRecord(i),  header);	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord(i));    	non-compiled	[CE]  :  expected	69	None	replace
363	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getHeaderRecord()));  }  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	59	None	replace
364	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	59	None	replace
365	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  null);  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  null);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  null);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],   "   ");    }    	non-compiled	[CE]  :  expected	62	None	replace
366	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getHeaderRecord());  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],   "   ");    }    	non-compiled	[CE]  :  expected	62	None	replace
367	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getRecordName());  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getRecordName());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getRecordName());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],   "   ");    }    	non-compiled	[CE]  :  expected	62	None	replace
368	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getRecordNumber());  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getRecordNumber());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getRecordNumber());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],   "   ");    }    	non-compiled	[CE]  :  expected	62	None	replace
369	[BUG]  [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(0));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(0));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  RectangleEdge.valueOf(0));	  hdrMap.put(header[i],    RectangleEdge.valueOf(0));    	non-compiled	[CE]  :  expected	43	None	replace
370	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec,  RectangleEdge.valueOf(0));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec,  RectangleEdge.valueOf(0));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec,  RectangleEdge.valueOf(0));	  hdrMap.put(header[i],    RectangleEdge.valueOf(0));    	non-compiled	[CE]  :  expected	43	None	replace
371	[BUG]  [BUGGY]  hdrMap.put(i,  formatHeader[i],  header[i]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  formatHeader[i],  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  formatHeader[i],  header[i]);	  hdrMap.put(i,    header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	1	None	replace
372	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i],  recordNumber);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i],  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  formatHeader[i],  recordNumber);	  hdrMap.put(i,    header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	1	None	replace
373	[BUG]  [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(i),  header[i]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  RectangleEdge.valueOf(i),  header[i]);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    header[i]);    	non-compiled	[CE]  :  expected	39	None	replace
374	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec,  RectangleEdge.valueOf(i),  header[i]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec,  RectangleEdge.valueOf(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec,  RectangleEdge.valueOf(i),  header[i]);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    header[i]);    	non-compiled	[CE]  :  expected	39	None	replace
375	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  recordNumber[i]);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  recordNumber[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i),  recordNumber[i]);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    header[i]);    	non-compiled	[CE]  :  expected	39	None	replace
376	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.VALUE_STRING);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.VALUE_STRING);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleEdge.VALUE_STRING);	  hdrMap.put(i,    header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
377	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i],  Integer.valueOf(0));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i],  Integer.valueOf(0));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  formatHeader[i],  Integer.valueOf(0));	  hdrMap.put(i,    header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	42	None	replace
378	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i],  Integer.MAX_VALUE);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i],  Integer.MAX_VALUE);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  formatHeader[i],  Integer.MAX_VALUE);	  hdrMap.put(i,    header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	42	None	replace
379	[BUG]  [BUGGY]  hdrMap.put(record[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	51	None	replace
380	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecord(i)));  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecord(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getRecord(i)));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	51	None	replace
381	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecordName(i)));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecordName(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getRecordName(i)));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	51	None	replace
382	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].getHeader(i));  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].getHeader(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].getHeader(i));	  hdrMap.put(record[i],    header[i].toString());    	non-compiled	[CE]  :  expected	63	None	replace
383	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].getHeader(i).toString());  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].getHeader(i).toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].getHeader(i).toString());	  hdrMap.put(record[i],    header[i].toString());    	non-compiled	[CE]  :  expected	63	None	replace
384	[BUG]  [BUGGY]  hdrMap.put(record[i],  header,  this.format);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header,  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header,  this.format);	  hdrMap.put(record[i],    header);    	non-compiled	[CE]  :  expected	49	None	replace
385	[BUG]  [BUGGY]  hdrMap.put(this.format.getHeaderRecord(i),  header);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getHeaderRecord(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getHeaderRecord(i),  header);	  hdrMap.put(header[i],    this.format.getHeaderRecord());    	non-compiled	[CE]  :  expected	14	None	replace
386	[BUG]  [BUGGY]  hdrMap.put(this.format,  header[i],  this.format.getRecordNumber());  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format,  header[i],  this.format.getRecordNumber());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format,  header[i],  this.format.getRecordNumber());	  hdrMap.put(header[i],    this.format.getRecordNumber());    	non-compiled	[CE]  :  expected	12	None	replace
387	[BUG]  [BUGGY]  hdrMap.put(this.format.getRecordHeader(i),  header);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getRecordHeader(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getRecordHeader(i),  header);	  hdrMap.put(header[i],    this.format.getRecordNumber());    	non-compiled	[CE]  :  expected	12	None	replace
388	[BUG]  [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(i  +  1));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  RectangleEdge.valueOf(i  +  1));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	41	None	replace
389	[BUG]  [BUGGY]  hdrMap.put(record,  RectangleEdge.valueOf(i  +  1));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  RectangleEdge.valueOf(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  RectangleEdge.valueOf(i  +  1));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	41	None	replace
390	[BUG]  [BUGGY]  hdrMap.put(i,  RectangleEdge.valueOf(header[i  +  1));  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  RectangleEdge.valueOf(header[i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  RectangleEdge.valueOf(header[i  +  1));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	41	None	replace
391	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i  +  1),  header[i]);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i  +  1),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i  +  1),  header[i]);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	41	None	replace
392	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format,  header[i]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format,  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format,  header[i]);	  hdrMap.put(header[i],    this.format);    	non-compiled	[CE]  :  expected	47	None	replace
393	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format,  this.recordNumber);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format,  this.recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format,  this.recordNumber);	  hdrMap.put(header[i],    this.format);    	non-compiled	[CE]  :  expected	47	None	replace
394	[BUG]  [BUGGY]  hdrMap.put(rec.formatHeader[i],  header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec.formatHeader[i],  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec.formatHeader[i],  header);	  hdrMap.put(header[i],    rec.formatHeader[i]);    	non-compiled	[CE]  :  expected	77	None	replace
395	[BUG]  [BUGGY]  hdrMap.put(rect.formatHeader[i],  header[i]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.formatHeader[i],  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.formatHeader[i],  header[i]);	  hdrMap.put(header[i],    rec.formatHeader[i]);    	non-compiled	[CE]  :  expected	77	None	replace
396	[BUG]  [BUGGY]  hdrMap.put(rect.header[i],  header[i]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.header[i],  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.header[i],  header[i]);	  hdrMap.put(header[i],    rec.formatHeader[i]);    	non-compiled	[CE]  :  expected	77	None	replace
397	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  this.record);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  this.record);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  this.record);	  hdrMap.put(header[i],    formatHeader[i],    rec);    	non-compiled	[CE]  :  expected	26	None	replace
398	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader.getSkipHeaderRecord());  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader.getSkipHeaderRecord());	  hdrMap.put(header[i],    rec.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	13	None	replace
399	[BUG]  [BUGGY]  hdrMap.put(rect.getHeader(i),  header.getSkipHeaderRecord());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.getHeader(i),  header.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.getHeader(i),  header.getSkipHeaderRecord());	  hdrMap.put(header[i],    rec.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	13	None	replace
400	[BUG]  [BUGGY]  hdrMap.put(record[i],  header.getSkipHeaderRecord());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header.getSkipHeaderRecord());	  hdrMap.put(header[i],    rec.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	13	None	replace
401	[BUG]  [BUGGY]  hdrMap.put(rect.getSkipHeaderRecord(i),  header);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.getSkipHeaderRecord(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.getSkipHeaderRecord(i),  header);	  hdrMap.put(header[i],    rec.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	13	None	replace
402	[BUG]  [BUGGY]  hdrMap.put(i,  this.format.getHeader(i),  header);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  this.format.getHeader(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  this.format.getHeader(i),  header);	  hdrMap.put(i,    header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	75	None	replace
403	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  RectangleConstants.NONE);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  RectangleConstants.NONE);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  RectangleConstants.NONE);	  hdrMap.put(i,    header[i],    RectangleConstants.NONE);    	non-compiled	[CE]  :  expected	6	None	replace
404	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE,  header[i++]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE,  header[i++]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstants.NONE,  header[i++]);	  hdrMap.put(i,    header[i],    RectangleConstants.NONE);    	non-compiled	[CE]  :  expected	6	None	replace
405	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE,  recordNumber);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE,  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstants.NONE,  recordNumber);	  hdrMap.put(i,    header[i],    RectangleConstants.NONE);    	non-compiled	[CE]  :  expected	6	None	replace
406	[BUG]  [BUGGY]  hdrMap.put(this.format,  header[i],  this.format.getFormatRecord());  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format,  header[i],  this.format.getFormatRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format,  header[i],  this.format.getFormatRecord());	  hdrMap.put(header[i],    this.format.getFormatRecord());    	non-compiled	[CE]  :  expected	79	None	replace
407	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getFormatRecord());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getFormatRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getFormatRecord());	  hdrMap.put(header[i],    this.format.getFormatRecord());    	non-compiled	[CE]  :  expected	79	None	replace
408	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  record);  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  record);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  record);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header,    rec);    }    	non-compiled	[CE]  :  expected	35	None	replace
409	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  recordNumber);  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  recordNumber);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  recordNumber);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header,    rec);    }    	non-compiled	[CE]  :  expected	35	None	replace
410	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(header,  rec);  }  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(header,  rec);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(header,  rec);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header,    rec);    }    	non-compiled	[CE]  :  expected	35	None	replace
411	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  rec);  }  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  rec);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  rec);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header,    rec);    }    	non-compiled	[CE]  :  expected	35	None	replace
412	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  new  CSVRecord(rec));  }  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  new  CSVRecord(rec));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  new  CSVRecord(rec));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header,    rec);    }    	non-compiled	[CE]  :  expected	35	None	replace
413	[BUG]  [BUGGY]  hdrMap.put(record[i],  RectangleEdge.toString(i));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  RectangleEdge.toString(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  RectangleEdge.toString(i));	  hdrMap.put(header[i],    RectangleEdge.toString(i));    	non-compiled	[CE]  :  expected	11	None	replace
414	[BUG]  [BUGGY]  hdrMap.put(record,  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  this.format.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  this.format.getSkipHeaderRecord());	  hdrMap.put(header,    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	80	None	replace
415	[BUG]  [BUGGY]  hdrMap.put(header,  this.format.getRecord(i));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  this.format.getRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  this.format.getRecord(i));	  hdrMap.put(header,    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	80	None	replace
416	[BUG]  [BUGGY]  hdrMap.put(header,  this.format.getFormat());  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  this.format.getFormat());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  this.format.getFormat());	  hdrMap.put(header,    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	80	None	replace
417	[BUG]  [BUGGY]  hdrMap.put(header,  this.format.getHeaderRecord(i));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  this.format.getHeaderRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  this.format.getHeaderRecord(i));	  hdrMap.put(header,    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	80	None	replace
418	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    formatHeader[i]);    }    	non-compiled	[CE]  :  expected	34	None	replace
419	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i].record);  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i].record);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i].record);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    formatHeader[i]);    }    	non-compiled	[CE]  :  expected	34	None	replace
420	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    formatHeader[i]);    }    	non-compiled	[CE]  :  expected	34	None	replace
421	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    formatHeader[i]);    }    	non-compiled	[CE]  :  expected	34	None	replace
422	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  hdrMap.put(header[i],  formatHeader[i]);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    formatHeader[i]);    }    	non-compiled	[CE]  :  expected	34	None	replace
423	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.toString(i  +  1),  header[i]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.toString(i  +  1),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.toString(i  +  1),  header[i]);	  hdrMap.put(header[i],    Integer.toString(i    +    1));    	non-compiled	[CE]  :  expected	19	None	replace
424	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.toString(i  +  1),  recordNumber);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.toString(i  +  1),  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.toString(i  +  1),  recordNumber);	  hdrMap.put(header[i],    Integer.toString(i    +    1));    	non-compiled	[CE]  :  expected	19	None	replace
425	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.toString(i  +  1)+  1);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.toString(i  +  1)+  1);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.toString(i  +  1)+  1);	  hdrMap.put(header[i],    Integer.toString(i    +    1));    	non-compiled	[CE]  :  expected	19	None	replace
426	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.toString(i));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.toString(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.toString(i));	  hdrMap.put(header[i],    formatHeader.toString(i));    	non-compiled	[CE]  :  expected	53	None	replace
427	[BUG]  [BUGGY]  hdrMap.put(header[i],  format.toString(i));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  format.toString(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  format.toString(i));	  hdrMap.put(header[i],    formatHeader.toString(i));    	non-compiled	[CE]  :  expected	53	None	replace
428	[BUG]  [BUGGY]  hdrMap.put(i,  formatHeader.toString(header[i]));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  formatHeader.toString(header[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  formatHeader.toString(header[i]));	  hdrMap.put(header[i],    formatHeader.toString(i));    	non-compiled	[CE]  :  expected	53	None	replace
429	[BUG]  [BUGGY]  hdrMap.put(this.format.getHeader(i),  header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getHeader(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getHeader(i),  header);	  hdrMap.put(header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	85	None	replace
430	[BUG]  [BUGGY]  hdrMap.put(this.format.getHeader(i));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getHeader(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getHeader(i));	  hdrMap.put(header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	85	None	replace
431	[BUG]  [BUGGY]  hdrMap.put(this.format,  header[i]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format,  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format,  header[i]);	  hdrMap.put(header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	85	None	replace
432	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  rec.toString());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  rec.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  rec.toString());	  hdrMap.put(i,    header[i],    rec.toString());    	non-compiled	[CE]  :  expected	7	None	replace
433	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  this.header[i]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  this.header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  this.header[i]);	  hdrMap.put(header[i],    formatHeader[i],    header[i]);    	non-compiled	[CE]  :  expected	76	None	replace
434	[BUG]  [BUGGY]  hdrMap.put(rect[i],  RectangleEdge.valueOf(header[i]));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect[i],  RectangleEdge.valueOf(header[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect[i],  RectangleEdge.valueOf(header[i]));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    rec);    	non-compiled	[CE]  :  expected	37	None	replace
435	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	61	None	replace
436	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getHeaderRecord()));  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	61	None	replace
437	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header[i  +  1]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header[i  +  1]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(0),  header[i  +  1]);	  hdrMap.put(header[i],    Integer.valueOf(0),    header[i]);    	non-compiled	[CE]  :  expected	44	None	replace
438	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header[i]  +  1);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header[i]  +  1);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(0),  header[i]  +  1);	  hdrMap.put(header[i],    Integer.valueOf(0),    header[i]);    	non-compiled	[CE]  :  expected	44	None	replace
439	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  11]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  11]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i  +  11]);	  hdrMap.put(header[i],    formatHeader[i    +    1]);    	non-compiled	[CE]  :  expected	27	None	replace
440	[BUG]  [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(),  header,  i);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(),  header,  i);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getSkipHeaderRecord(),  header,  i);	  hdrMap.put(this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  :  expected	56	None	replace
441	[BUG]  [BUGGY]  hdrMap.put(this.format.getRecordName(),  header);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getRecordName(),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getRecordName(),  header);	  hdrMap.put(this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  :  expected	56	None	replace
442	[BUG]  [BUGGY]  hdrMap.put(this.format.getRecordName(i),  header);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getRecordName(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getRecordName(i),  header);	  hdrMap.put(this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  :  expected	56	None	replace
443	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec,  Integer.valueOf(i));  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec,  Integer.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec,  Integer.valueOf(i));	  hdrMap.put(record,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	73	None	replace
444	[BUG]  [BUGGY]  hdrMap.put(header,  record[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  record[i],  Integer.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  record[i],  Integer.valueOf(i));	  hdrMap.put(record,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	73	None	replace
445	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getFormat());  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getFormat());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getFormat());	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	68	None	replace
446	[BUG]  [BUGGY]  hdrMap.put(i,  this.format.getHeaderRecord(header[i]));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  this.format.getHeaderRecord(header[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  this.format.getHeaderRecord(header[i]));	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	68	None	replace
447	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeaderRecord(header[i]));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeaderRecord(header[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getHeaderRecord(header[i]));	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	68	None	replace
448	[BUG]  [BUGGY]  hdrMap.put(header[i],  null);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  null);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  null);	  hdrMap.put(header[i],    Integer.MAX_VALUE);    	non-compiled	[CE]  :  expected	58	None	replace
449	[BUG]  [BUGGY]  hdrMap.put(recordHeader[i],  new  CSVFormat(recordNumber,  Integer.toString(i)));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(recordHeader[i],  new  CSVFormat(recordNumber,  Integer.toString(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(recordHeader[i],  new  CSVFormat(recordNumber,  Integer.toString(i)));	  hdrMap.put(header[i],    new    CSVFormat(recordNumber,    Integer.toString(i)));    	non-compiled	[CE]  :  expected	82	None	replace
450	[BUG]  [BUGGY]  hdrMap.put(record,  new  CSVFormat(recordNumber,  Integer.toString(i)));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  new  CSVFormat(recordNumber,  Integer.toString(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  new  CSVFormat(recordNumber,  Integer.toString(i)));	  hdrMap.put(header[i],    new    CSVFormat(recordNumber,    Integer.toString(i)));    	non-compiled	[CE]  :  expected	82	None	replace
451	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(recordNumber,  formatHeader,  Integer.toString(i)));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(recordNumber,  formatHeader,  Integer.toString(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(recordNumber,  formatHeader,  Integer.toString(i)));	  hdrMap.put(header[i],    new    CSVFormat(recordNumber,    Integer.toString(i)));    	non-compiled	[CE]  :  expected	82	None	replace
452	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordHeader[i]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordHeader[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordHeader[i]);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    header[i]);    	non-compiled	[CE]  :  expected	54	None	replace
453	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  header[i  +  1]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  header[i  +  1]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i  +  1),  header[i  +  1]);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    header[i]);    	non-compiled	[CE]  :  expected	54	None	replace
454	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  header[i++]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  header[i++]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i  +  1),  header[i++]);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    header[i]);    	non-compiled	[CE]  :  expected	54	None	replace
455	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  RectangleConstraint.NONE);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  RectangleConstraint.NONE);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  RectangleConstraint.NONE);	  hdrMap.put(i,    header[i],    RectangleConstraint.NONE);    	non-compiled	[CE]  :  expected	70	None	replace
456	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  header[i++]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  header[i++]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  header[i++]);	  hdrMap.put(i,    header[i],    RectangleConstraint.NONE);    	non-compiled	[CE]  :  expected	70	None	replace
457	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  header[i].record);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  header[i].record);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstraint.NONE,  header[i].record);	  hdrMap.put(i,    header[i],    RectangleConstraint.NONE);    	non-compiled	[CE]  :  expected	70	None	replace
458	[BUG]  [BUGGY]  hdrMap.put(rec,  header[i],  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec,  header[i],  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec,  header[i],  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    rec,    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	67	None	replace
459	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord(),  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord(),  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getSkipHeaderRecord(),  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    rec,    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	67	None	replace
460	[BUG]  [BUGGY]  hdrMap.put(header[i],  record,  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  record,  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  record,  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    rec,    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	67	None	replace
461	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(recordNumber,  this.format.getHeaderRecord());  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(recordNumber,  this.format.getHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(recordNumber,  this.format.getHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(recordNumber,    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	32	None	replace
462	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(recordHeader,  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(recordHeader,  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(recordHeader,  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(recordNumber,    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	32	None	replace
463	[BUG]  [BUGGY]  hdrMap.put(rec.string[i],  header.valueOf(i));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec.string[i],  header.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec.string[i],  header.valueOf(i));	  hdrMap.put(header[i],    rec.valueOf(i));    	non-compiled	[CE]  :  expected	38	None	replace
464	[BUG]  [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(i,  header.length));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(i,  header.length));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  RectangleEdge.valueOf(i,  header.length));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i,    header.length));    	non-compiled	[CE]  :  expected	81	None	replace
465	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length),  recordNumber);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length),  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length),  recordNumber);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i,    header.length));    	non-compiled	[CE]  :  expected	81	None	replace
466	[BUG]  [BUGGY]  hdrMap.put(record,  RectangleEdge.valueOf(i,  header.length));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  RectangleEdge.valueOf(i,  header.length));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  RectangleEdge.valueOf(i,  header.length));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i,    header.length));    	non-compiled	[CE]  :  expected	81	None	replace
467	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.valueOf(i,  header.length));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.valueOf(i,  header.length));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.valueOf(i,  header.length));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i,    header.length));    	non-compiled	[CE]  :  expected	81	None	replace
468	[BUG]  [BUGGY]  hdrMap.put(this.format.getFormatHeaderRecord(),  header);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getFormatHeaderRecord(),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getFormatHeaderRecord(),  header);	  hdrMap.put(header[i],    this.format.getFormatHeaderRecord());    	non-compiled	[CE]  :  expected	78	None	replace
469	[BUG]  [BUGGY]  hdrMap.put(this.format,  header[i],  this.format.getFormatHeaderRecord());  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format,  header[i],  this.format.getFormatHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format,  header[i],  this.format.getFormatHeaderRecord());	  hdrMap.put(header[i],    this.format.getFormatHeaderRecord());    	non-compiled	[CE]  :  expected	78	None	replace
470	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getFormatHeaderRecord());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getFormatHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getFormatHeaderRecord());	  hdrMap.put(header[i],    this.format.getFormatHeaderRecord());    	non-compiled	[CE]  :  expected	78	None	replace
471	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i],  Integer.toString(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i],  Integer.toString(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  formatHeader[i],  Integer.toString(i));	  hdrMap.put(i,    header[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	4	None	replace
472	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.toString(header[i]));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.toString(header[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleEdge.toString(header[i]));	  hdrMap.put(i,    header[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	4	None	replace
473	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.toString(i),  header[i]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.toString(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.toString(i),  header[i]);	  hdrMap.put(header[i],    Integer.toString(i),    rec);    	non-compiled	[CE]  :  expected	9	None	replace
474	[BUG]  [BUGGY]  hdrMap.put(header[i],  recordHeader[i]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  recordHeader[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  recordHeader[i]);	  hdrMap.put(header[i],    recordNumber);    	non-compiled	[CE]  :  expected	52	None	replace
475	[BUG]  [BUGGY]  hdrMap.put(header[i],  recordNumber,  formatHeader);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  recordNumber,  formatHeader);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  recordNumber,  formatHeader);	  hdrMap.put(header[i],    recordNumber);    	non-compiled	[CE]  :  expected	52	None	replace
476	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  record);  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  record);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  record);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    rec);    }    	non-compiled	[CE]  :  expected	31	None	replace
477	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  recordNumber);  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  recordNumber);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  recordNumber);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    rec);    }    	non-compiled	[CE]  :  expected	31	None	replace
478	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(header[i],  rec);  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(header[i],  rec);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  recordNumber;  i++)  {  hdrMap.put(header[i],  rec);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    rec);    }    	non-compiled	[CE]  :  expected	31	None	replace
479	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].getValue());  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].getValue());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].getValue());	  hdrMap.put(record[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	24	None	replace
480	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].header[i].intValue());  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].header[i].intValue());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].header[i].intValue());	  hdrMap.put(record[i],    header[i].intValue());    	non-compiled	[CE]  :  expected	64	None	replace
481	[BUG]  [BUGGY]  hdrMap.put(this.format[i],  RectangleEdge.valueOf(i),  header);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format[i],  RectangleEdge.valueOf(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format[i],  RectangleEdge.valueOf(i),  header);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    this.format);    	non-compiled	[CE]  :  expected	40	None	replace
482	[BUG]  [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(i),  this.format);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(i),  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  RectangleEdge.valueOf(i),  this.format);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    this.format);    	non-compiled	[CE]  :  expected	40	None	replace
483	[BUG]  [BUGGY]  hdrMap.put(record,  RectangleEdge.valueOf(i),  this.format);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  RectangleEdge.valueOf(i),  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  RectangleEdge.valueOf(i),  this.format);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    this.format);    	non-compiled	[CE]  :  expected	40	None	replace
484	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format,  RectangleEdge.valueOf(i),  this.format);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format,  RectangleEdge.valueOf(i),  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format,  RectangleEdge.valueOf(i),  this.format);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    this.format);    	non-compiled	[CE]  :  expected	40	None	replace
485	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format,  RectangleEdge.valueOf(i),  header);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format,  RectangleEdge.valueOf(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format,  RectangleEdge.valueOf(i),  header);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    this.format);    	non-compiled	[CE]  :  expected	40	None	replace
486	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(header[i]),  rec);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(header[i]),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  Integer(header[i]),  rec);	  hdrMap.put(i,    header[i],    new    Integer(header[i]));    	non-compiled	[CE]  :  expected	74	None	replace
487	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(header[i],  rec));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(header[i],  rec));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  Integer(header[i],  rec));	  hdrMap.put(i,    header[i],    new    Integer(header[i]));    	non-compiled	[CE]  :  expected	74	None	replace
488	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(0,  header[i]));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(0,  header[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  Integer(0,  header[i]));	  hdrMap.put(i,    header[i],    new    Integer(header[i]));    	non-compiled	[CE]  :  expected	74	None	replace
489	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(i,  header[i]));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(i,  header[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  Integer(i,  header[i]));	  hdrMap.put(i,    header[i],    new    Integer(header[i]));    	non-compiled	[CE]  :  expected	74	None	replace
490	[BUG]  [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(i),  header);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getSkipHeaderRecord(i),  header);	  hdrMap.put(record[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	23	None	replace
491	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getRecordName(i));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getRecordName(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getRecordName(i));	  hdrMap.put(record[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	23	None	replace
492	[BUG]  [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(),  rec);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getSkipHeaderRecord(),  rec);	  hdrMap.put(record[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	23	None	replace
493	[BUG]  [BUGGY]  hdrMap.put(i,  new  Integer(i  +  1));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  new  Integer(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  new  Integer(i  +  1));	  hdrMap.put(i,    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	20	None	replace
494	[BUG]  [BUGGY]  hdrMap.put(record,  Integer.valueOf(i  +  1));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  Integer.valueOf(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  Integer.valueOf(i  +  1));	  hdrMap.put(i,    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	20	None	replace
495	[BUG]  [BUGGY]  hdrMap.put(this.format.getRecordName(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getRecordName(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getRecordName(i));	  hdrMap.put(header[i],    this.format.getRecordName(i));    	non-compiled	[CE]  :  expected	57	None	replace
496	[BUG]  [BUGGY]  hdrMap.put(this.format,  header[i],  this.format.getRecordName(i));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format,  header[i],  this.format.getRecordName(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format,  header[i],  this.format.getRecordName(i));	  hdrMap.put(header[i],    this.format.getRecordName(i));    	non-compiled	[CE]  :  expected	57	None	replace
497	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i],  formatHeader);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i],  formatHeader);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i],  formatHeader);	  hdrMap.put(record[i],    header[i]);    	non-compiled	[CE]  :  expected	21	None	replace
498	[BUG]  [BUGGY]  hdrMap.put(this.format.getHeaderRecord(i));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getHeaderRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getHeaderRecord(i));	  hdrMap.put(record[i],    this.format.getHeaderRecord(i));    	non-compiled	[CE]  :  expected	65	None	replace
499	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  this.format.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	30	None	replace
500	[BUG]  [BUGGY]  hdrMap.put(this.format.getRawHeaderRecord(i),  header);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getRawHeaderRecord(i),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getRawHeaderRecord(i),  header);	  hdrMap.put(header[i],    this.format.getRawHeaderRecord());    	non-compiled	[CE]  :  expected	15	None	replace
501	[BUG]  [BUGGY]  hdrMap.put(this.format,  header[i],  this.format.getNumberRecord());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format,  header[i],  this.format.getNumberRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format,  header[i],  this.format.getNumberRecord());	  hdrMap.put(header[i],    this.format.getNumberRecord());    	non-compiled	[CE]  :  expected	16	None	replace
502	[BUG]  [BUGGY]  hdrMap.put(this.format.getHeaderRecord(i),  header.getNumberRecord());  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getHeaderRecord(i),  header.getNumberRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getHeaderRecord(i),  header.getNumberRecord());	  hdrMap.put(header[i],    this.format.getNumberRecord());    	non-compiled	[CE]  :  expected	16	None	replace
503	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getNumberRecord());  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getNumberRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getNumberRecord());	  hdrMap.put(header[i],    this.format.getNumberRecord());    	non-compiled	[CE]  :  expected	16	None	replace
504	[BUG]  [BUGGY]  hdrMap.put(header,  i);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  i);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  i);	  hdrMap.put(i,    header);    	non-compiled	[CE]  :  expected	33	None	replace
505	[BUG]  [BUGGY]  hdrMap.put(i,  header[0]);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[0]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[0]);	  hdrMap.put(i,    header);    	non-compiled	[CE]  :  expected	33	None	replace
506	[BUG]  [BUGGY]  hdrMap.put(this.format,  header[i],  this.format.getFormat());  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format,  header[i],  this.format.getFormat());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format,  header[i],  this.format.getFormat());	  hdrMap.put(header[i],    this.format.getFormat());    	non-compiled	[CE]  :  expected	17	None	replace
507	[BUG]  [BUGGY]  hdrMap.put(this.format[i],  header[i]);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format[i],  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format[i],  header[i]);	  hdrMap.put(header[i],    this.format.getFormat());    	non-compiled	[CE]  :  expected	17	None	replace
508	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.toString(i  +  1));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.toString(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.toString(i  +  1));	  hdrMap.put(header[i],    RectangleEdge.toString(i));    	non-compiled	[CE]  :  expected	11	None	replace
509	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.toString(i,  formatHeader[i]));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.toString(i,  formatHeader[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.toString(i,  formatHeader[i]));	  hdrMap.put(header[i],    RectangleEdge.toString(i));    	non-compiled	[CE]  :  expected	11	None	replace
510	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.LEFT);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.LEFT);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.LEFT);	  hdrMap.put(header[i],    RectangleEdge.valueOf(0));    	non-compiled	[CE]  :  expected	43	None	replace
511	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.DEFAULT_COLLECTION);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.DEFAULT_COLLECTION);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.DEFAULT_COLLECTION);	  hdrMap.put(header[i],    RectangleEdge.valueOf(0));    	non-compiled	[CE]  :  expected	43	None	replace
512	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.ZERO);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.ZERO);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.ZERO);	  hdrMap.put(header[i],    RectangleEdge.valueOf(0));    	non-compiled	[CE]  :  expected	43	None	replace
513	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.BOTTOM);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.BOTTOM);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.BOTTOM);	  hdrMap.put(header[i],    RectangleEdge.valueOf(0));    	non-compiled	[CE]  :  expected	43	None	replace
514	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()),  header);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()),  header);	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	51	None	replace
515	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord(),  header[i]));  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord(),  header[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord(),  header[i]));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	51	None	replace
516	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getCSVHeaderRecord()));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getCSVHeaderRecord()));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getCSVHeaderRecord()));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	51	None	replace
517	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord(),  rec);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord(),  rec);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getSkipHeaderRecord(),  rec);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    rec);    	non-compiled	[CE]  :  expected	37	None	replace
518	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  Integer.valueOf(0));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  Integer.valueOf(0));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  Integer.valueOf(0));	  hdrMap.put(i,    header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	42	None	replace
519	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeader(i),  Integer.valueOf(0));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeader(i),  Integer.valueOf(0));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getHeader(i),  Integer.valueOf(0));	  hdrMap.put(i,    header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	42	None	replace
520	[BUG]  [BUGGY]  hdrMap.put(header.getHeader(i),  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header.getHeader(i),  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header.getHeader(i),  RectangleEdge.valueOf(i));	  hdrMap.put(rect.getHeader(i),    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	36	None	replace
521	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecordNumber(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRecordNumber(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getRecordNumber(i));	  hdrMap.put(header[i],    this.format.getRecordName(i));    	non-compiled	[CE]  :  expected	57	None	replace
522	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec,  RectangleEdge.valueOf(i  +  1));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec,  RectangleEdge.valueOf(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec,  RectangleEdge.valueOf(i  +  1));	  hdrMap.put(header[i],    rec,    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	67	None	replace
523	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  new  Integer(header[i]));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  new  Integer(header[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  new  Integer(header[i]));	  hdrMap.put(i,    header[i],    new    Integer(header[i]));    	non-compiled	[CE]  :  expected	74	None	replace
524	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(this.format.getHeaderRecord(i)));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(this.format.getHeaderRecord(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  Integer(this.format.getHeaderRecord(i)));	  hdrMap.put(i,    header[i],    new    Integer(header[i]));    	non-compiled	[CE]  :  expected	74	None	replace
525	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  this.format.getHeader(i));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  this.format.getHeader(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  this.format.getHeader(i));	  hdrMap.put(i,    header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	75	None	replace
526	[BUG]  [BUGGY]  hdrMap.put(header,  this.format.getHeader(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  this.format.getHeader(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  this.format.getHeader(i));	  hdrMap.put(i,    header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	75	None	replace
527	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeader(i),  header[i]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeader(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getHeader(i),  header[i]);	  hdrMap.put(i,    header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	75	None	replace
528	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  ref);  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  ref);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  ref);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    rec);    }    	non-compiled	[CE]  :  expected	31	None	replace
529	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(rec,  header[i]);  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(rec,  header[i]);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(rec,  header[i]);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    rec);    }    	non-compiled	[CE]  :  expected	31	None	replace
530	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  header[i]);  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  header[i]);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  header[i]);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    rec);    }    	non-compiled	[CE]  :  expected	31	None	replace
531	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  header[i].record);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  header[i].record);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i),  header[i].record);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    header[i]);    	non-compiled	[CE]  :  expected	39	None	replace
532	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.toString(),  header[i]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.toString(),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.toString(),  header[i]);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    header[i]);    	non-compiled	[CE]  :  expected	39	None	replace
533	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getLastRecord());  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getLastRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getLastRecord());	  hdrMap.put(header[i],    this.format.getFormatHeaderRecord());    	non-compiled	[CE]  :  expected	78	None	replace
534	[BUG]  [BUGGY]  hdrMap.put(header,  header[i]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  header[i]);	  hdrMap.put(i,    header[i]);    	non-compiled	[CE]  :  expected	28	None	replace
535	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec,  RectangleConstraint.NONE);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec,  RectangleConstraint.NONE);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec,  RectangleConstraint.NONE);	  hdrMap.put(i,    header[i],    RectangleConstraint.NONE);    	non-compiled	[CE]  :  expected	70	None	replace
536	[BUG]  [BUGGY]  hdrMap.put(header,  header[i],  RectangleConstraint.NONE);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  header[i],  RectangleConstraint.NONE);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  header[i],  RectangleConstraint.NONE);	  hdrMap.put(i,    header[i],    RectangleConstraint.NONE);    	non-compiled	[CE]  :  expected	70	None	replace
537	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleConstraint.NONE);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleConstraint.NONE);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleConstraint.NONE);	  hdrMap.put(i,    header[i],    RectangleConstraint.NONE);    	non-compiled	[CE]  :  expected	70	None	replace
538	[BUG]  [BUGGY]  hdrMap.put(header[i],  header[i].toString());  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  header[i].toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  header[i].toString());	  hdrMap.put(header[i],    header[i]);    	non-compiled	[CE]  :  expected	48	None	replace
539	[BUG]  [BUGGY]  hdrMap.put(header[i],  header[i].record);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  header[i].record);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  header[i].record);	  hdrMap.put(header[i],    header[i]);    	non-compiled	[CE]  :  expected	48	None	replace
540	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i++));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i++));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i++));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	41	None	replace
541	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader.remove(i));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader.remove(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader.remove(i));	  hdrMap.put(header[i],    formatHeader.toString(i));    	non-compiled	[CE]  :  expected	53	None	replace
542	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  rec.valueOf(i));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  rec.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  rec.valueOf(i));	  hdrMap.put(i,    header[i],    rec.valueOf(i));    	non-compiled	[CE]  :  expected	3	None	replace
543	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  rec.get(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  rec.get(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  rec.get(i));	  hdrMap.put(i,    header[i],    rec.valueOf(i));    	non-compiled	[CE]  :  expected	3	None	replace
544	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].getHeaderString());  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].getHeaderString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].getHeaderString());	  hdrMap.put(record[i],    header[i].toString());    	non-compiled	[CE]  :  expected	63	None	replace
545	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i  *  1]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i  *  1]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i  *  1]);	  hdrMap.put(header[i],    formatHeader[i    +    1]);    	non-compiled	[CE]  :  expected	27	None	replace
546	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.recordNumber());  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.recordNumber());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.recordNumber());	  hdrMap.put(record[i],    header[i].intValue());    	non-compiled	[CE]  :  expected	64	None	replace
547	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].recordNumber());  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].recordNumber());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].recordNumber());	  hdrMap.put(record[i],    header[i].intValue());    	non-compiled	[CE]  :  expected	64	None	replace
548	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.recordValue[i].intValue());  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.recordValue[i].intValue());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.recordValue[i].intValue());	  hdrMap.put(record[i],    header[i].intValue());    	non-compiled	[CE]  :  expected	64	None	replace
549	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(recordNumber,  formatHeader[i]));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(recordNumber,  formatHeader[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(recordNumber,  formatHeader[i]));	  hdrMap.put(header[i],    new    CSVFormat(recordNumber,    Integer.toString(i)));    	non-compiled	[CE]  :  expected	82	None	replace
550	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(recordNumber,  Integer.toString(i  +  1)));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(recordNumber,  Integer.toString(i  +  1)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(recordNumber,  Integer.toString(i  +  1)));	  hdrMap.put(header[i],    new    CSVFormat(recordNumber,    Integer.toString(i)));    	non-compiled	[CE]  :  expected	82	None	replace
551	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(recordNumber,  FormatUtils.toString(i)));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(recordNumber,  FormatUtils.toString(i)));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(recordNumber,  FormatUtils.toString(i)));	  hdrMap.put(header[i],    new    CSVFormat(recordNumber,    Integer.toString(i)));    	non-compiled	[CE]  :  expected	82	None	replace
552	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.getLastRecord());  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.getLastRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.getLastRecord());	  hdrMap.put(header[i],    rec.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	13	None	replace
553	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length),  header[i]);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length),  header[i]);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i,    header.length));    	non-compiled	[CE]  :  expected	81	None	replace
554	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	30	None	replace
555	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getRecord());  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	30	None	replace
556	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(recordNumber,    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	32	None	replace
557	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  this.format.getHeaderRecord());  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  this.format.getHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  this.format.getHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(recordNumber,    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	32	None	replace
558	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(recordName,  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(recordName,  this.format.getSkipHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(recordName,  this.format.getSkipHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(recordNumber,    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	32	None	replace
559	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(recordNumber,  this.format.getHeaderRecord());  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(recordNumber,  this.format.getHeaderRecord());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(recordNumber,  this.format.getHeaderRecord());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(recordNumber,    this.format.getSkipHeaderRecord());    }    	non-compiled	[CE]  :  expected	32	None	replace
560	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  header.toString());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  header.toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  header.toString());	  hdrMap.put(i,    header[i],    rec.toString());    	non-compiled	[CE]  :  expected	7	None	replace
561	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getHeaderRecord(i,  header[i]));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  this.format.getHeaderRecord(i,  header[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getHeaderRecord(i,  header[i]));	  hdrMap.put(record[i],    this.format.getHeaderRecord(i));    	non-compiled	[CE]  :  expected	65	None	replace
562	[BUG]  [BUGGY]  Format.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  Format.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	Format.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	59	None	replace
563	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	59	None	replace
564	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecord()));  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	59	None	replace
565	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.formatHeader[i++]);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.formatHeader[i++]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.formatHeader[i++]);	  hdrMap.put(header[i],    formatHeader[i++]);    	non-compiled	[CE]  :  expected	29	None	replace
566	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord(),  header[i]);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord(),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getSkipHeaderRecord(),  header[i]);	  hdrMap.put(header[i],    Integer.valueOf(0),    header[i]);    	non-compiled	[CE]  :  expected	44	None	replace
567	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i].record,  header[i]);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i].record,  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i].record,  header[i]);	  hdrMap.put(header[i],    formatHeader[i].record);    	non-compiled	[CE]  :  expected	71	None	replace
568	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  CSVFormat(header[i]));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  new  CSVFormat(header[i]));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  CSVFormat(header[i]));	  hdrMap.put(i,    header[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	4	None	replace
569	[BUG]  [BUGGY]  hdrMap.put(i,  Integer.valueOf(i),  header[i]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  Integer.valueOf(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  Integer.valueOf(i),  header[i]);	  hdrMap.put(i,    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	20	None	replace
570	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  this.format.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  this.format.getSkipHeaderRecord());	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	68	None	replace
571	[BUG]  [BUGGY]  hdrMap.put(rec,  header[i],  this.format.getSkipHeaderRecord(i));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rec,  header[i],  this.format.getSkipHeaderRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rec,  header[i],  this.format.getSkipHeaderRecord(i));	  hdrMap.put(i,    header[i],    this.format.getSkipHeaderRecord(i));    	non-compiled	[CE]  :  expected	69	None	replace
572	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.formatHeader[i]);  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.formatHeader[i]);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.formatHeader[i]);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],    formatHeader[i]);    }    	non-compiled	[CE]  :  expected	34	None	replace
573	[BUG]  [BUGGY]  hdrMap.put(header,  header[i],  RectangleConstants.NONE);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  header[i],  RectangleConstants.NONE);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  header[i],  RectangleConstants.NONE);	  hdrMap.put(i,    header[i],    RectangleConstants.NONE);    	non-compiled	[CE]  :  expected	6	None	replace
574	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec,  RectangleConstants.NONE);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec,  RectangleConstants.NONE);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec,  RectangleConstants.NONE);	  hdrMap.put(i,    header[i],    RectangleConstants.NONE);    	non-compiled	[CE]  :  expected	6	None	replace
575	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i]  + ",  header[i]: ");  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i]  + ",  header[i]: ");  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i]  + ",  header[i]: ");	  hdrMap.put(header[i],    formatHeader[i]    +   ":   ");    	non-compiled	[CE]  :  expected	72	None	replace
576	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i]  + ".js ");  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i]  + ".js ");  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i]  + ".js ");	  hdrMap.put(header[i],    formatHeader[i]    +   ":   ");    	non-compiled	[CE]  :  expected	72	None	replace
577	[BUG]  [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i),  this.format);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i),  this.format);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i),  this.format);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i),    this.format);    	non-compiled	[CE]  :  expected	40	None	replace
578	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  Integer.toString(i));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  Integer.toString(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  Integer.toString(i));	  hdrMap.put(header[i],    Integer.toString(i),    rec);    	non-compiled	[CE]  :  expected	9	None	replace
579	[BUG]  [BUGGY]  hdrMap.put(header,  rec[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  rec[i],  Integer.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  rec[i],  Integer.valueOf(i));	  hdrMap.put(record,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	73	None	replace
580	[BUG]  [BUGGY]  hdrMap.put(header,  header[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  header[i],  Integer.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  header[i],  Integer.valueOf(i));	  hdrMap.put(record,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	73	None	replace
581	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  this.format.getHeaderRecord(i));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  this.format.getHeaderRecord(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  this.format.getHeaderRecord(i));	  hdrMap.put(record,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	73	None	replace
582	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i,  i  +  1),  recordNumber);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i,  i  +  1),  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i,  i  +  1),  recordNumber);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
583	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  1),  recordNumber);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  1),  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i  +  1),  recordNumber);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
584	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  Integer(i  +  1),  recordNumber);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  Integer(i  +  1),  recordNumber);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  Integer(i  +  1),  recordNumber);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    recordNumber);    	non-compiled	[CE]  :  expected	55	None	replace
585	[BUG]  [BUGGY]  hdrMap.put(this.format.getHeaderIndex(),  header);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getHeaderIndex(),  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getHeaderIndex(),  header);	  hdrMap.put(this.format.getSkipHeaderRecord(),    header);    	non-compiled	[CE]  :  expected	56	None	replace
586	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  header);  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record,  header[i],  header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  header);	  hdrMap.put(record[i],    header);    	non-compiled	[CE]  :  expected	49	None	replace
587	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getName());  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getName());  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getName());  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header[i],   "   ");    }    	non-compiled	[CE]  :  expected	62	None	replace
588	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  header[i].toString());  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  header[i].toString());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  header[i].toString());	  hdrMap.put(header[i],    formatHeader[i],    header[i]);    	non-compiled	[CE]  :  expected	76	None	replace
589	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  header[i  +  1]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  header[i  +  1]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  header[i  +  1]);	  hdrMap.put(header[i],    formatHeader[i],    header[i]);    	non-compiled	[CE]  :  expected	76	None	replace
590	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  header[i++]);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  header[i++]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  header[i++]);	  hdrMap.put(header[i],    formatHeader[i],    header[i]);    	non-compiled	[CE]  :  expected	76	None	replace
591	[BUG]  [BUGGY]  Format.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  Format.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	Format.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	61	None	replace
592	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	61	None	replace
593	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    new    CSVFormat(this.format.getSkipHeaderRecord()));    }    	non-compiled	[CE]  :  expected	61	None	replace
594	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getLexerHeaderRecord());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getLexerHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getLexerHeaderRecord());	  hdrMap.put(header[i],    this.format.getRawHeaderRecord());    	non-compiled	[CE]  :  expected	15	None	replace
595	[BUG]  [BUGGY]  hdrMap.put(header,  formatHeader[i],  header[i]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  formatHeader[i],  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  formatHeader[i],  header[i]);	  hdrMap.put(i,    header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	1	None	replace
596	[BUG]  [BUGGY]  hdrMap.put(recordNumber,  header[i],  formatHeader[i]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(recordNumber,  header[i],  formatHeader[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(recordNumber,  header[i],  formatHeader[i]);	  hdrMap.put(i,    header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	1	None	replace
597	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getCSVHeaderRecord());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getCSVHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getCSVHeaderRecord());	  hdrMap.put(header[i],    this.format.getNumberRecord());    	non-compiled	[CE]  :  expected	16	None	replace
598	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.recordNumber[i].valueOf(i));  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.recordNumber[i].valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.recordNumber[i].valueOf(i));	  hdrMap.put(record[i],    header[i].valueOf(i));    	non-compiled	[CE]  :  expected	22	None	replace
599	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.recordValue(i));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  rec.recordValue(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.recordValue(i));	  hdrMap.put(record[i],    header[i].valueOf(i));    	non-compiled	[CE]  :  expected	22	None	replace
600	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].header);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(record[i],  header[i].header);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].header);	  hdrMap.put(record[i],    header[i].valueOf(i));    	non-compiled	[CE]  :  expected	22	None	replace
601	[BUG]  [BUGGY]  hdrMap.put(this.format.getHeaderRecord(i),  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(this.format.getHeaderRecord(i),  this.format.getSkipHeaderRecord());  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getHeaderRecord(i),  this.format.getSkipHeaderRecord());	  hdrMap.put(record[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	23	None	replace
602	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  Integer(i  +  1),  header[i]);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  Integer(i  +  1),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  Integer(i  +  1),  header[i]);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    header[i]);    	non-compiled	[CE]  :  expected	54	None	replace
603	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  String(i  +  1),  header[i]);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  new  String(i  +  1),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  String(i  +  1),  header[i]);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    header[i]);    	non-compiled	[CE]  :  expected	54	None	replace
604	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  1],  header[i]);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  1],  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i  +  1],  header[i]);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1),    header[i]);    	non-compiled	[CE]  :  expected	54	None	replace
605	[BUG]  [BUGGY]  hdrMap.put(header,  header[i],  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  header[i],  RectangleEdge.valueOf(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  header[i],  RectangleEdge.valueOf(i));	  hdrMap.put(i,    header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
606	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i),  header[i]);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i),  header[i]);	  hdrMap.put(i,    header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
607	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(receiver,  header);  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(receiver,  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(receiver,  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(header,    rec);    }    	non-compiled	[CE]  :  expected	35	None	replace
608	[BUG]  [BUGGY]  hdrMap.put(header,  this.format.getFormatHeader(i));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header,  this.format.getFormatHeader(i));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  this.format.getFormatHeader(i));	  hdrMap.put(header,    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	80	None	replace
609	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getHeader(i),  header[i]);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getHeader(i),  header[i]);  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getHeader(i),  header[i]);	  hdrMap.put(header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	85	None	replace
610	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getHeader(i  +  1));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getHeader(i  +  1));  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getHeader(i  +  1));	  hdrMap.put(header[i],    this.format.getHeader(i));    	non-compiled	[CE]  :  expected	85	None	replace
611	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  header);  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  header);  }  [BUGGY]      }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	For(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  header);  }	  for(int    i    =    0;    i    <    header.length;    i++)    {    hdrMap.put(record,    header);    }    	non-compiled	[CE]  :  expected	60	None	replace
