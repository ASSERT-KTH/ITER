bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i]);  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i],  formatHeader[i]);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  formatHeader[i]);	  hdrMap.put(i,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
2	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleEdge.valueOf(i));	  hdrMap.put(i,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
3	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  rec.valueOf(i));  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i],  rec.valueOf(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  rec.valueOf(i));	  hdrMap.put(i,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
4	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  Integer.toString(i));  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i],  Integer.toString(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  Integer.toString(i));	  hdrMap.put(i,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
5	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  Integer.valueOf(i  +  1));  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i],  Integer.valueOf(i  +  1));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  Integer.valueOf(i  +  1));	  hdrMap.put(i,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
6	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE);  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstants.NONE);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstants.NONE);	  hdrMap.put(i,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
7	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  rec.toString());  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i],  rec.toString());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  rec.toString());	  hdrMap.put(i,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
8	[BUG]  [BUGGY]  hdrMap.put(record[i],  Integer.toString(i));  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(record[i],  Integer.toString(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  Integer.toString(i));	  hdrMap.put(header[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	3	None	replace
9	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.toString(i),  rec);  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  Integer.toString(i),  rec);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.toString(i),  rec);	  hdrMap.put(header[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	3	None	replace
10	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.toString());  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  rec.toString());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.toString());	  hdrMap.put(header[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	3	None	replace
11	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.toString(i));  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  RectangleEdge.toString(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.toString(i));	  hdrMap.put(header[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	3	None	replace
12	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecordNumber());  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  this.format.getRecordNumber());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getRecordNumber());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	4	None	replace
13	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.getSkipHeaderRecord());  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  rec.getSkipHeaderRecord());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.getSkipHeaderRecord());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	4	None	replace
14	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getHeaderRecord());  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  this.format.getHeaderRecord());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getHeaderRecord());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	4	None	replace
15	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRawHeaderRecord());  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  this.format.getRawHeaderRecord());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getRawHeaderRecord());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	4	None	replace
16	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getNumberRecord());  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  this.format.getNumberRecord());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getNumberRecord());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	4	None	replace
17	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getFormat());  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  this.format.getFormat());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getFormat());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	4	None	replace
18	[BUG]  [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(i  +  1));  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(i  +  1));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  Integer.valueOf(i  +  1));	  hdrMap.put(header[i],    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	9	None	replace
19	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.toString(i  +  1));  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  Integer.toString(i  +  1));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.toString(i  +  1));	  hdrMap.put(header[i],    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	9	None	replace
20	[BUG]  [BUGGY]  hdrMap.put(i,  Integer.valueOf(i  +  1));  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  Integer.valueOf(i  +  1));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  Integer.valueOf(i  +  1));	  hdrMap.put(header[i],    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	9	None	replace
21	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i]);  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(record[i],  header[i]);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i]);	  hdrMap.put(record[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	1	None	replace
22	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].valueOf(i));  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(record[i],  header[i].valueOf(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].valueOf(i));	  hdrMap.put(record[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	1	None	replace
23	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(record[i],  this.format.getSkipHeaderRecord());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getSkipHeaderRecord());	  hdrMap.put(record[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	1	None	replace
24	[BUG]  [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(0));  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(0));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  Integer.valueOf(0));	  hdrMap.put(record[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	1	None	replace
25	[BUG]  [BUGGY]  hdrMap.put(record[i],  formatHeader[i]);  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(record[i],  formatHeader[i]);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  formatHeader[i]);	  hdrMap.put(header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	6	None	replace
26	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  rec);  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  rec);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  rec);	  hdrMap.put(header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	6	None	replace
27	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  1]);  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  1]);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i  +  1]);	  hdrMap.put(header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	6	None	replace
28	[BUG]  [BUGGY]  hdrMap.put(i,  header[i]);  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i]);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i]);	  hdrMap.put(header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	6	None	replace
29	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i++]);  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  formatHeader[i++]);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i++]);	  hdrMap.put(header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	6	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  }	      	non-compiled	[CE]  :  expected	8	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  rec);  }  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  rec);  }  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  rec);  }	      	non-compiled	[CE]  :  expected	8	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(recordNumber,  this.format.getSkipHeaderRecord());  }	      	non-compiled	[CE]  :  expected	8	None	replace
33	[BUG]  [BUGGY]  hdrMap.put(i,  header);  [CE]  :  expected  [FE]                            AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header);	      	non-compiled	[CE]  :  expected	8	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [CE]  :  expected  [FE]                              AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  formatHeader[i]);  }	      	non-compiled	[CE]  :  expected	8	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  rec);  }  [CE]  :  expected  [FE]                                AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  rec);  }  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header,  rec);  }	      	non-compiled	[CE]  :  expected	8	None	replace
36	[BUG]  [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect.getHeader(i),  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	5	None	replace
37	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  rec);  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  rec);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i),  rec);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	5	None	replace
38	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.valueOf(i));  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  rec.valueOf(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.valueOf(i));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	5	None	replace
39	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  header[i]);  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  header[i]);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i),  header[i]);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	5	None	replace
40	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  this.format);  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  this.format);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i),  this.format);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	5	None	replace
41	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i  +  1));  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i  +  1));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i  +  1));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	5	None	replace
42	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  Integer.valueOf(0));  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i],  Integer.valueOf(0));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  Integer.valueOf(0));	  hdrMap.put(header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	7	None	replace
43	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(0));  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(0));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(0));	  hdrMap.put(header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	7	None	replace
44	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header[i]);  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header[i]);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(0),  header[i]);	  hdrMap.put(header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	7	None	replace
45	[BUG]  [BUGGY]  hdrMap.put(rect[i],  header);  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(rect[i],  header);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(rect[i],  header);	  hdrMap.put(header[i],    rec);    	non-compiled	[CE]  :  expected	10	None	replace
46	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader);  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  formatHeader);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader);	  hdrMap.put(header[i],    rec);    	non-compiled	[CE]  :  expected	10	None	replace
47	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format);  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  this.format);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format);	  hdrMap.put(header[i],    rec);    	non-compiled	[CE]  :  expected	10	None	replace
48	[BUG]  [BUGGY]  hdrMap.put(header[i],  header[i]);  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  header[i]);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  header[i]);	  hdrMap.put(header[i],    rec);    	non-compiled	[CE]  :  expected	10	None	replace
49	[BUG]  [BUGGY]  hdrMap.put(record[i],  header);  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(record[i],  header);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header);	  hdrMap.put(header[i],    rec);    	non-compiled	[CE]  :  expected	10	None	replace
50	[BUG]  [BUGGY]  hdrMap.put(header[i],  format);  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  format);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  format);	  hdrMap.put(header[i],    rec);    	non-compiled	[CE]  :  expected	10	None	replace
51	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));	  hdrMap.put(header[i],    rec);    	non-compiled	[CE]  :  expected	10	None	replace
52	[BUG]  [BUGGY]  hdrMap.put(header[i],  recordNumber);  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  recordNumber);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  recordNumber);	  hdrMap.put(header[i],    rec);    	non-compiled	[CE]  :  expected	10	None	replace
53	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader.toString(i));  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  formatHeader.toString(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader.toString(i));	  hdrMap.put(header[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	3	None	replace
54	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  header[i]);  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  header[i]);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i  +  1),  header[i]);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	9	None	replace
55	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordNumber);  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordNumber);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.valueOf(i  +  1),  recordNumber);	  hdrMap.put(header[i],    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	9	None	replace
56	[BUG]  [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(),  header);  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(this.format.getSkipHeaderRecord(),  header);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(this.format.getSkipHeaderRecord(),  header);	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	4	None	replace
57	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecordName(i));  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  this.format.getRecordName(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getRecordName(i));	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	4	None	replace
58	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.MAX_VALUE);  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  Integer.MAX_VALUE);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  Integer.MAX_VALUE);	  hdrMap.put(header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	7	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	      	non-compiled	[CE]  :  expected	8	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  header);  }  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  header);  }  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  header);  }	      	non-compiled	[CE]  :  expected	8	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(record,  new  CSVFormat(this.format.getSkipHeaderRecord()));  }	      	non-compiled	[CE]  :  expected	8	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i], " ");  }  [CE]  :  expected  [FE]                            AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i], " ");  }  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  hdrMap.put(header[i], " ");  }	      	non-compiled	[CE]  :  expected	8	None	replace
63	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].toString());  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(record[i],  header[i].toString());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].toString());	  hdrMap.put(record[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	1	None	replace
64	[BUG]  [BUGGY]  hdrMap.put(record[i],  header[i].intValue());  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(record[i],  header[i].intValue());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  header[i].intValue());	  hdrMap.put(record[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	1	None	replace
65	[BUG]  [BUGGY]  hdrMap.put(record[i],  this.format.getHeaderRecord(i));  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(record[i],  this.format.getHeaderRecord(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  this.format.getHeaderRecord(i));	  hdrMap.put(record[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	1	None	replace
66	[BUG]  [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(record[i],  RectangleEdge.valueOf(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record[i],  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	5	None	replace
67	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec,  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  rec,  RectangleEdge.valueOf(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec,  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	5	None	replace
68	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord());	  hdrMap.put(i,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
69	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord(i));  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getSkipHeaderRecord(i));	  hdrMap.put(i,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
70	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE);  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i],  RectangleConstraint.NONE);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  RectangleConstraint.NONE);	  hdrMap.put(i,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
71	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i].record);  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  formatHeader[i].record);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i].record);	  hdrMap.put(header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	6	None	replace
72	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i]  + ": ");  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  formatHeader[i]  + ": ");  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i]  + ": ");	  hdrMap.put(header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	6	None	replace
73	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(record,  header[i],  Integer.valueOf(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(record,  header[i],  Integer.valueOf(i));	  hdrMap.put(i,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
74	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(header[i]));  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i],  new  Integer(header[i]));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  new  Integer(header[i]));	  hdrMap.put(i,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
75	[BUG]  [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeader(i));  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(i,  header[i],  this.format.getHeader(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(i,  header[i],  this.format.getHeader(i));	  hdrMap.put(i,    header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	2	None	replace
76	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  header[i]);  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  formatHeader[i],  header[i]);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i],  header[i]);	  hdrMap.put(header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	6	None	replace
77	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec.formatHeader[i]);  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  rec.formatHeader[i]);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  rec.formatHeader[i]);	  hdrMap.put(header[i],    formatHeader[i]);    	non-compiled	[CE]  :  expected	6	None	replace
78	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getFormatHeaderRecord());  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  this.format.getFormatHeaderRecord());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getFormatHeaderRecord());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	4	None	replace
79	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getFormatRecord());  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  this.format.getFormatRecord());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getFormatRecord());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	4	None	replace
80	[BUG]  [BUGGY]  hdrMap.put(header,  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header,  this.format.getSkipHeaderRecord());  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header,  this.format.getSkipHeaderRecord());	      	non-compiled	[CE]  :  expected	8	None	replace
81	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length));  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i,  header.length));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	5	None	replace
82	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(recordNumber,  Integer.toString(i)));  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(recordNumber,  Integer.toString(i)));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  new  CSVFormat(recordNumber,  Integer.toString(i)));	  hdrMap.put(header[i],    Integer.toString(i));    	non-compiled	[CE]  :  expected	3	None	replace
83	[BUG]  [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  1));  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  formatHeader[i  +  1));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  formatHeader[i  +  1));	  hdrMap.put(header[i],    Integer.valueOf(i    +    1));    	non-compiled	[CE]  :  expected	9	None	replace
84	[BUG]  [BUGGY]  hdrMap.put(header[i],  record);  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  record);  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  record);	  hdrMap.put(header[i],    rec);    	non-compiled	[CE]  :  expected	10	None	replace
85	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getHeader(i));  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  for  (int  i  =  0;  i  <  header.length;  i++)  {    [BUGGY]  hdrMap.put(header[i],  this.format.getHeader(i));  [BUGGY]    }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	371	371	1	replace	hdrMap.put(header[i],  this.format.getHeader(i));	  hdrMap.put(header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	7	None	replace
