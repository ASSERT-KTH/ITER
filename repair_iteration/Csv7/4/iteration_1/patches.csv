bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(this.format!=  null)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format!=  null)  {	  }    else    if(header!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
2	[BUG]  [BUGGY]  }  else  if(this.format  ==  null)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format  ==  null)  {	  }    else    if(header!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
3	[BUG]  [BUGGY]  }  else  if(rec  ==  null)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec  ==  null)  {	  }    else    if(header!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
4	[BUG]  [BUGGY]  }  else  if(formatHeader  ==  null)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(formatHeader  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(formatHeader  ==  null)  {	  }    else    if(header!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
5	[BUG]  [BUGGY]  }  else  if(nextRecord  ==  null)  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(nextRecord  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord  ==  null)  {	  }    else    if(header!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
6	[BUG]  [BUGGY]  }  else  if(rec.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.isSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isSkipHeaderRecord())  {	  }    else    if(this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	2	None	replace
7	[BUG]  [BUGGY]  }  else  if(rec.isSkipHeader())  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.isSkipHeader())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isSkipHeader())  {	  }    else    if(this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	2	None	replace
8	[BUG]  [BUGGY]  }  else  if(nextRecord.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(nextRecord.isSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.isSkipHeaderRecord())  {	  }    else    if(this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	2	None	replace
9	[BUG]  [BUGGY]  }  else  if(this.format.isHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.isHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isHeaderRecord())  {	  }    else    if(this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	2	None	replace
10	[BUG]  [BUGGY]  }  else  if(nextRecord.isSkipHeader())  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(nextRecord.isSkipHeader())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.isSkipHeader())  {	  }    else    if(this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	2	None	replace
11	[BUG]  [BUGGY]  }  else  if(rec.getFormat()!=  null)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getFormat()!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormat()!=  null)  {	  }    else    if(rec.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	4	None	replace
12	[BUG]  [BUGGY]  }  else  if(rec.getRecordNumber()!=  null)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getRecordNumber()!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getRecordNumber()!=  null)  {	  }    else    if(rec.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	4	None	replace
13	[BUG]  [BUGGY]  }  else  if(nextRecord.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(nextRecord.getSkipHeaderRecord()!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getSkipHeaderRecord()!=  null)  {	  }    else    if(rec.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	4	None	replace
14	[BUG]  [BUGGY]  }  else  if(rec.getHeader()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getHeader()!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeader()!=  null)  {	  }    else    if(rec.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	4	None	replace
15	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  ==  0)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  ==  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()  ==  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	6	None	replace
16	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()  >  0)  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getRecordNumber()  >  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()  >  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	6	None	replace
17	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()!=  0)  {  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()!=  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()!=  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	6	None	replace
18	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  >  0)  {  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getHeaderRecord()  >  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  >  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	6	None	replace
19	[BUG]  [BUGGY]  }  else  if(header.length()  >  0)  {  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header.length()  >  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length()  >  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	6	None	replace
20	[BUG]  [BUGGY]  }  else  if(rec.size()  >  0)  {  [CE]  :  expected  [FE]                            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.size()  >  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.size()  >  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	6	None	replace
21	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  >=  0)  {  [CE]  :  expected  [FE]                              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  >=  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()  >=  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	6	None	replace
22	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber())  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getRecordNumber())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber())  {	  }    else    if(this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	1	None	replace
23	[BUG]  [BUGGY]  }  else  if(rec.getSkipHeader())  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getSkipHeader())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getSkipHeader())  {	  }    else    if(this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	1	None	replace
24	[BUG]  [BUGGY]  }  else  if(header.length()  ==  0)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header.length()  ==  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length()  ==  0)  {	  }    else    if(this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	1	None	replace
25	[BUG]  [BUGGY]  }  else  if(rec.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getSkipHeaderRecord())  {	  }    else    if(this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	1	None	replace
26	[BUG]  [BUGGY]  }  else  if(rec.getNumber()  >  0)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getNumber()  >  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getNumber()  >  0)  {	  }    else    if(this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	1	None	replace
27	[BUG]  [BUGGY]  }  else  if(header  <  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header  <  this.format.getSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  <  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.getSkipHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	13	None	replace
28	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  ==  this.header)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  ==  this.header)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()  ==  this.header)  {	  }    else    if(this.format.getSkipHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	13	None	replace
29	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  <  this.header)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getHeaderRecord()  <  this.header)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  <  this.header)  {	  }    else    if(this.format.getSkipHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	13	None	replace
30	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()!=  this.header)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()!=  this.header)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()!=  this.header)  {	  }    else    if(this.format.getSkipHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	13	None	replace
31	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()  <  this.header)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getRecordNumber()  <  this.header)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()  <  this.header)  {	  }    else    if(this.format.getSkipHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	13	None	replace
32	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  >=  this.header)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  >=  this.header)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()  >=  this.header)  {	  }    else    if(this.format.getSkipHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	13	None	replace
33	[BUG]  [BUGGY]  }  else  if(!this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(!this.format.hasSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	12	None	replace
34	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.hasSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	12	None	replace
35	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeader())  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.hasSkipHeader())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeader())  {	  }    else    if(this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	12	None	replace
36	[BUG]  [BUGGY]  }  else  if(nextRecord.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(nextRecord.hasSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	12	None	replace
37	[BUG]  [BUGGY]  }  else  if(current.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(current.hasSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	12	None	replace
38	[BUG]  [BUGGY]  }  else  if(this.format.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	12	None	replace
39	[BUG]  [BUGGY]  }  else  if(this.format.hasHeaderRecord())  {  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.hasHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	12	None	replace
40	[BUG]  [BUGGY]  }  else  if(!this.format.isHeaderRecord())  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(!this.format.isHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isHeaderRecord())  {	  }    else    if(!this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	3	None	replace
41	[BUG]  [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  ||  header  ==  null)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  ||  header  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isSkipHeaderRecord()  ||  header  ==  null)  {	  }    else    if(!this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	3	None	replace
42	[BUG]  [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  ||  header!=  null)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  ||  header!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isSkipHeaderRecord()  ||  header!=  null)  {	  }    else    if(!this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	3	None	replace
43	[BUG]  [BUGGY]  }  else  if(!this.format.isRecorded())  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(!this.format.isRecorded())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isRecorded())  {	  }    else    if(!this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	3	None	replace
44	[BUG]  [BUGGY]  }  else  if(!this.format.isNumberRecord())  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(!this.format.isNumberRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isNumberRecord())  {	  }    else    if(!this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	3	None	replace
45	[BUG]  [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  &&  header!=  null)  {  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  &&  header!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isSkipHeaderRecord()  &&  header!=  null)  {	  }    else    if(!this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	3	None	replace
46	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getHeaderRecord()!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()!=  null)  {	  }    else    if(this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	9	None	replace
47	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()!=  null)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getRecordNumber()!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()!=  null)  {	  }    else    if(this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	9	None	replace
48	[BUG]  [BUGGY]  }  else  if(this.format.getFormat()!=  null)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getFormat()!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormat()!=  null)  {	  }    else    if(this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	9	None	replace
49	[BUG]  [BUGGY]  }  else  if(rec.getSkipHeader()!=  null)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getSkipHeader()!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getSkipHeader()!=  null)  {	  }    else    if(this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	9	None	replace
50	[BUG]  [BUGGY]  }  else  if(rec.getFormat()  ==  null)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getFormat()  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormat()  ==  null)  {	  }    else    if(rec.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	5	None	replace
51	[BUG]  [BUGGY]  }  else  if(rec.getRecordNumber()  ==  null)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getRecordNumber()  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getRecordNumber()  ==  null)  {	  }    else    if(rec.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	5	None	replace
52	[BUG]  [BUGGY]  }  else  if(nextRecord.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(nextRecord.getSkipHeaderRecord()  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getSkipHeaderRecord()  ==  null)  {	  }    else    if(rec.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	5	None	replace
53	[BUG]  [BUGGY]  }  else  if(nextRecord.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(nextRecord.getSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getSkipHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	14	None	replace
54	[BUG]  [BUGGY]  }  else  if(!this.format.getHeaderRecord())  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(!this.format.getHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	14	None	replace
55	[BUG]  [BUGGY]  }  else  if(rec.getHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	14	None	replace
56	[BUG]  [BUGGY]  }  else  if(rec.getHeader())  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getHeader())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeader())  {	  }    else    if(this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	14	None	replace
57	[BUG]  [BUGGY]  }  else  if(current.getHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(current.getHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	14	None	replace
58	[BUG]  [BUGGY]  }  else  if(nextRecord.getHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(nextRecord.getHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	14	None	replace
59	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()  ==  null)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getRecordNumber()  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()  ==  null)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	10	None	replace
60	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getHeaderRecord()  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  ==  null)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	10	None	replace
61	[BUG]  [BUGGY]  }  else  if(this.format.getFormat()  ==  null)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getFormat()  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormat()  ==  null)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	10	None	replace
62	[BUG]  [BUGGY]  }  else  if(rec.getSkipHeader()  ==  null)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getSkipHeader()  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getSkipHeader()  ==  null)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	10	None	replace
63	[BUG]  [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }	      	non-compiled	[CE]  :  expected	8	None	replace
64	[BUG]  [BUGGY]  hdrMap.put(rect.toString(),  header);  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  hdrMap.put(rect.toString(),  header);  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(rect.toString(),  header);	      	non-compiled	[CE]  :  expected	8	None	replace
65	[BUG]  [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getName().equals(this.format.getName  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getName().equals(this.format.getName  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getName().equals(this.format.getName	      	non-compiled	[CE]  :  expected	8	None	replace
66	[BUG]  [BUGGY]  hdrMap.put(rect.getName(),  header);  [CE]  :  expected  [FE]                            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  hdrMap.put(rect.getName(),  header);  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(rect.getName(),  header);	      	non-compiled	[CE]  :  expected	8	None	replace
67	[BUG]  [BUGGY]  final  CSVFormat  format  =  nextRecord.getFormat();  [CE]  :  expected  [FE]                              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  final  CSVFormat  format  =  nextRecord.getFormat();  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  format  =  nextRecord.getFormat();	      	non-compiled	[CE]  :  expected	8	None	replace
68	[BUG]  [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()  ==  header)  {  this.  [CE]  :  expected  [FE]                                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()  ==  header)  {  this.  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()  ==  header)  {  this.	      	non-compiled	[CE]  :  expected	8	None	replace
69	[BUG]  [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.equals(  [CE]  :  expected  [FE]                                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.equals(  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.equals(	      	non-compiled	[CE]  :  expected	8	None	replace
70	[BUG]  [BUGGY]  }  else  if(this.format.getFormat())  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getFormat())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormat())  {	  }    else    if(this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	1	None	replace
71	[BUG]  [BUGGY]  }  else  if(header.length  ==  0)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header.length  ==  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length  ==  0)  {	  }    else    if(this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	1	None	replace
72	[BUG]  [BUGGY]  }  else  if(header  >=  null)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header  >=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  >=  null)  {	  }    else    if(header!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
73	[BUG]  [BUGGY]  }  else  if(header  <  this.header)  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header  <  this.header)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  <  this.header)  {	  }    else    if(this.format.getSkipHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	13	None	replace
74	[BUG]  [BUGGY]  }  else  if(this.format.getFormat()  <  this.header)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getFormat()  <  this.header)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormat()  <  this.header)  {	  }    else    if(this.format.getSkipHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	13	None	replace
75	[BUG]  [BUGGY]  }  else  if(rec.getHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getHeaderRecord()!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderRecord()!=  null)  {	  }    else    if(rec.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	4	None	replace
76	[BUG]  [BUGGY]  }  else  if(nextRecord.hasSkipHeader())  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(nextRecord.hasSkipHeader())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasSkipHeader())  {	  }    else    if(this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	12	None	replace
77	[BUG]  [BUGGY]  }  else  if(this.format.hasRecord())  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.hasRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	12	None	replace
78	[BUG]  [BUGGY]  }  else  if(this.format.hasFormat())  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.hasFormat())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasFormat())  {	  }    else    if(this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	12	None	replace
79	[BUG]  [BUGGY]  }  else  if(!this.format.isFormat())  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(!this.format.isFormat())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isFormat())  {	  }    else    if(!this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	3	None	replace
80	[BUG]  [BUGGY]  }  else  if(!this.format.equals(header))  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(!this.format.equals(header))  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.equals(header))  {	  }    else    if(!this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	3	None	replace
81	[BUG]  [BUGGY]  }  else  if(!this.format.isRecord())  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(!this.format.isRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isRecord())  {	  }    else    if(!this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	3	None	replace
82	[BUG]  [BUGGY]  }  else  if(rec.getHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getHeaderRecord()  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderRecord()  ==  null)  {	  }    else    if(rec.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	5	None	replace
83	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(header  ==  null)  {  if(this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format.getSkipHeaderRecord())  {  this.nextRecord();  }	      	non-compiled	[CE]  :  expected	8	None	replace
84	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.	      	non-compiled	[CE]  :  expected	8	None	replace
85	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.	      	non-compiled	[CE]  :  expected	8	None	replace
86	[BUG]  [BUGGY]  hdrMap.put(record,  header);  [CE]  :  expected  [FE]                            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  hdrMap.put(record,  header);  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(record,  header);	      	non-compiled	[CE]  :  expected	8	None	replace
87	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  formatHeader;  }  [CE]  :  expected  [FE]                              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  formatHeader;  }  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  formatHeader;  }	      	non-compiled	[CE]  :  expected	8	None	replace
88	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [CE]  :  expected  [FE]                                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header	      	non-compiled	[CE]  :  expected	8	None	replace
89	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHeader  [CE]  :  expected  [FE]                                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHeader  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHeader	      	non-compiled	[CE]  :  expected	8	None	replace
90	[BUG]  [BUGGY]  }  else  if(this.format.getFormat()  >  0)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getFormat()  >  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormat()  >  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	6	None	replace
91	[BUG]  [BUGGY]  }  else  if(this.format.isSkipHeader())  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.isSkipHeader())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isSkipHeader())  {	  }    else    if(this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	14	None	replace
92	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header  ==  null  ||  header.length()  ==  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  header.length()  ==  0)  {	  }    else    if(header    ==    null)    {    	non-compiled	[CE]  :  expected	7	None	replace
93	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(header    ==    null)    {    	non-compiled	[CE]  :  expected	7	None	replace
94	[BUG]  [BUGGY]  }  else  if(this.format.isFormat())  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.isFormat())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isFormat())  {	  }    else    if(this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	2	None	replace
95	[BUG]  [BUGGY]  }  else  if(this.format.isRecorded())  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.isRecorded())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isRecorded())  {	  }    else    if(this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	2	None	replace
96	[BUG]  [BUGGY]  }  else  if(this.format.isRecord())  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.isRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isRecord())  {	  }    else    if(this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	2	None	replace
97	[BUG]  [BUGGY]  }  else  if(this.format.isSelectedRecord())  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.isSelectedRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isSelectedRecord())  {	  }    else    if(this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	2	None	replace
98	[BUG]  [BUGGY]  }  else  if(this.format.getHeader()  ==  null)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getHeader()  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeader()  ==  null)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	10	None	replace
99	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header  ==  null  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(header    ==    null)    {    	non-compiled	[CE]  :  expected	7	None	replace
100	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  header.length()!=  0)  {  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header  ==  null  ||  header.length()!=  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  header.length()!=  0)  {	  }    else    if(header    ==    null)    {    	non-compiled	[CE]  :  expected	7	None	replace
101	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  header.length()  >  0)  {  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header  ==  null  &&  header.length()  >  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  header.length()  >  0)  {	  }    else    if(header    ==    null)    {    	non-compiled	[CE]  :  expected	7	None	replace
102	[BUG]  [BUGGY]  }  else  if(rec.getHeader()  ==  null)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getHeader()  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeader()  ==  null)  {	  }    else    if(rec.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	5	None	replace
103	[BUG]  [BUGGY]  }  else  if(rec.getSkipHeaderRecord()  ==  header)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(rec.getSkipHeaderRecord()  ==  header)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getSkipHeaderRecord()  ==  header)  {	  }    else    if(rec.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	5	None	replace
104	[BUG]  [BUGGY]  }  else  if(this.format.getHeader()  >  0)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getHeader()  >  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeader()  >  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	6	None	replace
105	[BUG]  [BUGGY]  }  else  if(this.format.getFormatHeader()  >  0)  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getFormatHeader()  >  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormatHeader()  >  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	6	None	replace
106	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderSize()  >  0)  {  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getHeaderSize()  >  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderSize()  >  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	6	None	replace
107	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	14	None	replace
108	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  ||  this.format.getHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getHeaderRecord()  ||  this.format.getHeaderRecord().equals(header))  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  ||  this.format.getHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	14	None	replace
109	[BUG]  [BUGGY]  }  else  if(this.format.equals(header))  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.equals(header))  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.equals(header))  {	  }    else    if(this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	2	None	replace
110	[BUG]  [BUGGY]  }  else  if(this.format.getFormatHeader())  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getFormatHeader())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormatHeader())  {	  }    else    if(this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	1	None	replace
111	[BUG]  [BUGGY]  }  else  if(this.format.getHeader())  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getHeader())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeader())  {	  }    else    if(this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	1	None	replace
112	[BUG]  [BUGGY]  }  else  if(this.format.getHeader()  <  this.header)  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getHeader()  <  this.header)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeader()  <  this.header)  {	  }    else    if(this.format.getSkipHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	13	None	replace
113	[BUG]  [BUGGY]  }  else  if(this.header  <  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.header  <  this.format.getSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header  <  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.getSkipHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	13	None	replace
114	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header!=  null  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(header!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
115	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  header.length  >  0)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header!=  null  &&  header.length  >  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  header.length  >  0)  {	  }    else    if(header!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
116	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header!=  null  &&  this.format.hasSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.hasSkipHeaderRecord())  {	  }    else    if(header!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
117	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  header.length()  >  0)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header!=  null  &&  header.length()  >  0)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  header.length()  >  0)  {	  }    else    if(header!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
118	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(header!=  null  &&  this.format.isSkipHeaderRecord())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.isSkipHeaderRecord())  {	  }    else    if(header!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
119	[BUG]  [BUGGY]  }  else  if(this.format.hasHeader())  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.hasHeader())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasHeader())  {	  }    else    if(this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	12	None	replace
120	[BUG]  [BUGGY]  }  else  if(this.format.hasFormatHeader())  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.hasFormatHeader())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasFormatHeader())  {	  }    else    if(this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	12	None	replace
121	[BUG]  [BUGGY]  }  else  if(this.format.hasRecordedSize())  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.hasRecordedSize())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasRecordedSize())  {	  }    else    if(this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	12	None	replace
122	[BUG]  [BUGGY]  }  else  if(this.format.getFormatHeader()!=  null)  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getFormatHeader()!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormatHeader()!=  null)  {	  }    else    if(this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	9	None	replace
123	[BUG]  [BUGGY]  }  else  if(this.format.getHeader()!=  null)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getHeader()!=  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeader()!=  null)  {	  }    else    if(this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	9	None	replace
124	[BUG]  [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	      	non-compiled	[CE]  :  expected	8	None	replace
125	[BUG]  [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }	      	non-compiled	[CE]  :  expected	8	None	replace
126	[BUG]  [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	      	non-compiled	[CE]  :  expected	8	None	replace
127	[BUG]  [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [CE]  :  expected  [FE]                            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }	      	non-compiled	[CE]  :  expected	8	None	replace
128	[BUG]  [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [CE]  :  expected  [FE]                              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }	      	non-compiled	[CE]  :  expected	8	None	replace
129	[BUG]  [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }  [CE]  :  expected  [FE]                                AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }	      	non-compiled	[CE]  :  expected	8	None	replace
130	[BUG]  [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(!this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	3	None	replace
131	[BUG]  [BUGGY]  }  else  if(!this.format.isHeader())  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(!this.format.isHeader())  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isHeader())  {	  }    else    if(!this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	3	None	replace
132	[BUG]  [BUGGY]  }  else  if(this.format.getFormatHeader()  ==  null)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getFormatHeader()  ==  null)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormatHeader()  ==  null)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	10	None	replace
133	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  ==  header)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }    [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  ==  header)  {  [BUGGY]    if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()  ==  header)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	10	None	replace
