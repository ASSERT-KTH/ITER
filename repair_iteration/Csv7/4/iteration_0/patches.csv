bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]    AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord())  {  [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord())  {	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
2	[BUG]  [BUGGY]  }  else  if(this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]      AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]  }  else  if(this.format.isSkipHeaderRecord())  {  [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isSkipHeaderRecord())  {	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
3	[BUG]  [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]        AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord())  {  [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isSkipHeaderRecord())  {	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
4	[BUG]  [BUGGY]  }  else  if(rec.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]          AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]  }  else  if(rec.getSkipHeaderRecord()!=  null)  {  [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getSkipHeaderRecord()!=  null)  {	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
5	[BUG]  [BUGGY]  }  else  if(rec.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]            AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]  }  else  if(rec.getSkipHeaderRecord()  ==  null)  {  [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getSkipHeaderRecord()  ==  null)  {	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
6	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  >  0)  {  [CE]  :  expected  [FE]              AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  >  0)  {  [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()  >  0)  {	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
7	[BUG]  [BUGGY]  }  else  if(header  ==  null)  {  [CE]  :  expected  [FE]                AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]  }  else  if(header  ==  null)  {  [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null)  {	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
8	[BUG]  [BUGGY]    [CE]  :  expected  [FE]                  AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]    [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	  	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
9	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]    AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()!=  null)  {	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
10	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]      AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()  ==  null)  {	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
11	[BUG]  [BUGGY]  }  else  if(header!=  null)  {  [CE]  :  expected  [FE]        AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]  }  else  if(header!=  null)  {  [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null)  {	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
12	[BUG]  [BUGGY]  }  else  if(this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]          AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]  }  else  if(this.format.hasSkipHeaderRecord())  {  [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasSkipHeaderRecord())  {	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
13	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  <  this.header)  {  [CE]  :  expected  [FE]    AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  <  this.header)  {  [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()  <  this.header)  {	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
14	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord())  {  [CE]  :  expected  [FE]      AssertionError  [CONTEXT]  if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }  [BUGGY]  }  else  if(this.format.getHeaderRecord())  {  [BUGGY]  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord())  {	}  else  {  	non-compiled	[CE]  :  expected	7	None	replace
