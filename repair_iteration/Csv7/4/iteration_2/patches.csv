bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(rec.getFormatHeader()  >  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getFormatHeader()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormatHeader()  >  0)  {	  }    else    if(this.format.getFormatHeader()    >    0)    {    	non-compiled	[CE]  :  expected	105	None	replace
2	[BUG]  [BUGGY]  }  else  if(this.format.getFormatHeader()  ==  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormatHeader()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormatHeader()  ==  0)  {	  }    else    if(this.format.getFormatHeader()    >    0)    {    	non-compiled	[CE]  :  expected	105	None	replace
3	[BUG]  [BUGGY]  }  else  if(formatHeader.length  >  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(formatHeader.length  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(formatHeader.length  >  0)  {	  }    else    if(this.format.getFormatHeader()    >    0)    {    	non-compiled	[CE]  :  expected	105	None	replace
4	[BUG]  [BUGGY]  }  else  if(current.getFormatHeader()  >  0)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getFormatHeader()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getFormatHeader()  >  0)  {	  }    else    if(this.format.getFormatHeader()    >    0)    {    	non-compiled	[CE]  :  expected	105	None	replace
5	[BUG]  [BUGGY]  }  else  if(this.format.getFormatHeaderRecord()  >  0)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormatHeaderRecord()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormatHeaderRecord()  >  0)  {	  }    else    if(this.format.getFormatHeader()    >    0)    {    	non-compiled	[CE]  :  expected	105	None	replace
6	[BUG]  [BUGGY]  }  else  if(rec.getSkipHeaderRecord()!=  header)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getSkipHeaderRecord()!=  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getSkipHeaderRecord()!=  header)  {	  }    else    if(rec.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	103	None	replace
7	[BUG]  [BUGGY]  }  else  if(header.getSkipHeaderRecord()  ==  rec)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.getSkipHeaderRecord()  ==  rec)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.getSkipHeaderRecord()  ==  rec)  {	  }    else    if(rec.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	103	None	replace
8	[BUG]  [BUGGY]  }  else  if(rec.getRecordNumber()  ==  header)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getRecordNumber()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getRecordNumber()  ==  header)  {	  }    else    if(rec.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	103	None	replace
9	[BUG]  [BUGGY]  }  else  if(rec.getFormat()  ==  header)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getFormat()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormat()  ==  header)  {	  }    else    if(rec.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	103	None	replace
10	[BUG]  [BUGGY]  }  else  if(nextRecord.getSkipHeaderRecord()  ==  header)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getSkipHeaderRecord()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getSkipHeaderRecord()  ==  header)  {	  }    else    if(rec.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	103	None	replace
11	[BUG]  [BUGGY]  }  else  if(record.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(record.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(record.getSkipHeaderRecord()!=  null)  {	  }    else    if(rec.getHeader()!=    null)    {    	non-compiled	[CE]  :  expected	14	None	replace
12	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	85	None	replace
13	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  this.	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	85	None	replace
14	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  this.	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	85	None	replace
15	[BUG]  [BUGGY]  if(rec  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(rec  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(rec  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	85	None	replace
16	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	85	None	replace
17	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	85	None	replace
18	[BUG]  [BUGGY]  }  else  if(!this.format.getSkipHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getSkipHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getSkipHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	46	None	replace
19	[BUG]  [BUGGY]  }  else  if(!this.format.getSkipHeaderRecord().isEmpty())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getSkipHeaderRecord().isEmpty())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getSkipHeaderRecord().isEmpty())  {	  }    else    if(this.format.getHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	46	None	replace
20	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  this.format.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  this.format.isSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	118	None	replace
21	[BUG]  [BUGGY]  }  else  if(this.format!=  null  &&  header!=  null  &&  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format!=  null  &&  header!=  null  &&  this.format.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format!=  null  &&  header!=  null  &&  this.format.isSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	118	None	replace
22	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.isSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	118	None	replace
23	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	118	None	replace
24	[BUG]  [BUGGY]  }  else  if(header!=  null  ||  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  ||  this.format.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  ||  this.format.isSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	118	None	replace
25	[BUG]  [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)||  this.format.getSkipHeaderRecord())  {	  }    else    if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  :  expected	130	None	replace
26	[BUG]  [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)||  header  ==  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)||  header  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)||  header  ==  null)  {	  }    else    if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  :  expected	130	None	replace
27	[BUG]  [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES,  header))  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES,  header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES,  header))  {	  }    else    if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  :  expected	130	None	replace
28	[BUG]  [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)||  header!=  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)||  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)||  header!=  null)  {	  }    else    if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  :  expected	130	None	replace
29	[BUG]  [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  this.format.getSkipHeaderRecord())  {	  }    else    if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  :  expected	130	None	replace
30	[BUG]  [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  header!=  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  header!=  null)  {	  }    else    if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  :  expected	130	None	replace
31	[BUG]  [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  header.length()  >  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  header.length()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  header.length()  >  0)  {	  }    else    if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  :  expected	130	None	replace
32	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  header.length()  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  header.length()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  header.length()  >  0)  {	  }    else    if(header!=    null    &&    header.length()    >    0)    {    	non-compiled	[CE]  :  expected	117	None	replace
33	[BUG]  [BUGGY]  }  else  if(header!=  null  ||  header.length()  >  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  ||  header.length()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  ||  header.length()  >  0)  {	  }    else    if(header!=    null    &&    header.length()    >    0)    {    	non-compiled	[CE]  :  expected	117	None	replace
34	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  header.length()  ==  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  header.length()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  header.length()  ==  0)  {	  }    else    if(header!=    null    &&    header.length()    >    0)    {    	non-compiled	[CE]  :  expected	117	None	replace
35	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  header.length()!=  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  header.length()!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  header.length()!=  0)  {	  }    else    if(header!=    null    &&    header.length()    >    0)    {    	non-compiled	[CE]  :  expected	117	None	replace
36	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  header.length()  >=  0)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  header.length()  >=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  header.length()  >=  0)  {	  }    else    if(header!=    null    &&    header.length()    >    0)    {    	non-compiled	[CE]  :  expected	117	None	replace
37	[BUG]  [BUGGY]  }  else  if(header  ==  this.header)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  this.header)  {	  }    else    if(header    <    this.header)    {    	non-compiled	[CE]  :  expected	73	None	replace
38	[BUG]  [BUGGY]  }  else  if(header!=  this.header)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  this.header)  {	  }    else    if(header    <    this.header)    {    	non-compiled	[CE]  :  expected	73	None	replace
39	[BUG]  [BUGGY]  }  else  if(header.length  <  this.header)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length  <  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length  <  this.header)  {	  }    else    if(header    <    this.header)    {    	non-compiled	[CE]  :  expected	73	None	replace
40	[BUG]  [BUGGY]  }  else  if(header.length()  <  this.header)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length()  <  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length()  <  this.header)  {	  }    else    if(header    <    this.header)    {    	non-compiled	[CE]  :  expected	73	None	replace
41	[BUG]  [BUGGY]  }  else  if(header  >=  this.header)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  >=  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  >=  this.header)  {	  }    else    if(header    <    this.header)    {    	non-compiled	[CE]  :  expected	73	None	replace
42	[BUG]  [BUGGY]  }  else  if(this.header!=  header)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header!=  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header!=  header)  {	  }    else    if(header    <    this.header)    {    	non-compiled	[CE]  :  expected	73	None	replace
43	[BUG]  [BUGGY]  }  else  if(this.header  <  header)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header  <  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header  <  header)  {	  }    else    if(header    <    this.header)    {    	non-compiled	[CE]  :  expected	73	None	replace
44	[BUG]  [BUGGY]  }  else  if(current.getFormat()  ==  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getFormat()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getFormat()  ==  null)  {	  }    else    if(this.format.getFormat()    ==    null)    {    	non-compiled	[CE]  :  expected	61	None	replace
45	[BUG]  [BUGGY]  }  else  if(!this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getSkipHeaderRecord())  {	  }    else    if(!this.format.isRecord())    {    	non-compiled	[CE]  :  expected	81	None	replace
46	[BUG]  [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  ||!this.format.isRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  ||!this.format.isRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isSkipHeaderRecord()  ||!this.format.isRecord())  {	  }    else    if(!this.format.isRecord())    {    	non-compiled	[CE]  :  expected	81	None	replace
47	[BUG]  [BUGGY]  }  else  if(!this.format.isRecord()  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isRecord()  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isRecord()  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(!this.format.isRecord())    {    	non-compiled	[CE]  :  expected	81	None	replace
48	[BUG]  [BUGGY]  }  else  if(!this.format.isSelectedRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isSelectedRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isSelectedRecord())  {	  }    else    if(this.format.isSelectedRecord())    {    	non-compiled	[CE]  :  expected	97	None	replace
49	[BUG]  [BUGGY]  }  else  if(rec.isSelectedRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.isSelectedRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isSelectedRecord())  {	  }    else    if(this.format.isSelectedRecord())    {    	non-compiled	[CE]  :  expected	97	None	replace
50	[BUG]  [BUGGY]  }  else  if(nextRecord.isSelectedRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.isSelectedRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.isSelectedRecord())  {	  }    else    if(this.format.isSelectedRecord())    {    	non-compiled	[CE]  :  expected	97	None	replace
51	[BUG]  [BUGGY]  }  else  if(this.format.isSelectedHeaderRecord())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isSelectedHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isSelectedHeaderRecord())  {	  }    else    if(this.format.isSelectedRecord())    {    	non-compiled	[CE]  :  expected	97	None	replace
52	[BUG]  [BUGGY]  }  else  if(this.format.isSelectedRecord()  ||  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isSelectedRecord()  ||  this.format.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isSelectedRecord()  ||  this.format.isSkipHeaderRecord())  {	  }    else    if(this.format.isSelectedRecord())    {    	non-compiled	[CE]  :  expected	97	None	replace
53	[BUG]  [BUGGY]  }  else  if(this.format.hasSkipHeaderRecord()  &&  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasSkipHeaderRecord()  &&  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasSkipHeaderRecord()  &&  this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord()    ||    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	38	None	replace
54	[BUG]  [BUGGY]  }  else  if(this.format.hasHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord()    ||    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	38	None	replace
55	[BUG]  [BUGGY]  }  else  if(this.format.hasRecord()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasRecord()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasRecord()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord()    ||    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	38	None	replace
56	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord()    ||    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	38	None	replace
57	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord()    ||    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	38	None	replace
58	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeader()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasSkipHeader()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeader()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord()    ||    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	38	None	replace
59	[BUG]  [BUGGY]  }  else  if(header  ==  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	133	None	replace
60	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()  ==  header)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordNumber()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()  ==  header)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	133	None	replace
61	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()!=  header)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()!=  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()!=  header)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	133	None	replace
62	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  ==  header)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  ==  header)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	133	None	replace
63	[BUG]  [BUGGY]  }  else  if(current.getSkipHeaderRecord()  ==  header)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getSkipHeaderRecord()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getSkipHeaderRecord()  ==  header)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	133	None	replace
64	[BUG]  [BUGGY]  }  else  if(this.format.getFormat()  ==  header)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormat()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormat()  ==  header)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	133	None	replace
65	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
66	[BUG]  [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
67	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
68	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
69	[BUG]  [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
70	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
71	[BUG]  [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
72	[BUG]  [BUGGY]  }  else  if(rec.hasRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasRecord())  {	  }    else    if(this.format.hasRecord())    {    	non-compiled	[CE]  :  expected	77	None	replace
73	[BUG]  [BUGGY]  }  else  if(!this.format.hasRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.hasRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.hasRecord())  {	  }    else    if(this.format.hasRecord())    {    	non-compiled	[CE]  :  expected	77	None	replace
74	[BUG]  [BUGGY]  }  else  if(nextRecord.hasRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.hasRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasRecord())  {	  }    else    if(this.format.hasRecord())    {    	non-compiled	[CE]  :  expected	77	None	replace
75	[BUG]  [BUGGY]  }  else  if(this.format.hasRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasRecord()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.hasRecord())    {    	non-compiled	[CE]  :  expected	77	None	replace
76	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderSize()  ==  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderSize()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderSize()  ==  0)  {	  }    else    if(this.format.getHeaderSize()    >    0)    {    	non-compiled	[CE]  :  expected	106	None	replace
77	[BUG]  [BUGGY]  }  else  if(nextRecord.getHeaderSize()  >  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getHeaderSize()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getHeaderSize()  >  0)  {	  }    else    if(this.format.getHeaderSize()    >    0)    {    	non-compiled	[CE]  :  expected	106	None	replace
78	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderSize()!=  0)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderSize()!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderSize()!=  0)  {	  }    else    if(this.format.getHeaderSize()    >    0)    {    	non-compiled	[CE]  :  expected	106	None	replace
79	[BUG]  [BUGGY]  }  else  if(current.getHeaderSize()  >  0)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getHeaderSize()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getHeaderSize()  >  0)  {	  }    else    if(this.format.getHeaderSize()    >    0)    {    	non-compiled	[CE]  :  expected	106	None	replace
80	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderSize()  >=  0)  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderSize()  >=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderSize()  >=  0)  {	  }    else    if(this.format.getHeaderSize()    >    0)    {    	non-compiled	[CE]  :  expected	106	None	replace
81	[BUG]  [BUGGY]  }  else  if(rec.hasFormat())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasFormat())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasFormat())  {	  }    else    if(this.format.hasFormat())    {    	non-compiled	[CE]  :  expected	78	None	replace
82	[BUG]  [BUGGY]  }  else  if(!this.format.hasFormat())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.hasFormat())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.hasFormat())  {	  }    else    if(this.format.hasFormat())    {    	non-compiled	[CE]  :  expected	78	None	replace
83	[BUG]  [BUGGY]  }  else  if(nextRecord.hasFormat())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.hasFormat())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasFormat())  {	  }    else    if(this.format.hasFormat())    {    	non-compiled	[CE]  :  expected	78	None	replace
84	[BUG]  [BUGGY]  }  else  if(rec.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	55	None	replace
85	[BUG]  [BUGGY]  }  else  if(record.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(record.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(record.getSkipHeaderRecord())  {	  }    else    if(rec.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	55	None	replace
86	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  header.length  >  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  header.length  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  header.length  >  0)  {	  }    else    if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	115	None	replace
87	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  header.length  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  header.length  >  0)  {	  }    else    if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	115	None	replace
88	[BUG]  [BUGGY]  }  else  if(header!=  null  ||  header.length  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  ||  header.length  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  ||  header.length  >  0)  {	  }    else    if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	115	None	replace
89	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  formatHeader.length  >  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  formatHeader.length  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  formatHeader.length  >  0)  {	  }    else    if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	115	None	replace
90	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  formatHeader.length  >  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  formatHeader.length  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  formatHeader.length  >  0)  {	  }    else    if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	115	None	replace
91	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  header.length  >  1)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  header.length  >  1)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  header.length  >  1)  {	  }    else    if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	115	None	replace
92	[BUG]  [BUGGY]  }  else  if(rec.hasRecordedSize())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasRecordedSize())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasRecordedSize())  {	  }    else    if(this.format.hasRecordedSize())    {    	non-compiled	[CE]  :  expected	121	None	replace
93	[BUG]  [BUGGY]  }  else  if(!this.format.hasRecordedSize())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.hasRecordedSize())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.hasRecordedSize())  {	  }    else    if(this.format.hasRecordedSize())    {    	non-compiled	[CE]  :  expected	121	None	replace
94	[BUG]  [BUGGY]  }  else  if(nextRecord.hasRecordedSize())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.hasRecordedSize())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasRecordedSize())  {	  }    else    if(this.format.hasRecordedSize())    {    	non-compiled	[CE]  :  expected	121	None	replace
95	[BUG]  [BUGGY]  }  else  if(this.format.hasRecordedHeaderRecord())  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasRecordedHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasRecordedHeaderRecord())  {	  }    else    if(this.format.hasRecordedSize())    {    	non-compiled	[CE]  :  expected	121	None	replace
96	[BUG]  [BUGGY]  }  else  if(current.hasRecordedSize())  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.hasRecordedSize())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.hasRecordedSize())  {	  }    else    if(this.format.hasRecordedSize())    {    	non-compiled	[CE]  :  expected	121	None	replace
97	[BUG]  [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	124	None	replace
98	[BUG]  [BUGGY]  if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	124	None	replace
99	[BUG]  [BUGGY]  if(this.format  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	124	None	replace
100	[BUG]  [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	124	None	replace
101	[BUG]  [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	124	None	replace
102	[BUG]  [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.toString();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.toString();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	124	None	replace
103	[BUG]  [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.values();    }    	non-compiled	[CE]  :  expected	128	None	replace
104	[BUG]  [BUGGY]  if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.values();    }    	non-compiled	[CE]  :  expected	128	None	replace
105	[BUG]  [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.values();    }    	non-compiled	[CE]  :  expected	128	None	replace
106	[BUG]  [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  }  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.values();    }    	non-compiled	[CE]  :  expected	128	None	replace
107	[BUG]  [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.values();  }  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.values();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.values();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.values();    }    	non-compiled	[CE]  :  expected	128	None	replace
108	[BUG]  [BUGGY]  if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.values();  }  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.values();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.values();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.values();    }    	non-compiled	[CE]  :  expected	128	None	replace
109	[BUG]  [BUGGY]  }  else  if(!current.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!current.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!current.hasSkipHeaderRecord())  {	  }    else    if(current.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	37	None	replace
110	[BUG]  [BUGGY]  }  else  if(current.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(current.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	37	None	replace
111	[BUG]  [BUGGY]  }  else  if(header.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.hasSkipHeaderRecord())  {	  }    else    if(current.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	37	None	replace
112	[BUG]  [BUGGY]  }  else  if(current.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(current.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	37	None	replace
113	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  this.format.hasSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	116	None	replace
114	[BUG]  [BUGGY]  }  else  if(this.format!=  null  &&  header!=  null  &&  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format!=  null  &&  header!=  null  &&  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format!=  null  &&  header!=  null  &&  this.format.hasSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	116	None	replace
115	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	116	None	replace
116	[BUG]  [BUGGY]  }  else  if(header!=  null  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	116	None	replace
117	[BUG]  [BUGGY]  }  else  if(this.header  ==  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header  ==  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header  ==  this.format.getSkipHeaderRecord())  {	  }    else    if(this.header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	113	None	replace
118	[BUG]  [BUGGY]  }  else  if(header!=  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  this.format.getSkipHeaderRecord())  {	  }    else    if(this.header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	113	None	replace
119	[BUG]  [BUGGY]  }  else  if(this.header  ==  null  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header  ==  null  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header  ==  null  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(this.header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	113	None	replace
120	[BUG]  [BUGGY]  }  else  if(this.header  ==  nextRecord.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header  ==  nextRecord.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header  ==  nextRecord.getSkipHeaderRecord())  {	  }    else    if(this.header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	113	None	replace
121	[BUG]  [BUGGY]  }  else  if(this.header!=  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header!=  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header!=  this.format.getSkipHeaderRecord())  {	  }    else    if(this.header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	113	None	replace
122	[BUG]  [BUGGY]  }  else  if(this.header!=  nextRecord.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header!=  nextRecord.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header!=  nextRecord.getSkipHeaderRecord())  {	  }    else    if(this.header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	113	None	replace
123	[BUG]  [BUGGY]  }  else  if(record.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(record.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(record.getSkipHeaderRecord()  ==  null)  {	  }    else    if(rec.getFormat()    ==    null)    {    	non-compiled	[CE]  :  expected	50	None	replace
124	[BUG]  [BUGGY]  }  else  if(!this.format.isSkipHeader())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isSkipHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isSkipHeader())  {	  }    else    if(!this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	54	None	replace
125	[BUG]  [BUGGY]  }  else  if(!this.format.hasHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.hasHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.hasHeaderRecord())  {	  }    else    if(!this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	54	None	replace
126	[BUG]  [BUGGY]  }  else  if(!rec.getHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!rec.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!rec.getHeaderRecord())  {	  }    else    if(!this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	54	None	replace
127	[BUG]  [BUGGY]  }  else  if(!this.format.hasHeader())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.hasHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.hasHeader())  {	  }    else    if(!this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	54	None	replace
128	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
129	[BUG]  [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
130	[BUG]  [BUGGY]  &&  this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.equals  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  &&  this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.equals  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	&&  this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.equals	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
131	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
132	[BUG]  [BUGGY]  &&  this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals  [CE]  :  expected  [FE]                                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  &&  this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	&&  this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
133	[BUG]  [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals  [CE]  :  expected  [FE]                                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
134	[BUG]  [BUGGY]  }  else  if(rec.hasHeaderRecord())  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasHeaderRecord())  {	  }    else    if(this.format.hasHeaderRecord())    {    	non-compiled	[CE]  :  expected	39	None	replace
135	[BUG]  [BUGGY]  }  else  if(nextRecord.hasHeaderRecord())  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.hasHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasHeaderRecord())  {	  }    else    if(this.format.hasHeaderRecord())    {    	non-compiled	[CE]  :  expected	39	None	replace
136	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getHeader()  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.getHeader()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getHeader()  >  0)  {	  }    else    if(this.format.getHeader()    >    0)    {    	non-compiled	[CE]  :  expected	104	None	replace
137	[BUG]  [BUGGY]  }  else  if(nextRecord.getHeader()  >  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getHeader()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getHeader()  >  0)  {	  }    else    if(this.format.getHeader()    >    0)    {    	non-compiled	[CE]  :  expected	104	None	replace
138	[BUG]  [BUGGY]  }  else  if(rec.getHeader()  >  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeader()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeader()  >  0)  {	  }    else    if(this.format.getHeader()    >    0)    {    	non-compiled	[CE]  :  expected	104	None	replace
139	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  <  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  <  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()  <  0)  {	  }    else    if(this.format.getHeader()    >    0)    {    	non-compiled	[CE]  :  expected	104	None	replace
140	[BUG]  [BUGGY]  }  else  if(this.format.getHeader()  ==  0)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeader()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeader()  ==  0)  {	  }    else    if(this.format.getHeader()    >    0)    {    	non-compiled	[CE]  :  expected	104	None	replace
141	[BUG]  [BUGGY]  }  else  if(rec.isHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.isHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isHeaderRecord())  {	  }    else    if(this.format.isHeaderRecord())    {    	non-compiled	[CE]  :  expected	9	None	replace
142	[BUG]  [BUGGY]  }  else  if(this.format.isHeaderRecord()  ||  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isHeaderRecord()  ||  this.format.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isHeaderRecord()  ||  this.format.isSkipHeaderRecord())  {	  }    else    if(this.format.isHeaderRecord())    {    	non-compiled	[CE]  :  expected	9	None	replace
143	[BUG]  [BUGGY]  }  else  if(this.format.isHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.isHeaderRecord())    {    	non-compiled	[CE]  :  expected	9	None	replace
144	[BUG]  [BUGGY]  }  else  if(this.format.getFormat()  ==  this.header)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormat()  ==  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormat()  ==  this.header)  {	  }    else    if(this.format.getFormat()    <    this.header)    {    	non-compiled	[CE]  :  expected	74	None	replace
145	[BUG]  [BUGGY]  }  else  if(this.format.getFormat()!=  this.header)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormat()!=  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormat()!=  this.header)  {	  }    else    if(this.format.getFormat()    <    this.header)    {    	non-compiled	[CE]  :  expected	74	None	replace
146	[BUG]  [BUGGY]  }  else  if(this.format.getFormat()  >=  this.header)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormat()  >=  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormat()  >=  this.header)  {	  }    else    if(this.format.getFormat()    <    this.header)    {    	non-compiled	[CE]  :  expected	74	None	replace
147	[BUG]  [BUGGY]  }  else  if(rec.getFormat()  <  this.header)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getFormat()  <  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormat()  <  this.header)  {	  }    else    if(this.format.getFormat()    <    this.header)    {    	non-compiled	[CE]  :  expected	74	None	replace
148	[BUG]  [BUGGY]  }  else  if(header.getFormat()  <  this.format)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.getFormat()  <  this.format)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.getFormat()  <  this.format)  {	  }    else    if(this.format.getFormat()    <    this.header)    {    	non-compiled	[CE]  :  expected	74	None	replace
149	[BUG]  [BUGGY]  }  else  if(current.getFormat()  <  this.header)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getFormat()  <  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getFormat()  <  this.header)  {	  }    else    if(this.format.getFormat()    <    this.header)    {    	non-compiled	[CE]  :  expected	74	None	replace
150	[BUG]  [BUGGY]  }  else  if(header.equals(this.format))  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.equals(this.format))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.equals(this.format))  {	  }    else    if(this.format.equals(header))    {    	non-compiled	[CE]  :  expected	109	None	replace
151	[BUG]  [BUGGY]  }  else  if(this.format.equals(header)&&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.equals(header)&&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.equals(header)&&  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.equals(header))    {    	non-compiled	[CE]  :  expected	109	None	replace
152	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getSkipHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord().equals(header))  {	  }    else    if(this.format.equals(header))    {    	non-compiled	[CE]  :  expected	109	None	replace
153	[BUG]  [BUGGY]  }  else  if(this.format.equals(header)||  this.format.getSkipHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.equals(header)||  this.format.getSkipHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.equals(header)||  this.format.getSkipHeaderRecord().equals(header))  {	  }    else    if(this.format.equals(header))    {    	non-compiled	[CE]  :  expected	109	None	replace
154	[BUG]  [BUGGY]  }  else  if(this.format.equals(header)||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.equals(header)||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.equals(header)||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.equals(header))    {    	non-compiled	[CE]  :  expected	109	None	replace
155	[BUG]  [BUGGY]  }  else  if(this.format.equals(header)||  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.equals(header)||  this.format.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.equals(header)||  this.format.isSkipHeaderRecord())  {	  }    else    if(this.format.equals(header))    {    	non-compiled	[CE]  :  expected	109	None	replace
156	[BUG]  [BUGGY]  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    this.nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	126	None	replace
157	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString()  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString()  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString()	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    this.nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	126	None	replace
158	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    this.nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	126	None	replace
159	[BUG]  [BUGGY]  if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    this.nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	126	None	replace
160	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.to  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.to  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.to	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    this.nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	126	None	replace
161	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    this.nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	126	None	replace
162	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    this.nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	126	None	replace
163	[BUG]  [BUGGY]  }  else  if(nextRecord.getHeader())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getHeader())  {	  }    else    if(rec.getHeader())    {    	non-compiled	[CE]  :  expected	56	None	replace
164	[BUG]  [BUGGY]  }  else  if(rec.getHeader()  instanceof  SkipHeaderRecord)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeader()  instanceof  SkipHeaderRecord)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeader()  instanceof  SkipHeaderRecord)  {	  }    else    if(rec.getHeader())    {    	non-compiled	[CE]  :  expected	56	None	replace
165	[BUG]  [BUGGY]  hdrMap.put(rec,  header);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(rec,  header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(rec,  header);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	86	None	replace
166	[BUG]  [BUGGY]  hdrMap.put(record,  header  +  1);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(record,  header  +  1);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(record,  header  +  1);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	86	None	replace
167	[BUG]  [BUGGY]  hdrMap.put(record,  nextRecord);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(record,  nextRecord);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(record,  nextRecord);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	86	None	replace
168	[BUG]  [BUGGY]  hdrMap.put(record,  this.header);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(record,  this.header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(record,  this.header);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	86	None	replace
169	[BUG]  [BUGGY]  hdrMap.put(receiver,  header);  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(receiver,  header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(receiver,  header);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	86	None	replace
170	[BUG]  [BUGGY]  }  else  if(current.getFormat()!=  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getFormat()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getFormat()!=  null)  {	  }    else    if(this.format.getFormat()!=    null)    {    	non-compiled	[CE]  :  expected	48	None	replace
171	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  >=  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  >=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()  >=  null)  {	  }    else    if(this.format.getFormat()!=    null)    {    	non-compiled	[CE]  :  expected	48	None	replace
172	[BUG]  [BUGGY]  }  else  if(!this.format.hasNextRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.hasNextRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.hasNextRecord())  {	  }    else    if(!this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	33	None	replace
173	[BUG]  [BUGGY]  }  else  if(!this.format.hasSkipHeaderRecord()  ||  header  ==  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.hasSkipHeaderRecord()  ||  header  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.hasSkipHeaderRecord()  ||  header  ==  null)  {	  }    else    if(!this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	33	None	replace
174	[BUG]  [BUGGY]  }  else  if(!this.format.hasSkipHeaderRecord()  &&  header!=  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.hasSkipHeaderRecord()  &&  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.hasSkipHeaderRecord()  &&  header!=  null)  {	  }    else    if(!this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	33	None	replace
175	[BUG]  [BUGGY]  }  else  if(!this.format.hasSkipHeaderRecord()  ||  header!=  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.hasSkipHeaderRecord()  ||  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.hasSkipHeaderRecord()  ||  header!=  null)  {	  }    else    if(!this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	33	None	replace
176	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	107	None	replace
177	[BUG]  [BUGGY]  }  else  if(header!=  null  ||  this.format.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  ||  this.format.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  ||  this.format.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	107	None	replace
178	[BUG]  [BUGGY]  }  else  if(rec.getHeader()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeader()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeader()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	107	None	replace
179	[BUG]  [BUGGY]  }  else  if(rec.getHeaderRecord()  ||  rec.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeaderRecord()  ||  rec.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderRecord()  ||  rec.getSkipHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	107	None	replace
180	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  ||  nextRecord.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  ||  nextRecord.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  ||  nextRecord.getSkipHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	107	None	replace
181	[BUG]  [BUGGY]  }  else  if(nextRecord!=  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord!=  null)  {	  }    else    if(this.format!=    null)    {    	non-compiled	[CE]  :  expected	1	None	replace
182	[BUG]  [BUGGY]  }  else  if(header.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.getSkipHeaderRecord())  {	  }    else    if(nextRecord.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	53	None	replace
183	[BUG]  [BUGGY]  }  else  if(currentRecord.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(currentRecord.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(currentRecord.getSkipHeaderRecord())  {	  }    else    if(nextRecord.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	53	None	replace
184	[BUG]  [BUGGY]  }  else  if(current.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getSkipHeaderRecord())  {	  }    else    if(nextRecord.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	53	None	replace
185	[BUG]  [BUGGY]  }  else  if(rec.isRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.isRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isRecord())  {	  }    else    if(this.format.isRecord())    {    	non-compiled	[CE]  :  expected	96	None	replace
186	[BUG]  [BUGGY]  }  else  if(this.format.isRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isRecord()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.isRecord())    {    	non-compiled	[CE]  :  expected	96	None	replace
187	[BUG]  [BUGGY]  }  else  if(this.format.isRecord()  ||  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isRecord()  ||  this.format.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isRecord()  ||  this.format.isSkipHeaderRecord())  {	  }    else    if(this.format.isRecord())    {    	non-compiled	[CE]  :  expected	96	None	replace
188	[BUG]  [BUGGY]  this.nextRecord();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  this.nextRecord();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	this.nextRecord();	  if(header    ==    null)    {    if(this.format.getSkipHeaderRecord())    {    this.nextRecord();    }    	non-compiled	[CE]  :  expected	83	None	replace
189	[BUG]  [BUGGY]  if(header!=  null)  {  if(this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  if(this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  if(this.format.getSkipHeaderRecord())  {  this.nextRecord();  }	  if(header    ==    null)    {    if(this.format.getSkipHeaderRecord())    {    this.nextRecord();    }    	non-compiled	[CE]  :  expected	83	None	replace
190	[BUG]  [BUGGY]  if(rec.size()  ==  0)  {  if(this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(rec.size()  ==  0)  {  if(this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(rec.size()  ==  0)  {  if(this.format.getSkipHeaderRecord())  {  this.nextRecord();  }	  if(header    ==    null)    {    if(this.format.getSkipHeaderRecord())    {    this.nextRecord();    }    	non-compiled	[CE]  :  expected	83	None	replace
191	[BUG]  [BUGGY]  if(rec.size()  >  0)  {  if(this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(rec.size()  >  0)  {  if(this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(rec.size()  >  0)  {  if(this.format.getSkipHeaderRecord())  {  this.nextRecord();  }	  if(header    ==    null)    {    if(this.format.getSkipHeaderRecord())    {    this.nextRecord();    }    	non-compiled	[CE]  :  expected	83	None	replace
192	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format.getRecord())  {  this.nextRecord();  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format.getRecord())  {  this.nextRecord();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format.getRecord())  {  this.nextRecord();  }	  if(header    ==    null)    {    if(this.format.getSkipHeaderRecord())    {    this.nextRecord();    }    	non-compiled	[CE]  :  expected	83	None	replace
193	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format.getRecordNumber())  {  this.nextRecord();  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format.getRecordNumber())  {  this.nextRecord();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format.getRecordNumber())  {  this.nextRecord();  }	  if(header    ==    null)    {    if(this.format.getSkipHeaderRecord())    {    this.nextRecord();    }    	non-compiled	[CE]  :  expected	83	None	replace
194	[BUG]  [BUGGY]  }  else  if(header.isSkipHeader())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.isSkipHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.isSkipHeader())  {	  }    else    if(nextRecord.isSkipHeader())    {    	non-compiled	[CE]  :  expected	10	None	replace
195	[BUG]  [BUGGY]  }  else  if(nextRecord.isSkipHeader()  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.isSkipHeader()  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.isSkipHeader()  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(nextRecord.isSkipHeader())    {    	non-compiled	[CE]  :  expected	10	None	replace
196	[BUG]  [BUGGY]  }  else  if(!nextRecord.isSkipHeader())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!nextRecord.isSkipHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!nextRecord.isSkipHeader())  {	  }    else    if(nextRecord.isSkipHeader())    {    	non-compiled	[CE]  :  expected	10	None	replace
197	[BUG]  [BUGGY]  }  else  if(header.hasSkipHeader())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.hasSkipHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.hasSkipHeader())  {	  }    else    if(nextRecord.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	76	None	replace
198	[BUG]  [BUGGY]  }  else  if(nextRecord.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(nextRecord.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	76	None	replace
199	[BUG]  [BUGGY]  }  else  if(nextRecord.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(nextRecord.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	76	None	replace
200	[BUG]  [BUGGY]  }  else  if(currentRecord.hasSkipHeader())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(currentRecord.hasSkipHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(currentRecord.hasSkipHeader())  {	  }    else    if(nextRecord.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	76	None	replace
201	[BUG]  [BUGGY]  }  else  if(rec.size()  ==  0)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.size()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.size()  ==  0)  {	  }    else    if(rec.size()    >    0)    {    	non-compiled	[CE]  :  expected	20	None	replace
202	[BUG]  [BUGGY]  }  else  if(rec.size()!=  0)  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.size()!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.size()!=  0)  {	  }    else    if(rec.size()    >    0)    {    	non-compiled	[CE]  :  expected	20	None	replace
203	[BUG]  [BUGGY]  }  else  if(record.size()  ==  0)  {  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(record.size()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(record.size()  ==  0)  {	  }    else    if(rec.size()    >    0)    {    	non-compiled	[CE]  :  expected	20	None	replace
204	[BUG]  [BUGGY]  }  else  if(rec.size()  >=  0)  {  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.size()  >=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.size()  >=  0)  {	  }    else    if(rec.size()    >    0)    {    	non-compiled	[CE]  :  expected	20	None	replace
205	[BUG]  [BUGGY]  }  else  if(header.size()  >  0)  {  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.size()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.size()  >  0)  {	  }    else    if(rec.size()    >    0)    {    	non-compiled	[CE]  :  expected	20	None	replace
206	[BUG]  [BUGGY]  }  else  if(rec.size()  <  0)  {  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.size()  <  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.size()  <  0)  {	  }    else    if(rec.size()    >    0)    {    	non-compiled	[CE]  :  expected	20	None	replace
207	[BUG]  [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()  ==  header)  {  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()  ==  header)  {	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
208	[BUG]  [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHea  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHea  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHea	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
209	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHea  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHea  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHea	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
210	[BUG]  [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRe  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRe  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRe	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
211	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRe  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRe  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRe	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
212	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()  ==  header)  {  [CE]  :  expected  [FE]                                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()  ==  header)  {	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
213	[BUG]  [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()  ==  header  [CE]  :  expected  [FE]                                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()  ==  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()  ==  header	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
214	[BUG]  [BUGGY]  }  else  if(nextRecord.getHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getHeaderRecord()  ==  null)  {	  }    else    if(rec.getHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	82	None	replace
215	[BUG]  [BUGGY]  }  else  if(header.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.isSkipHeaderRecord())  {	  }    else    if(nextRecord.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	8	None	replace
216	[BUG]  [BUGGY]  }  else  if(!nextRecord.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!nextRecord.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!nextRecord.isSkipHeaderRecord())  {	  }    else    if(nextRecord.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	8	None	replace
217	[BUG]  [BUGGY]  }  else  if(current.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.isSkipHeaderRecord())  {	  }    else    if(nextRecord.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	8	None	replace
218	[BUG]  [BUGGY]  }  else  if(!rec.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!rec.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!rec.isSkipHeaderRecord())  {	  }    else    if(nextRecord.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	8	None	replace
219	[BUG]  [BUGGY]  }  else  if(rec.getFormat())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getFormat())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormat())  {	  }    else    if(rec.getSkipHeader())    {    	non-compiled	[CE]  :  expected	23	None	replace
220	[BUG]  [BUGGY]  }  else  if(rec.getRecordNumber())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getRecordNumber())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getRecordNumber())  {	  }    else    if(rec.getSkipHeader())    {    	non-compiled	[CE]  :  expected	23	None	replace
221	[BUG]  [BUGGY]  }  else  if(nextRecord.getSkipHeader())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getSkipHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getSkipHeader())  {	  }    else    if(rec.getSkipHeader())    {    	non-compiled	[CE]  :  expected	23	None	replace
222	[BUG]  [BUGGY]  }  else  if(rec.getNumber())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getNumber())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getNumber())  {	  }    else    if(rec.getSkipHeader())    {    	non-compiled	[CE]  :  expected	23	None	replace
223	[BUG]  [BUGGY]  }  else  if(rec.getSize())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getSize())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getSize())  {	  }    else    if(rec.getSkipHeader())    {    	non-compiled	[CE]  :  expected	23	None	replace
224	[BUG]  [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  header  =  formatHeader  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  header  =  formatHeader  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  header  =  formatHeader	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
225	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  format  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  format  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  format	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
226	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  format  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  format  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  format	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
227	[BUG]  [BUGGY]  if(rec.size()  >  0)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  header  =  formatHeader  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(rec.size()  >  0)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  header  =  formatHeader  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(rec.size()  >  0)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  header  =  formatHeader	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
228	[BUG]  [BUGGY]  if(rec.size()  ==  0)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  header  =  formatHeader  [CE]  :  expected  [FE]                                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(rec.size()  ==  0)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  header  =  formatHeader  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(rec.size()  ==  0)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  header  =  formatHeader	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
229	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  [CE]  :  expected  [FE]                                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
230	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  [CE]  :  expected  [FE]                                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
231	[BUG]  [BUGGY]  }  else  if(!this.format.getSkipHeaderRecord()  ||  header!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getSkipHeaderRecord()  ||  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getSkipHeaderRecord()  ||  header!=  null)  {	  }    else    if(!this.format.isSkipHeaderRecord()    ||    header!=    null)    {    	non-compiled	[CE]  :  expected	42	None	replace
232	[BUG]  [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  ||  this.header!=  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  ||  this.header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isSkipHeaderRecord()  ||  this.header!=  null)  {	  }    else    if(!this.format.isSkipHeaderRecord()    ||    header!=    null)    {    	non-compiled	[CE]  :  expected	42	None	replace
233	[BUG]  [BUGGY]  }  else  if(!this.format.isHeaderRecord()  ||  header!=  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isHeaderRecord()  ||  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isHeaderRecord()  ||  header!=  null)  {	  }    else    if(!this.format.isSkipHeaderRecord()    ||    header!=    null)    {    	non-compiled	[CE]  :  expected	42	None	replace
234	[BUG]  [BUGGY]  }  else  if(rec.getNumber()  ==  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getNumber()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getNumber()  ==  0)  {	  }    else    if(rec.getNumber()    >    0)    {    	non-compiled	[CE]  :  expected	26	None	replace
235	[BUG]  [BUGGY]  }  else  if(rec.getSkipHeaderRecord()  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getSkipHeaderRecord()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getSkipHeaderRecord()  >  0)  {	  }    else    if(rec.getNumber()    >    0)    {    	non-compiled	[CE]  :  expected	26	None	replace
236	[BUG]  [BUGGY]  }  else  if(rec.getNumber()  <  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getNumber()  <  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getNumber()  <  0)  {	  }    else    if(rec.getNumber()    >    0)    {    	non-compiled	[CE]  :  expected	26	None	replace
237	[BUG]  [BUGGY]  }  else  if(rec.getNumber()  >=  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getNumber()  >=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getNumber()  >=  0)  {	  }    else    if(rec.getNumber()    >    0)    {    	non-compiled	[CE]  :  expected	26	None	replace
238	[BUG]  [BUGGY]  }  else  if(rec.getNumber()!=  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getNumber()!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getNumber()!=  0)  {	  }    else    if(rec.getNumber()    >    0)    {    	non-compiled	[CE]  :  expected	26	None	replace
239	[BUG]  [BUGGY]  }  else  if(rec.getNumber()  >  1)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getNumber()  >  1)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getNumber()  >  1)  {	  }    else    if(rec.getNumber()    >    0)    {    	non-compiled	[CE]  :  expected	26	None	replace
240	[BUG]  [BUGGY]  }  else  if(header.getHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.getHeaderRecord())  {	  }    else    if(nextRecord.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	58	None	replace
241	[BUG]  [BUGGY]  }  else  if(currentRecord.getHeaderRecord())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(currentRecord.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(currentRecord.getHeaderRecord())  {	  }    else    if(nextRecord.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	58	None	replace
242	[BUG]  [BUGGY]  }  else  if(this.format.getRecordHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordHeaderRecord()!=  null)  {	  }    else    if(this.format.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	47	None	replace
243	[BUG]  [BUGGY]  }  else  if(current.getRecordNumber()!=  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getRecordNumber()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getRecordNumber()!=  null)  {	  }    else    if(this.format.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	47	None	replace
244	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(rec.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	34	None	replace
245	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(rec.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	34	None	replace
246	[BUG]  [BUGGY]  }  else  if(!rec.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!rec.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!rec.hasSkipHeaderRecord())  {	  }    else    if(rec.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	34	None	replace
247	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(rec.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	34	None	replace
248	[BUG]  [BUGGY]  }  else  if(rec.hasNextRecord())  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasNextRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasNextRecord())  {	  }    else    if(rec.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	34	None	replace
249	[BUG]  [BUGGY]  final  CSVFormat  format  =  this.nextRecord.getFormat();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  format  =  this.nextRecord.getFormat();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  format  =  this.nextRecord.getFormat();	  final    CSVFormat    format    =    nextRecord.getFormat();    	non-compiled	[CE]  :  expected	67	None	replace
250	[BUG]  [BUGGY]  final  CSVFormat  format  =  this.header.getFormat();  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  format  =  this.header.getFormat();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  format  =  this.header.getFormat();	  final    CSVFormat    format    =    nextRecord.getFormat();    	non-compiled	[CE]  :  expected	67	None	replace
251	[BUG]  [BUGGY]  final  CSVFormat  format  =  this.currentRecord.getFormat();  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  format  =  this.currentRecord.getFormat();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  format  =  this.currentRecord.getFormat();	  final    CSVFormat    format    =    nextRecord.getFormat();    	non-compiled	[CE]  :  expected	67	None	replace
252	[BUG]  [BUGGY]  final  CSVFormat  format  =  this.record.getFormat();  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  format  =  this.record.getFormat();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  format  =  this.record.getFormat();	  final    CSVFormat    format    =    nextRecord.getFormat();    	non-compiled	[CE]  :  expected	67	None	replace
253	[BUG]  [BUGGY]  final  CSVFormat  format  =  rec.getFormat();  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  format  =  rec.getFormat();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  format  =  rec.getFormat();	  final    CSVFormat    format    =    nextRecord.getFormat();    	non-compiled	[CE]  :  expected	67	None	replace
254	[BUG]  [BUGGY]  final  CSVFormat  format  =  this.headerMap.getFormat();  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  format  =  this.headerMap.getFormat();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  format  =  this.headerMap.getFormat();	  final    CSVFormat    format    =    nextRecord.getFormat();    	non-compiled	[CE]  :  expected	67	None	replace
255	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  ==  this.header)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  ==  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  ==  this.header)  {	  }    else    if(this.format.getHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	29	None	replace
256	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()!=  this.header)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()!=  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()!=  this.header)  {	  }    else    if(this.format.getHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	29	None	replace
257	[BUG]  [BUGGY]  }  else  if(header  <  this.format.getHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  <  this.format.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  <  this.format.getHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	29	None	replace
258	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  >=  this.header)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  >=  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  >=  this.header)  {	  }    else    if(this.format.getHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	29	None	replace
259	[BUG]  [BUGGY]  }  else  if(!this.format.getHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	29	None	replace
260	[BUG]  [BUGGY]  }  else  if(rec.hasHeader())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasHeader())  {	  }    else    if(this.format.hasHeader())    {    	non-compiled	[CE]  :  expected	119	None	replace
261	[BUG]  [BUGGY]  }  else  if(nextRecord.hasHeader())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.hasHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasHeader())  {	  }    else    if(this.format.hasHeader())    {    	non-compiled	[CE]  :  expected	119	None	replace
262	[BUG]  [BUGGY]  }  else  if(header.equals(this.format.getHeaderRecord())||  header.equals(this.format.getHeaderRecord()))  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.equals(this.format.getHeaderRecord())||  header.equals(this.format.getHeaderRecord()))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.equals(this.format.getHeaderRecord())||  header.equals(this.format.getHeaderRecord()))  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getHeaderRecord().equals(header))    {    	non-compiled	[CE]  :  expected	108	None	replace
263	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  ||  this.format.getHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  ||  this.format.getHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()  ||  this.format.getHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getHeaderRecord().equals(header))    {    	non-compiled	[CE]  :  expected	108	None	replace
264	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  ||  this.format.getSkipHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  ||  this.format.getSkipHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  ||  this.format.getSkipHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getHeaderRecord().equals(header))    {    	non-compiled	[CE]  :  expected	108	None	replace
265	[BUG]  [BUGGY]  }  else  if(header.equals(this.format.getHeaderRecord())||  this.format.getHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.equals(this.format.getHeaderRecord())||  this.format.getHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.equals(this.format.getHeaderRecord())||  this.format.getHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getHeaderRecord().equals(header))    {    	non-compiled	[CE]  :  expected	108	None	replace
266	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.getHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getHeaderRecord().equals(header))    {    	non-compiled	[CE]  :  expected	108	None	replace
267	[BUG]  [BUGGY]  }  else  if(header!=  null  ||  this.format.getHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  ||  this.format.getHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  ||  this.format.getHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getHeaderRecord().equals(header))    {    	non-compiled	[CE]  :  expected	108	None	replace
268	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  header.equals(this.format.getHeaderRecord()))  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  header.equals(this.format.getHeaderRecord()))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  header.equals(this.format.getHeaderRecord()))  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getHeaderRecord().equals(header))    {    	non-compiled	[CE]  :  expected	108	None	replace
269	[BUG]  [BUGGY]  }  else  if(currentRecord.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(currentRecord.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(currentRecord.hasSkipHeaderRecord())  {	  }    else    if(nextRecord.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	36	None	replace
270	[BUG]  [BUGGY]  }  else  if(nextRecord.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(nextRecord.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	36	None	replace
271	[BUG]  [BUGGY]  }  else  if(nextRecord.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(nextRecord.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	36	None	replace
272	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordNumber()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()  ==  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    0)    {    	non-compiled	[CE]  :  expected	15	None	replace
273	[BUG]  [BUGGY]  }  else  if(this.format.getFormat()  ==  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormat()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormat()  ==  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    0)    {    	non-compiled	[CE]  :  expected	15	None	replace
274	[BUG]  [BUGGY]  }  else  if(current.getSkipHeaderRecord()  ==  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getSkipHeaderRecord()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getSkipHeaderRecord()  ==  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    0)    {    	non-compiled	[CE]  :  expected	15	None	replace
275	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  ==  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  ==  0)  {	  }    else    if(this.format.getHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	18	None	replace
276	[BUG]  [BUGGY]  }  else  if(nextRecord.getSkipHeaderRecord()  >  0)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getSkipHeaderRecord()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getSkipHeaderRecord()  >  0)  {	  }    else    if(this.format.getHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	18	None	replace
277	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()!=  0)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()!=  0)  {	  }    else    if(this.format.getHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	18	None	replace
278	[BUG]  [BUGGY]  }  else  if(rec.getHeaderRecord()  >  0)  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeaderRecord()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderRecord()  >  0)  {	  }    else    if(this.format.getHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	18	None	replace
279	[BUG]  [BUGGY]  }  else  if(nextRecord.getHeaderRecord()  >  0)  {  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getHeaderRecord()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getHeaderRecord()  >  0)  {	  }    else    if(this.format.getHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	18	None	replace
280	[BUG]  [BUGGY]  }  else  if(header.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.getSkipHeaderRecord()  ==  null)  {	  }    else    if(nextRecord.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	52	None	replace
281	[BUG]  [BUGGY]  }  else  if(currentRecord.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(currentRecord.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(currentRecord.getSkipHeaderRecord()  ==  null)  {	  }    else    if(nextRecord.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	52	None	replace
282	[BUG]  [BUGGY]  }  else  if(nextRecord.getHeader()  ==  null)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getHeader()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getHeader()  ==  null)  {	  }    else    if(nextRecord.getSkipHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	52	None	replace
283	[BUG]  [BUGGY]  }  else  if(rec.getFormatHeader()  ==  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getFormatHeader()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormatHeader()  ==  null)  {	  }    else    if(this.format.getFormatHeader()    ==    null)    {    	non-compiled	[CE]  :  expected	132	None	replace
284	[BUG]  [BUGGY]  }  else  if(current.getFormatHeader()  ==  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getFormatHeader()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getFormatHeader()  ==  null)  {	  }    else    if(this.format.getFormatHeader()    ==    null)    {    	non-compiled	[CE]  :  expected	132	None	replace
285	[BUG]  [BUGGY]  }  else  if(!this.format.isHeaderRecord()  ||  header  ==  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isHeaderRecord()  ||  header  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isHeaderRecord()  ||  header  ==  null)  {	  }    else    if(!this.format.isHeaderRecord())    {    	non-compiled	[CE]  :  expected	40	None	replace
286	[BUG]  [BUGGY]  }  else  if(rec!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec!=  null)  {	  }    else    if(rec    ==    null)    {    	non-compiled	[CE]  :  expected	3	None	replace
287	[BUG]  [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  &&  header  ==  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  &&  header  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isSkipHeaderRecord()  &&  header  ==  null)  {	  }    else    if(!this.format.isSkipHeaderRecord()    &&    header!=    null)    {    	non-compiled	[CE]  :  expected	45	None	replace
288	[BUG]  [BUGGY]  }  else  if(!this.format.getSkipHeaderRecord()  &&  header!=  null)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getSkipHeaderRecord()  &&  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getSkipHeaderRecord()  &&  header!=  null)  {	  }    else    if(!this.format.isSkipHeaderRecord()    &&    header!=    null)    {    	non-compiled	[CE]  :  expected	45	None	replace
289	[BUG]  [BUGGY]  }  else  if(!this.format.isHeaderRecord()  &&  header!=  null)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isHeaderRecord()  &&  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isHeaderRecord()  &&  header!=  null)  {	  }    else    if(!this.format.isSkipHeaderRecord()    &&    header!=    null)    {    	non-compiled	[CE]  :  expected	45	None	replace
290	[BUG]  [BUGGY]  }  else  if(rec.getRecordNumber()  >  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getRecordNumber()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getRecordNumber()  >  0)  {	  }    else    if(this.format.getRecordNumber()    >    0)    {    	non-compiled	[CE]  :  expected	16	None	replace
291	[BUG]  [BUGGY]  }  else  if(current.getRecordNumber()  >  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getRecordNumber()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getRecordNumber()  >  0)  {	  }    else    if(this.format.getRecordNumber()    >    0)    {    	non-compiled	[CE]  :  expected	16	None	replace
292	[BUG]  [BUGGY]  }  else  if(header.length()  ==  1)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length()  ==  1)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length()  ==  1)  {	  }    else    if(header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	24	None	replace
293	[BUG]  [BUGGY]  }  else  if(rec.length()  ==  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.length()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.length()  ==  0)  {	  }    else    if(header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	24	None	replace
294	[BUG]  [BUGGY]  }  else  if(header.length()  ==  0  ||  header.charAt(header.length()  -  1)!=  '/')  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length()  ==  0  ||  header.charAt(header.length()  -  1)!=  '/')  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length()  ==  0  ||  header.charAt(header.length()  -  1)!=  '/')  {	  }    else    if(header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	24	None	replace
295	[BUG]  [BUGGY]  }  else  if(formatHeader.length()  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(formatHeader.length()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(formatHeader.length()  ==  0)  {	  }    else    if(header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	24	None	replace
296	[BUG]  [BUGGY]  }  else  if(header.length()  ==  0  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length()  ==  0  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length()  ==  0  ||  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	24	None	replace
297	[BUG]  [BUGGY]  }  else  if(header.length()!=  0)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length()!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length()!=  0)  {	  }    else    if(header.length()    >    0)    {    	non-compiled	[CE]  :  expected	19	None	replace
298	[BUG]  [BUGGY]  }  else  if(header.length()  >=  0)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length()  >=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length()  >=  0)  {	  }    else    if(header.length()    >    0)    {    	non-compiled	[CE]  :  expected	19	None	replace
299	[BUG]  [BUGGY]  }  else  if(header.length()  >  0  ||  header.charAt(header.length()  -  1)!=  '/')  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length()  >  0  ||  header.charAt(header.length()  -  1)!=  '/')  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length()  >  0  ||  header.charAt(header.length()  -  1)!=  '/')  {	  }    else    if(header.length()    >    0)    {    	non-compiled	[CE]  :  expected	19	None	replace
300	[BUG]  [BUGGY]  }  else  if(header.length()  >  0  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length()  >  0  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length()  >  0  ||  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(header.length()    >    0)    {    	non-compiled	[CE]  :  expected	19	None	replace
301	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()!=  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordNumber()!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()!=  0)  {	  }    else    if(this.format.getSkipHeaderRecord()!=    0)    {    	non-compiled	[CE]  :  expected	17	None	replace
302	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()  >=  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordNumber()  >=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()  >=  0)  {	  }    else    if(this.format.getSkipHeaderRecord()!=    0)    {    	non-compiled	[CE]  :  expected	17	None	replace
303	[BUG]  [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.replace(this.format,    formatHeader);    }    	non-compiled	[CE]  :  expected	127	None	replace
304	[BUG]  [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.replace(this.format,    formatHeader);    }    	non-compiled	[CE]  :  expected	127	None	replace
305	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHe  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHe  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHe	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.replace(this.format,    formatHeader);    }    	non-compiled	[CE]  :  expected	127	None	replace
306	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.replace(this.format,    formatHeader);    }    	non-compiled	[CE]  :  expected	127	None	replace
307	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.replace(this.format,    formatHeader);    }    	non-compiled	[CE]  :  expected	127	None	replace
308	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    header[i]    =    nextRecord.getHeader();    }    	non-compiled	[CE]  :  expected	63	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    header[i]    =    nextRecord.getHeader();    }    	non-compiled	[CE]  :  expected	63	None	replace
310	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    header[i]    =    nextRecord.getHeader();    }    	non-compiled	[CE]  :  expected	63	None	replace
311	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  currentRecord.getHeader();  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  currentRecord.getHeader();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  currentRecord.getHeader();  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    header[i]    =    nextRecord.getHeader();    }    	non-compiled	[CE]  :  expected	63	None	replace
312	[BUG]  [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  currentRecord.getHeader();  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  currentRecord.getHeader();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  currentRecord.getHeader();  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    header[i]    =    nextRecord.getHeader();    }    	non-compiled	[CE]  :  expected	63	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  currentRecord.getHeader();  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  currentRecord.getHeader();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  currentRecord.getHeader();  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    header[i]    =    nextRecord.getHeader();    }    	non-compiled	[CE]  :  expected	63	None	replace
314	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getRecordNumber())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.getRecordNumber())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getRecordNumber())  {	  }    else    if(header    ==    null    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	99	None	replace
315	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getHeaderRecord())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getHeaderRecord())  {	  }    else    if(header    ==    null    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	99	None	replace
316	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getFormat())  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.getFormat())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getFormat())  {	  }    else    if(header    ==    null    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	99	None	replace
317	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getRawHeaderRecord())  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.getRawHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getRawHeaderRecord())  {	  }    else    if(header    ==    null    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	99	None	replace
318	[BUG]  [BUGGY]  }  else  if(header!=  null  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  ||  header.length()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  ||  header.length()  ==  0)  {	  }    else    if(header    ==    null    ||    header.length()!=    0)    {    	non-compiled	[CE]  :  expected	100	None	replace
319	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  header.length()  >=  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  header.length()  >=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  header.length()  >=  0)  {	  }    else    if(header    ==    null    ||    header.length()!=    0)    {    	non-compiled	[CE]  :  expected	100	None	replace
320	[BUG]  [BUGGY]  }  else  if(header!=  null  ||  header.length()!=  0)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  ||  header.length()!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  ||  header.length()!=  0)  {	  }    else    if(header    ==    null    ||    header.length()!=    0)    {    	non-compiled	[CE]  :  expected	100	None	replace
321	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  header.length()!=  0)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  header.length()!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  header.length()!=  0)  {	  }    else    if(header    ==    null    ||    header.length()!=    0)    {    	non-compiled	[CE]  :  expected	100	None	replace
322	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(rec.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	35	None	replace
323	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeader()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasSkipHeader()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeader()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	35	None	replace
324	[BUG]  [BUGGY]  }  else  if(record.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(record.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(record.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(rec.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	35	None	replace
325	[BUG]  [BUGGY]  }  else  if(record.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(record.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(record.hasSkipHeader()  &&  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(rec.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	35	None	replace
326	[BUG]  [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  ||!this.format.isNumberRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  ||!this.format.isNumberRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isSkipHeaderRecord()  ||!this.format.isNumberRecord())  {	  }    else    if(!this.format.isNumberRecord())    {    	non-compiled	[CE]  :  expected	44	None	replace
327	[BUG]  [BUGGY]  }  else  if(!this.format.isSkipRecord())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isSkipRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isSkipRecord())  {	  }    else    if(!this.format.isNumberRecord())    {    	non-compiled	[CE]  :  expected	44	None	replace
328	[BUG]  [BUGGY]  }  else  if(!this.format.isRecorded()  &&  header!=  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isRecorded()  &&  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isRecorded()  &&  header!=  null)  {	  }    else    if(!this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	43	None	replace
329	[BUG]  [BUGGY]  }  else  if(!this.format.isRecorded()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isRecorded()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isRecorded()  &&  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(!this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	43	None	replace
330	[BUG]  [BUGGY]  }  else  if(!this.format.isRecorded()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isRecorded()  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isRecorded()  &&  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(!this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	43	None	replace
331	[BUG]  [BUGGY]  }  else  if(this.format.getRecordHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordHeaderRecord()  ==  null)  {	  }    else    if(this.format.getRecordNumber()    ==    null)    {    	non-compiled	[CE]  :  expected	59	None	replace
332	[BUG]  [BUGGY]  }  else  if(current.getRecordNumber()  ==  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getRecordNumber()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getRecordNumber()  ==  null)  {	  }    else    if(this.format.getRecordNumber()    ==    null)    {    	non-compiled	[CE]  :  expected	59	None	replace
333	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	93	None	replace
334	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	93	None	replace
335	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getRecordNumber()!=  null)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.getRecordNumber()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getRecordNumber()!=  null)  {	  }    else    if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	93	None	replace
336	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.getHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getHeaderRecord()!=  null)  {	  }    else    if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	93	None	replace
337	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getFormat()!=  null)  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.getFormat()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getFormat()!=  null)  {	  }    else    if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	93	None	replace
338	[BUG]  [BUGGY]  }  else  if(header!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	93	None	replace
339	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  >=  0)  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  >=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  >=  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    >=    0)    {    	non-compiled	[CE]  :  expected	21	None	replace
340	[BUG]  [BUGGY]  }  else  if(rec.getFormat()  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getFormat()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormat()  >  0)  {	  }    else    if(this.format.getFormat()    >    0)    {    	non-compiled	[CE]  :  expected	90	None	replace
341	[BUG]  [BUGGY]  }  else  if(nextRecord.getFormat()  >  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getFormat()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getFormat()  >  0)  {	  }    else    if(this.format.getFormat()    >    0)    {    	non-compiled	[CE]  :  expected	90	None	replace
342	[BUG]  [BUGGY]  }  else  if(current.getFormat()  >  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getFormat()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getFormat()  >  0)  {	  }    else    if(this.format.getFormat()    >    0)    {    	non-compiled	[CE]  :  expected	90	None	replace
343	[BUG]  [BUGGY]  }  else  if(!this.format.equals(header)&&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.equals(header)&&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.equals(header)&&  this.format.getSkipHeaderRecord())  {	  }    else    if(!this.format.equals(header))    {    	non-compiled	[CE]  :  expected	80	None	replace
344	[BUG]  [BUGGY]  }  else  if(!this.format.equals(header)&&  header.length()  >  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.equals(header)&&  header.length()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.equals(header)&&  header.length()  >  0)  {	  }    else    if(!this.format.equals(header))    {    	non-compiled	[CE]  :  expected	80	None	replace
345	[BUG]  [BUGGY]  }  else  if(!this.format.equalsIgnoreCase(header))  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.equalsIgnoreCase(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.equalsIgnoreCase(header))  {	  }    else    if(!this.format.equals(header))    {    	non-compiled	[CE]  :  expected	80	None	replace
346	[BUG]  [BUGGY]  }  else  if(!this.format.equals(currentRecord))  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.equals(currentRecord))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.equals(currentRecord))  {	  }    else    if(!this.format.equals(header))    {    	non-compiled	[CE]  :  expected	80	None	replace
347	[BUG]  [BUGGY]  }  else  if(!this.format.equals(header)||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.equals(header)||  header.length()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.equals(header)||  header.length()  ==  0)  {	  }    else    if(!this.format.equals(header))    {    	non-compiled	[CE]  :  expected	80	None	replace
348	[BUG]  [BUGGY]  }  else  if(!this.format.equals(header)&&!this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.equals(header)&&!this.format.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.equals(header)&&!this.format.isSkipHeaderRecord())  {	  }    else    if(!this.format.equals(header))    {    	non-compiled	[CE]  :  expected	80	None	replace
349	[BUG]  [BUGGY]  }  else  if(nextRecord.getHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getHeaderRecord()!=  null)  {	  }    else    if(rec.getHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	75	None	replace
350	[BUG]  [BUGGY]  }  else  if(current.getRecordNumber())  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getRecordNumber())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getRecordNumber())  {	  }    else    if(this.format.getRecordNumber())    {    	non-compiled	[CE]  :  expected	22	None	replace
351	[BUG]  [BUGGY]  }  else  if(!this.format.getRecordNumber())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getRecordNumber())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getRecordNumber())  {	  }    else    if(this.format.getRecordNumber())    {    	non-compiled	[CE]  :  expected	22	None	replace
352	[BUG]  [BUGGY]  }  else  if(rec.getFormatHeader()!=  null)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getFormatHeader()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormatHeader()!=  null)  {	  }    else    if(this.format.getFormatHeader()!=    null)    {    	non-compiled	[CE]  :  expected	122	None	replace
353	[BUG]  [BUGGY]  }  else  if(current.getFormatHeader()!=  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getFormatHeader()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getFormatHeader()!=  null)  {	  }    else    if(this.format.getFormatHeader()!=    null)    {    	non-compiled	[CE]  :  expected	122	None	replace
354	[BUG]  [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.substring(1);    }    	non-compiled	[CE]  :  expected	129	None	replace
355	[BUG]  [BUGGY]  if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.substring(1);    }    	non-compiled	[CE]  :  expected	129	None	replace
356	[BUG]  [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(2);  }  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(2);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(2);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.substring(1);    }    	non-compiled	[CE]  :  expected	129	None	replace
357	[BUG]  [BUGGY]  if(this.format  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.substring(1);    }    	non-compiled	[CE]  :  expected	129	None	replace
358	[BUG]  [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }  }  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.substring(1);    }    	non-compiled	[CE]  :  expected	129	None	replace
359	[BUG]  [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.substring(1);  }  [CE]  :  expected  [FE]                                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.substring(1);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.substring(1);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.substring(1);    }    	non-compiled	[CE]  :  expected	129	None	replace
360	[BUG]  [BUGGY]  if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  formatHeader;  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  formatHeader;  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  formatHeader;  }	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format!=    null)    {    header    =    formatHeader;    }    	non-compiled	[CE]  :  expected	87	None	replace
361	[BUG]  [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format!=    null)    {    header    =    formatHeader;    }    	non-compiled	[CE]  :  expected	87	None	replace
362	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format!=    null)    {    header    =    formatHeader;    }    	non-compiled	[CE]  :  expected	87	None	replace
363	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  nu  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  nu  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  nu	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format!=    null)    {    header    =    formatHeader;    }    	non-compiled	[CE]  :  expected	87	None	replace
364	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format!=    null)    {    header    =    formatHeader;    }    	non-compiled	[CE]  :  expected	87	None	replace
365	[BUG]  [BUGGY]  if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format!=  null)  {  header  =  formatHeader;  }  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format!=  null)  {  header  =  formatHeader;  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format!=  null)  {  header  =  formatHeader;  }	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format!=    null)    {    header    =    formatHeader;    }    	non-compiled	[CE]  :  expected	87	None	replace
366	[BUG]  [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  [CE]  :  expected  [FE]                                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format!=    null)    {    header    =    formatHeader;    }    	non-compiled	[CE]  :  expected	87	None	replace
367	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this.	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	84	None	replace
368	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	84	None	replace
369	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	84	None	replace
370	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	84	None	replace
371	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	84	None	replace
372	[BUG]  [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  nu  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  nu  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  nu	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	84	None	replace
373	[BUG]  [BUGGY]  hdrMap.put(rec.getName(),  header);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(rec.getName(),  header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(rec.getName(),  header);	  hdrMap.put(rect.getName(),    header);    	non-compiled	[CE]  :  expected	66	None	replace
374	[BUG]  [BUGGY]  hdrMap.put(this.format.getName(),  header);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(this.format.getName(),  header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(this.format.getName(),  header);	  hdrMap.put(rect.getName(),    header);    	non-compiled	[CE]  :  expected	66	None	replace
375	[BUG]  [BUGGY]  hdrMap.put(header.getName(),rect);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(header.getName(),rect);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(header.getName(),rect);	  hdrMap.put(rect.getName(),    header);    	non-compiled	[CE]  :  expected	66	None	replace
376	[BUG]  [BUGGY]  hdrMap.put(header.getName(),  header);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(header.getName(),  header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(header.getName(),  header);	  hdrMap.put(rect.getName(),    header);    	non-compiled	[CE]  :  expected	66	None	replace
377	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  header.length()  ==  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  header.length()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  header.length()  ==  0)  {	  }    else    if(header    ==    null    ||    header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	92	None	replace
378	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  header.length()  ==  1)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  header.length()  ==  1)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  header.length()  ==  1)  {	  }    else    if(header    ==    null    ||    header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	92	None	replace
379	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  header.length  ==  0)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  header.length  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  header.length  ==  0)  {	  }    else    if(header.length    ==    0)    {    	non-compiled	[CE]  :  expected	71	None	replace
380	[BUG]  [BUGGY]  }  else  if(rec.length  ==  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.length  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.length  ==  0)  {	  }    else    if(header.length    ==    0)    {    	non-compiled	[CE]  :  expected	71	None	replace
381	[BUG]  [BUGGY]  }  else  if(formatHeader.length  ==  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(formatHeader.length  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(formatHeader.length  ==  0)  {	  }    else    if(header.length    ==    0)    {    	non-compiled	[CE]  :  expected	71	None	replace
382	[BUG]  [BUGGY]  }  else  if(header.length  ==  1)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length  ==  1)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length  ==  1)  {	  }    else    if(header.length    ==    0)    {    	non-compiled	[CE]  :  expected	71	None	replace
383	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()  ==  this.header)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordNumber()  ==  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()  ==  this.header)  {	  }    else    if(this.format.getRecordNumber()    <    this.header)    {    	non-compiled	[CE]  :  expected	31	None	replace
384	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()  >  this.header)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordNumber()  >  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()  >  this.header)  {	  }    else    if(this.format.getRecordNumber()    <    this.header)    {    	non-compiled	[CE]  :  expected	31	None	replace
385	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()  >=  this.header)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordNumber()  >=  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()  >=  this.header)  {	  }    else    if(this.format.getRecordNumber()    <    this.header)    {    	non-compiled	[CE]  :  expected	31	None	replace
386	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()!=  this.header)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordNumber()!=  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()!=  this.header)  {	  }    else    if(this.format.getRecordNumber()    <    this.header)    {    	non-compiled	[CE]  :  expected	31	None	replace
387	[BUG]  [BUGGY]  }  else  if(current.getRecordNumber()  <  this.header)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getRecordNumber()  <  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getRecordNumber()  <  this.header)  {	  }    else    if(this.format.getRecordNumber()    <    this.header)    {    	non-compiled	[CE]  :  expected	31	None	replace
388	[BUG]  [BUGGY]  if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    	non-compiled	[CE]  :  expected	88	None	replace
389	[BUG]  [BUGGY]  if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    	non-compiled	[CE]  :  expected	88	None	replace
390	[BUG]  [BUGGY]  if(rec  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(rec  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(rec  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    	non-compiled	[CE]  :  expected	88	None	replace
391	[BUG]  [BUGGY]  if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  nu  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  nu  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  nu	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    	non-compiled	[CE]  :  expected	88	None	replace
392	[BUG]  [BUGGY]  if(rec!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(rec!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(rec!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    	non-compiled	[CE]  :  expected	88	None	replace
393	[BUG]  [BUGGY]  if(this.headers  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [CE]  :  expected  [FE]                                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.headers  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.headers  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    	non-compiled	[CE]  :  expected	88	None	replace
394	[BUG]  [BUGGY]  if(rec  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  [CE]  :  expected  [FE]                                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(rec  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(rec  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    	non-compiled	[CE]  :  expected	88	None	replace
395	[BUG]  [BUGGY]  }  else  if(nextRecord.getSkipHeader()  ==  this.header)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getSkipHeader()  ==  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getSkipHeader()  ==  this.header)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    this.header)    {    	non-compiled	[CE]  :  expected	28	None	replace
396	[BUG]  [BUGGY]  }  else  if(header.length()  <  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length()  <  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length()  <  this.format.getSkipHeaderRecord())  {	  }    else    if(header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	27	None	replace
397	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  header  <  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  header  <  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  header  <  this.format.getSkipHeaderRecord())  {	  }    else    if(header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	27	None	replace
398	[BUG]  [BUGGY]  }  else  if(header  >=  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  >=  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  >=  this.format.getSkipHeaderRecord())  {	  }    else    if(header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	27	None	replace
399	[BUG]  [BUGGY]  }  else  if(header  ==  nextRecord.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  nextRecord.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  nextRecord.getSkipHeaderRecord())  {	  }    else    if(header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	27	None	replace
400	[BUG]  [BUGGY]  }  else  if(header  <  this.format.getRecordNumber())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  <  this.format.getRecordNumber())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  <  this.format.getRecordNumber())  {	  }    else    if(header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	27	None	replace
401	[BUG]  [BUGGY]  }  else  if(!this.format.hasFormatHeader())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.hasFormatHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.hasFormatHeader())  {	  }    else    if(this.format.hasFormatHeader())    {    	non-compiled	[CE]  :  expected	120	None	replace
402	[BUG]  [BUGGY]  }  else  if(rec.hasFormatHeader())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasFormatHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasFormatHeader())  {	  }    else    if(this.format.hasFormatHeader())    {    	non-compiled	[CE]  :  expected	120	None	replace
403	[BUG]  [BUGGY]  }  else  if(nextRecord.hasFormatHeader())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.hasFormatHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasFormatHeader())  {	  }    else    if(this.format.hasFormatHeader())    {    	non-compiled	[CE]  :  expected	120	None	replace
404	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  this.format.getHeader())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  this.format.getHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  this.format.getHeader())  {	  }    else    if(this.format.getHeader())    {    	non-compiled	[CE]  :  expected	111	None	replace
405	[BUG]  [BUGGY]  }  else  if(!this.format.getHeader())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getHeader())  {	  }    else    if(this.format.getHeader())    {    	non-compiled	[CE]  :  expected	111	None	replace
406	[BUG]  [BUGGY]  }  else  if(current.getHeader())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getHeader())  {	  }    else    if(this.format.getHeader())    {    	non-compiled	[CE]  :  expected	111	None	replace
407	[BUG]  [BUGGY]  }  else  if(rec.isSkipHeader()  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.isSkipHeader()  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isSkipHeader()  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.isSkipHeader())    {    	non-compiled	[CE]  :  expected	7	None	replace
408	[BUG]  [BUGGY]  }  else  if(!rec.isSkipHeader())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!rec.isSkipHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!rec.isSkipHeader())  {	  }    else    if(rec.isSkipHeader())    {    	non-compiled	[CE]  :  expected	7	None	replace
409	[BUG]  [BUGGY]  }  else  if(rec.isSkipHeader()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.isSkipHeader()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isSkipHeader()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.isSkipHeader())    {    	non-compiled	[CE]  :  expected	7	None	replace
410	[BUG]  [BUGGY]  }  else  if(rec.isSkipHeader()  &&  header.length()  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.isSkipHeader()  &&  header.length()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isSkipHeader()  &&  header.length()  >  0)  {	  }    else    if(rec.isSkipHeader())    {    	non-compiled	[CE]  :  expected	7	None	replace
411	[BUG]  [BUGGY]  hdrMap.put(rec.toString(),  header);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(rec.toString(),  header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(rec.toString(),  header);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  :  expected	64	None	replace
412	[BUG]  [BUGGY]  hdrMap.put(this.format.toString(),  header);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(this.format.toString(),  header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(this.format.toString(),  header);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  :  expected	64	None	replace
413	[BUG]  [BUGGY]  hdrMap.put(header.toString(),  header);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(header.toString(),  header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(header.toString(),  header);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  :  expected	64	None	replace
414	[BUG]  [BUGGY]  hdrMap.put(nextRecord.toString(),  header);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(nextRecord.toString(),  header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(nextRecord.toString(),  header);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  :  expected	64	None	replace
415	[BUG]  [BUGGY]  hdrMap.put(header.toString(),rect);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(header.toString(),rect);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(header.toString(),rect);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  :  expected	64	None	replace
416	[BUG]  [BUGGY]  }  else  if(!current.getHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!current.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!current.getHeaderRecord())  {	  }    else    if(current.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	57	None	replace
417	[BUG]  [BUGGY]  }  else  if(!this.format.getSkipHeaderRecord()  ||  header  ==  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getSkipHeaderRecord()  ||  header  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getSkipHeaderRecord()  ||  header  ==  null)  {	  }    else    if(!this.format.isSkipHeaderRecord()    ||    header    ==    null)    {    	non-compiled	[CE]  :  expected	41	None	replace
418	[BUG]  [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  ||  this.header  ==  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isSkipHeaderRecord()  ||  this.header  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isSkipHeaderRecord()  ||  this.header  ==  null)  {	  }    else    if(!this.format.isSkipHeaderRecord()    ||    header    ==    null)    {    	non-compiled	[CE]  :  expected	41	None	replace
419	[BUG]  [BUGGY]  }  else  if(this.format.isHeader())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isHeader())  {	  }    else    if(this.format.isSkipHeader())    {    	non-compiled	[CE]  :  expected	91	None	replace
420	[BUG]  [BUGGY]  }  else  if(header.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.getSkipHeaderRecord()!=  null)  {	  }    else    if(nextRecord.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	13	None	replace
421	[BUG]  [BUGGY]  }  else  if(currentRecord.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(currentRecord.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(currentRecord.getSkipHeaderRecord()!=  null)  {	  }    else    if(nextRecord.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	13	None	replace
422	[BUG]  [BUGGY]  }  else  if(nextRecord.getHeader()!=  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getHeader()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getHeader()!=  null)  {	  }    else    if(nextRecord.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	13	None	replace
423	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()!=  nextRecord.header)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()!=  nextRecord.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()!=  nextRecord.header)  {	  }    else    if(this.format.getSkipHeaderRecord()!=    this.header)    {    	non-compiled	[CE]  :  expected	30	None	replace
424	[BUG]  [BUGGY]  }  else  if(rec.isFormat())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.isFormat())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isFormat())  {	  }    else    if(this.format.isFormat())    {    	non-compiled	[CE]  :  expected	94	None	replace
425	[BUG]  [BUGGY]  }  else  if(nextRecord.isFormat())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.isFormat())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.isFormat())  {	  }    else    if(this.format.isFormat())    {    	non-compiled	[CE]  :  expected	94	None	replace
426	[BUG]  [BUGGY]  }  else  if(rec.isRecorded())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.isRecorded())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isRecorded())  {	  }    else    if(this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	95	None	replace
427	[BUG]  [BUGGY]  }  else  if(nextRecord.isRecorded())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.isRecorded())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.isRecorded())  {	  }    else    if(this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	95	None	replace
428	[BUG]  [BUGGY]  }  else  if(this.format.isRecorded()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isRecorded()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isRecorded()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	95	None	replace
429	[BUG]  [BUGGY]  }  else  if(this.format.isRecorded()  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isRecorded()  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isRecorded()  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	95	None	replace
430	[BUG]  [BUGGY]  }  else  if(rec.getFormatHeader())  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getFormatHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormatHeader())  {	  }    else    if(this.format.getFormatHeader())    {    	non-compiled	[CE]  :  expected	110	None	replace
431	[BUG]  [BUGGY]  }  else  if(nextRecord.getFormatHeader())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getFormatHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getFormatHeader())  {	  }    else    if(this.format.getFormatHeader())    {    	non-compiled	[CE]  :  expected	110	None	replace
432	[BUG]  [BUGGY]  }  else  if(!this.format.getFormatHeader())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getFormatHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getFormatHeader())  {	  }    else    if(this.format.getFormatHeader())    {    	non-compiled	[CE]  :  expected	110	None	replace
433	[BUG]  [BUGGY]  }  else  if(current.getFormatHeader())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getFormatHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getFormatHeader())  {	  }    else    if(this.format.getFormatHeader())    {    	non-compiled	[CE]  :  expected	110	None	replace
434	[BUG]  [BUGGY]  }  else  if(this.format.getHeader()  ==  this.header)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeader()  ==  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeader()  ==  this.header)  {	  }    else    if(this.format.getHeader()    <    this.header)    {    	non-compiled	[CE]  :  expected	112	None	replace
435	[BUG]  [BUGGY]  }  else  if(this.format.getHeader()!=  this.header)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeader()!=  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeader()!=  this.header)  {	  }    else    if(this.format.getHeader()    <    this.header)    {    	non-compiled	[CE]  :  expected	112	None	replace
436	[BUG]  [BUGGY]  }  else  if(header  <  this.format.getHeader())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  <  this.format.getHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  <  this.format.getHeader())  {	  }    else    if(this.format.getHeader()    <    this.header)    {    	non-compiled	[CE]  :  expected	112	None	replace
437	[BUG]  [BUGGY]  }  else  if(this.format.getHeader()  >=  this.header)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeader()  >=  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeader()  >=  this.header)  {	  }    else    if(this.format.getHeader()    <    this.header)    {    	non-compiled	[CE]  :  expected	112	None	replace
438	[BUG]  [BUGGY]  }  else  if(rec.getHeader()  <  this.header)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeader()  <  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeader()  <  this.header)  {	  }    else    if(this.format.getHeader()    <    this.header)    {    	non-compiled	[CE]  :  expected	112	None	replace
439	[BUG]  [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.trim();    }    	non-compiled	[CE]  :  expected	125	None	replace
440	[BUG]  [BUGGY]  if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.trim();    }    	non-compiled	[CE]  :  expected	125	None	replace
441	[BUG]  [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.trim();    }    	non-compiled	[CE]  :  expected	125	None	replace
442	[BUG]  [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.trim();    }    	non-compiled	[CE]  :  expected	125	None	replace
443	[BUG]  [BUGGY]  if(this.format  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.trim();    }    	non-compiled	[CE]  :  expected	125	None	replace
444	[BUG]  [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.trim();  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.trim();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader  ==  null)  {  header  =  formatHeader.trim();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.trim();    }    	non-compiled	[CE]  :  expected	125	None	replace
445	[BUG]  [BUGGY]  }  else  if(nextRecord.getFormat())  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getFormat())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getFormat())  {	  }    else    if(this.format.getFormat())    {    	non-compiled	[CE]  :  expected	70	None	replace
446	[BUG]  [BUGGY]  }  else  if(current.getFormat())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getFormat())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getFormat())  {	  }    else    if(this.format.getFormat())    {    	non-compiled	[CE]  :  expected	70	None	replace
447	[BUG]  [BUGGY]  }  else  if(!this.format.getFormat())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getFormat())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getFormat())  {	  }    else    if(this.format.getFormat())    {    	non-compiled	[CE]  :  expected	70	None	replace
448	[BUG]  [BUGGY]  }  else  if(rec.isSkipHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.isSkipHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isSkipHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	6	None	replace
449	[BUG]  [BUGGY]  }  else  if(rec.isSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.isSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	6	None	replace
450	[BUG]  [BUGGY]  }  else  if(rec.isSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.isSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(rec.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	6	None	replace
451	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  this.format.getRecordNumber())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  this.format.getRecordNumber())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  this.format.getRecordNumber())  {	  }    else    if(header!=    null    &&    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	114	None	replace
452	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  this.format.getHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  this.format.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  this.format.getHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	114	None	replace
453	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  this.format.getFormat())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  this.format.getFormat())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  this.format.getFormat())  {	  }    else    if(header!=    null    &&    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	114	None	replace
454	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.getRecordNumber())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  this.format.getRecordNumber())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.getRecordNumber())  {	  }    else    if(header!=    null    &&    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	114	None	replace
455	[BUG]  [BUGGY]  }  else  if(rec.getHeaderRecord()  ==  header)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeaderRecord()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderRecord()  ==  header)  {	  }    else    if(rec.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	103	None	replace
456	[BUG]  [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.trim();    }    	non-compiled	[CE]  :  expected	125	None	replace
457	[BUG]  [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.trim();    }    	non-compiled	[CE]  :  expected	125	None	replace
458	[BUG]  [BUGGY]  }  else  if(this.header  <  header.length)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header  <  header.length)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header  <  header.length)  {	  }    else    if(header    <    this.header)    {    	non-compiled	[CE]  :  expected	73	None	replace
459	[BUG]  [BUGGY]  }  else  if(this.header  ==  header)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header  ==  header)  {	  }    else    if(header    <    this.header)    {    	non-compiled	[CE]  :  expected	73	None	replace
460	[BUG]  [BUGGY]  }  else  if(nextRecord.isRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.isRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.isRecord())  {	  }    else    if(this.format.isRecord())    {    	non-compiled	[CE]  :  expected	96	None	replace
461	[BUG]  [BUGGY]  }  else  if(this.format.isSkipHeaderRecord()  ||  this.format.isRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isSkipHeaderRecord()  ||  this.format.isRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isSkipHeaderRecord()  ||  this.format.isRecord())  {	  }    else    if(this.format.isRecord())    {    	non-compiled	[CE]  :  expected	96	None	replace
462	[BUG]  [BUGGY]  }  else  if(!this.format.equals(header)||  header!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.equals(header)||  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.equals(header)||  header!=  null)  {	  }    else    if(!this.format.isSkipHeaderRecord()    ||    header!=    null)    {    	non-compiled	[CE]  :  expected	42	None	replace
463	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  nextRecord.getHeader();  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    header[i]    =    nextRecord.getHeader();    }    	non-compiled	[CE]  :  expected	63	None	replace
464	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  header[i]  =  nextRecord.getHeader();  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i++)  {  header[i]  =  nextRecord.getHeader();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	for(int  i  =  0;  i  <  header.length;  i++)  {  header[i]  =  nextRecord.getHeader();  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    header[i]    =    nextRecord.getHeader();    }    	non-compiled	[CE]  :  expected	63	None	replace
465	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  i++)  {  header[i]  =  nextRecord.getHeader();  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  for(int  i  =  0;  i  <  headers.length;  i++)  {  header[i]  =  nextRecord.getHeader();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	for(int  i  =  0;  i  <  headers.length;  i++)  {  header[i]  =  nextRecord.getHeader();  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    header[i]    =    nextRecord.getHeader();    }    	non-compiled	[CE]  :  expected	63	None	replace
466	[BUG]  [BUGGY]  }  else  if(header!=  null  &&!this.format.equals(header))  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&!this.format.equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&!this.format.equals(header))  {	  }    else    if(!this.format.equals(header))    {    	non-compiled	[CE]  :  expected	80	None	replace
467	[BUG]  [BUGGY]  }  else  if(!this.format.equals(header)&&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.equals(header)&&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.equals(header)&&  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(!this.format.equals(header))    {    	non-compiled	[CE]  :  expected	80	None	replace
468	[BUG]  [BUGGY]  }  else  if(!this.format.equals(header)&&  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.equals(header)&&  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.equals(header)&&  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(!this.format.equals(header))    {    	non-compiled	[CE]  :  expected	80	None	replace
469	[BUG]  [BUGGY]  }  else  if(!this.format.equals(header)&&!this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.equals(header)&&!this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.equals(header)&&!this.format.getSkipHeaderRecord())  {	  }    else    if(!this.format.equals(header))    {    	non-compiled	[CE]  :  expected	80	None	replace
470	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  nextRecord.getHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  nextRecord.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  nextRecord.getHeaderRecord())  {	  }    else    if(nextRecord.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	58	None	replace
471	[BUG]  [BUGGY]  }  else  if(this.format.isSkipHeaderRecord()  ||  this.format.isSelectedRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isSkipHeaderRecord()  ||  this.format.isSelectedRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isSkipHeaderRecord()  ||  this.format.isSelectedRecord())  {	  }    else    if(this.format.isSelectedRecord())    {    	non-compiled	[CE]  :  expected	97	None	replace
472	[BUG]  [BUGGY]  }  else  if(header.length!=  0)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length!=  0)  {	  }    else    if(header.length    ==    0)    {    	non-compiled	[CE]  :  expected	71	None	replace
473	[BUG]  [BUGGY]  }  else  if(currentRecord  ==  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(currentRecord  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(currentRecord  ==  null)  {	  }    else    if(nextRecord    ==    null)    {    	non-compiled	[CE]  :  expected	5	None	replace
474	[BUG]  [BUGGY]  }  else  if(this.format.getFormat()  >=  0)  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormat()  >=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormat()  >=  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    >=    0)    {    	non-compiled	[CE]  :  expected	21	None	replace
475	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  formatHeader.length()!=  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  formatHeader.length()!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  formatHeader.length()!=  0)  {	  }    else    if(header    ==    null    ||    header.length()!=    0)    {    	non-compiled	[CE]  :  expected	100	None	replace
476	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  formatHeader.length()  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  formatHeader.length()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  formatHeader.length()  >  0)  {	  }    else    if(header!=    null    &&    header.length()    >    0)    {    	non-compiled	[CE]  :  expected	117	None	replace
477	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  formatHeader.length()  >  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  formatHeader.length()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  formatHeader.length()  >  0)  {	  }    else    if(header!=    null    &&    header.length()    >    0)    {    	non-compiled	[CE]  :  expected	117	None	replace
478	[BUG]  [BUGGY]  if(record!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(record!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(record!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.replace(this.format,    formatHeader);    }    	non-compiled	[CE]  :  expected	127	None	replace
479	[BUG]  [BUGGY]  if(record  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(record  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(record  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.replace(this.format,    formatHeader);    }    	non-compiled	[CE]  :  expected	127	None	replace
480	[BUG]  [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  rec.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  rec.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  final  CSVFormat  formatHeader  =  rec.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.replace(this.format,    formatHeader);    }    	non-compiled	[CE]  :  expected	127	None	replace
481	[BUG]  [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.values();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.values();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.values();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.replace(this.format,    formatHeader);    }    	non-compiled	[CE]  :  expected	127	None	replace
482	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  current.getHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  current.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  current.getHeaderRecord())  {	  }    else    if(current.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	57	None	replace
483	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHe  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHe  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHe	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
484	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHe  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHe  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHe	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
485	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHea  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHea  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHea	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
486	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHea  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHea  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHea	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
487	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHe  [CE]  :  expected  [FE]                                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHe  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHe	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
488	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  format  [CE]  :  expected  [FE]                                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  format  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  format	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
489	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  [CE]  :  expected  [FE]                                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
490	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
491	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(this.format  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(this.format  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(this.format	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
492	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
493	[BUG]  [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.values();  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  formatHeader  =  nextRecord.values();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  formatHeader  =  nextRecord.values();	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
494	[BUG]  [BUGGY]  if(header!=  null)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  }  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
495	[BUG]  [BUGGY]  &&  header!=  null)  {  final  CSVFormat  format  =  nextRecord.values();  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  &&  header!=  null)  {  final  CSVFormat  format  =  nextRecord.values();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	&&  header!=  null)  {  final  CSVFormat  format  =  nextRecord.values();	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
496	[BUG]  [BUGGY]  &&  header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.values();  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  &&  header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.values();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	&&  header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.values();	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
497	[BUG]  [BUGGY]  if(header  ==  null)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  }  [CE]  :  expected  [FE]                                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
498	[BUG]  [BUGGY]  &&  header!=  null)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [CE]  :  expected  [FE]                                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  &&  header!=  null)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	&&  header!=  null)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
499	[BUG]  [BUGGY]  if(header!=  null)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [CE]  :  expected  [FE]                                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
500	[BUG]  [BUGGY]  }  else  if(nextRecord.getRecordNumber()  ==  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getRecordNumber()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getRecordNumber()  ==  null)  {	  }    else    if(rec.getRecordNumber()    ==    null)    {    	non-compiled	[CE]  :  expected	51	None	replace
501	[BUG]  [BUGGY]  }  else  if(!this.format.equals(header)||  header  ==  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.equals(header)||  header  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.equals(header)||  header  ==  null)  {	  }    else    if(!this.format.isSkipHeaderRecord()    ||    header    ==    null)    {    	non-compiled	[CE]  :  expected	41	None	replace
502	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  this.	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	84	None	replace
503	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  this.	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	84	None	replace
504	[BUG]  [BUGGY]  }  else  if(!this.format.isFormat()  &&  header!=  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isFormat()  &&  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isFormat()  &&  header!=  null)  {	  }    else    if(!this.format.isSkipHeaderRecord()    &&    header!=    null)    {    	non-compiled	[CE]  :  expected	45	None	replace
505	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    	non-compiled	[CE]  :  expected	88	None	replace
506	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    	non-compiled	[CE]  :  expected	88	None	replace
507	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    	non-compiled	[CE]  :  expected	88	None	replace
508	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    	non-compiled	[CE]  :  expected	88	None	replace
509	[BUG]  [BUGGY]  }  else  if(rec.getFormat()  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getFormat()  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormat()  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(rec.getFormat()    ==    null)    {    	non-compiled	[CE]  :  expected	50	None	replace
510	[BUG]  [BUGGY]  }  else  if(formatHeader!=  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(formatHeader!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(formatHeader!=  null)  {	  }    else    if(header    >=    null)    {    	non-compiled	[CE]  :  expected	72	None	replace
511	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.getFormat())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  this.format.getFormat())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.getFormat())  {	  }    else    if(header!=    null    &&    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	114	None	replace
512	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  this.format.getSizeHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  this.format.getSizeHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  this.format.getSizeHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	114	None	replace
513	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getHeader())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.getHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getHeader())  {	  }    else    if(this.format.getHeader())    {    	non-compiled	[CE]  :  expected	111	None	replace
514	[BUG]  [BUGGY]  hdrMap.put(header,  record);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(header,  record);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(header,  record);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	86	None	replace
515	[BUG]  [BUGGY]  hdrMap.put(record,  header  +  formatHeader);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(record,  header  +  formatHeader);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(record,  header  +  formatHeader);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	86	None	replace
516	[BUG]  [BUGGY]  hdrMap.put(this.format,  header);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(this.format,  header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(this.format,  header);	  hdrMap.put(record,    header);    	non-compiled	[CE]  :  expected	86	None	replace
517	[BUG]  [BUGGY]  }  else  if(nextRecord.getHeaderRecord()  <  this.header)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getHeaderRecord()  <  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getHeaderRecord()  <  this.header)  {	  }    else    if(this.format.getHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	29	None	replace
518	[BUG]  [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  header  ==  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  header  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  header  ==  null)  {	  }    else    if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  :  expected	130	None	replace
519	[BUG]  [BUGGY]  }  else  if(header.length  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length  >  0)  {	  }    else    if(this.format.getHeader()    >    0)    {    	non-compiled	[CE]  :  expected	104	None	replace
520	[BUG]  [BUGGY]  }  else  if(this.format.size()  >  0)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.size()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.size()  >  0)  {	  }    else    if(rec.size()    >    0)    {    	non-compiled	[CE]  :  expected	20	None	replace
521	[BUG]  [BUGGY]  }  else  if(this.format.hasRecord()  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasRecord()  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasRecord()  ||  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(this.format.hasRecord())    {    	non-compiled	[CE]  :  expected	77	None	replace
522	[BUG]  [BUGGY]  }  else  if(this.format.hasRecord()  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasRecord()  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasRecord()  ||  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(this.format.hasRecord())    {    	non-compiled	[CE]  :  expected	77	None	replace
523	[BUG]  [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  formatHeader;  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  formatHeader;  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  formatHeader;  }	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format!=    null)    {    header    =    formatHeader;    }    	non-compiled	[CE]  :  expected	87	None	replace
524	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  formatHeader;  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  formatHeader;  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  null)  {  header  =  formatHeader;  }	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format!=    null)    {    header    =    formatHeader;    }    	non-compiled	[CE]  :  expected	87	None	replace
525	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format!=  null)  {  header  =  formatHeader;  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format!=  null)  {  header  =  formatHeader;  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format!=  null)  {  header  =  formatHeader;  }	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format!=    null)    {    header    =    formatHeader;    }    	non-compiled	[CE]  :  expected	87	None	replace
526	[BUG]  [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format!=  null)  {  header  =  formatHeader;  }  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format!=  null)  {  header  =  formatHeader;  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format!=  null)  {  header  =  formatHeader;  }	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format!=    null)    {    header    =    formatHeader;    }    	non-compiled	[CE]  :  expected	87	None	replace
527	[BUG]  [BUGGY]  hdrMap.put(record.toString(),  header);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(record.toString(),  header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(record.toString(),  header);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  :  expected	64	None	replace
528	[BUG]  [BUGGY]  hdrMap.put(header.toString(),  formatHeader);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(header.toString(),  formatHeader);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(header.toString(),  formatHeader);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  :  expected	64	None	replace
529	[BUG]  [BUGGY]  }  else  if(this.format.hasHeader()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasHeader()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasHeader()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord()    ||    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	38	None	replace
530	[BUG]  [BUGGY]  }  else  if(this.format.hasCSVHeader()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasCSVHeader()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasCSVHeader()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord()    ||    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	38	None	replace
531	[BUG]  [BUGGY]  }  else  if(this.format.hasRecordNumber()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasRecordNumber()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasRecordNumber()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord()    ||    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	38	None	replace
532	[BUG]  [BUGGY]  }  else  if(this.format.hasRecords()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasRecords()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasRecords()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord()    ||    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	38	None	replace
533	[BUG]  [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    this.nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	126	None	replace
534	[BUG]  [BUGGY]  }  else  if(this.format.hasSkipHeader())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasSkipHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasSkipHeader())  {	  }    else    if(nextRecord.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	76	None	replace
535	[BUG]  [BUGGY]  }  else  if(this.format.equals(header)&&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.equals(header)&&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.equals(header)&&  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(this.format.equals(header))    {    	non-compiled	[CE]  :  expected	109	None	replace
536	[BUG]  [BUGGY]  }  else  if(this.format.equals(header)&&  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.equals(header)&&  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.equals(header)&&  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(this.format.equals(header))    {    	non-compiled	[CE]  :  expected	109	None	replace
537	[BUG]  [BUGGY]  }  else  if(header.length()  <  0)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length()  <  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length()  <  0)  {	  }    else    if(header.length()    >    0)    {    	non-compiled	[CE]  :  expected	19	None	replace
538	[BUG]  [BUGGY]  }  else  if(rec.getHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(rec.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	55	None	replace
539	[BUG]  [BUGGY]  }  else  if(this.format.getNumber()  >  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getNumber()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getNumber()  >  0)  {	  }    else    if(rec.getNumber()    >    0)    {    	non-compiled	[CE]  :  expected	26	None	replace
540	[BUG]  [BUGGY]  }  else  if(record.getNumber()  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(record.getNumber()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(record.getNumber()  ==  0)  {	  }    else    if(rec.getNumber()    >    0)    {    	non-compiled	[CE]  :  expected	26	None	replace
541	[BUG]  [BUGGY]  }  else  if(this.format.getFormatHeader()!=  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormatHeader()!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormatHeader()!=  0)  {	  }    else    if(this.format.getFormatHeader()    >    0)    {    	non-compiled	[CE]  :  expected	105	None	replace
542	[BUG]  [BUGGY]  }  else  if(nextRecord.getFormatHeader()  >  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getFormatHeader()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getFormatHeader()  >  0)  {	  }    else    if(this.format.getFormatHeader()    >    0)    {    	non-compiled	[CE]  :  expected	105	None	replace
543	[BUG]  [BUGGY]  }  else  if(this.format!=  null  &&  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format!=  null  &&  this.format.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format!=  null  &&  this.format.isSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	118	None	replace
544	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  this.format.isSkipHeadRecord())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  this.format.isSkipHeadRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  this.format.isSkipHeadRecord())  {	  }    else    if(header!=    null    &&    this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	118	None	replace
545	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	85	None	replace
546	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	85	None	replace
547	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(formatHeader!=  null)  {  this.  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(formatHeader!=  null)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(formatHeader!=  null)  {  this.	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	85	None	replace
548	[BUG]  [BUGGY]  }  else  if(currentRecord.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(currentRecord.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(currentRecord.isSkipHeaderRecord())  {	  }    else    if(nextRecord.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	8	None	replace
549	[BUG]  [BUGGY]  }  else  if(header.isSelected())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.isSelected())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.isSelected())  {	  }    else    if(nextRecord.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	8	None	replace
550	[BUG]  [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	124	None	replace
551	[BUG]  [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.values();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.values();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.values();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	124	None	replace
552	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format.getFormat())  {  this.nextRecord();  }  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format.getFormat())  {  this.nextRecord();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format.getFormat())  {  this.nextRecord();  }	  if(header    ==    null)    {    if(this.format.getSkipHeaderRecord())    {    this.nextRecord();    }    	non-compiled	[CE]  :  expected	83	None	replace
553	[BUG]  [BUGGY]  if(header!=  null)  {  if(this.format.getRecord())  {  this.nextRecord();  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  if(this.format.getRecord())  {  this.nextRecord();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  if(this.format.getRecord())  {  this.nextRecord();  }	  if(header    ==    null)    {    if(this.format.getSkipHeaderRecord())    {    this.nextRecord();    }    	non-compiled	[CE]  :  expected	83	None	replace
554	[BUG]  [BUGGY]  if(header!=  null)  {  if(this.format.getFormat())  {  this.nextRecord();  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  if(this.format.getFormat())  {  this.nextRecord();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  if(this.format.getFormat())  {  this.nextRecord();  }	  if(header    ==    null)    {    if(this.format.getSkipHeaderRecord())    {    this.nextRecord();    }    	non-compiled	[CE]  :  expected	83	None	replace
555	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format.getFormatRecord())  {  this.nextRecord();  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format.getFormatRecord())  {  this.nextRecord();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format.getFormatRecord())  {  this.nextRecord();  }	  if(header    ==    null)    {    if(this.format.getSkipHeaderRecord())    {    this.nextRecord();    }    	non-compiled	[CE]  :  expected	83	None	replace
556	[BUG]  [BUGGY]  }  else  if(this.format.getFormatHeaderRecord())  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormatHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormatHeaderRecord())  {	  }    else    if(this.format.getFormatHeader())    {    	non-compiled	[CE]  :  expected	110	None	replace
557	[BUG]  [BUGGY]  }  else  if(nextRecord.getRecordNumber()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getRecordNumber()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getRecordNumber()!=  null)  {	  }    else    if(rec.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	12	None	replace
558	[BUG]  [BUGGY]  }  else  if(!this.format.isRecorded()  &&  header  ==  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isRecorded()  &&  header  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isRecorded()  &&  header  ==  null)  {	  }    else    if(!this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	43	None	replace
559	[BUG]  [BUGGY]  }  else  if(!this.format.isRecorded()  ||  header  ==  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isRecorded()  ||  header  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isRecorded()  ||  header  ==  null)  {	  }    else    if(!this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	43	None	replace
560	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.getHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  this.format.getHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.getHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getHeaderRecord().equals(header))    {    	non-compiled	[CE]  :  expected	108	None	replace
561	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  <  =  this.format.getHeaderRecord()  ||  this.format.getHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  <  =  this.format.getHeaderRecord()  ||  this.format.getHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  <  =  this.format.getHeaderRecord()  ||  this.format.getHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getHeaderRecord().equals(header))    {    	non-compiled	[CE]  :  expected	108	None	replace
562	[BUG]  [BUGGY]  }  else  if(header.equals(this.format)||  this.format.getHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.equals(this.format)||  this.format.getHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.equals(this.format)||  this.format.getHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getHeaderRecord().equals(header))    {    	non-compiled	[CE]  :  expected	108	None	replace
563	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  formatHeader.length()  ==  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  formatHeader.length()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  formatHeader.length()  ==  0)  {	  }    else    if(header    ==    null    ||    header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	92	None	replace
564	[BUG]  [BUGGY]  }  else  if(header.length  <  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length  <  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length  <  this.format.getSkipHeaderRecord())  {	  }    else    if(header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	27	None	replace
565	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  header  <  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  header  <  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  header  <  this.format.getSkipHeaderRecord())  {	  }    else    if(header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	27	None	replace
566	[BUG]  [BUGGY]  }  else  if(header!=  this.format.getHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  this.format.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  this.format.getHeaderRecord())  {	  }    else    if(header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	27	None	replace
567	[BUG]  [BUGGY]  }  else  if(header!=  this.format.getRecordNumber())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  this.format.getRecordNumber())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  this.format.getRecordNumber())  {	  }    else    if(header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	27	None	replace
568	[BUG]  [BUGGY]  }  else  if(!this.format.getHeaderRecord()  &&  header!=  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getHeaderRecord()  &&  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getHeaderRecord()  &&  header!=  null)  {	  }    else    if(!this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	54	None	replace
569	[BUG]  [BUGGY]  }  else  if(this.header!=  null  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header!=  null  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header!=  null  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(this.header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	113	None	replace
570	[BUG]  [BUGGY]  }  else  if(this.header!=  nextRecord.getHeader())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header!=  nextRecord.getHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header!=  nextRecord.getHeader())  {	  }    else    if(this.header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	113	None	replace
571	[BUG]  [BUGGY]  }  else  if(nextRecord.getFormat()  <  this.header)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getFormat()  <  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getFormat()  <  this.header)  {	  }    else    if(this.format.getFormat()    <    this.header)    {    	non-compiled	[CE]  :  expected	74	None	replace
572	[BUG]  [BUGGY]  }  else  if(header.getFormat()  ==  this.header)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.getFormat()  ==  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.getFormat()  ==  this.header)  {	  }    else    if(this.format.getFormat()    <    this.header)    {    	non-compiled	[CE]  :  expected	74	None	replace
573	[BUG]  [BUGGY]  }  else  if(currentRecord.isSkipHeader())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(currentRecord.isSkipHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(currentRecord.isSkipHeader())  {	  }    else    if(nextRecord.isSkipHeader())    {    	non-compiled	[CE]  :  expected	10	None	replace
574	[BUG]  [BUGGY]  }  else  if(this.format.getFormatHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormatHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormatHeaderRecord()  ==  null)  {	  }    else    if(this.format.getFormatHeader()    ==    null)    {    	non-compiled	[CE]  :  expected	132	None	replace
575	[BUG]  [BUGGY]  }  else  if(nextRecord.getFormatHeader()  ==  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getFormatHeader()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getFormatHeader()  ==  null)  {	  }    else    if(this.format.getFormatHeader()    ==    null)    {    	non-compiled	[CE]  :  expected	132	None	replace
576	[BUG]  [BUGGY]  if(this.format  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.values();    }    	non-compiled	[CE]  :  expected	128	None	replace
577	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  ||  this.format.getHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  ||  this.format.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  ||  this.format.getHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	107	None	replace
578	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  <  =  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  <  =  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  <  =  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	107	None	replace
579	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	107	None	replace
580	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  *  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  *  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  *  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	107	None	replace
581	[BUG]  [BUGGY]  final  CSVFormat  format  =  this.headers.getFormat();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  format  =  this.headers.getFormat();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  format  =  this.headers.getFormat();	  final    CSVFormat    format    =    nextRecord.getFormat();    	non-compiled	[CE]  :  expected	67	None	replace
582	[BUG]  [BUGGY]  final  CSVFormat  format  =  header.getFormat();  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  format  =  header.getFormat();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  format  =  header.getFormat();	  final    CSVFormat    format    =    nextRecord.getFormat();    	non-compiled	[CE]  :  expected	67	None	replace
583	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeader()  ==  header)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getSkipHeader()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeader()  ==  header)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	133	None	replace
584	[BUG]  [BUGGY]  }  else  if(this.format.getNumberOfRecords()  ==  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getNumberOfRecords()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getNumberOfRecords()  ==  0)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    0)    {    	non-compiled	[CE]  :  expected	15	None	replace
585	[BUG]  [BUGGY]  }  else  if(!this.format.hasFormatRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.hasFormatRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.hasFormatRecord())  {	  }    else    if(!this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	33	None	replace
586	[BUG]  [BUGGY]  }  else  if(!this.format.hasFormatHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.hasFormatHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.hasFormatHeaderRecord())  {	  }    else    if(!this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	33	None	replace
587	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeader())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getSkipHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeader())  {	  }    else    if(rec.getSkipHeader())    {    	non-compiled	[CE]  :  expected	23	None	replace
588	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderSize()  >  1)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderSize()  >  1)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderSize()  >  1)  {	  }    else    if(this.format.getHeaderSize()    >    0)    {    	non-compiled	[CE]  :  expected	106	None	replace
589	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  header.length  ==  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  header.length  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  header.length  ==  0)  {	  }    else    if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	115	None	replace
590	[BUG]  [BUGGY]  }  else  if(this.format.getFormatHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormatHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormatHeaderRecord()!=  null)  {	  }    else    if(this.format.getFormatHeader()!=    null)    {    	non-compiled	[CE]  :  expected	122	None	replace
591	[BUG]  [BUGGY]  }  else  if(nextRecord.getFormatHeader()!=  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getFormatHeader()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getFormatHeader()!=  null)  {	  }    else    if(this.format.getFormatHeader()!=    null)    {    	non-compiled	[CE]  :  expected	122	None	replace
592	[BUG]  [BUGGY]  }  else  if(!this.format.isRecord()  &&  header!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isRecord()  &&  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isRecord()  &&  header!=  null)  {	  }    else    if(!this.format.isRecord())    {    	non-compiled	[CE]  :  expected	81	None	replace
593	[BUG]  [BUGGY]  }  else  if(this.format.isRecorded()  &&  header!=  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isRecorded()  &&  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isRecorded()  &&  header!=  null)  {	  }    else    if(this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	95	None	replace
594	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRe  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRe  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRe	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
595	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHea  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHea  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHea	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
596	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()  ==  header)  {  this.  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()  ==  header)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()  ==  header)  {  this.	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
597	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()  ==  header)  {  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()  ==  header)  {	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
598	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()  ==  header)  {  this.  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()  ==  header)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()  ==  header)  {  this.	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
599	[BUG]  [BUGGY]  }  else  if(nextRecord.getHeader()  <  this.header)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getHeader()  <  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getHeader()  <  this.header)  {	  }    else    if(this.format.getHeader()    <    this.header)    {    	non-compiled	[CE]  :  expected	112	None	replace
600	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(header    ==    null    ||    this.format.getSkipHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	93	None	replace
601	[BUG]  [BUGGY]  }  else  if(this.format.getFormat()!=  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormat()!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormat()!=  0)  {	  }    else    if(this.format.getFormat()    >    0)    {    	non-compiled	[CE]  :  expected	90	None	replace
602	[BUG]  [BUGGY]  }  else  if(this.format.isSkipHeaderRecord()  ||  this.format.isHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isSkipHeaderRecord()  ||  this.format.isHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isSkipHeaderRecord()  ||  this.format.isHeaderRecord())  {	  }    else    if(this.format.isHeaderRecord())    {    	non-compiled	[CE]  :  expected	9	None	replace
603	[BUG]  [BUGGY]  }  else  if(!this.format.isHeaderRecord()  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isHeaderRecord()  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isHeaderRecord()  ||  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(!this.format.isHeaderRecord())    {    	non-compiled	[CE]  :  expected	40	None	replace
604	[BUG]  [BUGGY]  hdrMap.put(record.getName(),  header);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(record.getName(),  header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(record.getName(),  header);	  hdrMap.put(rect.getName(),    header);    	non-compiled	[CE]  :  expected	66	None	replace
605	[BUG]  [BUGGY]  }  else  if(this.format.hasHeaderRecord()  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasHeaderRecord()  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasHeaderRecord()  ||  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(this.format.hasHeaderRecord())    {    	non-compiled	[CE]  :  expected	39	None	replace
606	[BUG]  [BUGGY]  }  else  if(this.format.hasHeaderRecord()  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasHeaderRecord()  ||  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasHeaderRecord()  ||  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(this.format.hasHeaderRecord())    {    	non-compiled	[CE]  :  expected	39	None	replace
607	[BUG]  [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(1);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.substring(1);    }    	non-compiled	[CE]  :  expected	129	None	replace
608	[BUG]  [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(2);  }  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(2);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(2);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.substring(1);    }    	non-compiled	[CE]  :  expected	129	None	replace
609	[BUG]  [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(2);  }  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(2);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.substring(2);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.substring(1);    }    	non-compiled	[CE]  :  expected	129	None	replace
610	[BUG]  [BUGGY]  }  else  if(this.format.getName()!=  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getName()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getName()!=  null)  {	  }    else    if(this.format.getSkipHeaderRecord()!=    0)    {    	non-compiled	[CE]  :  expected	17	None	replace
611	[BUG]  [BUGGY]  }  else  if(this.format!=  null  &&  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format!=  null  &&  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format!=  null  &&  this.format.hasSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	116	None	replace
612	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  this.format.hasSkipHeadRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  this.format.hasSkipHeadRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  this.format.hasSkipHeadRecord())  {	  }    else    if(header!=    null    &&    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	116	None	replace
613	[BUG]  [BUGGY]  }  else  if(nextRecord.getRecordNumber()  <  this.header)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getRecordNumber()  <  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getRecordNumber()  <  this.header)  {	  }    else    if(this.format.getRecordNumber()    <    this.header)    {    	non-compiled	[CE]  :  expected	31	None	replace
614	[BUG]  [BUGGY]  }  else  if(nextRecord.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(nextRecord.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	36	None	replace
615	[BUG]  [BUGGY]  }  else  if(this.format.getRecordHeaderRecord())  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordHeaderRecord())  {	  }    else    if(this.format.getRecordNumber())    {    	non-compiled	[CE]  :  expected	22	None	replace
616	[BUG]  [BUGGY]  }  else  if(this.format.getRecordHeader())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordHeader())  {	  }    else    if(this.format.getRecordNumber())    {    	non-compiled	[CE]  :  expected	22	None	replace
617	[BUG]  [BUGGY]  }  else  if(this.format.hasRecordedHeader())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasRecordedHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasRecordedHeader())  {	  }    else    if(this.format.hasRecordedSize())    {    	non-compiled	[CE]  :  expected	121	None	replace
618	[BUG]  [BUGGY]  }  else  if(this.format.hasHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.hasHeaderRecord())    {    	non-compiled	[CE]  :  expected	39	None	replace
619	[BUG]  [BUGGY]  }  else  if(this.format.hasHeaderRecord()  ||  this.format.hasHeaderRecord())  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasHeaderRecord()  ||  this.format.hasHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasHeaderRecord()  ||  this.format.hasHeaderRecord())  {	  }    else    if(this.format.hasHeaderRecord())    {    	non-compiled	[CE]  :  expected	39	None	replace
620	[BUG]  [BUGGY]  }  else  if(rec.getHeaderRecord()  ||  header.equals(this.format))  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeaderRecord()  ||  header.equals(this.format))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderRecord()  ||  header.equals(this.format))  {	  }    else    if(rec.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	55	None	replace
621	[BUG]  [BUGGY]  }  else  if(rec.getHeaderRecord()  ||  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeaderRecord()  ||  this.format.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderRecord()  ||  this.format.isSkipHeaderRecord())  {	  }    else    if(rec.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	55	None	replace
622	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHe  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHe  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHe	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
623	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHea  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHea  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHea	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
624	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHeader  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHeader  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.values();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHeader	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
625	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHea  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHea  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  =  formatHea	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    =    formatHeader    	non-compiled	[CE]  :  expected	89	None	replace
626	[BUG]  [BUGGY]  }  else  if(this.header!=  this.formatHeader)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header!=  this.formatHeader)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header!=  this.formatHeader)  {	  }    else    if(this.format.getSkipHeaderRecord()!=    this.header)    {    	non-compiled	[CE]  :  expected	30	None	replace
627	[BUG]  [BUGGY]  }  else  if(this.format.getRecordHeader()!=  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordHeader()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordHeader()!=  null)  {	  }    else    if(this.format.getHeader()!=    null)    {    	non-compiled	[CE]  :  expected	123	None	replace
628	[BUG]  [BUGGY]  }  else  if(this.format.getHeader()  ==  header)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeader()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeader()  ==  header)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    header)    {    	non-compiled	[CE]  :  expected	133	None	replace
629	[BUG]  [BUGGY]  }  else  if(this.format.getFormatHeader()!=  header)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormatHeader()!=  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormatHeader()!=  header)  {	  }    else    if(this.format.getFormatHeader()    >    0)    {    	non-compiled	[CE]  :  expected	105	None	replace
630	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString()  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString()  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString()	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	124	None	replace
631	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.toString();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	124	None	replace
632	[BUG]  [BUGGY]  }  else  if(current.getHeaderRecord()  >  0)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.getHeaderRecord()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.getHeaderRecord()  >  0)  {	  }    else    if(current.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	57	None	replace
633	[BUG]  [BUGGY]  }  else  if(this.format.getBaseHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getBaseHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getBaseHeaderRecord()!=  null)  {	  }    else    if(this.format.getHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	46	None	replace
634	[BUG]  [BUGGY]  }  else  if(!this.format.isHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(!this.format.isHeaderRecord())    {    	non-compiled	[CE]  :  expected	40	None	replace
635	[BUG]  [BUGGY]  }  else  if(!this.format.isHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(!this.format.isHeaderRecord())    {    	non-compiled	[CE]  :  expected	40	None	replace
636	[BUG]  [BUGGY]  }  else  if(!this.format.isHeaderRecord()  &&  this.nextRecord.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isHeaderRecord()  &&  this.nextRecord.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isHeaderRecord()  &&  this.nextRecord.getSkipHeaderRecord())  {	  }    else    if(!this.format.isHeaderRecord())    {    	non-compiled	[CE]  :  expected	40	None	replace
637	[BUG]  [BUGGY]  }  else  if(rec.getHeaderNumber())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeaderNumber())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderNumber())  {	  }    else    if(rec.getSkipHeader())    {    	non-compiled	[CE]  :  expected	23	None	replace
638	[BUG]  [BUGGY]  }  else  if(rec.getHeaderCount()  >  1)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeaderCount()  >  1)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderCount()  >  1)  {	  }    else    if(rec.getSkipHeader())    {    	non-compiled	[CE]  :  expected	23	None	replace
639	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  this.nextRecord.getHeader();  }  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  this.nextRecord.getHeader();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  this.nextRecord.getHeader();  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    header[i]    =    nextRecord.getHeader();    }    	non-compiled	[CE]  :  expected	63	None	replace
640	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  this.nextRecord.values();  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  this.nextRecord.values();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  header[i]  =  this.nextRecord.values();  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    header[i]    =    nextRecord.getHeader();    }    	non-compiled	[CE]  :  expected	63	None	replace
641	[BUG]  [BUGGY]  }  else  if(rec.getHeader()  ==  header)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeader()  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeader()  ==  header)  {	  }    else    if(rec.getHeader())    {    	non-compiled	[CE]  :  expected	56	None	replace
642	[BUG]  [BUGGY]  }  else  if(header.equals(this.format)&&  nextRecord.isSkipHeader())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.equals(this.format)&&  nextRecord.isSkipHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.equals(this.format)&&  nextRecord.isSkipHeader())  {	  }    else    if(nextRecord.isSkipHeader())    {    	non-compiled	[CE]  :  expected	10	None	replace
643	[BUG]  [BUGGY]  }  else  if(nextRecord.isSkipHeader()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.isSkipHeader()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.isSkipHeader()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(nextRecord.isSkipHeader())    {    	non-compiled	[CE]  :  expected	10	None	replace
644	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()  <  header.length)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordNumber()  <  header.length)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()  <  header.length)  {	  }    else    if(this.format.getRecordNumber()    <    this.header)    {    	non-compiled	[CE]  :  expected	31	None	replace
645	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.trim();    }    	non-compiled	[CE]  :  expected	125	None	replace
646	[BUG]  [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.trim();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.trim();    }    	non-compiled	[CE]  :  expected	125	None	replace
647	[BUG]  [BUGGY]  }  else  if(rec.isStdHeader())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.isStdHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isStdHeader())  {	  }    else    if(rec.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	6	None	replace
648	[BUG]  [BUGGY]  }  else  if(rec.isHeader())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.isHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.isHeader())  {	  }    else    if(rec.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	6	None	replace
649	[BUG]  [BUGGY]  }  else  if(current.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(current.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	37	None	replace
650	[BUG]  [BUGGY]  }  else  if(current.hasSkipHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.hasSkipHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.hasSkipHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(current.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	37	None	replace
651	[BUG]  [BUGGY]  }  else  if(current.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(current.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(current.hasSkipHeaderRecord()  ||  this.format.hasSkipHeaderRecord())  {	  }    else    if(current.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	37	None	replace
652	[BUG]  [BUGGY]  }  else  if(nextRecord.hasSkipHeader()  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.hasSkipHeader()  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasSkipHeader()  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(nextRecord.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	76	None	replace
653	[BUG]  [BUGGY]  }  else  if(nextRecord.hasSkipHeader()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.hasSkipHeader()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.hasSkipHeader()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(nextRecord.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	76	None	replace
654	[BUG]  [BUGGY]  }  else  if(this.nextRecord.hasSkipHeader())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.nextRecord.hasSkipHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.nextRecord.hasSkipHeader())  {	  }    else    if(nextRecord.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	76	None	replace
655	[BUG]  [BUGGY]  }  else  if(this.format.equals(header)&&  header.length  >  0)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.equals(header)&&  header.length  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.equals(header)&&  header.length  >  0)  {	  }    else    if(this.format.equals(header))    {    	non-compiled	[CE]  :  expected	109	None	replace
656	[BUG]  [BUGGY]  }  else  if(this.format.equals(header)&&  header.length()  >  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.equals(header)&&  header.length()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.equals(header)&&  header.length()  >  0)  {	  }    else    if(this.format.equals(header))    {    	non-compiled	[CE]  :  expected	109	None	replace
657	[BUG]  [BUGGY]  }  else  if(header.length  ==  0  &&  this.format.equals(header))  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length  ==  0  &&  this.format.equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length  ==  0  &&  this.format.equals(header))  {	  }    else    if(this.format.equals(header))    {    	non-compiled	[CE]  :  expected	109	None	replace
658	[BUG]  [BUGGY]  hdrMap.put(receiver.toString(),  header);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  hdrMap.put(receiver.toString(),  header);  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	hdrMap.put(receiver.toString(),  header);	  hdrMap.put(rect.toString(),    header);    	non-compiled	[CE]  :  expected	64	None	replace
659	[BUG]  [BUGGY]  }  else  if(this.format!=  null  &&  header.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format!=  null  &&  header.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format!=  null  &&  header.isSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	118	None	replace
660	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.isHeaderRecord())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  this.format.isHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.isHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	118	None	replace
661	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.isSkipHeaderRecord()  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  this.format.isSkipHeaderRecord()  ||  header.length()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.isSkipHeaderRecord()  ||  header.length()  ==  0)  {	  }    else    if(header!=    null    &&    this.format.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	118	None	replace
662	[BUG]  [BUGGY]  }  else  if(header  ==  header)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  header)  {	  }    else    if(formatHeader    ==    null)    {    	non-compiled	[CE]  :  expected	4	None	replace
663	[BUG]  [BUGGY]  if(this.format  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  header	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    header    	non-compiled	[CE]  :  expected	88	None	replace
664	[BUG]  [BUGGY]  }  else  if(header  <  this.formatHeader)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  <  this.formatHeader)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  <  this.formatHeader)  {	  }    else    if(header    <    this.header)    {    	non-compiled	[CE]  :  expected	73	None	replace
665	[BUG]  [BUGGY]  }  else  if(i  >  0  &&  this.format.getRecordNumber())  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(i  >  0  &&  this.format.getRecordNumber())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(i  >  0  &&  this.format.getRecordNumber())  {	  }    else    if(this.format.getRecordNumber())    {    	non-compiled	[CE]  :  expected	22	None	replace
666	[BUG]  [BUGGY]  }  else  if(rec  ==  header)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec  ==  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec  ==  header)  {	  }    else    if(rec    ==    null)    {    	non-compiled	[CE]  :  expected	3	None	replace
667	[BUG]  [BUGGY]  final  CSVFormat  format  =  this.format.getFormat();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  format  =  this.format.getFormat();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  format  =  this.format.getFormat();	  final    CSVFormat    format    =    nextRecord.getFormat();    	non-compiled	[CE]  :  expected	67	None	replace
668	[BUG]  [BUGGY]  final  CSVFormat  format  =  this.firstRecord.getFormat();  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  format  =  this.firstRecord.getFormat();  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  format  =  this.firstRecord.getFormat();	  final    CSVFormat    format    =    nextRecord.getFormat();    	non-compiled	[CE]  :  expected	67	None	replace
669	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.values();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.values();    }    	non-compiled	[CE]  :  expected	128	None	replace
670	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  header  =  nextRecord.getFormat();  }  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  header  =  nextRecord.getFormat();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  header  =  nextRecord.getFormat();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.values();    }    	non-compiled	[CE]  :  expected	128	None	replace
671	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format.getFormatHeaderRecord())  {  this.nextRecord();  }  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format.getFormatHeaderRecord())  {  this.nextRecord();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format.getFormatHeaderRecord())  {  this.nextRecord();  }	  if(header    ==    null)    {    if(this.format.getSkipHeaderRecord())    {    this.nextRecord();    }    	non-compiled	[CE]  :  expected	83	None	replace
672	[BUG]  [BUGGY]  if(header  ==  null)  {  if(this.format.getHeaderRecord())  {  this.nextRecord();  }  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  if(this.format.getHeaderRecord())  {  this.nextRecord();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  if(this.format.getHeaderRecord())  {  this.nextRecord();  }	  if(header    ==    null)    {    if(this.format.getSkipHeaderRecord())    {    this.nextRecord();    }    	non-compiled	[CE]  :  expected	83	None	replace
673	[BUG]  [BUGGY]  }  else  if(header.length()  >  0  ||  header.charAt(header.length()  -  1)  ==  '/')  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length()  >  0  ||  header.charAt(header.length()  -  1)  ==  '/')  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length()  >  0  ||  header.charAt(header.length()  -  1)  ==  '/')  {	  }    else    if(header.length()    >    0)    {    	non-compiled	[CE]  :  expected	19	None	replace
674	[BUG]  [BUGGY]  }  else  if(this.header  ==  this.formatHeader)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header  ==  this.formatHeader)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header  ==  this.formatHeader)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    this.header)    {    	non-compiled	[CE]  :  expected	28	None	replace
675	[BUG]  [BUGGY]  }  else  if(this.header  ==  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header  ==  null)  {	  }    else    if(this.format.getSkipHeaderRecord()    ==    this.header)    {    	non-compiled	[CE]  :  expected	28	None	replace
676	[BUG]  [BUGGY]  }  else  if(this.nextRecord.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.nextRecord.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.nextRecord.hasSkipHeaderRecord())  {	  }    else    if(nextRecord.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	36	None	replace
677	[BUG]  [BUGGY]  }  else  if(this.format.hasRecordedSize()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasRecordedSize()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasRecordedSize()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.hasRecordedSize())    {    	non-compiled	[CE]  :  expected	121	None	replace
678	[BUG]  [BUGGY]  }  else  if(this.format.hasRecordedSize()  &&  header.length()  >  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasRecordedSize()  &&  header.length()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasRecordedSize()  &&  header.length()  >  0)  {	  }    else    if(this.format.hasRecordedSize())    {    	non-compiled	[CE]  :  expected	121	None	replace
679	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  >  0  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  >  0  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  >  0  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	107	None	replace
680	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  >  0  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  >  0  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  >  0  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	107	None	replace
681	[BUG]  [BUGGY]  }  else  if(header.length  ==  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length  ==  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length  ==  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  }    else    if(header.length    ==    0)    {    	non-compiled	[CE]  :  expected	71	None	replace
682	[BUG]  [BUGGY]  }  else  if(header.length  ==  formatHeader.length)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length  ==  formatHeader.length)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length  ==  formatHeader.length)  {	  }    else    if(header.length    ==    0)    {    	non-compiled	[CE]  :  expected	71	None	replace
683	[BUG]  [BUGGY]  }  else  if(header.equals(this.format)&&  nextRecord.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.equals(this.format)&&  nextRecord.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.equals(this.format)&&  nextRecord.isSkipHeaderRecord())  {	  }    else    if(nextRecord.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	8	None	replace
684	[BUG]  [BUGGY]  }  else  if(this.nextRecord.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.nextRecord.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.nextRecord.isSkipHeaderRecord())  {	  }    else    if(nextRecord.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	8	None	replace
685	[BUG]  [BUGGY]  }  else  if(this.format.isSkipHeaderRecord()  ||  nextRecord.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isSkipHeaderRecord()  ||  nextRecord.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isSkipHeaderRecord()  ||  nextRecord.isSkipHeaderRecord())  {	  }    else    if(nextRecord.isSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	8	None	replace
686	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderSize()  <  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderSize()  <  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderSize()  <  0)  {	  }    else    if(this.format.getHeaderSize()    >    0)    {    	non-compiled	[CE]  :  expected	106	None	replace
687	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  this.format.getFormatHeader())  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  this.format.getFormatHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  this.format.getFormatHeader())  {	  }    else    if(this.format.getFormatHeader())    {    	non-compiled	[CE]  :  expected	110	None	replace
688	[BUG]  [BUGGY]  }  else  if(currentRecord.getFormatHeader())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(currentRecord.getFormatHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(currentRecord.getFormatHeader())  {	  }    else    if(this.format.getFormatHeader())    {    	non-compiled	[CE]  :  expected	110	None	replace
689	[BUG]  [BUGGY]  }  else  if(header  >=  null  &&  header.length()  >  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  >=  null  &&  header.length()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  >=  null  &&  header.length()  >  0)  {	  }    else    if(header    ==    null    &&    header.length()    >    0)    {    	non-compiled	[CE]  :  expected	101	None	replace
690	[BUG]  [BUGGY]  }  else  if(rec.getFormat()  ==  null  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getFormat()  ==  null  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormat()  ==  null  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.getFormat()    ==    null)    {    	non-compiled	[CE]  :  expected	50	None	replace
691	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeader()  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasSkipHeader()  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeader()  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	35	None	replace
692	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeader()  &&  header.length()  >  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasSkipHeader()  &&  header.length()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeader()  &&  header.length()  >  0)  {	  }    else    if(rec.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	35	None	replace
693	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeader()  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasSkipHeader()  ||  header.length()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeader()  ||  header.length()  ==  0)  {	  }    else    if(rec.hasSkipHeader())    {    	non-compiled	[CE]  :  expected	35	None	replace
694	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  >  this.header)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  >  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  >  this.header)  {	  }    else    if(this.format.getHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	29	None	replace
695	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  <  this.header  ||  this.format.getHeaderRecord()  >  this.header)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  <  this.header  ||  this.format.getHeaderRecord()  >  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  <  this.header  ||  this.format.getHeaderRecord()  >  this.header)  {	  }    else    if(this.format.getHeaderRecord()    <    this.header)    {    	non-compiled	[CE]  :  expected	29	None	replace
696	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format!=	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format!=    null)    {    header    =    formatHeader;    }    	non-compiled	[CE]  :  expected	87	None	replace
697	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if	  if(header    ==    null)    {    for(int    i    =    0;    i    <    this.headers.size();    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format!=    null)    {    header    =    formatHeader;    }    	non-compiled	[CE]  :  expected	87	None	replace
698	[BUG]  [BUGGY]  }  else  if(header!=  null  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(header    ==    null    ||    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	99	None	replace
699	[BUG]  [BUGGY]  }  else  if(this.format.getRecordHeader()  ==  null)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordHeader()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordHeader()  ==  null)  {	  }    else    if(this.format.getFormatHeader()    ==    null)    {    	non-compiled	[CE]  :  expected	132	None	replace
700	[BUG]  [BUGGY]  }  else  if(rec.getHeaderRecord()!=  null  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeaderRecord()!=  null  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderRecord()!=  null  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.getHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	75	None	replace
701	[BUG]  [BUGGY]  }  else  if(rec.getHeaderRecord()!=  null  &&  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeaderRecord()!=  null  &&  this.format.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderRecord()!=  null  &&  this.format.isSkipHeaderRecord())  {	  }    else    if(rec.getHeaderRecord()!=    null)    {    	non-compiled	[CE]  :  expected	75	None	replace
702	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  nextRecord.getHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  nextRecord.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  nextRecord.getHeaderRecord())  {	  }    else    if(nextRecord.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	58	None	replace
703	[BUG]  [BUGGY]  }  else  if(nextRecord.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord.getHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(nextRecord.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	58	None	replace
704	[BUG]  [BUGGY]  }  else  if(!this.format.getHeaderRecord()  ||  header  ==  null)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getHeaderRecord()  ||  header  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getHeaderRecord()  ||  header  ==  null)  {	  }    else    if(!this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	54	None	replace
705	[BUG]  [BUGGY]  }  else  if(!this.format.getHeaderRecord()  ||  header!=  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getHeaderRecord()  ||  header!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getHeaderRecord()  ||  header!=  null)  {	  }    else    if(!this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	54	None	replace
706	[BUG]  [BUGGY]  }  else  if(!this.format.getHeaderRecord()  &&  header.length()  >  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.getHeaderRecord()  &&  header.length()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.getHeaderRecord()  &&  header.length()  >  0)  {	  }    else    if(!this.format.getHeaderRecord())    {    	non-compiled	[CE]  :  expected	54	None	replace
707	[BUG]  [BUGGY]  }  else  if(!this.format.equals(header)&&  header.length  >  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.equals(header)&&  header.length  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.equals(header)&&  header.length  >  0)  {	  }    else    if(!this.format.equals(header))    {    	non-compiled	[CE]  :  expected	80	None	replace
708	[BUG]  [BUGGY]  }  else  if(header.length  ==  0  &&!this.format.equals(header))  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header.length  ==  0  &&!this.format.equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header.length  ==  0  &&!this.format.equals(header))  {	  }    else    if(!this.format.equals(header))    {    	non-compiled	[CE]  :  expected	80	None	replace
709	[BUG]  [BUGGY]  }  else  if(this.format.getRecordNumber()  <  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getRecordNumber()  <  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getRecordNumber()  <  0)  {	  }    else    if(this.format.getRecordNumber()    >    0)    {    	non-compiled	[CE]  :  expected	16	None	replace
710	[BUG]  [BUGGY]  }  else  if(nextRecord  ==  null  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(nextRecord  ==  null  ||  header.length()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(nextRecord  ==  null  ||  header.length()  ==  0)  {	  }    else    if(nextRecord    ==    null)    {    	non-compiled	[CE]  :  expected	5	None	replace
711	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  }    else    if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  :  expected	115	None	replace
712	[BUG]  [BUGGY]  }  else  if(this.format.isHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.isHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.isHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format.isHeaderRecord())    {    	non-compiled	[CE]  :  expected	9	None	replace
713	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  <  0)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  <  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  <  0)  {	  }    else    if(this.format.getHeaderRecord()    >    0)    {    	non-compiled	[CE]  :  expected	18	None	replace
714	[BUG]  [BUGGY]  }  else  if(header  <  this.format.getFormatHeader())  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  <  this.format.getFormatHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  <  this.format.getFormatHeader())  {	  }    else    if(header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	27	None	replace
715	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(formatHeader.length  ==  0)  {  this.  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(formatHeader.length  ==  0)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(formatHeader.length  ==  0)  {  this.	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
716	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(formatHeader.length  ==  header)  {  this.  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(formatHeader.length  ==  header)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(formatHeader.length  ==  header)  {  this.	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
717	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(formatHeader.length  ==  header)  {  this.  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(formatHeader.length  ==  header)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(formatHeader.length  ==  header)  {  this.	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
718	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(formatHeader.length  ==  0)  {  this.  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(formatHeader.length  ==  0)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(formatHeader.length  ==  0)  {  this.	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
719	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(formatHeader.length  ==  header)  {  this.  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(formatHeader.length  ==  header)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(formatHeader.length  ==  header)  {  this.	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
720	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(formatHeader.length  ==  0)  {  this.  [CE]  :  expected  [FE]                                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(formatHeader.length  ==  0)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(formatHeader.length  ==  0)  {  this.	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
721	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(formatHeader.length  ==  0)  {  this.  [CE]  :  expected  [FE]                                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(formatHeader.length  ==  0)  {  this.  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.size();  i++)  {  final  CSVFormat  format  =  nextRecord.getFormat();  if(formatHeader.length  ==  0)  {  this.	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.size();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()    ==    header)    {    this.    	non-compiled	[CE]  :  expected	68	None	replace
722	[BUG]  [BUGGY]  }  else  if(rec.size()  >  0  ||  header.charAt(rec.length  -  1)!=  '/')  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.size()  >  0  ||  header.charAt(rec.length  -  1)!=  '/')  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.size()  >  0  ||  header.charAt(rec.length  -  1)!=  '/')  {	  }    else    if(rec.size()    >    0)    {    	non-compiled	[CE]  :  expected	20	None	replace
723	[BUG]  [BUGGY]  }  else  if(rec.size()  >  0  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.size()  >  0  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.size()  >  0  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.size()    >    0)    {    	non-compiled	[CE]  :  expected	20	None	replace
724	[BUG]  [BUGGY]  }  else  if(rec.size()  >  1)  {  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.size()  >  1)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.size()  >  1)  {	  }    else    if(rec.size()    >    0)    {    	non-compiled	[CE]  :  expected	20	None	replace
725	[BUG]  [BUGGY]  }  else  if(rec.size()  >  0  ||  header.charAt(rec.length  -  1)  ==  '/')  {  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.size()  >  0  ||  header.charAt(rec.length  -  1)  ==  '/')  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.size()  >  0  ||  header.charAt(rec.length  -  1)  ==  '/')  {	  }    else    if(rec.size()    >    0)    {    	non-compiled	[CE]  :  expected	20	None	replace
726	[BUG]  [BUGGY]  }  else  if(rec.getHeader()!=  null  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeader()!=  null  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeader()!=  null  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.getHeader()!=    null)    {    	non-compiled	[CE]  :  expected	14	None	replace
727	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  <  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  <  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()  <  null)  {	  }    else    if(this.format.getFormat()    ==    null)    {    	non-compiled	[CE]  :  expected	61	None	replace
728	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.getFormatHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  this.format.getFormatHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.getFormatHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	114	None	replace
729	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.getHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  this.format.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.getHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	114	None	replace
730	[BUG]  [BUGGY]  }  else  if(this.format!=  null  &&  header!=  null  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format!=  null  &&  header!=  null  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format!=  null  &&  header!=  null  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	114	None	replace
731	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.getFormatHeader())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  this.format.getFormatHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.getFormatHeader())  {	  }    else    if(header!=    null    &&    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	114	None	replace
732	[BUG]  [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.replace(this.format,    formatHeader);    }    	non-compiled	[CE]  :  expected	127	None	replace
733	[BUG]  [BUGGY]  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	final  CSVFormat  formatHeader  =  this.nextRecord.getFormat();  if(formatHeader!=  null)  {  header  =  formatHeader.replace(this.format,  formatHeader);  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.replace(this.format,    formatHeader);    }    	non-compiled	[CE]  :  expected	127	None	replace
734	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getHeaderRecord().equals(header))    {    	non-compiled	[CE]  :  expected	108	None	replace
735	[BUG]  [BUGGY]  }  else  if(this.format.getHeaderRecord()  >  header  ||  this.format.getHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeaderRecord()  >  header  ||  this.format.getHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeaderRecord()  >  header  ||  this.format.getHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getHeaderRecord().equals(header))    {    	non-compiled	[CE]  :  expected	108	None	replace
736	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  this.format.getHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  this.format.getHeaderRecord().equals(header))  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  this.format.getHeaderRecord().equals(header))  {	  }    else    if(this.format.getHeaderRecord()    ||    this.format.getHeaderRecord().equals(header))    {    	non-compiled	[CE]  :  expected	108	None	replace
737	[BUG]  [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  header  =  this.nextRecord.values();  }  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  header  =  this.nextRecord.values();  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format.getSkipHeaderRecord())  {  if(header  ==  null)  {  header  =  this.nextRecord.values();  }	  if(header    ==    null)    {    final    CSVFormat    formatHeader    =    this.nextRecord.getFormat();    if(formatHeader!=    null)    {    header    =    formatHeader.toString();    }    	non-compiled	[CE]  :  expected	126	None	replace
738	[BUG]  [BUGGY]  }  else  if(this.header!=  this.format.getHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header!=  this.format.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header!=  this.format.getHeaderRecord())  {	  }    else    if(this.header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	113	None	replace
739	[BUG]  [BUGGY]  }  else  if(this.header  <  this.format.getHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.header  <  this.format.getHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.header  <  this.format.getHeaderRecord())  {	  }    else    if(this.header    <    this.format.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	113	None	replace
740	[BUG]  [BUGGY]  }  else  if(header  ==  header  ||  header.length()!=  0)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  header  ||  header.length()!=  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  header  ||  header.length()!=  0)  {	  }    else    if(header    ==    null    ||    header.length()!=    0)    {    	non-compiled	[CE]  :  expected	100	None	replace
741	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
742	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(this.format  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(this.format  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(this.format	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
743	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(this.format  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(this.format  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals(this.format	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
744	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.getName().equals	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.getName().equals(this.format.getName    	non-compiled	[CE]  :  expected	65	None	replace
745	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.getSkipHeaderRecord()  >  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  this.format.getSkipHeaderRecord()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.getSkipHeaderRecord()  >  0)  {	  }    else    if(header    >=    null)    {    	non-compiled	[CE]  :  expected	72	None	replace
746	[BUG]  [BUGGY]  }  else  if(this.format.equals(header)||  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.equals(header)||  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.equals(header)||  this.format.hasSkipHeaderRecord())  {	  }    else    if(this.format.hasSkipHeaderRecord()    ||    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	38	None	replace
747	[BUG]  [BUGGY]  }  else  if(rec.getRecordNumber()!=  null  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getRecordNumber()!=  null  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getRecordNumber()!=  null  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.getRecordNumber()!=    null)    {    	non-compiled	[CE]  :  expected	12	None	replace
748	[BUG]  [BUGGY]  }  else  if(this.format!=  null  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format!=  null  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format!=  null  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format!=    null)    {    	non-compiled	[CE]  :  expected	1	None	replace
749	[BUG]  [BUGGY]  }  else  if(this.format!=  null  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format!=  null  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format!=  null  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format!=    null)    {    	non-compiled	[CE]  :  expected	1	None	replace
750	[BUG]  [BUGGY]  }  else  if(this.format!=  null  &&  this.format.getSkipHeaderRecord()  >  0)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format!=  null  &&  this.format.getSkipHeaderRecord()  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format!=  null  &&  this.format.getSkipHeaderRecord()  >  0)  {	  }    else    if(this.format!=    null)    {    	non-compiled	[CE]  :  expected	1	None	replace
751	[BUG]  [BUGGY]  }  else  if(header  ==  header  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  header  ||  header.length()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  header  ||  header.length()  ==  0)  {	  }    else    if(header    ==    null    ||    header.length()    ==    0)    {    	non-compiled	[CE]  :  expected	92	None	replace
752	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeaderRecord()  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	34	None	replace
753	[BUG]  [BUGGY]  }  else  if(rec.hasSkipHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasSkipHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasSkipHeaderRecord()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	34	None	replace
754	[BUG]  [BUGGY]  }  else  if(rec.hasStdHeader())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.hasStdHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.hasStdHeader())  {	  }    else    if(rec.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	34	None	replace
755	[BUG]  [BUGGY]  }  else  if(header  ==  null  &&  nextRecord.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  &&  nextRecord.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  &&  nextRecord.getSkipHeaderRecord())  {	  }    else    if(nextRecord.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	53	None	replace
756	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  nextRecord.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  nextRecord.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  nextRecord.getSkipHeaderRecord())  {	  }    else    if(nextRecord.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	53	None	replace
757	[BUG]  [BUGGY]  }  else  if(header  ==  null  ||  nextRecord.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  ==  null  ||  nextRecord.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  ==  null  ||  nextRecord.getSkipHeaderRecord())  {	  }    else    if(nextRecord.getSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	53	None	replace
758	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	85	None	replace
759	[BUG]  [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  nu  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  nu  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(this.format!=  null)  {  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  nu	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	85	None	replace
760	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  header.length;  i++)  {  CSVFormat  format  =  nextRecord.getFormat();  if(format.getSkipHeaderRecord()!=  null)  {  this	  if(header    ==    null)    {    for(int    i    =    0;    i    <    header.length;    i++)    {    CSVFormat    format    =    nextRecord.getFormat();    if(format.getSkipHeaderRecord()!=    null)    {    this.    	non-compiled	[CE]  :  expected	85	None	replace
761	[BUG]  [BUGGY]  }  else  if(this.format.getHeader()  >  this.header)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeader()  >  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeader()  >  this.header)  {	  }    else    if(this.format.getHeader()    <    this.header)    {    	non-compiled	[CE]  :  expected	112	None	replace
762	[BUG]  [BUGGY]  }  else  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(this.format    ==    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
763	[BUG]  [BUGGY]  }  else  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(this.format    ==    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
764	[BUG]  [BUGGY]  }  else  if(this.format  ==  null  ||  this.format.isSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format  ==  null  ||  this.format.isSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format  ==  null  ||  this.format.isSkipHeaderRecord())  {	  }    else    if(this.format    ==    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
765	[BUG]  [BUGGY]  }  else  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  >=  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  >=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format  ==  null  ||  this.format.getSkipHeaderRecord()  >=  null)  {	  }    else    if(this.format    ==    null)    {    	non-compiled	[CE]  :  expected	2	None	replace
766	[BUG]  [BUGGY]  }  else  if(rec.getFormat()!=  null  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getFormat()!=  null  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormat()!=  null  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(rec.getFormat()!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
767	[BUG]  [BUGGY]  }  else  if(rec.getFormat()!=  null  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getFormat()!=  null  &&  this.format.getSkipHeaderRecord()  ==  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormat()!=  null  &&  this.format.getSkipHeaderRecord()  ==  null)  {	  }    else    if(rec.getFormat()!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
768	[BUG]  [BUGGY]  }  else  if(rec.getFormat()!=  null  &&  this.format.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getFormat()!=  null  &&  this.format.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getFormat()!=  null  &&  this.format.hasSkipHeaderRecord())  {	  }    else    if(rec.getFormat()!=    null)    {    	non-compiled	[CE]  :  expected	11	None	replace
769	[BUG]  [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  header.length  >  0)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  header.length  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  header.length  >  0)  {	  }    else    if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  :  expected	130	None	replace
770	[BUG]  [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)||  header.length  >  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)||  header.length  >  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES)||  header.length  >  0)  {	  }    else    if(!this.format.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  :  expected	130	None	replace
771	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.getHeader())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  this.format.getHeader())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.getHeader())  {	  }    else    if(this.format.getHeader())    {    	non-compiled	[CE]  :  expected	111	None	replace
772	[BUG]  [BUGGY]  }  else  if(this.format.getHeader()!=  header)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getHeader()!=  header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getHeader()!=  header)  {	  }    else    if(this.format.getHeader()    >    0)    {    	non-compiled	[CE]  :  expected	104	None	replace
773	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
774	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
775	[BUG]  [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header!=  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
776	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
777	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  }  [CE]  :  expected  [FE]                                              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  }  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  }	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
778	[BUG]  [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [CE]  :  expected  [FE]                                                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	if(header  ==  null)  {  for(int  i  =  0;  i  <  this.format.getRecordCount();  i++)  {  final  CSVFormat  format  =  nextRecord.values();  if(format.equals(	  if(this.format!=    null)    {    for(int    i    =    0;    i    <    this.format.getSkipHeaderRecordCount();    i++)    {    final    CSVFormat    format    =    nextRecord.getFormat();    if(format.equals(    	non-compiled	[CE]  :  expected	69	None	replace
779	[BUG]  [BUGGY]  }  else  if(!this.format.isHeader()  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isHeader()  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isHeader()  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(!this.format.isHeader())    {    	non-compiled	[CE]  :  expected	131	None	replace
780	[BUG]  [BUGGY]  }  else  if(!this.format.isRecorded()  ||  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isRecorded()  ||  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isRecorded()  ||  this.format.getSkipHeaderRecord())  {	  }    else    if(!this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	43	None	replace
781	[BUG]  [BUGGY]  }  else  if(!this.format.isRecorded()  &&  this.format.getSkipHeaderRecord())  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(!this.format.isRecorded()  &&  this.format.getSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(!this.format.isRecorded()  &&  this.format.getSkipHeaderRecord())  {	  }    else    if(!this.format.isRecorded())    {    	non-compiled	[CE]  :  expected	43	None	replace
782	[BUG]  [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  >  this.header)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getSkipHeaderRecord()  >  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getSkipHeaderRecord()  >  this.header)  {	  }    else    if(this.format.getSkipHeaderRecord()    >=    this.header)    {    	non-compiled	[CE]  :  expected	32	None	replace
783	[BUG]  [BUGGY]  }  else  if(header  <  this.format.getFormat())  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header  <  this.format.getFormat())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header  <  this.format.getFormat())  {	  }    else    if(this.format.getFormat()    <    this.header)    {    	non-compiled	[CE]  :  expected	74	None	replace
784	[BUG]  [BUGGY]  }  else  if(this.format.getFormat()  >  this.header)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.getFormat()  >  this.header)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.getFormat()  >  this.header)  {	  }    else    if(this.format.getFormat()    <    this.header)    {    	non-compiled	[CE]  :  expected	74	None	replace
785	[BUG]  [BUGGY]  }  else  if(rec.getHeaderRecord()  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(rec.getHeaderRecord()  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(rec.getHeaderRecord()  ==  null  ||  this.format.getSkipHeaderRecord()!=  null)  {	  }    else    if(rec.getHeaderRecord()    ==    null)    {    	non-compiled	[CE]  :  expected	82	None	replace
786	[BUG]  [BUGGY]  }  else  if(this.format.hasHeader()  ||  header.length()  ==  0)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format.hasHeader()  ||  header.length()  ==  0)  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format.hasHeader()  ||  header.length()  ==  0)  {	  }    else    if(this.format.hasHeader())    {    	non-compiled	[CE]  :  expected	119	None	replace
787	[BUG]  [BUGGY]  }  else  if(this.format!=  null  &&  header.hasSkipHeaderRecord())  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(this.format!=  null  &&  header.hasSkipHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(this.format!=  null  &&  header.hasSkipHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	116	None	replace
788	[BUG]  [BUGGY]  }  else  if(header!=  null  &&  this.format.hasHeaderRecord())  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      if  (formatHeader.length  ==  0)  {  final  CSVRecord  nextRecord  =  this.nextRecord();  if  (nextRecord  !=  null)  {  header  =  nextRecord.values();  }      [BUGGY]  }  else  if(header!=  null  &&  this.format.hasHeaderRecord())  {  [BUGGY]      if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.4082482904638631	361	361	1	replace	}  else  if(header!=  null  &&  this.format.hasHeaderRecord())  {	  }    else    if(header!=    null    &&    this.format.hasSkipHeaderRecord())    {    	non-compiled	[CE]  :  expected	116	None	replace
