bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Lexer  lexer  =  this.format.getLexerRecord();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  Lexer  lexer  =  this.format.getLexerRecord();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	Lexer  lexer  =  this.format.getLexerRecord();	  Lexer    lexer    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	53	None	replace
2	[BUG]  [BUGGY]  Lexer  lexer  =  this.format.getLexer();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  Lexer  lexer  =  this.format.getLexer();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	Lexer  lexer  =  this.format.getLexer();	  Lexer    lexer    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	53	None	replace
3	[BUG]  [BUGGY]  Lexer  lexer  =  this.format.getHeaderRecord();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  Lexer  lexer  =  this.format.getHeaderRecord();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	Lexer  lexer  =  this.format.getHeaderRecord();	  Lexer    lexer    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	53	None	replace
4	[BUG]  [BUGGY]  Lexer  lexer  =  this.format.getRecordHeader();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  Lexer  lexer  =  this.format.getRecordHeader();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	Lexer  lexer  =  this.format.getRecordHeader();	  Lexer    lexer    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	53	None	replace
5	[BUG]  [BUGGY]  Lexer  lexer  =  rec.getSkipHeaderRecord();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  Lexer  lexer  =  rec.getSkipHeaderRecord();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	Lexer  lexer  =  rec.getSkipHeaderRecord();	  Lexer    lexer    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	53	None	replace
6	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  -  3;  i++)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  -  3;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  -  3;  i++)  {	  For(int    i    =    0;    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	22	None	replace
7	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  -  4;  i++)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  -  4;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  -  4;  i++)  {	  For(int    i    =    0;    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	22	None	replace
8	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  header.length  -  1;  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  1;  i  <  header.length  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  1;  i  <  header.length  -  1;  i++)  {	  For(int    i    =    0;    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	22	None	replace
9	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  -  6;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  -  6;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  -  6;  i++)  {	  For(int    i    =    0;    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	22	None	replace
10	[BUG]  [BUGGY]  hdrMap.put(rec,  Integer.valueOf(i));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(rec,  Integer.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(rec,  Integer.valueOf(i));	  hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	9	None	replace
11	[BUG]  [BUGGY]  hdrMap.put(recordNumber[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(recordNumber[i],  Integer.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(recordNumber[i],  Integer.valueOf(i));	  hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	9	None	replace
12	[BUG]  [BUGGY]  hdrMap.put(rec,  header[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(rec,  header[i],  Integer.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(rec,  header[i],  Integer.valueOf(i));	  hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	9	None	replace
13	[BUG]  [BUGGY]  hdrMap.put(recordNumber[i],  Integer.valueOf(0));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(recordNumber[i],  Integer.valueOf(0));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(recordNumber[i],  Integer.valueOf(0));	  hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	9	None	replace
14	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.toString(i));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  Integer.toString(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  Integer.toString(i));	  hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	9	None	replace
15	[BUG]  [BUGGY]  hdrMap.put(header[0],  Integer.valueOf(0));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[0],  Integer.valueOf(0));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[0],  Integer.valueOf(0));	  hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	9	None	replace
16	[BUG]  [BUGGY]  hdrMap.put(rec,  Integer.toString(i));  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(rec,  Integer.toString(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(rec,  Integer.toString(i));	  hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	9	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  5;  i++)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  5;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  -  5;  i++)  {	  for(int    i    =    0;    i    <    header.length    -    6;    i++)    {    	non-compiled	[CE]  :  expected	32	None	replace
18	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getRecordNumber()));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getRecordNumber()));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  String(this.format.getRecordNumber()));	  hdrMap.put(header[i],    new    String(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	11	None	replace
19	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getHeaderRecord()));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getHeaderRecord()));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  String(this.format.getHeaderRecord()));	  hdrMap.put(header[i],    new    String(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	11	None	replace
20	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getSkipHeaderRecord()),  header);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getSkipHeaderRecord()),  header);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  String(this.format.getSkipHeaderRecord()),  header);	  hdrMap.put(header[i],    new    String(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	11	None	replace
21	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getFormat()));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getFormat()));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  String(this.format.getFormat()));	  hdrMap.put(header[i],    new    String(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	11	None	replace
22	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getSkipHeaderRecord()),  rec);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getSkipHeaderRecord()),  rec);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  String(this.format.getSkipHeaderRecord()),  rec);	  hdrMap.put(header[i],    new    String(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	11	None	replace
23	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getSkipHeaderRecord()  +  1));  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getSkipHeaderRecord()  +  1));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  String(this.format.getSkipHeaderRecord()  +  1));	  hdrMap.put(header[i],    new    String(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	11	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length()  -  1;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length()  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length()  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.header.length();    i++)    {    	non-compiled	[CE]  :  expected	36	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length()  +  1;  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length()  +  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length()  +  1;  i++)  {	  for(int    i    =    0;    i    <    this.header.length();    i++)    {    	non-compiled	[CE]  :  expected	36	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length()  -  2;  i++)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length()  -  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length()  -  2;  i++)  {	  for(int    i    =    0;    i    <    this.header.length();    i++)    {    	non-compiled	[CE]  :  expected	36	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.header.length();  i++)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  this.header.length();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  this.header.length();  i++)  {	  for(int    i    =    0;    i    <    this.header.length();    i++)    {    	non-compiled	[CE]  :  expected	36	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber  -  1;  i++)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber  -  1;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	52	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.header.length  -  1;  i++)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.header.length  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  this.header.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	52	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  length  -  1;  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  length  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  length  -  1;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	52	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderCount();  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderCount();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderCount();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	52	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  size  -  1;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  size  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  size  -  1;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	52	None	replace
33	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  formatHeader[i].equals(this.format.getSkipHeaderRecord()))  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  formatHeader[i].equals(this.format.getSkipHeaderRecord()))  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  formatHeader[i].equals(this.format.getSkipHeaderRecord()))  {	  For(int    i    =    0;    i    <    header.length    &&    header[i].equals(this.format.getSkipHeaderRecord()))    {    	non-compiled	[CE]  :  expected	60	None	replace
34	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.getSkipHeaderRecord()  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.getSkipHeaderRecord()  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.getSkipHeaderRecord()  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {	  For(int    i    =    0;    i    <    header.length    &&    header[i].equals(this.format.getSkipHeaderRecord()))    {    	non-compiled	[CE]  :  expected	60	None	replace
35	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount()  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount()  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.getHeaderCount()  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {	  For(int    i    =    0;    i    <    header.length    &&    header[i].equals(this.format.getSkipHeaderRecord()))    {    	non-compiled	[CE]  :  expected	60	None	replace
36	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getSkipHeaderRecord().equals(header[i]))  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getSkipHeaderRecord().equals(header[i]))  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  this.format.getSkipHeaderRecord().equals(header[i]))  {	  For(int    i    =    0;    i    <    header.length    &&    header[i].equals(this.format.getSkipHeaderRecord()))    {    	non-compiled	[CE]  :  expected	60	None	replace
37	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.length  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.length  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.length  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {	  For(int    i    =    0;    i    <    header.length    &&    header[i].equals(this.format.getSkipHeaderRecord()))    {    	non-compiled	[CE]  :  expected	60	None	replace
38	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getSkipHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getSkipHeaderRecord().equals(header))  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  this.format.getSkipHeaderRecord().equals(header))  {	  For(int    i    =    0;    i    <    header.length    &&    header[i].equals(this.format.getSkipHeaderRecord()))    {    	non-compiled	[CE]  :  expected	60	None	replace
39	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getHeaderRecord().equals(header[i]))  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getHeaderRecord().equals(header[i]))  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  this.format.getHeaderRecord().equals(header[i]))  {	  For(int    i    =    0;    i    <    header.length    &&    header[i].equals(this.format.getSkipHeaderRecord()))    {    	non-compiled	[CE]  :  expected	60	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  head.length();  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  head.length();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  head.length();  i++)  {	  for(int    i    =    0;    i    <    header.length()    -    2;    i++)    {    	non-compiled	[CE]  :  expected	35	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  +  2;  i  +=  1)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  +  2;  i  +=  1)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  +  2;  i  +=  1)  {	  for(int    i    =    0;    i    <    header.length    +    2;    i    +=    2)    {    	non-compiled	[CE]  :  expected	3	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  +  1;  i  +=  2)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  +  1;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  +  1;  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length    +    2;    i    +=    2)    {    	non-compiled	[CE]  :  expected	3	None	replace
43	[BUG]  [BUGGY]  hdrMap.put(header[0],  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[0],  RectangleEdge.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[0],  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	15	None	replace
44	[BUG]  [BUGGY]  hdrMap.put(rect.getHeader(),  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(rect.getHeader(),  RectangleEdge.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(rect.getHeader(),  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	15	None	replace
45	[BUG]  [BUGGY]  hdrMap.put(rect.nextRecord,  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(rect.nextRecord,  RectangleEdge.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(rect.nextRecord,  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	15	None	replace
46	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  rec);  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  rec);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i),  rec);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	15	None	replace
47	[BUG]  [BUGGY]  hdrMap.put(rect.toString(),  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(rect.toString(),  RectangleEdge.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(rect.toString(),  RectangleEdge.valueOf(i));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	15	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length();  i  +=  1)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length();  i  +=  1)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length();  i  +=  1)  {	  for(int    i    =    0;    i    <    header.length();    i    +=    2)    {    	non-compiled	[CE]  :  expected	56	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length();  i  +=  2)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length();  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length();  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length();    i    +=    2)    {    	non-compiled	[CE]  :  expected	56	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  +  2;  i  +=  2)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length()  +  2;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  +  2;  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length();    i    +=    2)    {    	non-compiled	[CE]  :  expected	56	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.length();  i  +=  2)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.length();  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.length();  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length();    i    +=    2)    {    	non-compiled	[CE]  :  expected	56	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber.length();  i  +=  2)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  recordNumber.length();  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  recordNumber.length();  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length();    i    +=    2)    {    	non-compiled	[CE]  :  expected	56	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length();  i  +=  2)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length();  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length();  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length();    i    +=    2)    {    	non-compiled	[CE]  :  expected	56	None	replace
54	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  formatHeader[i]!=  null);  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  formatHeader[i]!=  null);  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  formatHeader[i]!=  null);  i++)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null);    i++)    {    	non-compiled	[CE]  :  expected	61	None	replace
55	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]  ==  null);  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]  ==  null);  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]  ==  null);  i++)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null);    i++)    {    	non-compiled	[CE]  :  expected	61	None	replace
56	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getSkipHeaderRecord()!=  null);  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getSkipHeaderRecord()!=  null);  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  this.format.getSkipHeaderRecord()!=  null);  i++)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null);    i++)    {    	non-compiled	[CE]  :  expected	61	None	replace
57	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  rec);  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  rec);  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  rec);  i++)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null);    i++)    {    	non-compiled	[CE]  :  expected	61	None	replace
58	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length()  &&  header[i]!=  null);  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length()  &&  header[i]!=  null);  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length()  &&  header[i]!=  null);  i++)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null);    i++)    {    	non-compiled	[CE]  :  expected	61	None	replace
59	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getHeaderRecord()!=  null);  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getHeaderRecord()!=  null);  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  this.format.getHeaderRecord()!=  null);  i++)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null);    i++)    {    	non-compiled	[CE]  :  expected	61	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.length()  -  1;  i++)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.length()  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.length()  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.format.length();    i++)    {    	non-compiled	[CE]  :  expected	38	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.size();  i++)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.size();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.size();  i++)  {	  for(int    i    =    0;    i    <    this.format.length();    i++)    {    	non-compiled	[CE]  :  expected	38	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.length()  +  1;  i++)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.length()  +  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.length()  +  1;  i++)  {	  for(int    i    =    0;    i    <    this.format.length();    i++)    {    	non-compiled	[CE]  :  expected	38	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.length()  -  2;  i++)  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.length()  -  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.length()  -  2;  i++)  {	  for(int    i    =    0;    i    <    this.format.length();    i++)    {    	non-compiled	[CE]  :  expected	38	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {	  for(int    i    =    0;    i    <    this.format.length();    i++)    {    	non-compiled	[CE]  :  expected	38	None	replace
65	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.header.length  -  1;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.header.length  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.header.length  -  1;  i++)  {	  For(int    i    =    0;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	25	None	replace
66	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.header.length  -  2;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.header.length  -  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.header.length  -  2;  i++)  {	  For(int    i    =    0;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	25	None	replace
67	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  this.header.length;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  1;  i  <  this.header.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  1;  i  <  this.header.length;  i++)  {	  For(int    i    =    0;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	25	None	replace
68	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.header.length  +  1;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.header.length  +  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.header.length  +  1;  i++)  {	  For(int    i    =    0;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	25	None	replace
69	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.header.length  -  4;  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.header.length  -  4;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.header.length  -  4;  i++)  {	  For(int    i    =    0;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	25	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  -  3;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  -  3;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  -  3;  i++)  {	  for(int    i    =    0;    i    <    this.header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	28	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  -  4;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  -  4;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  -  4;  i++)  {	  for(int    i    =    0;    i    <    this.header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	28	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.header.length  -  1;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  this.header.length  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  this.header.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	28	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length  -  2;  i++)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length  -  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length  -  2;  i++)  {	  for(int    i    =    1;    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	33	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length  -  3;  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length  -  3;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length  -  3;  i++)  {	  for(int    i    =    1;    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	33	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  header.length  -  1;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  2;  i  <  header.length  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  2;  i  <  header.length  -  1;  i++)  {	  for(int    i    =    1;    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	33	None	replace
76	[BUG]  [BUGGY]  String  header[]  =  this.format.getHeaderRecord();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String  header[]  =  this.format.getHeaderRecord();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String  header[]  =  this.format.getHeaderRecord();	  String    header[]    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	43	None	replace
77	[BUG]  [BUGGY]  String  header[]  =  this.format.getRecordHeader();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String  header[]  =  this.format.getRecordHeader();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String  header[]  =  this.format.getRecordHeader();	  String    header[]    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	43	None	replace
78	[BUG]  [BUGGY]  String  header[]  =  rec.getSkipHeaderRecord();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String  header[]  =  rec.getSkipHeaderRecord();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String  header[]  =  rec.getSkipHeaderRecord();	  String    header[]    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	43	None	replace
79	[BUG]  [BUGGY]  String  header[]  =  this.format.getRecordedHeader();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String  header[]  =  this.format.getRecordedHeader();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String  header[]  =  this.format.getRecordedHeader();	  String    header[]    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	43	None	replace
80	[BUG]  [BUGGY]  String  header[]  =  rec.getSkipHeader();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String  header[]  =  rec.getSkipHeader();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String  header[]  =  rec.getSkipHeader();	  String    header[]    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	43	None	replace
81	[BUG]  [BUGGY]  String  header[]  =  this.format.getHeader();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String  header[]  =  this.format.getHeader();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String  header[]  =  this.format.getHeader();	  String    header[]    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	43	None	replace
82	[BUG]  [BUGGY]  String[]  headerMap  =  this.format.getHeaderRecord();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String[]  headerMap  =  this.format.getHeaderRecord();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String[]  headerMap  =  this.format.getHeaderRecord();	  String[]    headerMap    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	13	None	replace
83	[BUG]  [BUGGY]  String[]  headerMap  =  this.format.getRecordedHeaders();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String[]  headerMap  =  this.format.getRecordedHeaders();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String[]  headerMap  =  this.format.getRecordedHeaders();	  String[]    headerMap    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	13	None	replace
84	[BUG]  [BUGGY]  String[]  headerMap  =  this.format.getRecordHeaders();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String[]  headerMap  =  this.format.getRecordHeaders();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String[]  headerMap  =  this.format.getRecordHeaders();	  String[]    headerMap    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	13	None	replace
85	[BUG]  [BUGGY]  String[]  headerMap  =  this.format.getRecordHeader();  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String[]  headerMap  =  this.format.getRecordHeader();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String[]  headerMap  =  this.format.getRecordHeader();	  String[]    headerMap    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	13	None	replace
86	[BUG]  [BUGGY]  String[]  headerMap  =  rec.getSkipHeaderRecord();  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String[]  headerMap  =  rec.getSkipHeaderRecord();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String[]  headerMap  =  rec.getSkipHeaderRecord();	  String[]    headerMap    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	13	None	replace
87	[BUG]  [BUGGY]  String[]  headerMap  =  this.format.getRecordedHeader();  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String[]  headerMap  =  this.format.getRecordedHeader();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String[]  headerMap  =  this.format.getRecordedHeader();	  String[]    headerMap    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	13	None	replace
88	[BUG]  [BUGGY]  hdrMap.put(header[i],  true);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  true);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  true);	  hdrMap.put(header[i],    false);    	non-compiled	[CE]  :  expected	47	None	replace
89	[BUG]  [BUGGY]  hdrMap.put(header[i],  false,  true);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  false,  true);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  false,  true);	  hdrMap.put(header[i],    false);    	non-compiled	[CE]  :  expected	47	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  3;  i++)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  3;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  3;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	57	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.header.length  -  2;  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.header.length  -  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  this.header.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	57	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  4;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  4;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  4;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	57	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  header.length  -  2;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  header.length  -  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  &&  i  <  header.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	57	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  -=  1)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  -=  1)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length;  i  -=  1)  {	  for(int    i    =    0;    i    <    header.length;    i    -=    2)    {    	non-compiled	[CE]  :  expected	5	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i  -=  2)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i  -=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  -  2;  i  -=  2)  {	  for(int    i    =    0;    i    <    header.length;    i    -=    2)    {    	non-compiled	[CE]  :  expected	5	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length-1;  i  -=  2)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length-1;  i  -=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length-1;  i  -=  2)  {	  for(int    i    =    0;    i    <    header.length;    i    -=    2)    {    	non-compiled	[CE]  :  expected	5	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length();  i  -=  2)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length();  i  -=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length();  i  -=  2)  {	  for(int    i    =    0;    i    <    header.length;    i    -=    2)    {    	non-compiled	[CE]  :  expected	5	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i  -=  2)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i  -=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length;  i  -=  2)  {	  for(int    i    =    0;    i    <    header.length;    i    -=    2)    {    	non-compiled	[CE]  :  expected	5	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  +  2;  i  -=  2)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  +  2;  i  -=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  +  2;  i  -=  2)  {	  for(int    i    =    0;    i    <    header.length;    i    -=    2)    {    	non-compiled	[CE]  :  expected	5	None	replace
100	[BUG]  [BUGGY]  hdrMap.put(rec,  Integer.valueOf(0));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(rec,  Integer.valueOf(0));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(rec,  Integer.valueOf(0));	  hdrMap.put(header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	12	None	replace
101	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.MAX_VALUE);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  Integer.MAX_VALUE);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  Integer.MAX_VALUE);	  hdrMap.put(header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	12	None	replace
102	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.toHexString(i));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  Integer.toHexString(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  Integer.toHexString(i));	  hdrMap.put(header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	12	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.size()  -  1;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.size()  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.size()  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.header.size();    i++)    {    	non-compiled	[CE]  :  expected	51	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.size()  +  1;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.size()  +  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.size()  +  1;  i++)  {	  for(int    i    =    0;    i    <    this.header.size();    i++)    {    	non-compiled	[CE]  :  expected	51	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.header.size();  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  this.header.size();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  this.header.size();  i++)  {	  for(int    i    =    0;    i    <    this.header.size();    i++)    {    	non-compiled	[CE]  :  expected	51	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.size()  -  2;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.size()  -  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.size()  -  2;  i++)  {	  for(int    i    =    0;    i    <    this.header.size();    i++)    {    	non-compiled	[CE]  :  expected	51	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length-1;  i  +=  1)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length-1;  i  +=  1)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length-1;  i  +=  1)  {	  for(int    i    =    0;    i    <    header.length-1;    i    +=    2)    {    	non-compiled	[CE]  :  expected	4	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber.length-1;  i  +=  2)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  recordNumber.length-1;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  recordNumber.length-1;  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length-1;    i    +=    2)    {    	non-compiled	[CE]  :  expected	4	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length-1;  i  +=  2)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length-1;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length-1;  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length-1;    i    +=    2)    {    	non-compiled	[CE]  :  expected	4	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  recordNumber;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  recordNumber;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  &&  i  <  recordNumber;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    recordNumber;    i++)    {    	non-compiled	[CE]  :  expected	17	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber.length;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber.length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    recordNumber;    i++)    {    	non-compiled	[CE]  :  expected	17	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber  +  1;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber  +  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber  +  1;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    recordNumber;    i++)    {    	non-compiled	[CE]  :  expected	17	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber.length  &&  i  <  header.length;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  recordNumber.length  &&  i  <  header.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  recordNumber.length  &&  i  <  header.length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    recordNumber;    i++)    {    	non-compiled	[CE]  :  expected	17	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  <  =  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  <  =  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length  &&  i  <  =  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    1;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	20	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    1;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	20	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  >=  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  >=  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length  &&  i  >=  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    1;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	20	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordNumber.length  &&  i  <  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  recordNumber.length  &&  i  <  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  recordNumber.length  &&  i  <  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    1;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	20	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  header.length  &&  i  <  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  2;  i  <  header.length  &&  i  <  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  2;  i  <  header.length  &&  i  <  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    1;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	20	None	replace
119	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  -  2;  i  +=  2)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  -  2;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  -  2;  i  +=  2)  {	  For(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	42	None	replace
120	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i  +=  1)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length;  i  +=  1)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length;  i  +=  1)  {	  For(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	42	None	replace
121	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  +  2);  i  +=  2)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  +  2);  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  +  2);  i  +=  2)  {	  For(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	42	None	replace
122	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length-1;  i  +=  2)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length-1;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length-1;  i  +=  2)  {	  For(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	42	None	replace
123	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length();  i  +=  2)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length();  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length();  i  +=  2)  {	  For(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	42	None	replace
124	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getSkipHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getSkipHeaderRecord()!=  null)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  this.format.getSkipHeaderRecord()!=  null)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null)    {    	non-compiled	[CE]  :  expected	62	None	replace
125	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  formatHeader[i]!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  formatHeader[i]!=  null)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  formatHeader[i]!=  null)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null)    {    	non-compiled	[CE]  :  expected	62	None	replace
126	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount()  &&  header[i]!=  null)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount()  &&  header[i]!=  null)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.getHeaderCount()  &&  header[i]!=  null)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null)    {    	non-compiled	[CE]  :  expected	62	None	replace
127	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]  ==  null)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]  ==  null)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]  ==  null)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null)    {    	non-compiled	[CE]  :  expected	62	None	replace
128	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getHeaderRecord()!=  null)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getHeaderRecord()!=  null)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  this.format.getHeaderRecord()!=  null)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null)    {    	non-compiled	[CE]  :  expected	62	None	replace
129	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  rec!=  null)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  rec!=  null)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  rec!=  null)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null)    {    	non-compiled	[CE]  :  expected	62	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount()  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount()  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderCount()  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.format.getSkipHeaderRecord();    i++)    {    	non-compiled	[CE]  :  expected	58	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderRecordCount();  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderRecordCount();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderRecordCount();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.format.getSkipHeaderRecord();    i++)    {    	non-compiled	[CE]  :  expected	58	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecord();  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getSkipHeaderRecord();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.getSkipHeaderRecord();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.format.getSkipHeaderRecord();    i++)    {    	non-compiled	[CE]  :  expected	58	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount()  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount()  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderRecordCount()  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.format.getSkipHeaderRecord();    i++)    {    	non-compiled	[CE]  :  expected	58	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderRecord();  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderRecord();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderRecord();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.format.getSkipHeaderRecord();    i++)    {    	non-compiled	[CE]  :  expected	58	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getRecordNumber();  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getRecordNumber();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getRecordNumber();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.format.getSkipHeaderRecord();    i++)    {    	non-compiled	[CE]  :  expected	58	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount()  &&  i  <  header.length;  i++)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderCount()  &&  i  <  header.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderCount()  &&  i  <  header.length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.format.getSkipHeaderRecord();    i++)    {    	non-compiled	[CE]  :  expected	58	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  recordNumber.length();  i++)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  recordNumber.length();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  recordNumber.length();  i++)  {	  for(int    i    =    0;    i    <    recordNumber.length();    i++)    {    	non-compiled	[CE]  :  expected	39	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.recordNumber.length();  i++)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.recordNumber.length();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.recordNumber.length();  i++)  {	  for(int    i    =    0;    i    <    recordNumber.length();    i++)    {    	non-compiled	[CE]  :  expected	39	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  i++)  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  headers.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  headers.length;  i++)  {	  for(int    i    =    0;    i    <    recordNumber.length();    i++)    {    	non-compiled	[CE]  :  expected	39	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber.length()  -  1;  i++)  {  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  recordNumber.length()  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  recordNumber.length()  -  1;  i++)  {	  for(int    i    =    0;    i    <    recordNumber.length();    i++)    {    	non-compiled	[CE]  :  expected	39	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0,  lexer  =  header.length();  i  <  lexer.length();  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0,  lexer  =  header.length();  i  <  lexer.length();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0,  lexer  =  header.length();  i  <  lexer.length();  i++)  {	  for(int    i    =    0;    i    <    header.length()    -    1;    i++)    {    	non-compiled	[CE]  :  expected	34	None	replace
142	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecordNumber()));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecordNumber()));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getRecordNumber()));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	46	None	replace
143	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getHeaderRecord()));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getHeaderRecord()));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getHeaderRecord()));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	46	None	replace
144	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()),  rec);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()),  rec);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()),  rec);	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	46	None	replace
145	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecord()));  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecord()));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getRecord()));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	46	None	replace
146	[BUG]  [BUGGY]  hdrMap.put(rec,  new  CSVFormat(this.format.getSkipHeaderRecord()));  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(rec,  new  CSVFormat(this.format.getSkipHeaderRecord()));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(rec,  new  CSVFormat(this.format.getSkipHeaderRecord()));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	46	None	replace
147	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()  +  1));  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()  +  1));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()  +  1));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	46	None	replace
148	[BUG]  [BUGGY]  hdrMap.put(rect,  Integer.valueOf(i));  return  rec;  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(rect,  Integer.valueOf(i));  return  rec;  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(rect,  Integer.valueOf(i));  return  rec;	  hdrMap.put(header[i],    Integer.valueOf(i));    return    rec;    	non-compiled	[CE]  :  expected	14	None	replace
149	[BUG]  [BUGGY]  hdrMap.put(rect[i],  Integer.valueOf(i));  return  rec;  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(rect[i],  Integer.valueOf(i));  return  rec;  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(rect[i],  Integer.valueOf(i));  return  rec;	  hdrMap.put(header[i],    Integer.valueOf(i));    return    rec;    	non-compiled	[CE]  :  expected	14	None	replace
150	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.toString(i));  return  rec;  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  Integer.toString(i));  return  rec;  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  Integer.toString(i));  return  rec;	  hdrMap.put(header[i],    Integer.valueOf(i));    return    rec;    	non-compiled	[CE]  :  expected	14	None	replace
151	[BUG]  [BUGGY]  hdrMap.put(rect,  Integer.valueOf(i));  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(rect,  Integer.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(rect,  Integer.valueOf(i));	  hdrMap.put(header[i],    Integer.valueOf(i));    return    rec;    	non-compiled	[CE]  :  expected	14	None	replace
152	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0));  return  rec;  [CE]  :  expected  [FE]                                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0));  return  rec;  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  Integer.valueOf(0));  return  rec;	  hdrMap.put(header[i],    Integer.valueOf(i));    return    rec;    	non-compiled	[CE]  :  expected	14	None	replace
153	[BUG]  [BUGGY]  hdrMap.put(rect[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]                                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(rect[i],  Integer.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(rect[i],  Integer.valueOf(i));	  hdrMap.put(header[i],    Integer.valueOf(i));    return    rec;    	non-compiled	[CE]  :  expected	14	None	replace
154	[BUG]  [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(i));  return  rec;  [CE]  :  expected  [FE]                                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(i));  return  rec;  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(record[i],  Integer.valueOf(i));  return  rec;	  hdrMap.put(header[i],    Integer.valueOf(i));    return    rec;    	non-compiled	[CE]  :  expected	14	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  -  6;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  -  6;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  -  6;  i++)  {	  for(int    i    =    0;    i    <    this.header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	29	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  /  2;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  /  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  /  2;  i++)  {	  for(int    i    =    0;    i    <    this.header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	29	None	replace
157	[BUG]  [BUGGY]  hdrMap.put(rec[i],  new  CSVFormat(header));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(rec[i],  new  CSVFormat(header));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(rec[i],  new  CSVFormat(header));	  hdrMap.put(header[i],    new    CSVFormat(rec));    	non-compiled	[CE]  :  expected	54	None	replace
158	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(record));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(record));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(record));	  hdrMap.put(header[i],    new    CSVFormat(rec));    	non-compiled	[CE]  :  expected	54	None	replace
159	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format));	  hdrMap.put(header[i],    new    CSVFormat(rec));    	non-compiled	[CE]  :  expected	54	None	replace
160	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(format));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(format));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(format));	  hdrMap.put(header[i],    new    CSVFormat(rec));    	non-compiled	[CE]  :  expected	54	None	replace
161	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(formatHeader));  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(formatHeader));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(formatHeader));	  hdrMap.put(header[i],    new    CSVFormat(rec));    	non-compiled	[CE]  :  expected	54	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &  2;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &  2;  i++)  {	  for(int    i    =    0;    i    <    header.length    /    2;    i++)    {    	non-compiled	[CE]  :  expected	8	None	replace
163	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  /  2  +  1;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  /  2  +  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  /  2  +  1;  i++)  {	  for(int    i    =    0;    i    <    header.length    /    2;    i++)    {    	non-compiled	[CE]  :  expected	8	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  +  2;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  +  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  +  2;  i++)  {	  for(int    i    =    0;    i    <    header.length    /    2;    i++)    {    	non-compiled	[CE]  :  expected	8	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  size();  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  size();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  &&  i  <  size();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    size();    i++)    {    	non-compiled	[CE]  :  expected	21	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  length();  i++)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  length();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  length();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    size();    i++)    {    	non-compiled	[CE]  :  expected	21	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.size();  i++)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.size();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  this.size();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    size();    i++)    {    	non-compiled	[CE]  :  expected	21	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  >=  recordNumber;  i++)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  >=  recordNumber;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  >=  recordNumber;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    size();    i++)    {    	non-compiled	[CE]  :  expected	21	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber();  i++)  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    size();    i++)    {    	non-compiled	[CE]  :  expected	21	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  instanceof  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  instanceof  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  instanceof  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    =    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	19	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  Integer.MIN_VALUE;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  Integer.MIN_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  Integer.MIN_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    =    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	19	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  int.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  int.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  int.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    =    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	19	None	replace
173	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length()  -  1;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length()  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length()  -  1;  i++)  {	  For(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	26	None	replace
174	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length()  -  2;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length()  -  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length()  -  2;  i++)  {	  For(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	26	None	replace
175	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.header.length();  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.header.length();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.header.length();  i++)  {	  For(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	26	None	replace
176	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length()  +  1;  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length()  +  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length()  +  1;  i++)  {	  For(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	26	None	replace
177	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.length();  i++)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.length();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.length();  i++)  {	  For(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	26	None	replace
178	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  recordNumber.length();  i++)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  recordNumber.length();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  recordNumber.length();  i++)  {	  For(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	26	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i  +=  1)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i  +=  1)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length;  i  +=  1)  {	  for(int    i    =    0;    i    <    this.header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	41	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  -  2;  i  +=  2)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  -  2;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  -  2;  i  +=  2)  {	  for(int    i    =    0;    i    <    this.header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	41	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  +  2;  i  +=  2)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  +  2;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  +  2;  i  +=  2)  {	  for(int    i    =    0;    i    <    this.header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	41	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.header.length;  i  +=  2)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  this.header.length;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  this.header.length;  i  +=  2)  {	  for(int    i    =    0;    i    <    this.header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	41	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  length;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  &&  i  <  length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    length;    i++)    {    	non-compiled	[CE]  :  expected	50	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  size;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  size;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  size;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    length;    i++)    {    	non-compiled	[CE]  :  expected	50	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  2;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  2;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    length;    i++)    {    	non-compiled	[CE]  :  expected	50	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  i  <  header.length;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  i  <  header.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  &&  i  <  header.length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	49	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  header.length  >  0;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  header.length  >  0;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  &&  header.length  >  0;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	49	None	replace
188	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  <  this.header.length;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  <  this.header.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length  &&  i  <  this.header.length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	49	None	replace
189	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  header[i]!=  this.header.length;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  header[i]!=  this.header.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  &&  header[i]!=  this.header.length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	49	None	replace
190	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  header!=  null;  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  header!=  null;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  &&  header!=  null;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	49	None	replace
191	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  /  2;  i++)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  /  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  /  2;  i++)  {	  For(int    i    =    0;    i    <    header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	23	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length()    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	16	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  recordNumber.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  recordNumber.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length()    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	16	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  +  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length()  +  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  +  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length()    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	16	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length()    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	16	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  *  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length()  *  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  *  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length()    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	16	None	replace
197	[BUG]  [BUGGY]  header  =  this.format.getHeaderRecord();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  header  =  this.format.getHeaderRecord();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	header  =  this.format.getHeaderRecord();	  header    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	44	None	replace
198	[BUG]  [BUGGY]  header  =  rec.getSkipHeaderRecord();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  header  =  rec.getSkipHeaderRecord();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	header  =  rec.getSkipHeaderRecord();	  header    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	44	None	replace
199	[BUG]  [BUGGY]  header  =  this.format.getRecordHeader();  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  header  =  this.format.getRecordHeader();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	header  =  this.format.getRecordHeader();	  header    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	44	None	replace
200	[BUG]  [BUGGY]  header  =  this.format.getHeader();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  header  =  this.format.getHeader();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	header  =  this.format.getHeader();	  header    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	44	None	replace
201	[BUG]  [BUGGY]  header  =  this.format.getRecord();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  header  =  this.format.getRecord();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	header  =  this.format.getRecord();	  header    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	44	None	replace
202	[BUG]  [BUGGY]  header  =  rec.getSkipHeader();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  header  =  rec.getSkipHeader();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	header  =  rec.getSkipHeader();	  header    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	44	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  >=  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  >=  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  &&  i  >=  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    >=    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	18	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i!=  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i!=  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  &&  i!=  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    >=    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	18	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  ==  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  ==  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  &&  i  ==  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    ==    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	48	None	replace
206	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  recordNumber  ==  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  recordNumber  ==  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  recordNumber  ==  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    ==    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	48	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  ==  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  ==  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length  &&  i  ==  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    ==    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	48	None	replace
208	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount()  -  1;  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount()  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.getHeaderCount()  -  1;  i++)  {	  For(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    	non-compiled	[CE]  :  expected	24	None	replace
209	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount()  -  2;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount()  -  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.getHeaderCount()  -  2;  i++)  {	  For(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    	non-compiled	[CE]  :  expected	24	None	replace
210	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.getSkipHeaderRecord();  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.getSkipHeaderRecord();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.getSkipHeaderRecord();  i++)  {	  For(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    	non-compiled	[CE]  :  expected	24	None	replace
211	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount()  +  1;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount()  +  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.getHeaderCount()  +  1;  i++)  {	  For(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    	non-compiled	[CE]  :  expected	24	None	replace
212	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount()  *  2;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount()  *  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.getHeaderCount()  *  2;  i++)  {	  For(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    	non-compiled	[CE]  :  expected	24	None	replace
213	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  this.format.getHeaderCount();  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  1;  i  <  this.format.getHeaderCount();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  1;  i  <  this.format.getHeaderCount();  i++)  {	  For(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    	non-compiled	[CE]  :  expected	24	None	replace
214	[BUG]  [BUGGY]  hdrMap.put(header[i],  rec);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  rec);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  rec);	  hdrMap.put(header[i],    null);    	non-compiled	[CE]  :  expected	45	None	replace
215	[BUG]  [BUGGY]  hdrMap.put(header[i],  header);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  header);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  header);	  hdrMap.put(header[i],    null);    	non-compiled	[CE]  :  expected	45	None	replace
216	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i  +=  1)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i  +=  1)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  -  2;  i  +=  1)  {	  for(int    i    =    0;    i    <    header.length    -    2;    i    +=    2)    {    	non-compiled	[CE]  :  expected	2	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  /  2;  i  +=  2)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  /  2;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  /  2;  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length    -    2;    i    +=    2)    {    	non-compiled	[CE]  :  expected	2	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  3;  i  +=  2)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  3;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  -  3;  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length    -    2;    i    +=    2)    {    	non-compiled	[CE]  :  expected	2	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  header.length();  i++)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  2;  i  <  header.length();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  2;  i  <  header.length();  i++)  {	  for(int    i    =    1;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	40	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length()  -  1;  i++)  {  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length()  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length()  -  1;  i++)  {	  for(int    i    =    1;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	40	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  +  2;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  +  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  +  2;  i++)  {	  for(int    i    =    0;    i    <    this.header.length    +    1;    i++)    {    	non-compiled	[CE]  :  expected	30	None	replace
222	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  +  1;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  +  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    this.header.length    +    1;    i++)    {    	non-compiled	[CE]  :  expected	30	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  +  3;  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  +  3;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  +  3;  i++)  {	  for(int    i    =    0;    i    <    this.header.length    +    1;    i++)    {    	non-compiled	[CE]  :  expected	30	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  +  1;  i  +=  1)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  +  1;  i  +=  1)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  +  1;  i  +=  1)  {	  for(int    i    =    0;    i    <    header.length;    i    +=    1)    {    	non-compiled	[CE]  :  expected	1	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length;  i  +=  2)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length;  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length;    i    +=    1)    {    	non-compiled	[CE]  :  expected	1	None	replace
226	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecordNumber());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRecordNumber());  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  this.format.getRecordNumber());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	10	None	replace
227	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecord());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRecord());  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  this.format.getRecord());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	10	None	replace
228	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getHeaderRecord());  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getHeaderRecord());  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  this.format.getHeaderRecord());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	10	None	replace
229	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getNumberRecord());  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getNumberRecord());  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  this.format.getNumberRecord());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	10	None	replace
230	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRawHeaderRecord());  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRawHeaderRecord());  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  this.format.getRawHeaderRecord());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	10	None	replace
231	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getFormat());  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getFormat());  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  this.format.getFormat());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	10	None	replace
232	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  header.length  -  2;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  1;  i  <  header.length  -  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  1;  i  <  header.length  -  2;  i++)  {	  For(int    i    =    1;    i    <    header.length;    i++)    {    	non-compiled	[CE]  :  expected	27	None	replace
233	[BUG]  [BUGGY]  For(int  i  =  2;  i  <  header.length;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  2;  i  <  header.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  2;  i  <  header.length;  i++)  {	  For(int    i    =    1;    i    <    header.length;    i++)    {    	non-compiled	[CE]  :  expected	27	None	replace
234	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length()  &&  header[i]!=  Integer.valueOf(0));  hdrMap.put(header[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length()  &&  header[i]!=  Integer.valueOf(0));  hdrMap.put(header[i],  Integer.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length()  &&  header[i]!=  Integer.valueOf(0));  hdrMap.put(header[i],  Integer.valueOf(i));	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
235	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  recordNumber.length  &&  header[i]!=  Integer.valueOf(i));  hdrMap.put(header[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  recordNumber.length  &&  header[i]!=  Integer.valueOf(i));  hdrMap.put(header[i],  Integer.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  recordNumber.length  &&  header[i]!=  Integer.valueOf(i));  hdrMap.put(header[i],  Integer.valueOf(i));	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
236	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MIN_VALUE);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MIN_VALUE);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MIN_VALUE);	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
237	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length()  &&  header[i]!=  Integer.valueOf(0));  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length()  &&  header[i]!=  Integer.valueOf(0));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length()  &&  header[i]!=  Integer.valueOf(0));	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
238	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MIN_VALUE);  hdrMap.put(header[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MIN_VALUE);  hdrMap.put(header[i],  Integer.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MIN_VALUE);  hdrMap.put(header[i],  Integer.valueOf(i));	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
239	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  header.length  &&  header[i]!=  Integer.valueOf(i));  hdrMap.put(header[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  1;  i  <  header.length  &&  header[i]!=  Integer.valueOf(i));  hdrMap.put(header[i],  Integer.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  1;  i  <  header.length  &&  header[i]!=  Integer.valueOf(i));  hdrMap.put(header[i],  Integer.valueOf(i));	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
240	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MIN_VALUE);  hdrMap.put(header[i],  Integer.MAX_VALUE);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MIN_VALUE);  hdrMap.put(header[i],  Integer.MAX_VALUE);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MIN_VALUE);  hdrMap.put(header[i],  Integer.MAX_VALUE);	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.size()  -  1;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.size()  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.size()  -  1;  i++)  {	  for(int    i    =    0;    i    <    header.size();    i++)    {    	non-compiled	[CE]  :  expected	55	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber.size();  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  recordNumber.size();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  recordNumber.size();  i++)  {	  for(int    i    =    0;    i    <    header.size();    i++)    {    	non-compiled	[CE]  :  expected	55	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.header.length  -  2;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  this.header.length  -  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  this.header.length  -  2;  i++)  {	  for(int    i    =    1;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	31	None	replace
244	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  this.header.length;  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  2;  i  <  this.header.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  2;  i  <  this.header.length;  i++)  {	  for(int    i    =    1;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	31	None	replace
245	[BUG]  [BUGGY]  hdrMap.put(header[0],  Integer.valueOf(i));  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[0],  Integer.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[0],  Integer.valueOf(i));	  hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	9	None	replace
246	[BUG]  [BUGGY]  hdrMap.put(record,  Integer.valueOf(i));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(record,  Integer.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(record,  Integer.valueOf(i));	  hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	9	None	replace
247	[BUG]  [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(record[i],  Integer.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(record[i],  Integer.valueOf(i));	  hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	9	None	replace
248	[BUG]  [BUGGY]  hdrMap.put(record,  header[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(record,  header[i],  Integer.valueOf(i));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(record,  header[i],  Integer.valueOf(i));	  hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	9	None	replace
249	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.header.size();  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.header.size();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.header.size();  i++)  {	  for(int    i    =    0;    i    <    this.header.size();    i++)    {    	non-compiled	[CE]  :  expected	51	None	replace
250	[BUG]  [BUGGY]  header  =  this.format.getHeaderRecord(rec);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  header  =  this.format.getHeaderRecord(rec);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	header  =  this.format.getHeaderRecord(rec);	  header    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	44	None	replace
251	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  this.format);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  this.format);	  hdrMap.put(header[i],    null);    	non-compiled	[CE]  :  expected	45	None	replace
252	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.LEFT);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.LEFT);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  RectangleEdge.LEFT);	  hdrMap.put(header[i],    null);    	non-compiled	[CE]  :  expected	45	None	replace
253	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleConstraint.NONE);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  RectangleConstraint.NONE);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  RectangleConstraint.NONE);	  hdrMap.put(header[i],    null);    	non-compiled	[CE]  :  expected	45	None	replace
254	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.header.length;  i  +=  2)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.header.length;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.header.length;  i  +=  2)  {	  For(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	42	None	replace
255	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  +  2;  i  +=  2)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  +  2;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  +  2;  i  +=  2)  {	  For(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	42	None	replace
256	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getRecordName());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getRecordName());  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  this.format.getRecordName());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	10	None	replace
257	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getFormatRecord());  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getFormatRecord());  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  this.format.getFormatRecord());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	10	None	replace
258	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  recordHeader.length  -  1;  i++)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  recordHeader.length  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  recordHeader.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	52	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  >=  header.length  -  1;  i++)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  >=  header.length  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  >=  header.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	52	None	replace
260	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.recordNumber;  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.recordNumber;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  this.recordNumber;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    size();    i++)    {    	non-compiled	[CE]  :  expected	21	None	replace
261	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  rec)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  rec)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  rec)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null)    {    	non-compiled	[CE]  :  expected	62	None	replace
262	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  recordNumber  &&  header[i]!=  null)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  recordNumber  &&  header[i]!=  null)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  recordNumber  &&  header[i]!=  null)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null)    {    	non-compiled	[CE]  :  expected	62	None	replace
263	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format,  rec));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format,  rec));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format,  rec));	  hdrMap.put(header[i],    new    CSVFormat(rec));    	non-compiled	[CE]  :  expected	54	None	replace
264	[BUG]  [BUGGY]  hdrMap.put(record[i],  new  CSVFormat(header));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(record[i],  new  CSVFormat(header));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(record[i],  new  CSVFormat(header));	  hdrMap.put(header[i],    new    CSVFormat(rec));    	non-compiled	[CE]  :  expected	54	None	replace
265	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i  -=  2)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length;  i  -=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length;  i  -=  2)  {	  for(int    i    =    0;    i    <    header.length;    i    -=    2)    {    	non-compiled	[CE]  :  expected	5	None	replace
266	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.MIN_VALUE);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  Integer.MIN_VALUE);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  Integer.MIN_VALUE);	  hdrMap.put(header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	12	None	replace
267	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length  -  4;  i++)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length  -  4;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length  -  4;  i++)  {	  for(int    i    =    1;    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	33	None	replace
268	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getHeaderRecord().equals(header))  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getHeaderRecord().equals(header))  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  this.format.getHeaderRecord().equals(header))  {	  For(int    i    =    0;    i    <    header.length    &&    header[i].equals(this.format.getSkipHeaderRecord()))    {    	non-compiled	[CE]  :  expected	60	None	replace
269	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getRecordNumber().equals(header.getRecordNumber()))  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  this.format.getRecordNumber().equals(header.getRecordNumber()))  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  this.format.getRecordNumber().equals(header.getRecordNumber()))  {	  For(int    i    =    0;    i    <    header.length    &&    header[i].equals(this.format.getSkipHeaderRecord()))    {    	non-compiled	[CE]  :  expected	60	None	replace
270	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  /  4;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  /  4;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  /  4;  i++)  {	  for(int    i    =    0;    i    <    header.length    /    2;    i++)    {    	non-compiled	[CE]  :  expected	8	None	replace
271	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  <  recordNumber;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  <  recordNumber;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length  &&  i  <  recordNumber;  i++)  {	  for(int    i    =    1;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	20	None	replace
272	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  <  length;  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  <  length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length  &&  i  <  length;  i++)  {	  for(int    i    =    1;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	20	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  4;  i  +=  2)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  -  4;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  -  4;  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length    -    2;    i    +=    2)    {    	non-compiled	[CE]  :  expected	2	None	replace
274	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length();  i  +=  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length();  i  +=  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length();  i  +=  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length()    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	16	None	replace
275	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MAX_VALUE);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MAX_VALUE);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MAX_VALUE);	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
276	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]  ==  Integer.MIN_VALUE);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]  ==  Integer.MIN_VALUE);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]  ==  Integer.MIN_VALUE);	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
277	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]  ==  Integer.MAX_VALUE);  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]  ==  Integer.MAX_VALUE);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]  ==  Integer.MAX_VALUE);	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
278	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]  >=  Integer.MIN_VALUE);  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]  >=  Integer.MIN_VALUE);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]  >=  Integer.MIN_VALUE);	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
279	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.valueOf(0));  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.valueOf(0));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.valueOf(0));	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
280	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  this.format);  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  this.format);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i),  this.format);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	15	None	replace
281	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  header);  [CE]  :  expected  [FE]                                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  header);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i),  header);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	15	None	replace
282	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  recordNumber);  [CE]  :  expected  [FE]                                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i),  recordNumber);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i),  recordNumber);	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	15	None	replace
283	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.headers.size();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.headers.size();  i++)  {	  for(int    i    =    0;    i    <    header.size();    i++)    {    	non-compiled	[CE]  :  expected	55	None	replace
284	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  this.format.getSkipHeaderRecord());  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  this.format.getSkipHeaderRecord());  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  this.format.getSkipHeaderRecord());  i++)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null);    i++)    {    	non-compiled	[CE]  :  expected	61	None	replace
285	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  recordNumber);  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  recordNumber);  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  recordNumber);  i++)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null);    i++)    {    	non-compiled	[CE]  :  expected	61	None	replace
286	[BUG]  [BUGGY]  hdrMap.put(header[0],  Integer.valueOf(i));  return  rec;  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[0],  Integer.valueOf(i));  return  rec;  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[0],  Integer.valueOf(i));  return  rec;	  hdrMap.put(header[i],    Integer.valueOf(i));    return    rec;    	non-compiled	[CE]  :  expected	14	None	replace
287	[BUG]  [BUGGY]  hdrMap.put(header[i],  Boolean.TRUE);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  Boolean.TRUE);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  Boolean.TRUE);	  hdrMap.put(header[i],    false);    	non-compiled	[CE]  :  expected	47	None	replace
288	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecordName()));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getRecordName()));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getRecordName()));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	46	None	replace
289	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getCSVHeaderRecord()));  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getCSVHeaderRecord()));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getCSVHeaderRecord()));	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	46	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  header.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length;  i++)  {	  for(int    i    =    1;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	31	None	replace
291	[BUG]  [BUGGY]  for(int  i  =  0,  this.header.length;  i  <  this.header.length;  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0,  this.header.length;  i  <  this.header.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0,  this.header.length;  i  <  this.header.length;  i++)  {	  for(int    i    =    1;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	31	None	replace
292	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i!=  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i!=  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i!=  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    =    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	19	None	replace
293	[BUG]  [BUGGY]  Format.for(int  i  =  0;  i  <  header.length();  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  Format.for(int  i  =  0;  i  <  header.length();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	Format.for(int  i  =  0;  i  <  header.length();  i++)  {	  for(int    i    =    0;    i    <    header.length()    -    2;    i++)    {    	non-compiled	[CE]  :  expected	35	None	replace
294	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  +  1;  i  +=  2)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  +  1;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  +  1;  i  +=  2)  {	  for(int    i    =    0;    i    <    this.header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	41	None	replace
295	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getRecordName()));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getRecordName()));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  String(this.format.getRecordName()));	  hdrMap.put(header[i],    new    String(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	11	None	replace
296	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getRecord()));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getRecord()));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  String(this.format.getRecord()));	  hdrMap.put(header[i],    new    String(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	11	None	replace
297	[BUG]  [BUGGY]  For(int  i  =  0,  lexer  =  header.length;  i  <  lexer.length;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0,  lexer  =  header.length;  i  <  lexer.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0,  lexer  =  header.length;  i  <  lexer.length;  i++)  {	  For(int    i    =    1;    i    <    header.length;    i++)    {    	non-compiled	[CE]  :  expected	27	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  +  4;  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  +  4;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  +  4;  i++)  {	  for(int    i    =    0;    i    <    this.header.length    +    1;    i++)    {    	non-compiled	[CE]  :  expected	30	None	replace
299	[BUG]  [BUGGY]  String  header[]  =  this.format.getRecordHeaders();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String  header[]  =  this.format.getRecordHeaders();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String  header[]  =  this.format.getRecordHeaders();	  String    header[]    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	43	None	replace
300	[BUG]  [BUGGY]  String  header[]  =  this.format.getRecordHeader(recordNumber);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String  header[]  =  this.format.getRecordHeader(recordNumber);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String  header[]  =  this.format.getRecordHeader(recordNumber);	  String    header[]    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	43	None	replace
301	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {	  For(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    	non-compiled	[CE]  :  expected	24	None	replace
302	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderLength();  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderLength();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.getHeaderLength();  i++)  {	  For(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    	non-compiled	[CE]  :  expected	24	None	replace
303	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderSize();  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderSize();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.getHeaderSize();  i++)  {	  For(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    	non-compiled	[CE]  :  expected	24	None	replace
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderRecordCount();  i++)  {	  for(int    i    =    0;    i    <    this.format.length();    i++)    {    	non-compiled	[CE]  :  expected	38	None	replace
305	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.format.length();  i++)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  1;  i  <  this.format.length();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  this.format.length();  i++)  {	  for(int    i    =    0;    i    <    this.format.length();    i++)    {    	non-compiled	[CE]  :  expected	38	None	replace
306	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  >=  this.header.length;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  >=  this.header.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  >=  this.header.length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	49	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  this.header.length;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  this.header.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  &&  i  <  this.header.length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	49	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&!this.header.isEmpty();  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&!this.header.isEmpty();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  &&!this.header.isEmpty();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	49	None	replace
309	[BUG]  [BUGGY]  String[]  headerMap  =  this.format.getHeaderRecords();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String[]  headerMap  =  this.format.getHeaderRecords();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String[]  headerMap  =  this.format.getHeaderRecords();	  String[]    headerMap    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	13	None	replace
310	[BUG]  [BUGGY]  String[]  headerMap  =  this.format.getRecords();  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String[]  headerMap  =  this.format.getRecords();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String[]  headerMap  =  this.format.getRecords();	  String[]    headerMap    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	13	None	replace
311	[BUG]  [BUGGY]  String[]  headerMap  =  this.format.getRecordingHeaders();  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String[]  headerMap  =  this.format.getRecordingHeaders();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String[]  headerMap  =  this.format.getRecordingHeaders();	  String[]    headerMap    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	13	None	replace
312	[BUG]  [BUGGY]  Lexer  lexer  =  this.format.getLastRecord();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  Lexer  lexer  =  this.format.getLastRecord();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	Lexer  lexer  =  this.format.getLastRecord();	  Lexer    lexer    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	53	None	replace
313	[BUG]  [BUGGY]  Lexer  lexer  =  this.format.getLexerHeaderRecord();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  Lexer  lexer  =  this.format.getLexerHeaderRecord();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	Lexer  lexer  =  this.format.getLexerHeaderRecord();	  Lexer    lexer    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	53	None	replace
314	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  i  <  length;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  i  <  length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  &&  i  <  length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    length;    i++)    {    	non-compiled	[CE]  :  expected	50	None	replace
315	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  >=  recordNumber.length;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  >=  recordNumber.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  >=  recordNumber.length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    recordNumber;    i++)    {    	non-compiled	[CE]  :  expected	17	None	replace
316	[BUG]  [BUGGY]  String[]  headerMap  =  this.format.getFormatHeaderRecord();  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String[]  headerMap  =  this.format.getFormatHeaderRecord();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String[]  headerMap  =  this.format.getFormatHeaderRecord();	  String[]    headerMap    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	13	None	replace
317	[BUG]  [BUGGY]  String[]  headerMap  =  this.format.getHeaderRecord(recordNumber);  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String[]  headerMap  =  this.format.getHeaderRecord(recordNumber);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String[]  headerMap  =  this.format.getHeaderRecord(recordNumber);	  String[]    headerMap    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	13	None	replace
318	[BUG]  [BUGGY]  Lexer  lexer  =  this.format.getLexerHeader();  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  Lexer  lexer  =  this.format.getLexerHeader();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	Lexer  lexer  =  this.format.getLexerHeader();	  Lexer    lexer    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	53	None	replace
319	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.getHeaderRecord();  i++)  {	  For(int    i    =    0;    i    <    this.format.getHeaderCount();    i++)    {    	non-compiled	[CE]  :  expected	24	None	replace
320	[BUG]  [BUGGY]  header  =  this.format.getHeader(rec);  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  header  =  this.format.getHeader(rec);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	header  =  this.format.getHeader(rec);	  header    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	44	None	replace
321	[BUG]  [BUGGY]  header  =  this.format.getHeader(recordNumber);  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  header  =  this.format.getHeader(recordNumber);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	header  =  this.format.getHeader(recordNumber);	  header    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	44	None	replace
322	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  RectangleEdge.TOP);  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  RectangleEdge.TOP);  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  RectangleEdge.TOP);  i++)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null);    i++)    {    	non-compiled	[CE]  :  expected	61	None	replace
323	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  this.format);  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  this.format);  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  this.format);  i++)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null);    i++)    {    	non-compiled	[CE]  :  expected	61	None	replace
324	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()),  header);  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()),  header);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()),  header);	  hdrMap.put(header[i],    new    CSVFormat(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	46	None	replace
325	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  this.format)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  this.format)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  this.format)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null)    {    	non-compiled	[CE]  :  expected	62	None	replace
326	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  RectangleEdge.TOP)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  RectangleEdge.TOP)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  RectangleEdge.TOP)  {	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    null)    {    	non-compiled	[CE]  :  expected	62	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  i  <  this.header.length  -  1;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  i  <  this.header.length  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  &&  i  <  this.header.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	28	None	replace
328	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  return  rec;  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  return  rec;  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  return  rec;	  hdrMap.put(header[i],    Integer.valueOf(i));    return    rec;    	non-compiled	[CE]  :  expected	14	None	replace
329	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  +=  2)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length    -    2;    i    +=    2)    {    	non-compiled	[CE]  :  expected	2	None	replace
330	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  i  <  this.header.length  -  2;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.header.length  &&  i  <  this.header.length  -  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  &&  i  <  this.header.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    this.header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	29	None	replace
331	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i].equals(this.format.getHeaderRecord()))  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i].equals(this.format.getHeaderRecord()))  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i].equals(this.format.getHeaderRecord()))  {	  For(int    i    =    0;    i    <    header.length    &&    header[i].equals(this.format.getSkipHeaderRecord()))    {    	non-compiled	[CE]  :  expected	60	None	replace
332	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length()  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length()  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length()  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {	  For(int    i    =    0;    i    <    header.length    &&    header[i].equals(this.format.getSkipHeaderRecord()))    {    	non-compiled	[CE]  :  expected	60	None	replace
333	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  header.length  -  1;  i++)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  header.length  -  1;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  &&  i  <  header.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	52	None	replace
334	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {	  For(int    i    =    0;    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	22	None	replace
335	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderCount();  i++)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderCount();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderCount();  i++)  {	  For(int    i    =    0;    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	22	None	replace
336	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  header.length;  i  +=  2)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  1;  i  <  header.length;  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  1;  i  <  header.length;  i  +=  2)  {	  For(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	42	None	replace
337	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(record,  formatHeader));  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(record,  formatHeader));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(record,  formatHeader));	  hdrMap.put(header[i],    new    CSVFormat(rec));    	non-compiled	[CE]  :  expected	54	None	replace
338	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(rec,  formatHeader));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(rec,  formatHeader));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(rec,  formatHeader));	  hdrMap.put(header[i],    new    CSVFormat(rec));    	non-compiled	[CE]  :  expected	54	None	replace
339	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderSize();  i++)  {  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderSize();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderSize();  i++)  {	  for(int    i    =    0;    i    <    this.format.length();    i++)    {    	non-compiled	[CE]  :  expected	38	None	replace
340	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderIndex();  i++)  {  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.getHeaderIndex();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.getHeaderIndex();  i++)  {	  for(int    i    =    0;    i    <    this.format.length();    i++)    {    	non-compiled	[CE]  :  expected	38	None	replace
341	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.recordNumber();  i++)  {  [CE]  :  expected  [FE]                                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  this.format.recordNumber();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.recordNumber();  i++)  {	  for(int    i    =    0;    i    <    this.format.length();    i++)    {    	non-compiled	[CE]  :  expected	38	None	replace
342	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  >  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  >  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  >  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    >=    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	18	None	replace
343	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.size();  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.size();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.size();  i++)  {	  For(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	26	None	replace
344	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  header.length();  i++)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  1;  i  <  header.length();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  1;  i  <  header.length();  i++)  {	  For(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	26	None	replace
345	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  this.header!=  header.length;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  this.header!=  header.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  this.header!=  header.length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	49	None	replace
346	[BUG]  [BUGGY]  String  header[]  =  this.format.getHeader(recordNumber);  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String  header[]  =  this.format.getHeader(recordNumber);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String  header[]  =  this.format.getHeader(recordNumber);	  String    header[]    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	43	None	replace
347	[BUG]  [BUGGY]  String  header[]  =  this.format.getHeaderFormat();  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String  header[]  =  this.format.getHeaderFormat();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String  header[]  =  this.format.getHeaderFormat();	  String    header[]    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	43	None	replace
348	[BUG]  [BUGGY]  String  header[]  =  this.format.getFormatHeader();  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  String  header[]  =  this.format.getFormatHeader();  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String  header[]  =  this.format.getFormatHeader();	  String    header[]    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  :  expected	43	None	replace
349	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  2;  i++)  {  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  2;  i++)  {	  For(int    i    =    0;    i    <    header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	23	None	replace
350	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getSkipHeaderRecord());  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getSkipHeaderRecord());  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getSkipHeaderRecord());  i++)  {	  For(int    i    =    0;    i    <    header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	23	None	replace
351	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  /  2;  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  /  2;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  /  2;  i++)  {	  for(int    i    =    0;    i    <    header.length    /    2;    i++)    {    	non-compiled	[CE]  :  expected	8	None	replace
352	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rec.size();  i++)  {  [CE]  :  expected  [FE]                    AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  rec.size();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  rec.size();  i++)  {	  for(int    i    =    0;    i    <    header.size();    i++)    {    	non-compiled	[CE]  :  expected	55	None	replace
353	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  +=  1)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  +=  1)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  +=  1)  {	  for(int    i    =    0;    i    <    header.length;    i    +=    1)    {    	non-compiled	[CE]  :  expected	1	None	replace
354	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.format.getSkipHeaderRecord();    i++)    {    	non-compiled	[CE]  :  expected	58	None	replace
355	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderSize();  i++)  {  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderSize();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getHeaderSize();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    this.format.getSkipHeaderRecord();    i++)    {    	non-compiled	[CE]  :  expected	58	None	replace
356	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getFormatRecord()));  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getFormatRecord()));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  String(this.format.getFormatRecord()));	  hdrMap.put(header[i],    new    String(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	11	None	replace
357	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getFormatHeaderRecord()));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getFormatHeaderRecord()));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  String(this.format.getFormatHeaderRecord()));	  hdrMap.put(header[i],    new    String(this.format.getSkipHeaderRecord()));    	non-compiled	[CE]  :  expected	11	None	replace
358	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(recordNumber));  [CE]  :  expected  [FE]                                  AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(recordNumber));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(recordNumber));	  hdrMap.put(header[i],    RectangleEdge.valueOf(i));    	non-compiled	[CE]  :  expected	15	None	replace
359	[BUG]  [BUGGY]  for(int  i  =  0,  lexer  =  this.header.length;  i  <  lexer.length;  i++)  {  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0,  lexer  =  this.header.length;  i  <  lexer.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0,  lexer  =  this.header.length;  i  <  lexer.length;  i++)  {	  for(int    i    =    1;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	31	None	replace
360	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MAX_VALUE);  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MAX_VALUE);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.MAX_VALUE);	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
361	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  header.length  &&  header[i]!=  Integer.MAX_VALUE);  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  For(int  i  =  1;  i  <  header.length  &&  header[i]!=  Integer.MAX_VALUE);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  1;  i  <  header.length  &&  header[i]!=  Integer.MAX_VALUE);	  For(int    i    =    0;    i    <    header.length    &&    header[i]!=    Integer.valueOf(i));    hdrMap.put(header[i],    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	59	None	replace
362	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  head.length;  i++)  {  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  head.length;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  head.length;  i++)  {	  for(int    i    =    0;    i    <    header.length    -    6;    i++)    {    	non-compiled	[CE]  :  expected	32	None	replace
363	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  rec.size();  i++)  {  [CE]  :  expected  [FE]                          AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  rec.size();  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  rec.size();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    size();    i++)    {    	non-compiled	[CE]  :  expected	21	None	replace
364	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getFormatHeaderRecord());  [CE]  :  expected  [FE]                        AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  this.format.getFormatHeaderRecord());  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  this.format.getFormatHeaderRecord());	  hdrMap.put(header[i],    this.format.getSkipHeaderRecord());    	non-compiled	[CE]  :  expected	10	None	replace
365	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.size();  i  +=  2)  {  [CE]  :  expected  [FE]                      AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.size();  i  +=  2)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.size();  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length();    i    +=    2)    {    	non-compiled	[CE]  :  expected	56	None	replace
366	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.size()  &&  i  <  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  for(int  i  =  0;  i  <  header.size()  &&  i  <  Integer.MAX_VALUE;  i++)  {  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.size()  &&  i  <  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length()    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	16	None	replace
367	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(1));  [CE]  :  expected  [FE]                            AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(1));  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  Integer.valueOf(1));	  hdrMap.put(header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	12	None	replace
368	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header);  [CE]  :  expected  [FE]                              AssertionError      [CONTEXT]      }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {      [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0),  header);  [BUGGY]      hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  Integer.valueOf(0),  header);	  hdrMap.put(header[i],    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	12	None	replace
