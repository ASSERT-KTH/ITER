bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  [CE]  :  expected  [FE]    AssertionError  [CONTEXT]  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  1;  i++)  {  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  -  1;  i++)  {	for  (int  i  =  0;  i  <  header.length;  i++)  {  	non-compiled	[CE]  :  expected	17	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i++)  {  [CE]  :  expected  [FE]      AssertionError  [CONTEXT]  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i++)  {  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  -  2;  i++)  {	for  (int  i  =  0;  i  <  header.length;  i++)  {  	non-compiled	[CE]  :  expected	17	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]        AssertionError  [CONTEXT]  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  Integer.MAX_VALUE;  i++)  {  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  Integer.MAX_VALUE;  i++)  {	for  (int  i  =  0;  i  <  header.length;  i++)  {  	non-compiled	[CE]  :  expected	17	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i++)  {  [CE]  :  expected  [FE]          AssertionError  [CONTEXT]  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i++)  {  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length;  i++)  {	for  (int  i  =  0;  i  <  header.length;  i++)  {  	non-compiled	[CE]  :  expected	17	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length();  i++)  {  [CE]  :  expected  [FE]            AssertionError  [CONTEXT]  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [BUGGY]  for(int  i  =  0;  i  <  header.length();  i++)  {  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length();  i++)  {	for  (int  i  =  0;  i  <  header.length;  i++)  {  	non-compiled	[CE]  :  expected	17	None	replace
6	[BUG]  [BUGGY]    [CE]  :  expected  [FE]              AssertionError  [CONTEXT]  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [BUGGY]    [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	  	for  (int  i  =  0;  i  <  header.length;  i++)  {  	non-compiled	[CE]  :  expected	17	None	replace
7	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  [CE]  :  expected  [FE]    AssertionError  [CONTEXT]  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i++)  {  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length;  i++)  {	for  (int  i  =  0;  i  <  header.length;  i++)  {  	non-compiled	[CE]  :  expected	17	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  [CE]  :  expected  [FE]    AssertionError  [CONTEXT]  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  +=  2)  {  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length;  i  +=  2)  {	for  (int  i  =  0;  i  <  header.length;  i++)  {  	non-compiled	[CE]  :  expected	17	None	replace
