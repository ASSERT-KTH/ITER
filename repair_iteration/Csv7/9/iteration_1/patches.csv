bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  +=  1)  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  +=  1)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length;  i  +=  1)  {	  for(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	8	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i  +=  2)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  -  2;  i  +=  2)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  -  2;  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	8	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  +  2;  i  +=  2)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  +  2;  i  +=  2)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  +  2;  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	8	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length-1;  i  +=  2)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length-1;  i  +=  2)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length-1;  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	8	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  -=  2)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length;  i  -=  2)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length;  i  -=  2)  {	  for(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	8	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  3;  i++)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  -  3;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  -  3;  i++)  {	  for(int    i    =    0;    i    <    header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	2	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  4;  i++)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  -  4;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  -  4;  i++)  {	  for(int    i    =    0;    i    <    header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	2	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  /  2;  i++)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  /  2;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  /  2;  i++)  {	  for(int    i    =    0;    i    <    header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	2	None	replace
9	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  Integer.valueOf(i));	      	non-compiled	[CE]  :  expected	6	None	replace
10	[BUG]  [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  hdrMap.put(header[i],  this.format.getSkipHeaderRecord());  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  this.format.getSkipHeaderRecord());	      	non-compiled	[CE]  :  expected	6	None	replace
11	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getSkipHeaderRecord()));  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  hdrMap.put(header[i],  new  String(this.format.getSkipHeaderRecord()));  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  String(this.format.getSkipHeaderRecord()));	      	non-compiled	[CE]  :  expected	6	None	replace
12	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0));  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(0));  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  Integer.valueOf(0));	      	non-compiled	[CE]  :  expected	6	None	replace
13	[BUG]  [BUGGY]  String[]  headerMap  =  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  String[]  headerMap  =  this.format.getSkipHeaderRecord();  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String[]  headerMap  =  this.format.getSkipHeaderRecord();	      	non-compiled	[CE]  :  expected	6	None	replace
14	[BUG]  [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  return  rec;  [CE]  :  expected  [FE]                            AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  hdrMap.put(header[i],  Integer.valueOf(i));  return  rec;  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  Integer.valueOf(i));  return  rec;	      	non-compiled	[CE]  :  expected	6	None	replace
15	[BUG]  [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i));  [CE]  :  expected  [FE]                              AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  hdrMap.put(header[i],  RectangleEdge.valueOf(i));  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  RectangleEdge.valueOf(i));	      	non-compiled	[CE]  :  expected	6	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  &&  i  <  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	3	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber;  i++)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  recordNumber;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	3	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  >=  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  >=  Integer.MAX_VALUE;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  >=  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	3	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  =  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  =  Integer.MAX_VALUE;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  =  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	3	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  <  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  1;  i  <  header.length  &&  i  <  Integer.MAX_VALUE;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length  &&  i  <  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	3	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  size();  i++)  {  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  size();  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  size();  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	3	None	replace
22	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  -  1;  i++)  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  For(int  i  =  0;  i  <  header.length  -  1;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  -  1;  i++)  {	  For(int    i    =    0;    i    <    header.length;    i++)    {    	non-compiled	[CE]  :  expected	7	None	replace
23	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  -  2;  i++)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  For(int  i  =  0;  i  <  header.length  -  2;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  -  2;  i++)  {	  For(int    i    =    0;    i    <    header.length;    i++)    {    	non-compiled	[CE]  :  expected	7	None	replace
24	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  For(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.format.getHeaderCount();  i++)  {	  For(int    i    =    0;    i    <    header.length;    i++)    {    	non-compiled	[CE]  :  expected	7	None	replace
25	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.header.length;  i++)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  For(int  i  =  0;  i  <  this.header.length;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  this.header.length;  i++)  {	  For(int    i    =    0;    i    <    header.length;    i++)    {    	non-compiled	[CE]  :  expected	7	None	replace
26	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length();  i++)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  For(int  i  =  0;  i  <  header.length();  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length();  i++)  {	  For(int    i    =    0;    i    <    header.length;    i++)    {    	non-compiled	[CE]  :  expected	7	None	replace
27	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  header.length;  i++)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  For(int  i  =  1;  i  <  header.length;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  1;  i  <  header.length;  i++)  {	  For(int    i    =    0;    i    <    header.length;    i++)    {    	non-compiled	[CE]  :  expected	7	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  -  1;  i++)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  this.header.length  -  1;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	4	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  -  2;  i++)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  this.header.length  -  2;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	4	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length  +  1;  i++)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  this.header.length  +  1;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	4	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.header.length;  i++)  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  1;  i  <  this.header.length;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  this.header.length;  i++)  {	  for(int    i    =    0;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	4	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  -  6;  i++)  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  -  6;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  -  6;  i++)  {	  for(int    i    =    0;    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	1	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length  -  1;  i++)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  1;  i  <  header.length  -  1;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	1	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  -  1;  i++)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length()  -  1;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  -  1;  i++)  {	  for(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	5	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  -  2;  i++)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length()  -  2;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  -  2;  i++)  {	  for(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	5	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length();  i++)  {  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  this.header.length();  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length();  i++)  {	  for(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	5	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length()  +  1;  i++)  {  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length()  +  1;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length()  +  1;  i++)  {	  for(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	5	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.format.length();  i++)  {  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  this.format.length();  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.format.length();  i++)  {	  for(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	5	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  recordNumber.length();  i++)  {  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  recordNumber.length();  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  recordNumber.length();  i++)  {	  for(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	5	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  header.length();  i++)  {  [CE]  :  expected  [FE]                            AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  1;  i  <  header.length();  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  1;  i  <  header.length();  i++)  {	  for(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	5	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i  +=  2)  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  this.header.length;  i  +=  2)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.length;  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	8	None	replace
42	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length;  i  +=  2)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  For(int  i  =  0;  i  <  header.length;  i  +=  2)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length;  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	8	None	replace
43	[BUG]  [BUGGY]  String  header[]  =  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  String  header[]  =  this.format.getSkipHeaderRecord();  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	String  header[]  =  this.format.getSkipHeaderRecord();	      	non-compiled	[CE]  :  expected	6	None	replace
44	[BUG]  [BUGGY]  header  =  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  header  =  this.format.getSkipHeaderRecord();  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	header  =  this.format.getSkipHeaderRecord();	      	non-compiled	[CE]  :  expected	6	None	replace
45	[BUG]  [BUGGY]  hdrMap.put(header[i],  null);  [CE]  :  expected  [FE]                      AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  hdrMap.put(header[i],  null);  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  null);	      	non-compiled	[CE]  :  expected	6	None	replace
46	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  [CE]  :  expected  [FE]                        AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(this.format.getSkipHeaderRecord()));	      	non-compiled	[CE]  :  expected	6	None	replace
47	[BUG]  [BUGGY]  hdrMap.put(header[i],  false);  [CE]  :  expected  [FE]                          AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  hdrMap.put(header[i],  false);  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  false);	      	non-compiled	[CE]  :  expected	6	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  ==  Integer.MAX_VALUE;  i++)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  ==  Integer.MAX_VALUE;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  ==  Integer.MAX_VALUE;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	3	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.header.length;  i++)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.header.length;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  this.header.length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	3	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  length;  i++)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  length;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  length;  i++)  {	  for(int    i    =    0;    i    <    header.length    &&    i    <    Integer.MAX_VALUE;    i++)    {    	non-compiled	[CE]  :  expected	3	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.header.size();  i++)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  this.header.size();  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  this.header.size();  i++)  {	  for(int    i    =    0;    i    <    this.header.length;    i++)    {    	non-compiled	[CE]  :  expected	4	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  1;  i++)  {  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  1;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    header.length    -    1;    i++)    {    	non-compiled	[CE]  :  expected	1	None	replace
53	[BUG]  [BUGGY]  Lexer  lexer  =  this.format.getSkipHeaderRecord();  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  Lexer  lexer  =  this.format.getSkipHeaderRecord();  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	Lexer  lexer  =  this.format.getSkipHeaderRecord();	      	non-compiled	[CE]  :  expected	6	None	replace
54	[BUG]  [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(rec));  [CE]  :  expected  [FE]                    AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  hdrMap.put(header[i],  new  CSVFormat(rec));  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	hdrMap.put(header[i],  new  CSVFormat(rec));	      	non-compiled	[CE]  :  expected	6	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.size();  i++)  {  [CE]  :  expected  [FE]                AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.size();  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.size();  i++)  {	  for(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	5	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length();  i  +=  2)  {  [CE]  :  expected  [FE]                  AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length();  i  +=  2)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length();  i  +=  2)  {	  for(int    i    =    0;    i    <    header.length();    i++)    {    	non-compiled	[CE]  :  expected	5	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  2;  i++)  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  2;  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  header.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	2	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	for(int  i  =  0;  i  <  header.length  &&  i  <  this.format.getSkipHeaderRecord();  i++)  {	  for(int    i    =    0;    i    <    header.length    -    2;    i++)    {    	non-compiled	[CE]  :  expected	2	None	replace
59	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.valueOf(i));  hdrMap.put(header[i],  Integer.valueOf(i));  [CE]  :  expected  [FE]        AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.valueOf(i));  hdrMap.put(header[i],  Integer.valueOf(i));  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  Integer.valueOf(i));  hdrMap.put(header[i],  Integer.valueOf(i));	  For(int    i    =    0;    i    <    header.length;    i++)    {    	non-compiled	[CE]  :  expected	7	None	replace
60	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {  [CE]  :  expected  [FE]          AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i].equals(this.format.getSkipHeaderRecord()))  {	  For(int    i    =    0;    i    <    header.length;    i++)    {    	non-compiled	[CE]  :  expected	7	None	replace
61	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  null);  i++)  {  [CE]  :  expected  [FE]            AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  null);  i++)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  null);  i++)  {	  For(int    i    =    0;    i    <    header.length;    i++)    {    	non-compiled	[CE]  :  expected	7	None	replace
62	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  null)  {  [CE]  :  expected  [FE]              AssertionError    [CONTEXT]    }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  header  =  formatHeader;  }  if  (header  !=  null)  {    [BUGGY]  For(int  i  =  0;  i  <  header.length  &&  header[i]!=  null)  {  [BUGGY]    hdrMap.put(header[i],  Integer.valueOf(i));  }  }  }  return  hdrMap;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  [VARIABLES]  Lexer  lexer  boolean  CSVFormat  format  List  record  Token  reusableToken  CSVRecord  current  nextRecord  rec  String[]  formatHeader  header  Map  hdrMap  headerMap  long  recordNumber  int  i  	projects/Csv7/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	370	370	1	replace	For(int  i  =  0;  i  <  header.length  &&  header[i]!=  null)  {	  For(int    i    =    0;    i    <    header.length;    i++)    {    	non-compiled	[CE]  :  expected	7	None	replace
