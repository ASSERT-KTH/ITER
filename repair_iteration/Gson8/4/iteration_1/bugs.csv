bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f);  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(f);	final  Object  unsafe  =  f.get(null);  	compilable	  [FE]  AssertionFailedError  	8	2	replace
2	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f);  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f);	final  Object  unsafe  =  f.get(null);  	compilable	  [FE]  AssertionFailedError  	8	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(f.getClass());	final  Object  unsafe  =  f.get(null);  	compilable	  [FE]  AssertionFailedError  	8	2	replace
4	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getClass());	final  Object  unsafe  =  f.get(null);  	compilable	  [FE]  AssertionFailedError  	8	2	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(f.getName());	final  Object  unsafe  =  f.get(null);  	compilable	  [FE]  AssertionFailedError  	8	2	replace
6	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName());	final  Object  unsafe  =  f.get(null);  	compilable	  [FE]  AssertionFailedError  	8	2	replace
7	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(c);  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c);	final  Object  unsafe  =  f.get(null);  	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
8	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype());  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitPrototype());	final  Object  unsafe  =  f.get(null);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
9	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe "));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe "));  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe "));	final  Object  unsafe  =  f.get(null);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(f.getDeclaringClass());	final  Object  unsafe  =  f.get(null);  	compilable	  [FE]  AssertionFailedError  	8	2	replace
11	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaringClass());	final  Object  unsafe  =  f.get(null);  	compilable	  [FE]  AssertionFailedError  	8	2	replace
12	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  unsafe  [FE]                  AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	  	final  Object  unsafe  =  f.get(null);  	non-compiled	[CE]  cannot  find  symbol  unsafe	8	None	replace
13	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe "));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe "));  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe "));	final  Object  unsafe  =  f.get(null);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
14	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getModule());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f.getModule());  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getModule());	final  Object  unsafe  =  f.get(null);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
15	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getAccessible());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f.getAccessible());  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getAccessible());	final  Object  unsafe  =  f.get(null);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
16	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getId());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f.getId());  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getId());	final  Object  unsafe  =  f.get(null);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
17	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f);  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  Object  unsafe  =  f.get(f);  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f);	final  Object  unsafe  =  f.get(null);  	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	8	None	replace
18	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer());  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer());	final  Object  unsafe  =  f.get(null);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
