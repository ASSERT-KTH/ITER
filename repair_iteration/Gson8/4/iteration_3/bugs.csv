bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getImmediateParentPointer(),  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getImmediateParentPointer(),  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getImmediateParentPointer(),  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer(),    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
2	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  c.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  c.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  c.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer(),    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
3	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  unsafeClass.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  unsafeClass.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  unsafeClass.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer(),    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
4	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  this.f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  this.f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  this.f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer(),    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
5	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  safeClass.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  safeClass.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  safeClass.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer(),    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
6	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  f.getImmediateParentPointer()));  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  f.getImmediateParentPointer()));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  f.getImmediateParentPointer()));	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer(),    f.getImmediateParentPointer());    	non-compiled	[CE]  ';'  expected	142	None	replace
7	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "this.safe "));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "this.safe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "this.safe "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "this.safe   "));    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
8	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe ",  false));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe ",  false));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe ",  false));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "this.safe   "));    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
9	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe ",  null));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe ",  null));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe ",  null));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "this.safe   "));    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
10	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe   "),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe   "),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe   "),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "this.safe   "));    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
11	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe ")));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe ")));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe ")));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "this.safe   "));    	non-compiled	[CE]  	82	None	replace
12	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  false));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  false));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  false));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-class   "));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
13	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  null));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  null));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  null));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-class   "));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
14	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  Class.class));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  Class.class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  Class.class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-class   "));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
15	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun-class "));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun-class "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "sun-class "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-class   "));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
16	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  true));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  true));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  true));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-class   "));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
17	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  c));  [CE]  cannot  find  symbol  c  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  c));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  c));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-class   "));    	non-compiled	[CE]  cannot  find  symbol  c	83	None	replace
18	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getId().remove(f.getId());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.getId().remove(f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.getId().remove(f.getId());	  final    Object    unsafe    =    f.remove(f.getId());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
19	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(unsafeClass.getId());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(unsafeClass.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(unsafeClass.getId());	  final    Object    unsafe    =    f.remove(f.getId());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
20	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f,  f.getId());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f,  f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f,  f.getId());	  final    Object    unsafe    =    f.remove(f.getId());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
21	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f);	  final    Object    unsafe    =    f.remove(f.getId());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
22	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(c.getId());  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(c.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(c.getId());	  final    Object    unsafe    =    f.remove(f.getId());    	non-compiled	[CE]  cannot  find  symbol  c	134	None	replace
23	[BUG]  [BUGGY]  final  Object  unsafe  =  f.contains(f.getId());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.contains(f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.contains(f.getId());	  final    Object    unsafe    =    f.remove(f.getId());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
24	[BUG]  [BUGGY]  final  Object  illegal  =  f.get(f);  [CE]  cannot  find  symbol  unsafe  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  illegal  =  f.get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  illegal  =  f.get(f);	  final    Object    unsafe    =    f.get(f);    final    Object    illegal    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	105	None	replace
25	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(0);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(0);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(0);    final  Object  unsafe  =  f.get(0);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	30	None	add
26	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(1);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(1);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(0);    final  Object  unsafe  =  f.get(1);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	30	None	add
27	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(0);  Object  unsafe  =  f.get(0);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(0);  Object  unsafe  =  f.get(0);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(0);    Object  unsafe  =  f.get(0);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	30	None	add
28	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get();  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(0);    final  Object  unsafe  =  f.get();	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	30	None	add
29	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(;  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(0);    final  Object  unsafe  =  f.get(;	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
30	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(2);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(2);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(0);    final  Object  unsafe  =  f.get(2);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	30	None	add
31	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer()),  f.getImmediateParentPointer();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer()),  f.getImmediateParentPointer();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer()),  f.getImmediateParentPointer();	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer()).getImmediateParentPointer();    	non-compiled	[CE]  ';'  expected	99	None	replace
32	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer())!=null?  f.getImmediateParentPointer()  :  null;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer())!=null?  f.getImmediateParentPointer()  :  null;  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer())!=null?  f.getImmediateParentPointer()  :  null;	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer()).getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
33	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getImmediateParentPointer()).getImmediateParentPointer();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getImmediateParentPointer()).getImmediateParentPointer();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getImmediateParentPointer()).getImmediateParentPointer();	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer()).getImmediateParentPointer();    	non-compiled	[CE]  ';'  expected	99	None	replace
34	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer())!=null?  f.getImmediateParentPointer()  :  f.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer())!=null?  f.getImmediateParentPointer()  :  f.getImmediateParentPointer();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer())!=null?  f.getImmediateParentPointer()  :  f.getImmediateParentPointer();	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer()).getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
35	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer()).getUnsafeParentPointer();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer()).getUnsafeParentPointer();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer()).getUnsafeParentPointer();	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer()).getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
36	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getDeclaredClass());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getDeclaredClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getDeclaredClass());	  Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
37	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getRawClass());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getRawClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getRawClass());	  Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
38	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getClass(),  unsafeClass);  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getClass(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getClass(),  unsafeClass);	  Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	64	None	replace
39	[BUG]  [BUGGY]  Object  unsafe  =  f.get(c.getClass());  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(c.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(c.getClass());	  Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  c	64	None	replace
40	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getDeclaredField());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getDeclaredField());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getDeclaredField());	  Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
41	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f.get(f.getImplicitPrototype());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f.get(f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f),  f.get(f.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f).get(f.getImplicitPrototype());    	non-compiled	[CE]  ';'  expected	109	None	replace
42	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f,  f.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f).get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
43	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  c.getImplicitPrototype());  [CE]  cannot  find  symbol  c  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  c.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f,  c.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f).get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  c	109	None	replace
44	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  constructorId.getImplicitPrototype());  [CE]  cannot  find  symbol  constructorId  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  constructorId.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f,  constructorId.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f).get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  constructorId	109	None	replace
45	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c).get(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c).get(f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  c).get(f.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f).get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
46	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(c.getImplicitPrototype());  [CE]  cannot  find  symbol  c  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(c.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(c.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f).get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  c	109	None	replace
47	[BUG]  [BUGGY]  Object  unsafe  =  newInstance(f.newInstance());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  newInstance(f.newInstance());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  newInstance(f.newInstance());	  Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
48	[BUG]  [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "sun.misc.unsafe "));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "sun.misc.unsafe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.newInstance(f.getDeclaredField( "sun.misc.unsafe "));	  Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
49	[BUG]  [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "sun.misc.instance "));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "sun.misc.instance "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.newInstance(f.getDeclaredField( "sun.misc.instance "));	  Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
50	[BUG]  [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "sun.misc.Unsafe "));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "sun.misc.Unsafe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.newInstance(f.getDeclaredField( "sun.misc.Unsafe "));	  Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
51	[BUG]  [BUGGY]  Object  unsafe  =  f.newInstance(f.getConstructorId());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.newInstance(f.getConstructorId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.newInstance(f.getConstructorId());	  Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
52	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getConstructorId());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getConstructorId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getConstructorId());	  final    Object    unsafe    =    f.get(c.getId());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
53	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(constructorId.getId());  [CE]  cannot  find  symbol  constructorId  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(constructorId.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(constructorId.getId());	  final    Object    unsafe    =    f.get(c.getId());    	non-compiled	[CE]  cannot  find  symbol  constructorId	87	None	replace
54	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    Final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	18	None	replace
55	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    Final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	18	None	replace
56	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    Final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	18	None	replace
57	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    Final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	18	None	replace
58	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    Final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	18	None	replace
59	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(f,  unsafeClass);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  getConstructorId(f,  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(f,  unsafeClass);	  Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
60	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(f,  c);  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  getConstructorId(f,  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(f,  c);	  Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol  c	101	None	replace
61	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(c);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  getConstructorId(c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(c);	  Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol  c	101	None	replace
62	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(f.getName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  getConstructorId(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(f.getName());	  Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
63	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(f,  constructorId);  [CE]  cannot  find  symbol  constructorId  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  getConstructorId(f,  constructorId);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(f,  constructorId);	  Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol  constructorId	101	None	replace
64	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(f.getModule());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  getConstructorId(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(f.getModule());	  Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
65	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	26	None	replace
66	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeAllocator ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeAllocator ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafeAllocator ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	26	None	replace
67	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeAllocator ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeAllocator ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafeAllocator ");  f.setAccessible(true);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	26	None	replace
68	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeAllocator ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeAllocator ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeAllocator ");  f.setAccessible(true);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	26	None	replace
69	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "this.unsafeAllocator ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "this.unsafeAllocator ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "this.unsafeAllocator ");  f.setAccessible(true);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	26	None	replace
70	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theunsafeAllocator ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theunsafeAllocator ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theunsafeAllocator ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	26	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName())+ ": ";  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(f.getName())+ ": ";	  final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    	compilable	  [FE]  AssertionFailedError  	93	3	replace
72	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName())+ ": ";  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName())+ ": ";  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName())+ ": ";	  final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    	compilable	  [FE]  AssertionFailedError  	93	3	replace
73	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getName()  + ": ");  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getName()  + ": ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getName()  + ": ");	  final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	93	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  + ".: ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(f.getName()  + ".: ");	  final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    	compilable	  [FE]  AssertionFailedError  	93	2	replace
75	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  + ".: ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  + ".: ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName()  + ".: ");	  final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    	compilable	  [FE]  AssertionFailedError  	93	2	replace
76	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName())+ ": ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName())+ ": ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName())+ ": ");	  final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    	non-compiled	[CE]  	93	None	replace
77	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f.get(f.getAccessible());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f.get(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f),  f.get(f.getAccessible());	  final    Object    unsafe    =    getConstructorId(f).get(f.getAccessible());    	non-compiled	[CE]  ';'  expected	114	None	replace
78	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f,  f.getAccessible());	  final    Object    unsafe    =    getConstructorId(f).get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
79	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f);	  final    Object    unsafe    =    getConstructorId(f).get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
80	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  c.getAccessible());  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  c.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f,  c.getAccessible());	  final    Object    unsafe    =    getConstructorId(f).get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  c	114	None	replace
81	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c).get(f.getAccessible());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c).get(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  c).get(f.getAccessible());	  final    Object    unsafe    =    getConstructorId(f).get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
82	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getAccessible(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getAccessible(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f.getAccessible(),  unsafeClass);	  final    Object    unsafe    =    getConstructorId(f).get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
83	[BUG]  [BUGGY]  Object  unsafe  =  f.get(unsafeClass).getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(unsafeClass).getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(unsafeClass).getImplicitPrototype();	  Object    unsafe    =    f.get(f).getImplicitPrototype();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
84	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f),  f.getImplicitPrototype();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f),  f.getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f),  f.getImplicitPrototype();	  Object    unsafe    =    f.get(f).getImplicitPrototype();    	non-compiled	[CE]  ';'  expected	102	None	replace
85	[BUG]  [BUGGY]  Object  unsafe  =  f.get(c).getImplicitPrototype();  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(c).getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(c).getImplicitPrototype();	  Object    unsafe    =    f.get(f).getImplicitPrototype();    	non-compiled	[CE]  cannot  find  symbol  c	102	None	replace
86	[BUG]  [BUGGY]  Object  unsafe  =  f,  f.getImplicitPrototype();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f,  f.getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f,  f.getImplicitPrototype();	  Object    unsafe    =    f.get(f).getImplicitPrototype();    	non-compiled	[CE]  ';'  expected	102	None	replace
87	[BUG]  [BUGGY]  Object  safe  =  f.get(f).getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  safe  =  f.get(f).getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  safe  =  f.get(f).getImplicitPrototype();	  Object    unsafe    =    f.get(f).getImplicitPrototype();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
88	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	33	None	replace
89	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	33	None	replace
90	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
91	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	33	None	replace
92	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass,  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(unsafeClass.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
93	[BUG]  [BUGGY]  final  Object  unsafe  =  unsafeClass.get(f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  unsafeClass.get(f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  unsafeClass.get(f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(unsafeClass.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
94	[BUG]  [BUGGY]  final  Object  unsafe  =  safeClass.get(f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  safeClass.get(f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  safeClass.get(f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(unsafeClass.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
95	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  c.getImmediateParentPointer());  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  c.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass,  c.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(unsafeClass.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  c	69	None	replace
96	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getName());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    Class    <?>    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  incompatible  types	41	None	replace
97	[BUG]  [BUGGY]  static  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    Class    <?>    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
98	[BUG]  [BUGGY]  final  Class  <?>  unsafe  =  f.get(f.getName());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Class  <?>  unsafe  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Class  <?>  unsafe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    Class    <?>    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  incompatible  types	41	None	replace
99	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(c.getName());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(c.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(c.getName());	  final    Object    unsafe    =    f.get(f.getName());    Class    <?>    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	41	None	replace
100	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Class    <?>    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  incompatible  types	34	None	replace
101	[BUG]  [BUGGY]  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Class    <?>    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
102	[BUG]  [BUGGY]  final  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Class    <?>    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  incompatible  types	34	None	replace
103	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Class    <?>    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	34	None	replace
104	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getReturnType());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getReturnType());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getReturnType());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Class    <?>    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
105	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitClass()));  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitClass()));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitClass()));	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()));    	non-compiled	[CE]  ';'  expected	80	None	replace
106	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitType()));  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitType()));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitType()));	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()));    	non-compiled	[CE]  ';'  expected	80	None	replace
107	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getImplicitPrototype()));  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getImplicitPrototype()));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getImplicitPrototype()));	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()));    	non-compiled	[CE]  ';'  expected	80	None	replace
108	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitInstance()));  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitInstance()));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitInstance()));	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()));    	non-compiled	[CE]  ';'  expected	80	None	replace
109	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitInterface()));  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitInterface()));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitInterface()));	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()));    	non-compiled	[CE]  ';'  expected	80	None	replace
110	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  f.getImmediateParentPointer());	  final    Object    unsafe    =    getConstructorId(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
111	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c.getImmediateParentPointer());  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  c.getImmediateParentPointer());	  final    Object    unsafe    =    getConstructorId(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  c	100	None	replace
112	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer(),  c);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer(),  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer(),  c);	  final    Object    unsafe    =    getConstructorId(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
113	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(c.getImmediateParentPointer());  [CE]  cannot  find  symbol  c  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(c.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(c.getImmediateParentPointer());	  final    Object    unsafe    =    getConstructorId(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  c	100	None	replace
114	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  n.getImmediateParentPointer());  [CE]  cannot  find  symbol  n  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  n.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  n.getImmediateParentPointer());	  final    Object    unsafe    =    getConstructorId(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  n	100	None	replace
115	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer(),  f);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer(),  f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer(),  f);	  final    Object    unsafe    =    getConstructorId(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
116	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass,  f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f,    f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
117	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  unsafeClass.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  unsafeClass.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  unsafeClass.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f,    f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
118	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  safeClass.getImplicitPrototype());  [CE]  cannot  find  symbol  safeClass  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  safeClass.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  safeClass.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f,    f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  safeClass	76	None	replace
119	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  this.f.getImplicitPrototype());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  this.f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  this.f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f,    f.getImplicitPrototype());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	76	None	replace
120	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(unsafeClass.getModule());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(unsafeClass.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(unsafeClass.getModule());	  final    Object    unsafe    =    f.find(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
121	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f,  f.getModule());	  final    Object    unsafe    =    f.find(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
122	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(unsafeClass,  f.getModule());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(unsafeClass,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(unsafeClass,  f.getModule());	  final    Object    unsafe    =    f.find(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
123	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f,  c.getModule());  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f,  c.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f,  c.getModule());	  final    Object    unsafe    =    f.find(f.getModule());    	non-compiled	[CE]  cannot  find  symbol  c	97	None	replace
124	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(null,  f.getModule());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(null,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(null,  f.getModule());	  final    Object    unsafe    =    f.find(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
125	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f.getModule(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f.getModule(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f.getModule(),  unsafeClass);	  final    Object    unsafe    =    f.find(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
126	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getAccessible());  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  c.getAccessible());	  final    Object    unsafe    =    f.get(f,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  c	2	None	replace
127	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  unsafeClass.getAccessible());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  unsafeClass.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  unsafeClass.getAccessible());	  final    Object    unsafe    =    f.get(f,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
128	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  this.f.getAccessible());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  this.f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  this.f.getAccessible());	  final    Object    unsafe    =    f.get(f,    f.getAccessible());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	2	None	replace
129	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  safeClass.getAccessible());  [CE]  cannot  find  symbol  safeClass  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  safeClass.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  safeClass.getAccessible());	  final    Object    unsafe    =    f.get(f,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  safeClass	2	None	replace
130	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getAccessibility());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getAccessibility());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getAccessibility());	  final    Object    unsafe    =    f.get(f,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
131	[BUG]  [BUGGY]  Object  unsafe  =  f.get(constructorId);  [CE]  cannot  find  symbol  constructorId  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(constructorId);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(constructorId);	  Object    unsafe    =    f.get(c);    	non-compiled	[CE]  cannot  find  symbol  constructorId	65	None	replace
132	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(this.f.getImmediateParentPointer());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(this.f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(this.f.getImmediateParentPointer());	  final    Object    unsafe    =    this.f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	74	None	replace
133	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(this.f,  f.getImmediateParentPointer());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(this.f,  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(this.f,  f.getImmediateParentPointer());	  final    Object    unsafe    =    this.f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	74	None	replace
134	[BUG]  [BUGGY]  final  Object  unsafe  =  this.f.get(f,  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  this.f.get(f,  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  this.f.get(f,  f.getImmediateParentPointer());	  final    Object    unsafe    =    this.f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
135	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  this.f.get(f.getImmediateParentPointer());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  this.f.get(f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  this.f.get(f.getImmediateParentPointer());	  final    Object    unsafe    =    this.f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  <identifier>  expected	74	None	replace
136	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(unsafeClass.getAccessible());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(unsafeClass.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(unsafeClass.getAccessible());	  final    Object    unsafe    =    f.find(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
137	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(unsafeClass,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(unsafeClass,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(unsafeClass,  f.getAccessible());	  final    Object    unsafe    =    f.find(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
138	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f,  f.getAccessible());	  final    Object    unsafe    =    f.find(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
139	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(null,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(null,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(null,  f.getAccessible());	  final    Object    unsafe    =    f.find(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
140	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f,  c.getAccessible());  [CE]  cannot  find  symbol  c  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f,  c.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f,  c.getAccessible());	  final    Object    unsafe    =    f.find(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  c	128	None	replace
141	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(this.f.getAccessible());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(this.f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(this.f.getAccessible());	  final    Object    unsafe    =    f.find(f.getAccessible());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	128	None	replace
142	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null.getModule());  [CE]  <null>  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null.getModule());	  final    Object    unsafe    =    f.get(c.getModule());    	non-compiled	[CE]  <null>  cannot  be  dereferenced	60	None	replace
143	[BUG]  [BUGGY]  final  Object  unsafe  =  safeClass.get(f.getModule());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  safeClass.get(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  safeClass.get(f.getModule());	  final    Object    unsafe    =    f.get(c.getModule());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
144	[BUG]  [BUGGY]  final  Object  unsafe  =  c.get(f.getModule());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  c.get(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  c.get(f.getModule());	  final    Object    unsafe    =    f.get(c.getModule());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
145	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(unsafeClass.getModule());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(unsafeClass.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(unsafeClass.getModule());	  final    Object    unsafe    =    f.remove(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
146	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getConstructorId().remove(f.getModule());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.getConstructorId().remove(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.getConstructorId().remove(f.getModule());	  final    Object    unsafe    =    f.remove(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
147	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getModule().remove(f);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.getModule().remove(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.getModule().remove(f);	  final    Object    unsafe    =    f.remove(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
148	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f,  f.getModule());	  final    Object    unsafe    =    f.remove(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
149	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getModule().remove(f.getName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.getModule().remove(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.getModule().remove(f.getName());	  final    Object    unsafe    =    f.remove(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
150	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  unsafeClass.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  unsafeClass.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  unsafeClass.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f,    c.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
151	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  safeClass.getImmediateParentPointer());  [CE]  cannot  find  symbol  safeClass  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  safeClass.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  safeClass.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f,    c.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  safeClass	73	None	replace
152	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  path.getImmediateParentPointer());  [CE]  cannot  find  symbol  path  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  path.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  path.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f,    c.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  path	73	None	replace
153	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getConstructorId());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getConstructorId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getConstructorId());	  final    Object    unsafe    =    f.get(f,    c.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
154	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(this.safeClass);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(this.safeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(this.safeClass);	  final    Object    unsafe    =    f.get(safeClass);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	117	None	replace
155	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(this.unsafeClass);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(this.unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(this.unsafeClass);	  final    Object    unsafe    =    f.get(safeClass);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	117	None	replace
156	[BUG]  [BUGGY]  static  final  Object  unsafe  =  f.get(f);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  unsafe  =  f.get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  unsafe  =  f.get(f);	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
157	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
158	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  }  else  {  static  final  Object  unsafe  =  f.get(f);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  }  else  {  static  final  Object  unsafe  =  f.get(f);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  }  else  {  static  final  Object  unsafe  =  f.get(f);  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
159	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
160	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
161	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
162	[BUG]  [BUGGY]  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  unsafe  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
163	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
164	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
165	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
166	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
167	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
168	[BUG]  [BUGGY]  final  Object  unsafe  =  c.get(f.getAccessible());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  c.get(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  c.get(f.getAccessible());	  final    Object    unsafe    =    f.get(c.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
169	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass();    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
170	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass();    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
171	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass();    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
172	[BUG]  [BUGGY]  static  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass();    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
173	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass();    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
174	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass();    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(unsafeClass.getName());	  final    Object    unsafe    =    f.get(c.getName());    	compilable	  [FE]  AssertionFailedError  	95	2	replace
176	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getName());  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getName());	  final    Object    unsafe    =    f.get(c.getName());    	compilable	  [FE]  AssertionFailedError  	95	2	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getClass()).getClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(f.getClass()).getClass();	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass());    	compilable	  [FE]  AssertionFailedError  	20	3	replace
178	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass()).getClass();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getClass()).getClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getClass()).getClass();	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass());    	compilable	  [FE]  AssertionFailedError  	20	3	replace
179	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass()).getClass());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getClass()).getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getClass()).getClass());	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass());    	non-compiled	[CE]  ';'  expected	20	None	replace
180	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getClass()).getClass();  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getClass()).getClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getClass()).getClass();	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass());    	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	20	None	replace
181	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	20	None	replace
182	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	20	None	replace
183	[BUG]  [BUGGY]  if(f.getClass()  ==  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()  ==  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()  ==  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	20	None	replace
184	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass());  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass());    	non-compiled	[CE]  ';'  expected	20	None	replace
185	[BUG]  [BUGGY]  final  Object  unsafe  =  unsafeClass.get(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  unsafeClass.get(f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  unsafeClass.get(f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(unsafeClass.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
186	[BUG]  [BUGGY]  final  Object  unsafe  =  safeClass.get(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  safeClass.get(f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  safeClass.get(f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(unsafeClass.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
187	[BUG]  [BUGGY]  final  Object  unsafe  =  unsafeClass.get(unsafeClass.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  unsafeClass.get(unsafeClass.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  unsafeClass.get(unsafeClass.getImplicitPrototype());	  final    Object    unsafe    =    f.get(unsafeClass.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
188	[BUG]  [BUGGY]  final  Object  unsafe  =  safeClass.get(unsafeClass.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  safeClass.get(unsafeClass.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  safeClass.get(unsafeClass.getImplicitPrototype());	  final    Object    unsafe    =    f.get(unsafeClass.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
189	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  safe  =  f.get(f.getDeclaringClass());  }  [CE]  cannot  find  symbol  safe  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  safe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  safe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  safe	32	None	replace
190	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  cannot  find  symbol  unsafe  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	32	None	replace
191	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	32	None	replace
192	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	32	None	replace
193	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  incompatible  types	32	None	replace
194	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getImplicitPrototype().remove(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.getImplicitPrototype().remove(f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.getImplicitPrototype().remove(f.getImplicitPrototype());	  final    Object    unsafe    =    f.remove(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
195	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(unsafeClass.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(unsafeClass.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(unsafeClass.getImplicitPrototype());	  final    Object    unsafe    =    f.remove(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
196	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f,  f.getImplicitPrototype());	  final    Object    unsafe    =    f.remove(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
197	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getImplicitPrototype().remove(f);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.getImplicitPrototype().remove(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.getImplicitPrototype().remove(f);	  final    Object    unsafe    =    f.remove(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
198	[BUG]  [BUGGY]  final  Object  unsafe  =  f.contains(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.contains(f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.contains(f.getImplicitPrototype());	  final    Object    unsafe    =    f.remove(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
199	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(c.getImplicitPrototype());  [CE]  cannot  find  symbol  c  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(c.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(c.getImplicitPrototype());	  final    Object    unsafe    =    f.remove(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  c	130	None	replace
200	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getClass());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  incompatible  types	21	None	replace
201	[BUG]  [BUGGY]  static  final  Object  unsafe  =  f.get(f.getClass());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  unsafe  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  unsafe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
202	[BUG]  [BUGGY]  Field  f  =  f.get(f.getClass());  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Field  f  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Field  f  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	21	None	replace
203	[BUG]  [BUGGY]  null  =  f.get(f.getClass());  [CE]  unexpected  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  null  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	null  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  unexpected  type	21	None	replace
204	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getModule(),  safeClass);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getModule(),  safeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getModule(),  safeClass);	  final    Object    unsafe    =    f.get(f.getModule(),    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
205	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getModule(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getModule(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getModule(),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getModule(),    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
206	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getModule(),  Class.class);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getModule(),  Class.class);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getModule(),  Class.class);	  final    Object    unsafe    =    f.get(f.getModule(),    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
207	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getModule(),  UnsafeClass.class);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getModule(),  UnsafeClass.class);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getModule(),  UnsafeClass.class);	  final    Object    unsafe    =    f.get(f.getModule(),    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
208	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getModule(),  this.unsafeClass);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getModule(),  this.unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getModule(),  this.unsafeClass);	  final    Object    unsafe    =    f.get(f.getModule(),    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
209	[BUG]  [BUGGY]  final  Object  safe  =  f.get(f.getName());  [CE]  cannot  find  symbol  unsafe  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  safe  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  safe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    final    Object    safe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	43	None	replace
210	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    final    Object    safe    =    f.get(f.getName());    	non-compiled	[CE]  incompatible  types	43	None	replace
211	[BUG]  [BUGGY]  Object  safe  =  f.get(f.getName());  [CE]  cannot  find  symbol  unsafe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  safe  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  safe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    final    Object    safe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	43	None	replace
212	[BUG]  [BUGGY]  static  final  Object  safe  =  f.get(f.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  safe  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  safe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    final    Object    safe    =    f.get(f.getName());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
213	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f);	  final    Object    unsafe    =    f.get(f);    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  incompatible  types	48	None	replace
214	[BUG]  [BUGGY]  Object  unsafe  =  f.get(0);  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(0);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(0);	  final    Object    unsafe    =    f.get(f);    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	48	None	replace
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe-   "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe-   "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-   "));    	compilable	  [FE]  AssertionFailedError  	16	1	replace
216	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe-   "));  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe-   "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe-   "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-   "));    	compilable	  [FE]  AssertionFailedError  	16	1	replace
217	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "unsafe- "));  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "unsafe- "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "unsafe- "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-   "));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
218	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- ",  false));  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- ",  false));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- ",  false));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-   "));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
219	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-object "));  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-object "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-object "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-   "));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
220	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  c.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafeClass  =  c.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafeClass  =  c.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);	  Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	121	None	replace
221	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);	  Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	121	None	replace
222	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);	  Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	121	None	replace
223	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  f.setAccessible(true);	  Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	121	None	replace
224	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getModule());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass,  f.getModule());	  final    Object    unsafe    =    f.get(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
225	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  unsafeClass.getModule());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  unsafeClass.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  unsafeClass.getModule());	  final    Object    unsafe    =    f.get(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
226	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  this.f.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  this.f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  this.f.getModule());	  final    Object    unsafe    =    f.get(f,    f.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	57	None	replace
227	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  safeClass.getModule());  [CE]  cannot  find  symbol  safeClass  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  safeClass.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  safeClass.getModule());	  final    Object    unsafe    =    f.get(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  safeClass	57	None	replace
228	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c,  f.getModule());  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(c,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c,  f.getModule());	  final    Object    unsafe    =    f.get(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  c	57	None	replace
229	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  c.getImmediateParentPointer());  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  c.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  c.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(null,    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  c	72	None	replace
230	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  null,  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  null,  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  null,  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(null,    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
231	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.toImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  f.toImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.toImmediateParentPointer());	  final    Object    unsafe    =    f.get(null,    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
232	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  unsafeClass.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  unsafeClass.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  unsafeClass.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(null,    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
233	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  this.f.getImmediateParentPointer());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  this.f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  this.f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(null,    f.getImmediateParentPointer());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	72	None	replace
234	[BUG]  [BUGGY]  final  Object  unsafe  =  this.f.get(null,  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  this.f.get(null,  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  this.f.get(null,  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(null,    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
235	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  incompatible  types	39	None	replace
236	[BUG]  [BUGGY]  static  final  Object  unsafe  =  f.get(f.getName());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  unsafe  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  unsafe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
237	[BUG]  [BUGGY]  Node  unsafe  =  f.get(f.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Node  unsafe  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Node  unsafe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
238	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  c.getAccessible());  [CE]  cannot  find  symbol  c  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  c.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass,  c.getAccessible());	  final    Object    unsafe    =    f.get(unsafeClass,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  c	5	None	replace
239	[BUG]  [BUGGY]  final  Object  unsafe  =  unsafeClass.get(f,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  unsafeClass.get(f,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  unsafeClass.get(f,  f.getAccessible());	  final    Object    unsafe    =    f.get(unsafeClass,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
240	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  unsafeClass.getAccessible());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  unsafeClass.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass,  unsafeClass.getAccessible());	  final    Object    unsafe    =    f.get(unsafeClass,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
241	[BUG]  [BUGGY]  final  Object  safe  =  f.get(unsafeClass,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  safe  =  f.get(unsafeClass,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  safe  =  f.get(unsafeClass,  f.getAccessible());	  final    Object    unsafe    =    f.get(unsafeClass,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
242	[BUG]  [BUGGY]  final  Object  unsafe  =  safeClass.get(f,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  safeClass.get(f,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  safeClass.get(f,  f.getAccessible());	  final    Object    unsafe    =    f.get(unsafeClass,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
243	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  unsafeClass.get(f.getAccessible());  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  unsafeClass.get(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  unsafeClass.get(f.getAccessible());	  final    Object    unsafe    =    f.get(unsafeClass,    f.getAccessible());    	non-compiled	[CE]  ';'  expected	5	None	replace
244	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-unsafe "));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-unsafe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-unsafe "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-   "));    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
245	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe- "));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe- "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe- "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-   "));    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
246	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  false));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  false));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  false));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safeClass   "));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
247	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  null));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  null));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  null));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safeClass   "));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
248	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.class "));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.class "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.class "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safeClass   "));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
249	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  Class.class));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  Class.class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  Class.class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safeClass   "));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
250	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  true));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  true));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  true));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safeClass   "));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
251	[BUG]  [BUGGY]  Object  unsafe  =  f.setAccessible(false);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.setAccessible(false);	  Object    unsafe    =    f.setAccessible(true);    	non-compiled	[CE]  incompatible  types	144	None	replace
252	[BUG]  [BUGGY]  Object  unsafe  =  f.setAccessible(true,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.setAccessible(true,  false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.setAccessible(true,  false);	  Object    unsafe    =    f.setAccessible(true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	144	None	replace
253	[BUG]  [BUGGY]  Object  unsafe  =  f.setAccessible(true,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.setAccessible(true,  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.setAccessible(true,  unsafeClass);	  Object    unsafe    =    f.setAccessible(true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>)	144	None	replace
254	[BUG]  [BUGGY]  Object  unsafe  =  f.getConstructorId().setAccessible(true);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.getConstructorId().setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.getConstructorId().setAccessible(true);	  Object    unsafe    =    f.setAccessible(true);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
255	[BUG]  [BUGGY]  Object  unsafe  =  f.setAccessible(true,  null);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.setAccessible(true,  null);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.setAccessible(true,  null);	  Object    unsafe    =    f.setAccessible(true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>)	144	None	replace
256	[BUG]  [BUGGY]  Object  unsafe  =  f.setAccessible(true,  true);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.setAccessible(true,  true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.setAccessible(true,  true);	  Object    unsafe    =    f.setAccessible(true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	144	None	replace
257	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c);  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  c);	  final    Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol  c	108	None	replace
258	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getName());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getName());	  final    Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
259	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  constructorId);  [CE]  cannot  find  symbol  constructorId  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  constructorId);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  constructorId);	  final    Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol  constructorId	108	None	replace
260	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(c);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(c);	  final    Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol  c	108	None	replace
261	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getClass());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getClass());	  final    Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
262	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getAssignedClass());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getAssignedClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getAssignedClass());	  final    Object    unsafe    =    f.get(f.getAssignedClass());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
263	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getAssignedClass());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getAssignedClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getAssignedClass());	  final    Object    unsafe    =    f.get(f.getAssignedClass());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
264	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c.getAssignedClass());  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(c.getAssignedClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c.getAssignedClass());	  final    Object    unsafe    =    f.get(f.getAssignedClass());    	non-compiled	[CE]  cannot  find  symbol  c	56	None	replace
265	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getAssignedClass());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getAssignedClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getAssignedClass());	  final    Object    unsafe    =    f.get(f.getAssignedClass());    	non-compiled	[CE]  ';'  expected	56	None	replace
266	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getAssignedClass()));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getAssignedClass()));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getAssignedClass()));	  final    Object    unsafe    =    f.get(f.getAssignedClass());    	non-compiled	[CE]  ';'  expected	56	None	replace
267	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getInitializingClass());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getInitializingClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getInitializingClass());	  final    Object    unsafe    =    f.get(f.getInitializingClass());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
268	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getInitializingClass());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getInitializingClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getInitializingClass());	  final    Object    unsafe    =    f.get(f.getInitializingClass());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
269	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getInitializingClass());  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getInitializingClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  c.getInitializingClass());	  final    Object    unsafe    =    f.get(f.getInitializingClass());    	non-compiled	[CE]  cannot  find  symbol  c	55	None	replace
270	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getInitializingClass());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getInitializingClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.getInitializingClass());	  final    Object    unsafe    =    f.get(f.getInitializingClass());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
271	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c.getInitializingClass());  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(c.getInitializingClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c.getInitializingClass());	  final    Object    unsafe    =    f.get(f.getInitializingClass());    	non-compiled	[CE]  cannot  find  symbol  c	55	None	replace
272	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getInitializingClass());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getInitializingClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getInitializingClass());	  final    Object    unsafe    =    f.get(f.getInitializingClass());    	non-compiled	[CE]  ';'  expected	55	None	replace
273	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getImmediateParentPointer().remove(f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.getImmediateParentPointer().remove(f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.getImmediateParentPointer().remove(f.getImmediateParentPointer());	  final    Object    unsafe    =    f.remove(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
274	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(unsafeClass.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(unsafeClass.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(unsafeClass.getImmediateParentPointer());	  final    Object    unsafe    =    f.remove(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
275	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getImmediateParentPointer().remove(f);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.getImmediateParentPointer().remove(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.getImmediateParentPointer().remove(f);	  final    Object    unsafe    =    f.remove(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
276	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f,  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f,  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f,  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.remove(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
277	[BUG]  [BUGGY]  final  Object  unsafe  =  f.contains(f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.contains(f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.contains(f.getImmediateParentPointer());	  final    Object    unsafe    =    f.remove(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
278	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(c.getImmediateParentPointer());  [CE]  cannot  find  symbol  c  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(c.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(c.getImmediateParentPointer());	  final    Object    unsafe    =    f.remove(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  c	143	None	replace
279	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  f.getId());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  f.getId());	  final    Object    unsafe    =    getConstructorId(f.getId());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
280	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c.getId());  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  c.getId());	  final    Object    unsafe    =    getConstructorId(f.getId());    	non-compiled	[CE]  cannot  find  symbol  c	123	None	replace
281	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(c.getId());  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(c.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(c.getId());	  final    Object    unsafe    =    getConstructorId(f.getId());    	non-compiled	[CE]  cannot  find  symbol  c	123	None	replace
282	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getRawClass());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getRawClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getRawClass());	  final    Object    unsafe    =    getConstructorId(f.getId());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
283	[BUG]  [BUGGY]  final  Object  unsafe  =  newInstance(f.newInstance());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  newInstance(f.newInstance());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  newInstance(f.newInstance());	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
284	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  getConstructorId();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  getConstructorId();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  getConstructorId();	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  ';'  expected	148	None	replace
285	[BUG]  [BUGGY]  final  Object  unsafe  =  safeClass.newInstance();  [CE]  cannot  find  symbol  safeClass  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  safeClass.newInstance();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  safeClass.newInstance();	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol  safeClass	148	None	replace
286	[BUG]  [BUGGY]  final  Object  unsafe  =  c.newInstance();  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  c.newInstance();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  c.newInstance();	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol  c	148	None	replace
287	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  newInstance();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  newInstance();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  newInstance();	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  ';'  expected	148	None	replace
288	[BUG]  [BUGGY]  final  Object  unsafe  =  this.f.get(f.getAccessible());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  this.f.get(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  this.f.get(f.getAccessible());	  final    Object    unsafe    =    f.get(this.f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
289	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	replace
290	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	replace
291	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	replace
292	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "misc.unsafeClass ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "misc.unsafeClass ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "misc.unsafeClass ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	replace
293	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "nodeClass ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "nodeClass ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "nodeClass ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	replace
294	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getModule()  +  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getModule()  +  1);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getModule()  +  1);	  final    Object    unsafe    =    f,    f.get(f.getModule());    	non-compiled	[CE]  ';'  expected	59	None	replace
295	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getModule(),  false);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getModule(),  false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getModule(),  false);	  final    Object    unsafe    =    f,    f.get(f.getModule());    	non-compiled	[CE]  ';'  expected	59	None	replace
296	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getRawClass());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getRawClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getRawClass());	  final    Object    unsafe    =    f,    f.get(f.getModule());    	non-compiled	[CE]  ';'  expected	59	None	replace
297	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getModule(),  c);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getModule(),  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getModule(),  c);	  final    Object    unsafe    =    f,    f.get(f.getModule());    	non-compiled	[CE]  ';'  expected	59	None	replace
298	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getName());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getName());	  final    Object    unsafe    =    f,    f.get(f.getModule());    	non-compiled	[CE]  ';'  expected	59	None	replace
299	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	35	None	replace
300	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  cannot  find  symbol  unsafe  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	35	None	replace
301	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	35	None	replace
302	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	35	None	replace
303	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  null),  unsafeClass);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  null),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  null),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   ",    null));    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
304	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  null,  unsafeClass));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  null,  unsafeClass));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  null,  unsafeClass));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   ",    null));    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
305	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe   ",  null));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe   ",  null));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe   ",  null));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   ",    null));    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
306	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  null),  false);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  null),  false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  null),  false);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   ",    null));    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
307	[BUG]  [BUGGY]  final  Object  illegal  =  f.get(f.getName());  [CE]  cannot  find  symbol  unsafe  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  illegal  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  illegal  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    final    Object    illegal    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	104	None	replace
308	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    final    Object    illegal    =    f.get(f.getName());    	non-compiled	[CE]  incompatible  types	104	None	replace
309	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setModule(f);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setModule(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setModule(f);	  final    Object    unsafe    =    f.setModule(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
310	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setModule(f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setModule(f,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setModule(f,  f.getModule());	  final    Object    unsafe    =    f.setModule(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
311	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setModule(null,  f.getModule());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setModule(null,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setModule(null,  f.getModule());	  final    Object    unsafe    =    f.setModule(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
312	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setModule(unsafeClass.getModule());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setModule(unsafeClass.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setModule(unsafeClass.getModule());	  final    Object    unsafe    =    f.setModule(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
313	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setModule(this.f.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setModule(this.f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setModule(this.f.getModule());	  final    Object    unsafe    =    f.setModule(f.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	140	None	replace
314	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setModule(f,  c.getModule());  [CE]  cannot  find  symbol  c  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setModule(f,  c.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setModule(f,  c.getModule());	  final    Object    unsafe    =    f.setModule(f.getModule());    	non-compiled	[CE]  cannot  find  symbol  c	140	None	replace
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(1);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(1);	  final    Object    unsafe    =    f.get(0);    	compilable	  [FE]  AssertionFailedError  	31	2	replace
316	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(1);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(1);	  final    Object    unsafe    =    f.get(0);    	compilable	  [FE]  AssertionFailedError  	31	2	replace
317	[BUG]  [BUGGY]  final  Object  dangerous  =  f.get(f.getName());  [CE]  cannot  find  symbol  unsafe  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  dangerous  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  dangerous  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    final    Object    dangerous    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	44	None	replace
318	[BUG]  [BUGGY]  final  Object  hazardous  =  f.get(f.getName());  [CE]  cannot  find  symbol  unsafe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  hazardous  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  hazardous  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    final    Object    dangerous    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	44	None	replace
319	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getId());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass,  f.getId());	  final    Object    unsafe    =    f.get(f,    f.getId());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
320	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  unsafeClass.getId());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  unsafeClass.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  unsafeClass.getId());	  final    Object    unsafe    =    f.get(f,    f.getId());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
321	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  safeClass.getId());  [CE]  cannot  find  symbol  safeClass  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  safeClass.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  safeClass.getId());	  final    Object    unsafe    =    f.get(f,    f.getId());    	non-compiled	[CE]  cannot  find  symbol  safeClass	88	None	replace
322	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c,  f.getId());  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(c,  f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c,  f.getId());	  final    Object    unsafe    =    f.get(f,    f.getId());    	non-compiled	[CE]  cannot  find  symbol  c	88	None	replace
323	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  null));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  null));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  null));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-class   "));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
324	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  false));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  false));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  false));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-class   "));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
325	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  Class.class));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  Class.class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  Class.class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-class   "));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
326	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  true));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  true));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  true));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-class   "));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
327	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  c));  [CE]  cannot  find  symbol  c  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  c));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  c));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-class   "));    	non-compiled	[CE]  cannot  find  symbol  c	12	None	replace
328	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  unsafeClass));  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  unsafeClass));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  unsafeClass));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-class   "));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
329	[BUG]  [BUGGY]  Object  safe  =  f.get(unsafeClass);  [CE]  cannot  find  symbol  unsafe  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  safe  =  f.get(unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  safe  =  f.get(unsafeClass);	  Object    safe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	103	None	replace
330	[BUG]  [BUGGY]  Object  safe  =  f.get(c);  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  safe  =  f.get(c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  safe  =  f.get(c);	  Object    safe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  c	103	None	replace
331	[BUG]  [BUGGY]  Object  safe  =  f.get(null);  [CE]  cannot  find  symbol  unsafe  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  safe  =  f.get(null);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  safe  =  f.get(null);	  Object    safe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	103	None	replace
332	[BUG]  [BUGGY]  Object  safe  =  f.get(unsafe);  [CE]  cannot  find  symbol  unsafe  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  safe  =  f.get(unsafe);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  safe  =  f.get(unsafe);	  Object    safe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	103	None	replace
333	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	120	None	replace
334	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ",  c);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ",  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ",  c);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	120	None	replace
335	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeClass ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "safeClass ");	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	120	None	replace
336	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ",  false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ",  false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ",  false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	120	None	replace
337	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	120	None	replace
338	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(unsafeClass.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(unsafeClass.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(unsafeClass.getImplicitPrototype());	  final    Object    unsafe    =    f.find(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
339	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(unsafeClass,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(unsafeClass,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(unsafeClass,  f.getImplicitPrototype());	  final    Object    unsafe    =    f.find(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
340	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f,  f.getImplicitPrototype());	  final    Object    unsafe    =    f.find(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
341	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(null,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(null,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(null,  f.getImplicitPrototype());	  final    Object    unsafe    =    f.find(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
342	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f,  c.getImplicitPrototype());  [CE]  cannot  find  symbol  c  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f,  c.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f,  c.getImplicitPrototype());	  final    Object    unsafe    =    f.find(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  c	131	None	replace
343	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f.getImplicitPrototype(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f.getImplicitPrototype(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f.getImplicitPrototype(),  unsafeClass);	  final    Object    unsafe    =    f.find(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
344	[BUG]  [BUGGY]  final  Object  unsafe  =  this.f.get(f.getId());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  this.f.get(f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  this.f.get(f.getId());	  final    Object    unsafe    =    f.get(this.f.getId());    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
345	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getId(),  c);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getId(),  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getId(),  c);	  final    Object    unsafe    =    f.get(this.f.getId());    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
346	[BUG]  [BUGGY]  final  Object  unsafeClass  =  getConstructorId();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafeClass  =  getConstructorId();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafeClass  =  getConstructorId();	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	24	None	replace
347	[BUG]  [BUGGY]  Object  unsafeClass  =  getUnsafeClass();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getUnsafeClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getUnsafeClass();	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	24	None	replace
348	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getModule());  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f.getModule());	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	24	None	replace
349	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId().getObject();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId().getObject();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId().getObject();	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	24	None	replace
350	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  false));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  false));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  false));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeclass   "));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
351	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  null));  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  null));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  null));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeclass   "));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
352	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  Class.class));  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  Class.class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  Class.class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeclass   "));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
353	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  true));  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  true));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  true));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeclass   "));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafeclass   "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafeclass   "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeclass   "));    	compilable	  [FE]  AssertionFailedError  	15	1	replace
355	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafeclass   "));  [FE]  AssertionFailedError  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafeclass   "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafeclass   "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeclass   "));    	compilable	  [FE]  AssertionFailedError  	15	1	replace
356	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe_class "));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe_class "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe_class "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe_   "));    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
357	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe_object "));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe_object "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe_object "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe_   "));    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
358	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe_unsafe "));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe_unsafe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe_unsafe "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe_   "));    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
359	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ",  c);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ",  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ",  c);	  Object    unsafeClass    =    f.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	28	None	replace
360	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ",  false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ",  false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ",  false);	  Object    unsafeClass    =    f.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	28	None	replace
361	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ",  null);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ",  null);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ",  null);	  Object    unsafeClass    =    f.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	28	None	replace
362	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ",  Class.class);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ",  Class.class);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ",  Class.class);	  Object    unsafeClass    =    f.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	28	None	replace
363	[BUG]  [BUGGY]  final  Class  <?>  unsafe  =  f.get(f);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Class  <?>  unsafe  =  f.get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Class  <?>  unsafe  =  f.get(f);	  final    Object    unsafe    =    f.get(f);    Class    <?>    unsafe    =    f.get(f);    	non-compiled	[CE]  incompatible  types	47	None	replace
364	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c);  Class  <?>  unsafe  =  f.get(f);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(c);  Class  <?>  unsafe  =  f.get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c);  Class  <?>  unsafe  =  f.get(f);	  final    Object    unsafe    =    f.get(f);    Class    <?>    unsafe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  c	47	None	replace
365	[BUG]  [BUGGY]  static  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);	  final    Object    unsafe    =    f.get(f);    Class    <?>    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
366	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(unsafeClass);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(unsafeClass);	  final    Object    unsafe    =    f.get(f);    Class    <?>    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	47	None	replace
367	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(unsafe);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(unsafe);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(unsafe);	  final    Object    unsafe    =    f.get(f);    Class    <?>    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	47	None	replace
368	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getRawClass());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getRawClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getRawClass());	  final    Object    unsafe    =    f.get(f.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
369	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getRawClass());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getRawClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getRawClass());	  final    Object    unsafe    =    f.get(f.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
370	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getRawClass());  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getRawClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  c.getRawClass());	  final    Object    unsafe    =    f.get(f.getRawClass());    	non-compiled	[CE]  cannot  find  symbol  c	53	None	replace
371	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c.getRawClass());  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(c.getRawClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c.getRawClass());	  final    Object    unsafe    =    f.get(f.getRawClass());    	non-compiled	[CE]  cannot  find  symbol  c	53	None	replace
372	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getRawClass());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getRawClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass,  f.getRawClass());	  final    Object    unsafe    =    f.get(f.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
373	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  false));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  false));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  false));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeAllocator   "));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
374	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  null));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  null));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  null));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeAllocator   "));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
375	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  true));  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  true));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  true));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeAllocator   "));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
376	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "unsafeAllocator "));  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "unsafeAllocator "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "unsafeAllocator "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeAllocator   "));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
377	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",   "unsafeAllocator "));  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",   "unsafeAllocator "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",   "unsafeAllocator "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeAllocator   "));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
378	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator   "),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator   "),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator   "),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeAllocator   "));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
379	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f.get(f.getModule());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f.get(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f),  f.get(f.getModule());	  final    Object    unsafe    =    getConstructorId(f).get(f.getModule());    	non-compiled	[CE]  ';'  expected	96	None	replace
380	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f,  f.getModule());	  final    Object    unsafe    =    getConstructorId(f).get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
381	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  c.getModule());  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f,  c.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f,  c.getModule());	  final    Object    unsafe    =    getConstructorId(f).get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol  c	96	None	replace
382	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getModule(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getModule(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f.getModule(),  unsafeClass);	  final    Object    unsafe    =    getConstructorId(f).get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
383	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c).get(f.getModule());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c).get(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  c).get(f.getModule());	  final    Object    unsafe    =    getConstructorId(f).get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
384	[BUG]  [BUGGY]  final  Object  dangerous  =  f.get(f);  [CE]  cannot  find  symbol  unsafe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  dangerous  =  f.get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  dangerous  =  f.get(f);	  final    Object    unsafe    =    f.get(f);    final    Object    dangerous    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	51	None	replace
385	[BUG]  [BUGGY]  final  Object  hazardous  =  f.get(f);  [CE]  cannot  find  symbol  unsafe  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  hazardous  =  f.get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  hazardous  =  f.get(f);	  final    Object    unsafe    =    f.get(f);    final    Object    dangerous    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	51	None	replace
386	[BUG]  [BUGGY]  final  Object  dangerous  =  f.get(0);  [CE]  cannot  find  symbol  unsafe  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  dangerous  =  f.get(0);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  dangerous  =  f.get(0);	  final    Object    unsafe    =    f.get(f);    final    Object    dangerous    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	51	None	replace
387	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getDeclaringClass(),  unsafeClass);  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getDeclaringClass(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getDeclaringClass(),  unsafeClass);	  Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	54	None	replace
388	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getReturnType());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getReturnType());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getReturnType());	  Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
389	[BUG]  [BUGGY]  Object  unsafe  =  f.get(c.getDeclaringClass());  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(c.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(c.getDeclaringClass());	  Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  c	54	None	replace
390	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getInitializingClass());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getInitializingClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getInitializingClass());	  Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
391	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  unsafeClass);  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName(),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getName(),    c);    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	106	None	replace
392	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  constructorId);  [CE]  cannot  find  symbol  constructorId  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  constructorId);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName(),  constructorId);	  final    Object    unsafe    =    f.get(f.getName(),    c);    	non-compiled	[CE]  cannot  find  symbol  constructorId	106	None	replace
393	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  safeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName(),  safeClass);	  final    Object    unsafe    =    f.get(f.getName(),    c);    	non-compiled	[CE]  cannot  find  symbol  safeClass	106	None	replace
394	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  null);  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  null);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName(),  null);	  final    Object    unsafe    =    f.get(f.getName(),    c);    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	106	None	replace
395	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  UnsafeClass.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  UnsafeClass.class);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName(),  UnsafeClass.class);	  final    Object    unsafe    =    f.get(f.getName(),    c);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
396	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  this);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName(),  this);	  final    Object    unsafe    =    f.get(f.getName(),    c);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	106	None	replace
397	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe   ",  true));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe   ",  true));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe   ",  true));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   ",    false));    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
398	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "safe   ",  false));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "safe   ",  false));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "safe   ",  false));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   ",    false));    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
399	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe   ",  false));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe   ",  false));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe   ",  false));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   ",    false));    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
400	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe ",  false));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe ",  false));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe ",  false));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   ",    false));    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
401	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe   ",  false),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe   ",  false),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe   ",  false),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   ",    false));    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
402	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  f.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
403	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c.getImplicitPrototype());  [CE]  cannot  find  symbol  c  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  c.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  c	111	None	replace
404	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype(),  unsafeClass);	  final    Object    unsafe    =    getConstructorId(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
405	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  constructorId.getImplicitPrototype());  [CE]  cannot  find  symbol  constructorId  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  constructorId.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  constructorId.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  constructorId	111	None	replace
406	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(c.getImplicitPrototype());  [CE]  cannot  find  symbol  c  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(c.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(c.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  c	111	None	replace
407	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  n.getImplicitPrototype());  [CE]  cannot  find  symbol  n  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  n.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  n.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  n	111	None	replace
408	[BUG]  [BUGGY]  final  Object  illegal  =  f.get(f.getDeclaringClass());  [CE]  cannot  find  symbol  unsafe  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  illegal  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  illegal  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    illegal    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	107	None	replace
409	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  final  Object  illegal  =  f.get(f.getDeclaringClass());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  final  Object  illegal  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  final  Object  illegal  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    illegal    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  incompatible  types	107	None	replace
410	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f).get(f);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f).get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f).get(f);	  final    Object    unsafe    =    f.get(f);    final    Object    unsafe    =    f.get(f).get(f);    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
411	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(0).get(f);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(0).get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(0).get(f);	  final    Object    unsafe    =    f.get(f);    final    Object    unsafe    =    f.get(f).get(f);    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
412	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f).get(f);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f).get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f).get(f);	  final    Object    unsafe    =    f.get(f);    final    Object    unsafe    =    f.get(f).get(f);    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
413	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f).get(null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f).get(null);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f).get(null);	  final    Object    unsafe    =    f.get(f);    final    Object    unsafe    =    f.get(f).get(f);    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
414	[BUG]  [BUGGY]  static  final  Object  unsafe  =  f.get(f).get(f);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  unsafe  =  f.get(f).get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  unsafe  =  f.get(f).get(f);	  final    Object    unsafe    =    f.get(f);    final    Object    unsafe    =    f.get(f).get(f);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
415	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f).get(c);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f).get(c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f).get(c);	  final    Object    unsafe    =    f.get(f);    final    Object    unsafe    =    f.get(f).get(f);    	non-compiled	[CE]  cannot  find  symbol  c	149	None	replace
416	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  c.getAccessible());  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  c.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  c.getAccessible());	  final    Object    unsafe    =    f.get(null,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  c	4	None	replace
417	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(null,  f.getAccessible());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.get(null,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(null,  f.getAccessible());	  final    Object    unsafe    =    f.get(null,    f.getAccessible());    	non-compiled	[CE]  ';'  expected	4	None	replace
418	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  unsafeClass.getAccessible());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  unsafeClass.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  unsafeClass.getAccessible());	  final    Object    unsafe    =    f.get(null,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
419	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.toString());  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  f.toString());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.toString());	  final    Object    unsafe    =    f.get(null,    f.getAccessible());    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	4	None	replace
420	[BUG]  [BUGGY]  final  Object  unsafe  =  this.f.get(null,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  this.f.get(null,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  this.f.get(null,  f.getAccessible());	  final    Object    unsafe    =    f.get(null,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
421	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getAccessibility());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getAccessibility());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.getAccessibility());	  final    Object    unsafe    =    f.get(null,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
422	[BUG]  [BUGGY]  final  Object  safe  =  f.get(f.getClass());  [CE]  cannot  find  symbol  unsafe  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  safe  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  safe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    safe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	22	None	replace
423	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    safe    =    f.get(f.getClass());    	non-compiled	[CE]  incompatible  types	22	None	replace
424	[BUG]  [BUGGY]  Object  safe  =  f.get(f.getClass());  [CE]  cannot  find  symbol  unsafe  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  safe  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  safe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    safe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	22	None	replace
425	[BUG]  [BUGGY]  static  final  Object  safe  =  f.get(f.getClass());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  safe  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  safe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    safe    =    f.get(f.getClass());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
426	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getName(),  unsafeClass);  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getName(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getName(),  unsafeClass);	  Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	67	None	replace
427	[BUG]  [BUGGY]  Object  unsafe  =  f.get(c.getName());  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(c.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(c.getName());	  Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  c	67	None	replace
428	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getQualifiedName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getQualifiedName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getQualifiedName());	  Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
429	[BUG]  [BUGGY]  Object  unsafe  =  f.get(unsafeClass.getName());  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(unsafeClass.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(unsafeClass.getName());	  Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	67	None	replace
430	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getName()  + ".class ");  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getName()  + ".class ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getName()  + ".class ");	  Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	67	None	replace
431	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(unsafeClass.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(unsafeClass.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImplicitPrototype(unsafeClass.getImplicitPrototype());	  final    Object    unsafe    =    f.setImplicitPrototype(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
432	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(f,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(f,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImplicitPrototype(f,  f.getImplicitPrototype());	  final    Object    unsafe    =    f.setImplicitPrototype(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
433	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(null,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(null,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImplicitPrototype(null,  f.getImplicitPrototype());	  final    Object    unsafe    =    f.setImplicitPrototype(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
434	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(unsafeClass,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(unsafeClass,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImplicitPrototype(unsafeClass,  f.getImplicitPrototype());	  final    Object    unsafe    =    f.setImplicitPrototype(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
435	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(this.f.getImplicitPrototype());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(this.f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImplicitPrototype(this.f.getImplicitPrototype());	  final    Object    unsafe    =    f.setImplicitPrototype(f.getImplicitPrototype());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	129	None	replace
436	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(inferredClass.getImplicitPrototype());  [CE]  cannot  find  symbol  inferredClass  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(inferredClass.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImplicitPrototype(inferredClass.getImplicitPrototype());	  final    Object    unsafe    =    f.setImplicitPrototype(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  inferredClass	129	None	replace
437	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  incompatible  types	17	None	replace
438	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c.getClass());  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(c.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  c	17	None	replace
439	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe_object "));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe_object "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe_object "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
440	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe_class "));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe_class "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe_class "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
441	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe_tag "));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe_tag "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe_tag "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
442	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe_f "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe_f "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe_   "));    	compilable	  [FE]  AssertionFailedError  	13	1	replace
443	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe_f "));  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe_f "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe_f "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe_   "));    	compilable	  [FE]  AssertionFailedError  	13	1	replace
444	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(unsafeClass.getAccessible());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(unsafeClass.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(unsafeClass.getAccessible());	  final    Object    unsafe    =    f.remove(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
445	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getConstructorId().remove(f.getAccessible());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.getConstructorId().remove(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.getConstructorId().remove(f.getAccessible());	  final    Object    unsafe    =    f.remove(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
446	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f,  f.getAccessible());	  final    Object    unsafe    =    f.remove(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
447	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getRemove(f.getAccessible());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.getRemove(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.getRemove(f.getAccessible());	  final    Object    unsafe    =    f.remove(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
448	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredClass());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getDeclaredClass());	  final    Object    unsafe    =    f.get(f.getDeclaredClass());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
449	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getDeclaredClass());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getDeclaredClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass,  f.getDeclaredClass());	  final    Object    unsafe    =    f.get(f.getDeclaredClass());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
450	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredClass());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getDeclaredClass());	  final    Object    unsafe    =    f.get(f.getDeclaredClass());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
451	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getDeclaredClass());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getDeclaredClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.getDeclaredClass());	  final    Object    unsafe    =    f.get(f.getDeclaredClass());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
452	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c.getDeclaredClass());  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(c.getDeclaredClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c.getDeclaredClass());	  final    Object    unsafe    =    f.get(f.getDeclaredClass());    	non-compiled	[CE]  cannot  find  symbol  c	63	None	replace
453	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getDeclaredClass());  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getDeclaredClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  c.getDeclaredClass());	  final    Object    unsafe    =    f.get(f.getDeclaredClass());    	non-compiled	[CE]  cannot  find  symbol  c	63	None	replace
454	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getQualifiedName());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getQualifiedName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getQualifiedName());	  final    Object    unsafe    =    f.get(f.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
455	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getQualifiedName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getQualifiedName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getQualifiedName());	  final    Object    unsafe    =    f.get(f.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
456	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c.getQualifiedName());  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(c.getQualifiedName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c.getQualifiedName());	  final    Object    unsafe    =    f.get(f.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  c	94	None	replace
457	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getQualifiedName());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getQualifiedName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getQualifiedName());	  final    Object    unsafe    =    f.get(f.getQualifiedName());    	non-compiled	[CE]  ';'  expected	94	None	replace
458	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getQualifiedName()  + ": ");  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getQualifiedName()  + ": ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getQualifiedName()  + ": ");	  final    Object    unsafe    =    f.get(f.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
459	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getQualifiedName(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getQualifiedName(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getQualifiedName(),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
460	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  ';'  expected	132	None	replace
461	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  ';'  expected	132	None	replace
462	[BUG]  [BUGGY]  if(f.getDeclaringClass()  ==  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()  ==  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()  ==  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
463	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
464	[BUG]  [BUGGY]  final  Object  dangerous  =  f.get(f.getDeclaringClass());  [CE]  cannot  find  symbol  unsafe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  dangerous  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  dangerous  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    dangerous    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	38	None	replace
465	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    dangerous    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  incompatible  types	38	None	replace
466	[BUG]  [BUGGY]  final  Object  hazardous  =  f.get(f.getDeclaringClass());  [CE]  cannot  find  symbol  unsafe  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  hazardous  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  hazardous  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    dangerous    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	38	None	replace
467	[BUG]  [BUGGY]  final  Object  unsafe  =  c.get(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  c.get(f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  c.get(f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(c.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
468	[BUG]  [BUGGY]  final  Object  dangerous  =  f.get(f.getClass());  [CE]  cannot  find  symbol  unsafe  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  dangerous  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  dangerous  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    dangerous    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	112	None	replace
469	[BUG]  [BUGGY]  final  Object  hazardous  =  f.get(f.getClass());  [CE]  cannot  find  symbol  unsafe  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  hazardous  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  hazardous  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    dangerous    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	112	None	replace
470	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype()),  f.getImplicitPrototype();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype()),  f.getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitPrototype()),  f.getImplicitPrototype();	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()).getImplicitPrototype();    	non-compiled	[CE]  ';'  expected	79	None	replace
471	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype())!=null?  f.getImplicitPrototype()  :  null;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype())!=null?  f.getImplicitPrototype()  :  null;  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitPrototype())!=null?  f.getImplicitPrototype()  :  null;	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()).getImplicitPrototype();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
472	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype())?  null  :  f.getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype())?  null  :  f.getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitPrototype())?  null  :  f.getImplicitPrototype();	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()).getImplicitPrototype();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
473	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype())&  f.getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype())&  f.getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitPrototype())&  f.getImplicitPrototype();	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()).getImplicitPrototype();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
474	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype(),  unsafeClass).getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype(),  unsafeClass).getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitPrototype(),  unsafeClass).getImplicitPrototype();	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()).getImplicitPrototype();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
475	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getImplicitPrototype()).getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getImplicitPrototype()).getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getImplicitPrototype()).getImplicitPrototype();	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()).getImplicitPrototype();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
476	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafe   ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafe   ");	  Object    unsafeClass    =    f.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	29	None	replace
477	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "misc.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "misc.Unsafe ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "misc.Unsafe ");	  Object    unsafeClass    =    f.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	29	None	replace
478	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");	  Object    unsafeClass    =    f.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	29	None	replace
479	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafe_class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafe_class ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafe_class ");	  Object    unsafeClass    =    f.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	29	None	replace
480	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  constructorId.getId());  [CE]  cannot  find  symbol  constructorId  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  constructorId.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  constructorId.getId());	  final    Object    unsafe    =    f.get(f,    c.getId());    	non-compiled	[CE]  cannot  find  symbol  constructorId	90	None	replace
481	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getDeclaredField());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getDeclaredField());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getDeclaredField());	  final    Object    unsafe    =    f,    f.get(f.getAccessible());    	non-compiled	[CE]  ';'  expected	3	None	replace
482	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getClass());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getClass());	  final    Object    unsafe    =    f,    f.get(f.getAccessible());    	non-compiled	[CE]  ';'  expected	3	None	replace
483	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getReturnType());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getReturnType());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getReturnType());	  final    Object    unsafe    =    f.get(f.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
484	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getReturnType());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getReturnType());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getReturnType());	  final    Object    unsafe    =    f.get(f.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
485	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c.getReturnType());  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(c.getReturnType());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c.getReturnType());	  final    Object    unsafe    =    f.get(f.getReturnType());    	non-compiled	[CE]  cannot  find  symbol  c	52	None	replace
486	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getReturnType());  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getReturnType());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  c.getReturnType());	  final    Object    unsafe    =    f.get(f.getReturnType());    	non-compiled	[CE]  cannot  find  symbol  c	52	None	replace
487	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getReturnType(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getReturnType(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getReturnType(),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
488	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getReturnType()));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getReturnType()));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getReturnType()));	  final    Object    unsafe    =    f.get(f.getReturnType());    	non-compiled	[CE]  ';'  expected	52	None	replace
489	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getUnsafeParentPointer());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getUnsafeParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getUnsafeParentPointer());	  final    Object    unsafe    =    f.get(c.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
490	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediatePosition());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediatePosition());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediatePosition());	  final    Object    unsafe    =    f.get(c.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
491	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    final  Object  unsafe  =  f.get(f.getName()  +   ":   ");	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	92	None	add
492	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  +   ": ".);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  +   ": ".);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    final  Object  unsafe  =  f.get(f.getName()  +   ": ".);	  	non-compiled	[CE]  <identifier>  expected	92	None	add
493	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  +   ":. ");  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  +   ":. ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    final  Object  unsafe  =  f.get(f.getName()  +   ":. ");	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	92	None	add
494	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  + ".:   ");  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  + ".:   ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    final  Object  unsafe  =  f.get(f.getName()  + ".:   ");	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	92	None	add
495	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  + ",:   ");  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  + ",:   ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    final  Object  unsafe  =  f.get(f.getName()  + ",:   ");	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	92	None	add
496	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  +   ": ",);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  +   ": ",);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    final  Object  unsafe  =  f.get(f.getName()  +   ": ",);	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
497	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f,  c);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f,  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f,  c);	  Object    unsafeClass    =    getConstructorId(f);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	118	None	replace
498	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(c);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(c);	  Object    unsafeClass    =    getConstructorId(f);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	118	None	replace
499	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getSuperclass());  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getSuperclass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f.getSuperclass());	  Object    unsafeClass    =    getConstructorId(f);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	118	None	replace
500	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f,  false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f,  false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f,  false);	  Object    unsafeClass    =    getConstructorId(f);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	118	None	replace
501	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  path.getModule());  [CE]  cannot  find  symbol  path  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  path.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  path.getModule());	  final    Object    unsafe    =    f.get(f,    c.getModule());    	non-compiled	[CE]  cannot  find  symbol  path	61	None	replace
502	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  c.getId());  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  c.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  c.getId());	  final    Object    unsafe    =    f.get(null,    f.getId());    	non-compiled	[CE]  cannot  find  symbol  c	89	None	replace
503	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.toId());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  f.toId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.toId());	  final    Object    unsafe    =    f.get(null,    f.getId());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
504	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getConstructorId());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getConstructorId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.getConstructorId());	  final    Object    unsafe    =    f.get(null,    f.getId());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
505	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  unsafeClass.getId());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  unsafeClass.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  unsafeClass.getId());	  final    Object    unsafe    =    f.get(null,    f.getId());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
506	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getName());  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.getName());	  final    Object    unsafe    =    f.get(null,    f.getId());    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	89	None	replace
507	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(f);  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(f);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(f);  }	  final    Object    unsafe    =    f.get(f);    Final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	46	None	replace
508	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.get(f);  }	  final    Object    unsafe    =    f.get(f);    Final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
509	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(f);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(f);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.get(0);  final  Object  unsafe  =  f.get(f);  }	  final    Object    unsafe    =    f.get(f);    Final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
510	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  }  else  {  final  Object  unsafe  =  f.get(f);  }  [CE]  cannot  find  symbol  unsafe  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  }  else  {  final  Object  unsafe  =  f.get(f);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  }  else  {  final  Object  unsafe  =  f.get(f);  }	  final    Object    unsafe    =    f.get(f);    Final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	46	None	replace
511	[BUG]  [BUGGY]  final  Object  unsafe  =  constructorId.get(f);  [CE]  cannot  find  symbol  constructorId  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  constructorId.get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  constructorId.get(f);	  final    Object    unsafe    =    f.get(constructorId);    	non-compiled	[CE]  cannot  find  symbol  constructorId	10	None	replace
512	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.constructorId);  [CE]  cannot  find  symbol  constructorId  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.constructorId);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.constructorId);	  final    Object    unsafe    =    f.get(constructorId);    	non-compiled	[CE]  cannot  find  symbol  constructorId	10	None	replace
513	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getName(),  c);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getName(),  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f.getName(),  c);	  Object    unsafeClass    =    getConstructorId(f.getName());    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	122	None	replace
514	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getName()  + ": ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getName()  + ": ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f.getName()  + ": ");	  Object    unsafeClass    =    getConstructorId(f.getName());    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	122	None	replace
515	[BUG]  [BUGGY]  final  Object  unsafeClass  =  getConstructorId(f.getName());  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafeClass  =  getConstructorId(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafeClass  =  getConstructorId(f.getName());	  Object    unsafeClass    =    getConstructorId(f.getName());    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	122	None	replace
516	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f,  c.getName());  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f,  c.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f,  c.getName());	  Object    unsafeClass    =    getConstructorId(f.getName());    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	122	None	replace
517	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(c.getName());  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(c.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(c.getName());	  Object    unsafeClass    =    getConstructorId(f.getName());    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	122	None	replace
518	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getName())+  1;  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getName())+  1;  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f.getName())+  1;	  Object    unsafeClass    =    getConstructorId(f.getName());    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	122	None	replace
519	[BUG]  [BUGGY]  final  Object  safe  =  f.get(f);  [CE]  cannot  find  symbol  unsafe  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  safe  =  f.get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  safe  =  f.get(f);	  final    Object    unsafe    =    f.get(f);    final    Object    safe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	50	None	replace
520	[BUG]  [BUGGY]  final  Object  safe  =  f.get(0);  [CE]  cannot  find  symbol  unsafe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  safe  =  f.get(0);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  safe  =  f.get(0);	  final    Object    unsafe    =    f.get(f);    final    Object    safe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	50	None	replace
521	[BUG]  [BUGGY]  static  final  Object  safe  =  f.get(f);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  safe  =  f.get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  safe  =  f.get(f);	  final    Object    unsafe    =    f.get(f);    final    Object    safe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
522	[BUG]  [BUGGY]  static  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    Class    <?>    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
523	[BUG]  [BUGGY]  final  Class  <?>  unsafe  =  f.get(f.getClass());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Class  <?>  unsafe  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Class  <?>  unsafe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    Class    <?>    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  incompatible  types	19	None	replace
524	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(c.getClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(c.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(c.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    Class    <?>    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	19	None	replace
525	[BUG]  [BUGGY]  UnsafeAllocator  unsafe  =  f.get(f.getName());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  UnsafeAllocator  unsafe  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	UnsafeAllocator  unsafe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  incompatible  types	42	None	replace
526	[BUG]  [BUGGY]  Field  f  =  f.get(f.getName());  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Field  f  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Field  f  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	42	None	replace
527	[BUG]  [BUGGY]  null  =  f.get(f.getName());  [CE]  unexpected  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  null  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	null  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  unexpected  type	42	None	replace
528	[BUG]  [BUGGY]  final  Object  unsafe  =  unsafeClass.get(f.getId());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  unsafeClass.get(f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  unsafeClass.get(f.getId());	  final    Object    unsafe    =    f.get(unsafeClass.getId());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
529	[BUG]  [BUGGY]  final  Object  unsafe  =  safeClass.get(f.getId());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  safeClass.get(f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  safeClass.get(f.getId());	  final    Object    unsafe    =    f.get(unsafeClass.getId());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
530	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  c.getId());  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  c.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass,  c.getId());	  final    Object    unsafe    =    f.get(unsafeClass.getId());    	non-compiled	[CE]  cannot  find  symbol  c	86	None	replace
531	[BUG]  [BUGGY]  final  Object  unsafe  =  unsafeClass.get(unsafeClass.getId());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  unsafeClass.get(unsafeClass.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  unsafeClass.get(unsafeClass.getId());	  final    Object    unsafe    =    f.get(unsafeClass.getId());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
532	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  final  Object  unsafe  =  f.get(unsafeClass);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  final  Object  unsafe  =  f.get(unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(unsafeClass);    final  Object  unsafe  =  f.get(unsafeClass);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	7	None	add
533	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  Final  Object  unsafe  =  f.get(unsafeClass);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  Final  Object  unsafe  =  f.get(unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(unsafeClass);    Final  Object  unsafe  =  f.get(unsafeClass);	  	non-compiled	[CE]  ';'  expected	7	None	add
534	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  Class  <?>  unsafe  =  f.get(unsafeClass);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  Class  <?>  unsafe  =  f.get(unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(unsafeClass);    Class  <?>  unsafe  =  f.get(unsafeClass);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	7	None	add
535	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  Object  unsafe  =  f.get(unsafeClass);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  Object  unsafe  =  f.get(unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(unsafeClass);    Object  unsafe  =  f.get(unsafeClass);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	7	None	add
536	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  static  final  Object  unsafe  =  f.get(unsafeClass);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  static  final  Object  unsafe  =  f.get(unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(unsafeClass);    static  final  Object  unsafe  =  f.get(unsafeClass);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
537	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  final  Object  safe  =  f.get(unsafeClass);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  final  Object  safe  =  f.get(unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(unsafeClass);    final  Object  safe  =  f.get(unsafeClass);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	7	None	add
538	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  this.f.getImmediateParentPointer());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  this.f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  this.f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f,    f.getImmediateParentPointer());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	70	None	replace
539	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  factory.getImmediateParentPointer());  [CE]  cannot  find  symbol  factory  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  factory.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  factory.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f,    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  factory	70	None	replace
540	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	non-compiled	[CE]  incompatible  types	147	None	replace
541	[BUG]  [BUGGY]  static  final  Object  unsafe  =  f.get(f.getClass()).getClass();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  unsafe  =  f.get(f.getClass()).getClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  unsafe  =  f.get(f.getClass()).getClass();	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
542	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.getClass().getClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.getClass().getClass();	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	compilable	  [FE]  AssertionFailedError  	147	3	replace
543	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getClass().getClass();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.getClass().getClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.getClass().getClass();	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	compilable	  [FE]  AssertionFailedError  	147	3	replace
544	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");  f.setAccessible(true);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	119	None	replace
545	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");  f.setAccessible(true);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	119	None	replace
546	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeAllocator ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafeAllocator ");	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	27	None	replace
547	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "this.unsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "this.unsafeAllocator ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "this.unsafeAllocator ");	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	27	None	replace
548	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ",  false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ",  false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ",  false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	27	None	replace
549	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theunsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theunsafeAllocator ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theunsafeAllocator ");	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	27	None	replace
550	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeAllocator ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeAllocator ");	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	27	None	replace
551	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ",  c);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ",  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ",  c);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	27	None	replace
552	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  false));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  false));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  false));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeClass   "));    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
553	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  null));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  null));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  null));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeClass   "));    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
554	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  Class.class));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  Class.class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  Class.class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeClass   "));    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
555	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  true));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  true));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  true));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeClass   "));    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
556	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafeClass   "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafeClass   "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeClass   "));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
557	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafeClass   "));  [FE]  AssertionFailedError  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafeClass   "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafeClass   "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeClass   "));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
558	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  unsafeClass));  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  unsafeClass));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  unsafeClass));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeClass   "));    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
559	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  f.getAccessible());	  final    Object    unsafe    =    getConstructorId(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
560	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c.getAccessible());  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  c.getAccessible());	  final    Object    unsafe    =    getConstructorId(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  c	115	None	replace
561	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getAccessible(),  c);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getAccessible(),  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getAccessible(),  c);	  final    Object    unsafe    =    getConstructorId(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
562	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  path.getImplicitPrototype());  [CE]  cannot  find  symbol  path  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  path.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  path.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f,    c.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  path	78	None	replace
563	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  UnsafeClass.class.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  UnsafeClass.class.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  UnsafeClass.class.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f,    c.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
564	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  unsafeClass);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe       "),    unsafeClass);    	non-compiled	[CE]  	125	None	replace
565	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  unsafeClass));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  unsafeClass));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  unsafeClass));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe       "),    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
566	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  unsafeClass));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  unsafeClass));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  unsafeClass));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe       "),    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
567	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  unsafeClass));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  unsafeClass));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  unsafeClass));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe       "),    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
568	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe, "),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe, "),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe, "),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe       "),    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
569	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(f,  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(f,  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImmediateParentPointer(f,  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.setImmediateParentPointer(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
570	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(f,  c.getImmediateParentPointer());  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(f,  c.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImmediateParentPointer(f,  c.getImmediateParentPointer());	  final    Object    unsafe    =    f.setImmediateParentPointer(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  c	141	None	replace
571	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(f);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImmediateParentPointer(f);	  final    Object    unsafe    =    f.setImmediateParentPointer(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
572	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(null,  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(null,  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImmediateParentPointer(null,  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.setImmediateParentPointer(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
573	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(this.f.getImmediateParentPointer());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(this.f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImmediateParentPointer(this.f.getImmediateParentPointer());	  final    Object    unsafe    =    f.setImmediateParentPointer(f.getImmediateParentPointer());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	141	None	replace
574	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(unsafeClass.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(unsafeClass.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImmediateParentPointer(unsafeClass.getImmediateParentPointer());	  final    Object    unsafe    =    f.setImmediateParentPointer(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
575	[BUG]  [BUGGY]  final  Object  illegal  =  f.get(f.getClass());  [CE]  cannot  find  symbol  unsafe  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  illegal  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  illegal  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    illegal    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	113	None	replace
576	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    illegal    =    f.get(f.getClass());    	non-compiled	[CE]  incompatible  types	113	None	replace
577	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "sun.safe "));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "sun.safe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "sun.safe "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "sun.safe   "));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
578	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe ",  null));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe ",  null));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe ",  null));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "sun.safe   "));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
579	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe   "),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe   "),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe   "),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "sun.safe   "));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
580	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe-class "));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe-class "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe-class "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "sun.safe   "));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
581	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getImmediateClass();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getImmediateClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getImmediateClass();	  Object    unsafeClass    =    f.getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	23	None	replace
582	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getConstructor();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getConstructor();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getConstructor();	  Object    unsafeClass    =    f.getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	23	None	replace
583	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getImplicitConstructor();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getImplicitConstructor();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getImplicitConstructor();	  Object    unsafeClass    =    f.getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	23	None	replace
584	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getUnsafeClass();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getUnsafeClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getUnsafeClass();	  Object    unsafeClass    =    f.getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	23	None	replace
585	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass "));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass "));	  Object    unsafe    =    f.get(unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
586	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe "));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getDeclaredField( "unsafe "));	  Object    unsafe    =    f.get(unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
587	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  Unsafe.class));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  Unsafe.class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  Unsafe.class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   ",    c));    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
588	[BUG]  [BUGGY]  final  Object  safe  =  f.get(f.getDeclaringClass());  [CE]  cannot  find  symbol  unsafe  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  safe  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  safe  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    safe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	36	None	replace
589	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    safe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  incompatible  types	36	None	replace
590	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.getDeclaringClass();  final  Object  safe  =  f.get(f.getDeclaringClass());  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.getDeclaringClass();  final  Object  safe  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.getDeclaringClass();  final  Object  safe  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    safe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	36	None	replace
591	[BUG]  [BUGGY]  Object  safe  =  f.get(f.getDeclaringClass());  [CE]  cannot  find  symbol  unsafe  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  safe  =  f.get(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  safe  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    safe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	36	None	replace
592	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }	  final    Object    unsafe    =    f.get(f.getName());    Final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	40	None	replace
593	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    Final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	40	None	replace
594	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }	  final    Object    unsafe    =    f.get(f.getName());    Final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
595	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  c.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafeClass  =  c.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafeClass  =  c.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);	  Class    <?>    unsafeClass    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	25	None	replace
596	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);	  Class    <?>    unsafeClass    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	25	None	replace
597	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);	  Class    <?>    unsafeClass    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	25	None	replace
598	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);	  Class    <?>    unsafeClass    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	25	None	replace
599	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(unsafeClass!=  null)  {  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(unsafeClass!=  null)  {  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }	  Class    <?>    unsafeClass    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	25	None	replace
600	[BUG]  [BUGGY]  final  Object  unsafe  =  unsafeClass.get(f.getModule());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  unsafeClass.get(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  unsafeClass.get(f.getModule());	  final    Object    unsafe    =    f.get(unsafeClass.getModule());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
601	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(nullClass.getModule());  [CE]  cannot  find  symbol  nullClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(nullClass.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(nullClass.getModule());	  final    Object    unsafe    =    f.get(unsafeClass.getModule());    	non-compiled	[CE]  cannot  find  symbol  nullClass	58	None	replace
602	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().get(f,  f.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId().get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
603	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f,  c.getImplicitPrototype());  [CE]  cannot  find  symbol  c  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f,  c.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().get(f,  c.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId().get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  c	110	None	replace
604	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f,  constructorId.getImplicitPrototype());  [CE]  cannot  find  symbol  constructorId  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f,  constructorId.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().get(f,  constructorId.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId().get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  constructorId	110	None	replace
605	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f.getImplicitPrototype(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f.getImplicitPrototype(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().get(f.getImplicitPrototype(),  unsafeClass);	  final    Object    unsafe    =    getConstructorId().get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
606	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().get(f);	  final    Object    unsafe    =    getConstructorId().get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
607	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().get(c.getImplicitPrototype());  [CE]  cannot  find  symbol  c  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().get(c.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().get(c.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId().get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  c	110	None	replace
608	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  f.getModule());	  final    Object    unsafe    =    getConstructorId(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
609	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c.getModule());  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  c.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  c.getModule());	  final    Object    unsafe    =    getConstructorId(f.getModule());    	non-compiled	[CE]  cannot  find  symbol  c	98	None	replace
610	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getModule(),  c);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getModule(),  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getModule(),  c);	  final    Object    unsafe    =    getConstructorId(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
611	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getModule(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getModule(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getModule(),  unsafeClass);	  final    Object    unsafe    =    getConstructorId(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
612	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  config.getModule());  [CE]  cannot  find  symbol  config  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  config.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  config.getModule());	  final    Object    unsafe    =    getConstructorId(f.getModule());    	non-compiled	[CE]  cannot  find  symbol  config	98	None	replace
613	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  constructorId.getModule());  [CE]  cannot  find  symbol  constructorId  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  constructorId.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  constructorId.getModule());	  final    Object    unsafe    =    getConstructorId(f.getModule());    	non-compiled	[CE]  cannot  find  symbol  constructorId	98	None	replace
614	[BUG]  [BUGGY]  final  Object  unsafe  =  safeClass.get(f.getAccessible());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  safeClass.get(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  safeClass.get(f.getAccessible());	  final    Object    unsafe    =    f.get(safeClass.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
615	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(this.safeClass.getAccessible());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(this.safeClass.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(this.safeClass.getAccessible());	  final    Object    unsafe    =    f.get(safeClass.getAccessible());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	116	None	replace
616	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(defaultClass.getAccessible());  [CE]  cannot  find  symbol  defaultClass  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(defaultClass.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(defaultClass.getAccessible());	  final    Object    unsafe    =    f.get(safeClass.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  defaultClass	116	None	replace
617	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null.getAccessible());  [CE]  <null>  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null.getAccessible());	  final    Object    unsafe    =    f.get(safeClass.getAccessible());    	non-compiled	[CE]  <null>  cannot  be  dereferenced	116	None	replace
618	[BUG]  [BUGGY]  final  Object  unsafe  =  unsafeClass.get(f.getAccessible());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  unsafeClass.get(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  unsafeClass.get(f.getAccessible());	  final    Object    unsafe    =    f.get(unsafeClass.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
619	[BUG]  [BUGGY]  final  Object  unsafe  =  unsafeClass.get(unsafeClass.getAccessible());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  unsafeClass.get(unsafeClass.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  unsafeClass.get(unsafeClass.getAccessible());	  final    Object    unsafe    =    f.get(unsafeClass.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
620	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe ",  c));  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe ",  c));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe ",  c));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "this.safe   "));    	non-compiled	[CE]  cannot  find  symbol  c	82	None	replace
621	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	35	None	replace
622	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	35	None	replace
623	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	35	None	replace
624	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeFactory.getImmediateParentPointer());  [CE]  cannot  find  symbol  unsafeFactory  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeFactory.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeFactory.getImmediateParentPointer());	  final    Object    unsafe    =    this.f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  unsafeFactory	74	None	replace
625	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  safeClass.getImmediateParentPointer());  [CE]  cannot  find  symbol  safeClass  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  safeClass.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  safeClass.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(null,    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  safeClass	72	None	replace
626	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.safe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.safe.class ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sun.safe.class ");	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	120	None	replace
627	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDefinedClass());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDefinedClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDefinedClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    illegal    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
628	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getUnsafeClass());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getUnsafeClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getUnsafeClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    illegal    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
629	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Class    <?>    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	34	None	replace
630	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- "),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- "),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- "),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-   "));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
631	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- ")));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- ")));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- ")));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-   "));    	non-compiled	[CE]  	16	None	replace
632	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun_safe "));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun_safe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "sun_safe "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe_   "));    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
633	[BUG]  [BUGGY]  Object  unsafe  =  f.get(safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(safeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(safeClass);	  Object    unsafe    =    f.get(c);    	non-compiled	[CE]  cannot  find  symbol  safeClass	65	None	replace
634	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  [CE]  cannot  find  symbol  unsafe  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    safe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	22	None	replace
635	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    safe    =    f.get(f.getClass());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	22	None	replace
636	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    safe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	22	None	replace
637	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    safe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	22	None	replace
638	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeClass ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeClass ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "safeClass ");  f.setAccessible(true);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	119	None	replace
639	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "null ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "null ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "null ");  f.setAccessible(true);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	119	None	replace
640	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }	  final    Object    unsafe    =    f.get(f.getName());    Final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	40	None	replace
641	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getName());    Final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	40	None	replace
642	[BUG]  [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }	  final    Object    unsafe    =    f.get(f.getName());    Final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	40	None	replace
643	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getName());    Final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	40	None	replace
644	[BUG]  [BUGGY]  final  Object  dangerous  =  f.get(unsafeClass);  [CE]  cannot  find  symbol  unsafe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  dangerous  =  f.get(unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  dangerous  =  f.get(unsafeClass);	  final    Object    unsafe    =    f.get(f);    final    Object    dangerous    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	51	None	replace
645	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass   "),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass   "),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass   "),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeClass   "));    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
646	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  n.getAccessible());  [CE]  cannot  find  symbol  n  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  n.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  n.getAccessible());	  final    Object    unsafe    =    getConstructorId(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  n	115	None	replace
647	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	147	None	replace
648	[BUG]  [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	147	None	replace
649	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	147	None	replace
650	[BUG]  [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	147	None	replace
651	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	147	None	replace
652	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(safeClass.getAccessible());  [CE]  cannot  find  symbol  safeClass  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(safeClass.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(safeClass.getAccessible());	  final    Object    unsafe    =    f.find(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  safeClass	128	None	replace
653	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  getConstructorId().get(f.getModule());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  getConstructorId().get(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  getConstructorId().get(f.getModule());	  final    Object    unsafe    =    f,    f.get(f.getModule());    	non-compiled	[CE]  ';'  expected	59	None	replace
654	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  getConstructorId(f.getModule());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  getConstructorId(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  getConstructorId(f.getModule());	  final    Object    unsafe    =    f,    f.get(f.getModule());    	non-compiled	[CE]  ';'  expected	59	None	replace
655	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype()).getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype()).getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype()).getImplicitPrototype();	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()).getImplicitPrototype();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
656	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype()).getImplicitInstance();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype()).getImplicitInstance();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitPrototype()).getImplicitInstance();	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()).getImplicitPrototype();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
657	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f.getAccessible());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().get(f.getAccessible());	  final    Object    unsafe    =    f.get(this.f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
658	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(safeClass.getId());  [CE]  cannot  find  symbol  safeClass  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(safeClass.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(safeClass.getId());	  final    Object    unsafe    =    f.get(unsafeClass.getId());    	non-compiled	[CE]  cannot  find  symbol  safeClass	86	None	replace
659	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  [CE]  cannot  find  symbol  unsafe  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    dangerous    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	44	None	replace
660	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    dangerous    =    f.get(f.getName());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	44	None	replace
661	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    dangerous    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	44	None	replace
662	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  getConstructorId().setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  getConstructorId().setAccessible(false);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  getConstructorId().setAccessible(false);  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    dangerous    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
663	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());  }	  final    Object    unsafe    =    f.get(f.getName());    Class    <?>    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	41	None	replace
664	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getName());    Class    <?>    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	41	None	replace
665	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    Class    <?>    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	41	None	replace
666	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().get(unsafeClass,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().get(unsafeClass,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().get(unsafeClass,  f.getAccessible());	  final    Object    unsafe    =    f.get(unsafeClass,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
667	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f.getAccessible());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f),  f.getAccessible());	  final    Object    unsafe    =    f.get(unsafeClass,    f.getAccessible());    	non-compiled	[CE]  ';'  expected	5	None	replace
668	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getImplicitPrototype());	  Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
669	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getName(),  c);  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getName(),  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getName(),  c);	  Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  c	67	None	replace
670	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getName(),  false);  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getName(),  false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getName(),  false);	  Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	67	None	replace
671	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getName(),  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getName(),  safeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getName(),  safeClass);	  Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  safeClass	67	None	replace
672	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass();    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	133	None	replace
673	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass();    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	133	None	replace
674	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass();    	non-compiled	[CE]  'catch'  without  'try'	133	None	replace
675	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass();    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	133	None	replace
676	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ");	  Object    unsafe    =    f.get(unsafeClass);    	non-compiled	[CE]  	66	None	replace
677	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f.get(constructorId.getImplicitPrototype());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f.get(constructorId.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f),  f.get(constructorId.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f).get(f.getImplicitPrototype());    	non-compiled	[CE]  ';'  expected	109	None	replace
678	[BUG]  [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	121	None	replace
679	[BUG]  [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }	  Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	121	None	replace
680	[BUG]  [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	121	None	replace
681	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }	  final    Object    unsafe    =    f.get(f);    final    Object    unsafe    =    f.get(f).get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	149	None	replace
682	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f);    final    Object    unsafe    =    f.get(f).get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	149	None	replace
683	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f);    final    Object    unsafe    =    f.get(f).get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	149	None	replace
684	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f);    final    Object    unsafe    =    f.get(f).get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	149	None	replace
685	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  else  {  [CE]  'catch'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  else  {  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  }  else  {	  final    Object    unsafe    =    f.get(f);    final    Object    unsafe    =    f.get(f).get(f);    	non-compiled	[CE]  'catch'  without  'try'	149	None	replace
686	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(safeClass.getModule());  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(safeClass.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(safeClass.getModule());	  final    Object    unsafe    =    f.get(unsafeClass.getModule());    	non-compiled	[CE]  cannot  find  symbol  safeClass	58	None	replace
687	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  [CE]  cannot  find  symbol  unsafe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    dangerous    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	38	None	replace
688	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    dangerous    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	38	None	replace
689	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    dangerous    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	38	None	replace
690	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  getConstructorId().setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  getConstructorId().setAccessible(false);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  getConstructorId().setAccessible(false);  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    dangerous    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
691	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  _constructorId.getId());  [CE]  cannot  find  symbol  _constructorId  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  _constructorId.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  _constructorId.getId());	  final    Object    unsafe    =    getConstructorId(f.getId());    	non-compiled	[CE]  cannot  find  symbol  _constructorId	123	None	replace
692	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  n.getId());  [CE]  cannot  find  symbol  n  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  n.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  n.getId());	  final    Object    unsafe    =    getConstructorId(f.getId());    	non-compiled	[CE]  cannot  find  symbol  n	123	None	replace
693	[BUG]  [BUGGY]  final  Object  unsafe  =  f.detachFromParent(f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.detachFromParent(f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.detachFromParent(f.getImmediateParentPointer());	  final    Object    unsafe    =    f.remove(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
694	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    Final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	18	None	replace
695	[BUG]  [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    Final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	18	None	replace
696	[BUG]  [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f  ==  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    Final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	18	None	replace
697	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	132	None	replace
698	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  ';'  expected	132	None	replace
699	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	132	None	replace
700	[BUG]  [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f  ==  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	132	None	replace
701	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(f.getClass());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  getConstructorId(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(f.getClass());	  Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
702	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getModule());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getModule());	  Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
703	[BUG]  [BUGGY]  Object  safe  =  f.get(safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  safe  =  f.get(safeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  safe  =  f.get(safeClass);	  Object    safe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  safeClass	103	None	replace
704	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
705	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
706	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
707	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
708	[BUG]  [BUGGY]  static  final  Object  unsafe  =  f.get(0);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  unsafe  =  f.get(0);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  unsafe  =  f.get(0);	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
709	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  getConstructorId().setAccessible(false);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  getConstructorId().setAccessible(false);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  getConstructorId().setAccessible(false);  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
710	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  getConstructorId());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  getConstructorId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  getConstructorId());	  final    Object    unsafe    =    f.get(f,    c.getId());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
711	[BUG]  [BUGGY]  Object  unsafe  =  f.setAccessible(true,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.setAccessible(true,  safeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.setAccessible(true,  safeClass);	  Object    unsafe    =    f.setAccessible(true);    	non-compiled	[CE]  cannot  find  symbol  safeClass	144	None	replace
712	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ").getDeclaredField( "safeClass "));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ").getDeclaredField( "safeClass "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ").getDeclaredField( "safeClass "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safeClass   "));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
713	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  class));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safeClass   "));    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
714	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeAllocator ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "safeAllocator ");	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	27	None	replace
715	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ".class);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ".class);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ".class);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
716	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }	  final    Object    unsafe    =    f.get(f);    Final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	46	None	replace
717	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f);    Final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	46	None	replace
718	[BUG]  [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f  ==  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }	  final    Object    unsafe    =    f.get(f);    Final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	46	None	replace
719	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f);    Final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	46	None	replace
720	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f);    Final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	46	None	replace
721	[BUG]  [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f  ==  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f);    Final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	46	None	replace
722	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  }  [CE]  cannot  find  symbol  unsafe  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    illegal    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	104	None	replace
723	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    illegal    =    f.get(f.getName());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	104	None	replace
724	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    illegal    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	104	None	replace
725	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    illegal    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	104	None	replace
726	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getRawClass());  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getRawClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f.getRawClass());	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	24	None	replace
727	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getComponentType());  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getComponentType());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f.getComponentType());	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	24	None	replace
728	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe, ",  null));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe, ",  null));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe, ",  null));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   ",    null));    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
729	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(safeClass,  f.getAccessible());  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(safeClass,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(safeClass,  f.getAccessible());	  final    Object    unsafe    =    f.get(f,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  safeClass	2	None	replace
730	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());  }  [CE]  cannot  find  symbol  unsafe  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    safe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	36	None	replace
731	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    safe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	36	None	replace
732	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    safe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	36	None	replace
733	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  safe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  safe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  safe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    safe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	36	None	replace
734	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  _class.getModule());  [CE]  cannot  find  symbol  _class  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  _class.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  _class.getModule());	  final    Object    unsafe    =    getConstructorId(f.getModule());    	non-compiled	[CE]  cannot  find  symbol  _class	98	None	replace
735	[BUG]  [BUGGY]  final  Object  safe  =  f.get(unsafeClass);  [CE]  cannot  find  symbol  unsafe  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  safe  =  f.get(unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  safe  =  f.get(unsafeClass);	  final    Object    unsafe    =    f.get(f);    final    Object    safe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	50	None	replace
736	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.toImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.toImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.toImplicitPrototype());	  final    Object    unsafe    =    f.remove(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
737	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getModule(),  class);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getModule(),  class);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getModule(),  class);	  final    Object    unsafe    =    f.get(f.getModule(),    unsafeClass);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
738	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getImplicitPrototype();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getImplicitPrototype();	  Object    unsafeClass    =    f.getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	23	None	replace
739	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getUnsafeId();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getUnsafeId();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getUnsafeId();	  Object    unsafeClass    =    f.getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	23	None	replace
740	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "null ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "null ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "null ");	  Object    unsafeClass    =    f.getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	23	None	replace
741	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.toImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.toImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.toImplicitPrototype());	  final    Object    unsafe    =    f.get(f,    f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
742	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  unsafeClass);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  unsafeClass);	  final    Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
743	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  safeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  safeClass);	  final    Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol  safeClass	108	None	replace
744	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass   "),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass   "),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass   "),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeclass   "));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
745	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  class));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeclass   "));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
746	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  c));  [CE]  cannot  find  symbol  c  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  c));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  c));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeclass   "));    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
747	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer()).getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer()).getImmediateParentPointer();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer()).getImmediateParentPointer();	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer()).getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
748	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getDeclaredClass());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getDeclaredClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f.getDeclaredClass());	  final    Object    unsafe    =    f.get(f.getDeclaredClass());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
749	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(safeClass.getDeclaredClass());  [CE]  cannot  find  symbol  safeClass  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(safeClass.getDeclaredClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(safeClass.getDeclaredClass());	  final    Object    unsafe    =    f.get(f.getDeclaredClass());    	non-compiled	[CE]  cannot  find  symbol  safeClass	63	None	replace
750	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }	  final    Object    unsafe    =    f.get(f.getName());    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	42	None	replace
751	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getName());    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	42	None	replace
752	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	42	None	replace
753	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	42	None	replace
754	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  getConstructorId().setAccessible(false);  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  getConstructorId().setAccessible(false);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  getConstructorId().setAccessible(false);  }	  final    Object    unsafe    =    f.get(f.getName());    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	42	None	replace
755	[BUG]  [BUGGY]  final  Object  safe  =  f.get(f.getAccessible());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  safe  =  f.get(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  safe  =  f.get(f.getAccessible());	  final    Object    unsafe    =    f.get(safeClass.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
756	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField());	  final    Object    unsafe    =    f.get(c.getId());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
757	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getName());	  final    Object    unsafe    =    f.remove(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
758	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getIdentifier());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.getIdentifier());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getIdentifier());	  final    Object    unsafe    =    f.remove(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
759	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getValue());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.getValue());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getValue());	  final    Object    unsafe    =    f.remove(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
760	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getQualifiedName());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getQualifiedName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getQualifiedName());	  final    Object    unsafe    =    f.get(f.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
761	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f.getQualifiedName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f.getQualifiedName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f.getQualifiedName());	  final    Object    unsafe    =    f.get(f.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
762	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  safe  =  f.get(f.getName()  +   ":   ");  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  safe  =  f.get(f.getName()  +   ":   ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    final  Object  safe  =  f.get(f.getName()  +   ":   ");	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	92	None	add
763	[BUG]  [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f  ==  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f  ==  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	33	None	replace
764	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	33	None	replace
765	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	33	None	replace
766	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	33	None	replace
767	[BUG]  [BUGGY]  final  Object  unsafe  =  f!=  null?  newInstance  :  f.newInstance();  [CE]  cannot  find  symbol  newInstance  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f!=  null?  newInstance  :  f.newInstance();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f!=  null?  newInstance  :  f.newInstance();	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol  newInstance	148	None	replace
768	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).newInstance();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).newInstance();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).newInstance();	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
769	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  getConstructorId().newInstance();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  getConstructorId().newInstance();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  getConstructorId().newInstance();	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  ';'  expected	148	None	replace
770	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().newInstance();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().newInstance();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().newInstance();	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
771	[BUG]  [BUGGY]  final  Object  unsafe  =  f.newInstance(f);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.newInstance(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.newInstance(f);	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
772	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  getConstructorId(f).newInstance();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  getConstructorId(f).newInstance();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  getConstructorId(f).newInstance();	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  ';'  expected	148	None	replace
773	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  c),  unsafeClass);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  c),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  c),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe       "),    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  c	125	None	replace
774	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  false,  unsafeClass);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  false,  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  false,  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe       "),    unsafeClass);    	non-compiled	[CE]  	125	None	replace
775	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafe.class ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafe.class ");	  Object    unsafeClass    =    f.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	29	None	replace
776	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafe-class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafe-class ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafe-class ");	  Object    unsafeClass    =    f.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	29	None	replace
777	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeclass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeclass ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafeclass ");	  Object    unsafeClass    =    f.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	29	None	replace
778	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  getConstructorId().get(f.getAccessible());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  getConstructorId().get(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  getConstructorId().get(f.getAccessible());	  final    Object    unsafe    =    f,    f.get(f.getAccessible());    	non-compiled	[CE]  ';'  expected	3	None	replace
779	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(null,  f.getId());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(null,  f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(null,  f.getId());	  final    Object    unsafe    =    f.get(null,    f.getId());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
780	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(null,  f.getId());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(null,  f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(null,  f.getId());	  final    Object    unsafe    =    f.get(null,    f.getId());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
781	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( ".sun.safe "));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( ".sun.safe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( ".sun.safe "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "sun.safe   "));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
782	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe ",  c));  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe ",  c));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe ",  c));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "sun.safe   "));    	non-compiled	[CE]  cannot  find  symbol  c	81	None	replace
783	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getRawClass());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getRawClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f.getRawClass());	  final    Object    unsafe    =    f.get(f.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
784	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f.getRawClass());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f.getRawClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f.getRawClass());	  final    Object    unsafe    =    f.get(f.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
785	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(unsafeClass.getAccessible());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(unsafeClass.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(unsafeClass.getAccessible());	  final    Object    unsafe    =    getConstructorId(f).get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
786	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  class.getImplicitPrototype());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  class.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  class.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f,    c.getImplicitPrototype());    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
787	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	39	None	replace
788	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  }  else  {  final  Object  unsafe  =  f.get(f.getName());  }  [CE]  cannot  find  symbol  unsafe  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  }  else  {  final  Object  unsafe  =  f.get(f.getName());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  }  else  {  final  Object  unsafe  =  f.get(f.getName());  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	39	None	replace
789	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	39	None	replace
790	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeAllocator ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeAllocator ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeAllocator ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	26	None	replace
791	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeAllocator ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeAllocator ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "safeAllocator ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	26	None	replace
792	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",   "safe-class "));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",   "safe-class "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",   "safe-class "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-class   "));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
793	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  class));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-class   "));    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
794	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class   "),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class   "),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class   "),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-class   "));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
795	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getReturnType());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getReturnType());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f.getReturnType());	  final    Object    unsafe    =    f.get(f.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
796	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getReturnType());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getReturnType());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.getReturnType());	  final    Object    unsafe    =    f.get(f.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
797	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  }  [CE]  cannot  find  symbol  unsafe  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    illegal    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	113	None	replace
798	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    illegal    =    f.get(f.getClass());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	113	None	replace
799	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    illegal    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	113	None	replace
800	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    illegal    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	113	None	replace
801	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  cannot  find  symbol  unsafe  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	32	None	replace
802	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	32	None	replace
803	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	32	None	replace
804	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitInstance());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitInstance());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitInstance());	  final    Object    unsafe    =    f.get(c.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
805	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setModule(this,  f.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setModule(this,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setModule(this,  f.getModule());	  final    Object    unsafe    =    f.setModule(f.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	140	None	replace
806	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
807	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
808	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredParentPointer());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredParentPointer());	  final    Object    unsafe    =    f.get(c.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
809	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getUnsafeImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getUnsafeImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getUnsafeImmediateParentPointer());	  final    Object    unsafe    =    f.get(c.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
810	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer()  +  1);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer()  +  1);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer()  +  1);	  final    Object    unsafe    =    f.get(c.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
811	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	20	None	replace
812	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
813	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  null.getModule());  [CE]  <null>  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  null.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  null.getModule());	  final    Object    unsafe    =    f.get(f,    c.getModule());    	non-compiled	[CE]  <null>  cannot  be  dereferenced	61	None	replace
814	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  class.getModule());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  class.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  class.getModule());	  final    Object    unsafe    =    f.get(f,    c.getModule());    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
815	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer(),  unsafeClass);	  final    Object    unsafe    =    getConstructorId(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
816	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  class);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  class);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName(),  class);	  final    Object    unsafe    =    f.get(f.getName(),    c);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
817	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(f.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  getConstructorId(f.getDeclaringClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(f.getDeclaringClass());	  Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
818	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getConstructorId());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getConstructorId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getConstructorId());	  Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
819	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",   "unsafe "));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",   "unsafe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",   "unsafe "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeAllocator   "));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
820	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-anonymous "));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-anonymous "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-anonymous "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-   "));    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
821	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-instance "));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-instance "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-instance "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-   "));    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
822	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-limit "));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-limit "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-limit "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-   "));    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
823	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  final  Object  unsafeClass  =  f.get(unsafeClass);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  final  Object  unsafeClass  =  f.get(unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(unsafeClass);    final  Object  unsafeClass  =  f.get(unsafeClass);	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	7	None	add
824	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  final  Object  unsafe  =  f.get(unsafeClass));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  final  Object  unsafe  =  f.get(unsafeClass));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(unsafeClass);    final  Object  unsafe  =  f.get(unsafeClass));	  	non-compiled	[CE]  ';'  expected	7	None	add
825	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f.getModule());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().get(f.getModule());	  final    Object    unsafe    =    f.get(c.getModule());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
826	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f.getId());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().get(f.getId());	  final    Object    unsafe    =    f.get(this.f.getId());    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
827	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe_ "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe_ "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe_   "));    	compilable	  [FE]  AssertionFailedError  	13	1	replace
828	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe_ "));  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe_ "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getDeclaredField( "unsafe_ "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe_   "));    	compilable	  [FE]  AssertionFailedError  	13	1	replace
829	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "unsafe_ "));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "unsafe_ "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getDeclaredField( "unsafe_ "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
830	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( ".unsafe_ "));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( ".unsafe_ "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( ".unsafe_ "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
831	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(f,  this.getImmediateParentPointer());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(f,  this.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImmediateParentPointer(f,  this.getImmediateParentPointer());	  final    Object    unsafe    =    f.setImmediateParentPointer(f.getImmediateParentPointer());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	141	None	replace
832	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(f,  safeClass.getImmediateParentPointer());  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(f,  safeClass.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImmediateParentPointer(f,  safeClass.getImmediateParentPointer());	  final    Object    unsafe    =    f.setImmediateParentPointer(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  safeClass	141	None	replace
833	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getDeclaredField( "null "));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getDeclaredField( "null "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getDeclaredField( "null "));	  Object    unsafe    =    f.get(null);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
834	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe, ",  false));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe, ",  false));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe, ",  false));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   ",    false));    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
835	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	21	None	replace
836	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	21	None	replace
837	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	21	None	replace
838	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	21	None	replace
839	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  getConstructorId().setAccessible(false);  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  getConstructorId().setAccessible(false);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  getConstructorId().setAccessible(false);  }	  final    Object    unsafe    =    f.get(f.getClass());    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	21	None	replace
840	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(this.f.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(this.f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(this.f.getModule());	  final    Object    unsafe    =    f.find(f.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	97	None	replace
841	[BUG]  [BUGGY]  final  Object  unsafe  =  f.contains(f.getModule());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.contains(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.contains(f.getModule());	  final    Object    unsafe    =    f.remove(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
842	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getModule(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.getModule(),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getModule(),  unsafeClass);	  final    Object    unsafe    =    f.remove(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
843	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  [CE]  cannot  find  symbol  unsafe  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    safe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	43	None	replace
844	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    safe    =    f.get(f.getName());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	43	None	replace
845	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    safe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	43	None	replace
846	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    safe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	43	None	replace
847	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(safeClass.getImplicitPrototype());  [CE]  cannot  find  symbol  safeClass  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(safeClass.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(safeClass.getImplicitPrototype());	  final    Object    unsafe    =    f.get(unsafeClass.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  safeClass	75	None	replace
848	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitReturn());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitReturn());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitReturn());	  final    Object    unsafe    =    f.get(c.getName());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
849	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(0);  final  Object  safe  =  f.get(0);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(0);  final  Object  safe  =  f.get(0);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(0);    final  Object  safe  =  f.get(0);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	30	None	add
850	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  this.getImmediateParentPointer());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  this.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  this.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f,    c.getImmediateParentPointer());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	73	None	replace
851	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredParentPointer());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getDeclaredParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getDeclaredParentPointer());	  final    Object    unsafe    =    f.get(f,    c.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
852	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f);    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	48	None	replace
853	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }	  final    Object    unsafe    =    f.get(f);    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	48	None	replace
854	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f);    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	48	None	replace
855	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f);    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	48	None	replace
856	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  else  {  getConstructorId().setAccessible(false);  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  else  {  getConstructorId().setAccessible(false);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  }  else  {  getConstructorId().setAccessible(false);  }	  final    Object    unsafe    =    f.get(f);    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	48	None	replace
857	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().visit(f,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().visit(f,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().visit(f,  f.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId().get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
858	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().find(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().find(f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().find(f.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId().get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
859	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f).getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f).getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().get(f).getImplicitPrototype();	  final    Object    unsafe    =    getConstructorId().get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
860	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  null,  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  null,  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  null,  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f,    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
861	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitDeclaration()));  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitDeclaration()));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitDeclaration()));	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()));    	non-compiled	[CE]  ';'  expected	80	None	replace
862	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName()));  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName()));	  final    Object    unsafe    =    f.get(f.getImplicitPrototype()));    	non-compiled	[CE]  ';'  expected	80	None	replace
863	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  config.getImplicitPrototype());  [CE]  cannot  find  symbol  config  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  config.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  config.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  config	111	None	replace
864	[BUG]  [BUGGY]  final  Object  unsafe  =  initializingClass.get(f.getInitializingClass());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  initializingClass.get(f.getInitializingClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  initializingClass.get(f.getInitializingClass());	  final    Object    unsafe    =    f.get(f.getInitializingClass());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
865	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(f,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  getConstructorId(f,  safeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(f,  safeClass);	  Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  cannot  find  symbol  safeClass	101	None	replace
866	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(f),  unsafeClass);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  getConstructorId(f),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(f),  unsafeClass);	  Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  ';'  expected	101	None	replace
867	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f);    Class    <?>    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	47	None	replace
868	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  }	  final    Object    unsafe    =    f.get(f);    Class    <?>    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	47	None	replace
869	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f);    Class    <?>    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	47	None	replace
870	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f);    Class    <?>    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	47	None	replace
871	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f)!=null?  f.getImplicitPrototype()  :  null;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f)!=null?  f.getImplicitPrototype()  :  null;  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f)!=null?  f.getImplicitPrototype()  :  null;	  Object    unsafe    =    f.get(f).getImplicitPrototype();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
872	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(f).getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  getConstructorId(f).getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(f).getImplicitPrototype();	  Object    unsafe    =    f.get(f).getImplicitPrototype();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
873	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeClass ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeClass ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "safeClass ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	replace
874	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "null ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "null ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "null ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	replace
875	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.safe.class ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.safe.class ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sun.safe.class ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	replace
876	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(f).newInstance();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  getConstructorId(f).newInstance();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(f).newInstance();	  Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
877	[BUG]  [BUGGY]  Object  unsafe  =  f,  getConstructorId().newInstance();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f,  getConstructorId().newInstance();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f,  getConstructorId().newInstance();	  Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  ';'  expected	145	None	replace
878	[BUG]  [BUGGY]  Object  unsafe  =  f.newInstance(f);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.newInstance(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.newInstance(f);	  Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
879	[BUG]  [BUGGY]  Object  unsafe  =  f.newInstance(f.getModule());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.newInstance(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.newInstance(f.getModule());	  Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
880	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getQualifiedName());  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getQualifiedName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f.getQualifiedName());	  Object    unsafeClass    =    getConstructorId(f.getName());    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	122	None	replace
881	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getName(),  false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getName(),  false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f.getName(),  false);	  Object    unsafeClass    =    getConstructorId(f.getName());    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	122	None	replace
882	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  [CE]  cannot  find  symbol  unsafe  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    dangerous    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	112	None	replace
883	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    dangerous    =    f.get(f.getClass());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	112	None	replace
884	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    dangerous    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	112	None	replace
885	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  getConstructorId().setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  getConstructorId().setAccessible(false);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  getConstructorId().setAccessible(false);  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    dangerous    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
886	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    dangerous    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	112	None	replace
887	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(safeClass.getImmediateParentPointer());  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(safeClass.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(safeClass.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(unsafeClass.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  safeClass	69	None	replace
888	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    Class    <?>    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	19	None	replace
889	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    Class    <?>    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	19	None	replace
890	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    Class    <?>    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	19	None	replace
891	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(safeClass.getImplicitPrototype());  [CE]  cannot  find  symbol  safeClass  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(safeClass.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImplicitPrototype(safeClass.getImplicitPrototype());	  final    Object    unsafe    =    f.setImplicitPrototype(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  safeClass	129	None	replace
892	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(newInstance.getImplicitPrototype());  [CE]  cannot  find  symbol  newInstance  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(newInstance.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImplicitPrototype(newInstance.getImplicitPrototype());	  final    Object    unsafe    =    f.setImplicitPrototype(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  newInstance	129	None	replace
893	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.toId());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.toId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.toId());	  final    Object    unsafe    =    f.remove(f.getId());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
894	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  factory.getModule());  [CE]  cannot  find  symbol  factory  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  factory.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  factory.getModule());	  final    Object    unsafe    =    f.get(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  factory	57	None	replace
895	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  Class.class));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  Class.class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  Class.class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   ",    c));    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
896	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sunsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sunsafeClass ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sunsafeClass ");	  Object    unsafeClass    =    f.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	28	None	replace
897	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ".class);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ".class);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ".class);	  Object    unsafeClass    =    f.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  <identifier>  expected	28	None	replace
898	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeClass ",  false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeClass ",  false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "safeClass ",  false);	  Object    unsafeClass    =    f.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	28	None	replace
899	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  this.f.getAccessible());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  this.f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  this.f.getAccessible());	  final    Object    unsafe    =    f.get(null,    f.getAccessible());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	4	None	replace
900	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  safeClass.getAccessible());  [CE]  cannot  find  symbol  safeClass  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  safeClass.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  safeClass.getAccessible());	  final    Object    unsafe    =    f.get(null,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  safeClass	4	None	replace
901	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);	  Class    <?>    unsafeClass    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	25	None	replace
902	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  Class    <?>    unsafeClass    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	25	None	replace
903	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");	  Class    <?>    unsafeClass    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	25	None	replace
904	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  this.f.getId());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  this.f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  this.f.getId());	  final    Object    unsafe    =    f.get(f,    f.getId());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	88	None	replace
905	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer(),  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer(),  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer(),  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer(),    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
906	[BUG]  [BUGGY]  final  Object  unsafe  =  this.f.get(f.getImmediateParentPointer(),  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  this.f.get(f.getImmediateParentPointer(),  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  this.f.get(f.getImmediateParentPointer(),  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer(),    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
907	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  f.getSimpleImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  f.getSimpleImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  f.getSimpleImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer(),    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
908	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  f.getConstructorId());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  f.getConstructorId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  f.getConstructorId());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer(),    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
909	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class   "),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class   "),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class   "),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-class   "));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
910	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",   "unsafe-class "));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",   "unsafe-class "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",   "unsafe-class "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-class   "));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
911	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  class));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-class   "));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
912	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  + ".   ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(f.getName()  + ".   ");	  final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    	compilable	  [FE]  AssertionFailedError  	93	2	replace
913	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  + ".   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  + ".   ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName()  + ".   ");	  final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    	compilable	  [FE]  AssertionFailedError  	93	2	replace
914	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  final  Object  unsafe  =  f.get(f.getClass());  }  [CE]  cannot  find  symbol  unsafe  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  final  Object  unsafe  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  final  Object  unsafe  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	17	None	replace
915	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	17	None	replace
916	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f)?  getConstructorId(f):  f.get(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f)?  getConstructorId(f):  f.get(f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f)?  getConstructorId(f):  f.get(f.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f).get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
917	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f,  f.getImplicitPrototype());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f),  f,  f.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId(f).get(f.getImplicitPrototype());    	non-compiled	[CE]  ';'  expected	109	None	replace
918	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(this.f.getModule());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(this.f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(this.f.getModule());	  final    Object    unsafe    =    f.remove(f.getModule());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	139	None	replace
919	[BUG]  [BUGGY]  final  Object  unsafe  =  c.get(f,  f.getModule());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  c.get(f,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  c.get(f,  f.getModule());	  final    Object    unsafe    =    f.get(f,    c.getModule());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
920	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  System.getProperty( "line.separator "));  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  System.getProperty( "line.separator "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  System.getProperty( "line.separator "));	  final    Object    unsafe    =    f.get(f,    c.getModule());    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	61	None	replace
921	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  Class.class.getModule());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  Class.class.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  Class.class.getModule());	  final    Object    unsafe    =    f.get(f,    c.getModule());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
922	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  System.getProperty( "user.safe "));  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  System.getProperty( "user.safe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  System.getProperty( "user.safe "));	  final    Object    unsafe    =    f.get(f,    c.getModule());    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	61	None	replace
923	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  +... ":   ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  +   ":   ");  final  Object  unsafe  =  f.get(f.getName()  +... ":   ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    final  Object  unsafe  =  f.get(f.getName()  +... ":   ");	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
924	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getValue());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getValue());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getValue());	  final    Object    unsafe    =    f.get(c.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
925	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getIdentifier());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getIdentifier());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getIdentifier());	  final    Object    unsafe    =    f.get(c.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
926	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().contains(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().contains(f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().contains(f.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId().get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
927	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().compute(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().compute(f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().compute(f.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId().get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
928	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().remove(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId().remove(f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().remove(f.getImplicitPrototype());	  final    Object    unsafe    =    getConstructorId().get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
929	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(this,  f.getImmediateParentPointer());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(this,  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(this,  f.getImmediateParentPointer());	  final    Object    unsafe    =    this.f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	74	None	replace
930	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getImmediateParentPointer(),  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.getImmediateParentPointer(),  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getImmediateParentPointer(),  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.remove(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
931	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getImmediateParentPointer(),  f);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.getImmediateParentPointer(),  f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getImmediateParentPointer(),  f);	  final    Object    unsafe    =    f.remove(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
932	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getImplicitPrototype(),  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.getImplicitPrototype(),  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getImplicitPrototype(),  f.getImplicitPrototype());	  final    Object    unsafe    =    f.remove(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
933	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	21	None	replace
934	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	21	None	replace
935	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Class    <?>    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	34	None	replace
936	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Class    <?>    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	34	None	replace
937	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Class    <?>    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	34	None	replace
938	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Class    <?>    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	34	None	replace
939	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  [CE]  cannot  find  symbol  unsafe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    dangerous    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	38	None	replace
940	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  dangerous  =  f.get(f.getDeclaringClass());  }  [CE]  cannot  find  symbol  dangerous  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  dangerous  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  dangerous  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    dangerous    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  dangerous	38	None	replace
941	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    dangerous    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	38	None	replace
942	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  dangerous  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  dangerous  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    dangerous    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  dangerous	38	None	replace
943	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(newInstance.getAccessible());  [CE]  cannot  find  symbol  newInstance  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(newInstance.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(newInstance.getAccessible());	  final    Object    unsafe    =    f.get(safeClass.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  newInstance	116	None	replace
944	[BUG]  [BUGGY]  Class  <?>  unsafe  =  f.get(0);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafe  =  f.get(0);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafe  =  f.get(0);	  final    Object    unsafe    =    f.get(f);    Class    <?>    unsafe    =    f.get(f);    	non-compiled	[CE]  incompatible  types	47	None	replace
945	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f,  unsafeClass);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f,  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f,  unsafeClass);	  final    Object    unsafe    =    f.get(f);    Class    <?>    unsafe    =    f.get(f);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	47	None	replace
946	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  config.getId());  [CE]  cannot  find  symbol  config  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  config.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  config.getId());	  final    Object    unsafe    =    f.get(f,    f.getId());    	non-compiled	[CE]  cannot  find  symbol  config	88	None	replace
947	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.toId());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.toId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.toId());	  final    Object    unsafe    =    f.get(f,    f.getId());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
948	[BUG]  [BUGGY]  Object  unsafe  =  f.get(unsafeClass,  c);  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(unsafeClass,  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(unsafeClass,  c);	  Object    unsafe    =    f.get(unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  c	66	None	replace
949	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getSimpleName());  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getSimpleName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f.getSimpleName());	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	24	None	replace
950	[BUG]  [BUGGY]  Preconditions.checkState(f.getClass()!=  null);  Class  <?>  unsafe  =  f.get(f.getClass());  [CE]  cannot  find  symbol  Preconditions  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Preconditions.checkState(f.getClass()!=  null);  Class  <?>  unsafe  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Preconditions.checkState(f.getClass()!=  null);  Class  <?>  unsafe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    Class    <?>    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  Preconditions	19	None	replace
951	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  safe  =  f.get(f.getClass());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  safe  =  f.get(f.getClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  safe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    Class    <?>    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  incompatible  types	19	None	replace
952	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getImmediateParentPointer()).getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getImmediateParentPointer()).getImmediateParentPointer();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getImmediateParentPointer()).getImmediateParentPointer();	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer()).getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
953	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer())&  f.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer())&  f.getImmediateParentPointer();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer())&  f.getImmediateParentPointer();	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer()).getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
954	[BUG]  [BUGGY]  final  Object  unsafe  =  this.f.get(f.getImmediateParentPointer()).getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  this.f.get(f.getImmediateParentPointer()).getImmediateParentPointer();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  this.f.get(f.getImmediateParentPointer()).getImmediateParentPointer();	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer()).getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
955	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-object "));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-object "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-object "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-   "));    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
956	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-ignore- "));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-ignore- "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-ignore- "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-   "));    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
957	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	33	None	replace
958	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	33	None	replace
959	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    Final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	33	None	replace
960	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getImmediateParentPointer());	  Object    unsafe    =    f.get(null);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
961	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  [CE]  cannot  find  symbol  unsafe  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    dangerous    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	44	None	replace
962	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    dangerous    =    f.get(f.getName());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	44	None	replace
963	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    dangerous    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	44	None	replace
964	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  dangerous  =  f.get(f.getName());  }  [CE]  cannot  find  symbol  dangerous  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  dangerous  =  f.get(f.getName());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  dangerous  =  f.get(f.getName());  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    dangerous    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  dangerous	44	None	replace
965	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  constructorId);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  constructorId);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f),  constructorId);	  final    Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  ';'  expected	108	None	replace
966	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  c.getModule());  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  c.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass,  c.getModule());	  final    Object    unsafe    =    f.get(unsafeClass.getModule());    	non-compiled	[CE]  cannot  find  symbol  c	58	None	replace
967	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.toString());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.toString());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.toString());	  final    Object    unsafe    =    f.remove(f.getId());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
968	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype(),  c);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype(),  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype(),  c);	  final    Object    unsafe    =    getConstructorId(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
969	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype(),  f);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype(),  f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype(),  f);	  final    Object    unsafe    =    getConstructorId(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
970	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  final  Object  unsafe  =  f.get(unsafeClass).get(unsafeClass);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  final  Object  unsafe  =  f.get(unsafeClass).get(unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(unsafeClass);    final  Object  unsafe  =  f.get(unsafeClass).get(unsafeClass);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	7	None	add
971	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
972	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
973	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
974	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
975	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDefiningClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDefiningClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDefiningClass();  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
976	[BUG]  [BUGGY]  static  final  Object  unsafe  =  f.get(f.getInitializingClass());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  static  final  Object  unsafe  =  f.get(f.getInitializingClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	static  final  Object  unsafe  =  f.get(f.getInitializingClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    static    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
977	[BUG]  [BUGGY]  Object  unsafe  =  f.get(1);  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(1);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(1);	  final    Object    unsafe    =    f.get(0);    	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	31	None	replace
978	[BUG]  [BUGGY]  final  Object  unsafe  =  fs.get(null,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  fs.get(null,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  fs.get(null,  f.getAccessible());	  final    Object    unsafe    =    f.get(null,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
979	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(null,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(null,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(null,  f.getAccessible());	  final    Object    unsafe    =    f.get(null,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
980	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.toArray(new  Class[f.getAccessible()));  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  f.toArray(new  Class[f.getAccessible()));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.toArray(new  Class[f.getAccessible()));	  final    Object    unsafe    =    f.get(null,    f.getAccessible());    	non-compiled	[CE]  ']'  expected	4	None	replace
981	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.toArray(new  Class[f.size()  ]));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  f.toArray(new  Class[f.size()  ]));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.toArray(new  Class[f.size()  ]));	  final    Object    unsafe    =    f.get(null,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
982	[BUG]  [BUGGY]  final  Object  unsafe  =  fs.get(f,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  fs.get(f,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  fs.get(f,  f.getAccessible());	  final    Object    unsafe    =    f.get(f,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
983	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.toString());  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.toString());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.toString());	  final    Object    unsafe    =    f.get(f,    f.getAccessible());    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	2	None	replace
984	[BUG]  [BUGGY]  Object  unsafe  =  f,  f.get(f.getModule());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f,  f.get(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f,  f.get(f.getModule());	  final    Object    unsafe    =    f,    f.get(f.getModule());    	non-compiled	[CE]  ';'  expected	59	None	replace
985	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getModule()));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getModule()));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getModule()));	  final    Object    unsafe    =    f,    f.get(f.getModule());    	non-compiled	[CE]  ';'  expected	59	None	replace
986	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.setModule(f.getModule());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.setModule(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.setModule(f.getModule());	  final    Object    unsafe    =    f,    f.get(f.getModule());    	non-compiled	[CE]  ';'  expected	59	None	replace
987	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(newInstance.getImplicitPrototype());  [CE]  cannot  find  symbol  newInstance  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(newInstance.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(newInstance.getImplicitPrototype());	  final    Object    unsafe    =    f.find(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  newInstance	131	None	replace
988	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(this.f.getImplicitPrototype());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(this.f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(this.f.getImplicitPrototype());	  final    Object    unsafe    =    f.find(f.getImplicitPrototype());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	131	None	replace
989	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f.getImplicitPrototype(),  c);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f.getImplicitPrototype(),  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f.getImplicitPrototype(),  c);	  final    Object    unsafe    =    f.find(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
990	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDefiningClass());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDefiningClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDefiningClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    illegal    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
991	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getSimpleName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getSimpleName());	  final    Object    unsafe    =    f.get(c.getName());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
992	[BUG]  [BUGGY]  final  Object  unsafe  =  c.get(f.getName());  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  c.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  c.get(f.getName());	  final    Object    unsafe    =    f.get(c.getName());    	non-compiled	[CE]  cannot  find  symbol  c	95	None	replace
993	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeId);  [CE]  cannot  find  symbol  unsafeId  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeId);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeId);	  final    Object    unsafe    =    f.get(constructorId);    	non-compiled	[CE]  cannot  find  symbol  unsafeId	10	None	replace
994	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  + ".Unsafe ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(f.getName()  + ".Unsafe ");	  final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    	compilable	  [FE]  AssertionFailedError  	93	2	replace
995	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  + ".Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  + ".Unsafe ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName()  + ".Unsafe ");	  final    Object    unsafe    =    f.get(f.getName()    +   ":   ");    	compilable	  [FE]  AssertionFailedError  	93	2	replace
996	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ");	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safeClass   "));    	non-compiled	[CE]  	84	None	replace
997	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  c));  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  c));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",  c));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safeClass   "));    	non-compiled	[CE]  cannot  find  symbol  c	84	None	replace
998	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",   "safeClass "));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",   "safeClass "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass ",   "safeClass "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safeClass   "));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
999	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- ",  c));  [CE]  cannot  find  symbol  c  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- ",  c));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- ",  c));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-   "));    	non-compiled	[CE]  cannot  find  symbol  c	16	None	replace
1000	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getReturnType());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.getReturnType());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getReturnType());	  final    Object    unsafe    =    f.get(f.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
1001	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f.getReturnType());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f.getReturnType());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f.getReturnType());	  final    Object    unsafe    =    f.get(f.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
1002	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  unsafeClass);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe       "),    unsafeClass);    	non-compiled	[CE]  	125	None	replace
1003	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  unsafeClass);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe       "),    unsafeClass);    	non-compiled	[CE]  	125	None	replace
1004	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe   "),  c);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe   "),  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe   "),  c);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe       "),    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1005	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass   "),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass   "),  unsafeClass);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass   "),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe       "),    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1006	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  _config.getModule());  [CE]  cannot  find  symbol  _config  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f,  _config.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f,  _config.getModule());	  final    Object    unsafe    =    getConstructorId(f.getModule());    	non-compiled	[CE]  cannot  find  symbol  _config	98	None	replace
1007	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(f.getImplicitPrototype()  ||  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(f.getImplicitPrototype()  ||  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImplicitPrototype(f.getImplicitPrototype()  ||  f.getImplicitPrototype());	  final    Object    unsafe    =    f.setImplicitPrototype(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
1008	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f)?  getConstructorId(f):  f.get(f.getModule());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f)?  getConstructorId(f):  f.get(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f)?  getConstructorId(f):  f.get(f.getModule());	  final    Object    unsafe    =    getConstructorId(f).get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
1009	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f,  f.getModule());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f),  f,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f),  f,  f.getModule());	  final    Object    unsafe    =    getConstructorId(f).get(f.getModule());    	non-compiled	[CE]  ';'  expected	96	None	replace
1010	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  f.setAccessible(false);	  Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	121	None	replace
1011	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getDeclaringClass());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	32	None	replace
1012	[BUG]  [BUGGY]  Object  dangerous  =  f.get(f);  [CE]  cannot  find  symbol  unsafe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  dangerous  =  f.get(f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  dangerous  =  f.get(f);	  final    Object    unsafe    =    f.get(f);    final    Object    dangerous    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	51	None	replace
1013	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	17	None	replace
1014	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  final  Object  unsafe  =  f.get(f.getClass());  }  [CE]  cannot  find  symbol  unsafe  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  final  Object  unsafe  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  final  Object  unsafe  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	17	None	replace
1015	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	17	None	replace
1016	[BUG]  [BUGGY]  Class  <?>  f  =  f.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  f  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  f  =  f.getDeclaredField( "theUnsafe   ");	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    illegal    =    f.get(f.getClass());    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	113	None	replace
1017	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getAssignedClass());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.getAssignedClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getAssignedClass());	  final    Object    unsafe    =    f.get(f.getAssignedClass());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
1018	[BUG]  [BUGGY]  final  Object  unsafe  =  f.newInstance(f.getDeclaredField( "theUnsafe "));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.newInstance(f.getDeclaredField( "theUnsafe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.newInstance(f.getDeclaredField( "theUnsafe "));	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
1019	[BUG]  [BUGGY]  final  Object  unsafe  =  f.newInstance(f.getDeclaredField( "safe "));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.newInstance(f.getDeclaredField( "safe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.newInstance(f.getDeclaredField( "safe "));	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
1020	[BUG]  [BUGGY]  final  Object  unsafe  =  f.newInstance(f.getModule());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.newInstance(f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.newInstance(f.getModule());	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
1021	[BUG]  [BUGGY]  final  Object  unsafe  =  f.newInstance(f.getDeclaredField( "null "));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.newInstance(f.getDeclaredField( "null "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.newInstance(f.getDeclaredField( "null "));	  final    Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
1022	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f,  constructorId);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f,  constructorId);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f,  constructorId);	  Object    unsafeClass    =    getConstructorId(f);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	118	None	replace
1023	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f),  constructorId);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f),  constructorId);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f),  constructorId);	  Object    unsafeClass    =    getConstructorId(f);    	non-compiled	[CE]  ';'  expected	118	None	replace
1024	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f.newInstance);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  getConstructorId(f.newInstance);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f.newInstance);	  Object    unsafeClass    =    getConstructorId(f);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	118	None	replace
1025	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getRawClass());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.getRawClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getRawClass());	  final    Object    unsafe    =    f.get(f.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
1026	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(this.f.getRawClass());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(this.f.getRawClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(this.f.getRawClass());	  final    Object    unsafe    =    f.get(f.getRawClass());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	53	None	replace
1027	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f).get( "unsafe ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f).get( "unsafe ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f).get( "unsafe ");	  final    Object    unsafe    =    f.get(f);    final    Object    unsafe    =    f.get(f).get(f);    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
1028	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "class ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "class ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "class ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	replace
1029	[BUG]  [BUGGY]  Object  illegal  =  f.get(f.getName());  [CE]  cannot  find  symbol  unsafe  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  illegal  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  illegal  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    final    Object    illegal    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	104	None	replace
1030	[BUG]  [BUGGY]  final  Object  unsafe  =  fs.get(f.getImmediateParentPointer(),  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  fs.get(f.getImmediateParentPointer(),  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  fs.get(f.getImmediateParentPointer(),  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer(),    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1031	[BUG]  [BUGGY]  final  Object  unsafe  =  c.get(f,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  c.get(f,  f.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  c.get(f,  f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f,    c.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
1032	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getImplicitPrototype()).getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getImplicitPrototype()).getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getImplicitPrototype()).getImplicitPrototype();	  final    Object    unsafe    =    f.get(f,    c.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
1033	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  factory.getImplicitPrototype());  [CE]  cannot  find  symbol  factory  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  factory.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  factory.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f,    c.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  factory	78	None	replace
1034	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getImplicitPrototype()));  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getImplicitPrototype()));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getImplicitPrototype()));	  final    Object    unsafe    =    f.get(f,    c.getImplicitPrototype());    	non-compiled	[CE]  ';'  expected	78	None	replace
1035	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.Unsafe ",  c);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.Unsafe ",  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sun.misc.Unsafe ",  c);	  Object    unsafeClass    =    f.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	29	None	replace
1036	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeUnsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeUnsafe ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "safeUnsafe ");	  Object    unsafeClass    =    f.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	29	None	replace
1037	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  [CE]  cannot  find  symbol  unsafe  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    safe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	22	None	replace
1038	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    safe    =    f.get(f.getClass());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	22	None	replace
1039	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    safe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	22	None	replace
1040	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass());  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  ';'  expected	132	None	replace
1041	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass());  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  ';'  expected	132	None	replace
1042	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  ';'  expected	132	None	replace
1043	[BUG]  [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getDeclaringClass()!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  ';'  expected	132	None	replace
1044	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  ';'  expected	132	None	replace
1045	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  ';'  expected	132	None	replace
1046	[BUG]  [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass());  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isUnsafe())  {  final  Object  unsafe  =  f.getDeclaringClass();  final  Object  unsafe  =  f.getDeclaringClass().getDeclaringClass());  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass());    	non-compiled	[CE]  ';'  expected	132	None	replace
1047	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f.getName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f.getName());	  final    Object    unsafe    =    f.find(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
1048	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(newInstance.getAccessible());  [CE]  cannot  find  symbol  newInstance  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(newInstance.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(newInstance.getAccessible());	  final    Object    unsafe    =    f.find(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  newInstance	128	None	replace
1049	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe_ "));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe_ "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe_ "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "sun.safe   "));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1050	[BUG]  [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "theUnsafe "));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "theUnsafe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.newInstance(f.getDeclaredField( "theUnsafe "));	  Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1051	[BUG]  [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "null "));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "null "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.newInstance(f.getDeclaredField( "null "));	  Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1052	[BUG]  [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "safe "));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "safe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.newInstance(f.getDeclaredField( "safe "));	  Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1053	[BUG]  [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "unsafe "));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.newInstance(f.getDeclaredField( "unsafe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.newInstance(f.getDeclaredField( "unsafe "));	  Object    unsafe    =    f.newInstance();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1054	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getReturningClass());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getReturningClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getReturningClass());	  Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
1055	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  [CE]  cannot  find  symbol  unsafe  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    dangerous    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  unsafe	112	None	replace
1056	[BUG]  [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    dangerous    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1057	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    dangerous    =    f.get(f.getClass());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	112	None	replace
1058	[BUG]  [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    dangerous    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1059	[BUG]  [BUGGY]  final  Object  unsafe  =(f.getImplicitPrototype()!=  null)?  f.getImplicitPrototype()  :  f.getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =(f.getImplicitPrototype()!=  null)?  f.getImplicitPrototype()  :  f.getImplicitPrototype();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =(f.getImplicitPrototype()!=  null)?  f.getImplicitPrototype()  :  f.getImplicitPrototype();	  final    Object    unsafe    =    f.get(c.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
1060	[BUG]  [BUGGY]  final  Object  unsafe  =(f.getImplicitPrototype()!=  null)?  f.getImplicitPrototype()  :  null;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =(f.getImplicitPrototype()!=  null)?  f.getImplicitPrototype()  :  null;  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =(f.getImplicitPrototype()!=  null)?  f.getImplicitPrototype()  :  null;	  final    Object    unsafe    =    f.get(c.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
1061	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getQualifiedName());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.getQualifiedName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getQualifiedName());	  final    Object    unsafe    =    f.get(f.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
1062	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getQualifiedName(),  f);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getQualifiedName(),  f);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getQualifiedName(),  f);	  final    Object    unsafe    =    f.get(f.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
1063	[BUG]  [BUGGY]  Object  unsafe  =  f,  f.get(f.getName());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f,  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f,  f.get(f.getName());	  final    Object    unsafe    =    f,    f.get(f.getAccessible());    	non-compiled	[CE]  ';'  expected	3	None	replace
1064	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getImmediateParentPointer()).getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getImmediateParentPointer()).getImmediateParentPointer();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getImmediateParentPointer()).getImmediateParentPointer();	  final    Object    unsafe    =    f.get(unsafeClass.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
1065	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getImmediateParentPointer()).getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getImmediateParentPointer()).getImmediateParentPointer();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.getImmediateParentPointer()).getImmediateParentPointer();	  final    Object    unsafe    =    f.get(null,    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
1066	[BUG]  [BUGGY]  final  Object  unsafe  =  fs.get(null,  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  fs.get(null,  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  fs.get(null,  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(null,    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
1067	[BUG]  [BUGGY]  final  Object  unsafe  =  f.safe(f.getDeclaredField( "this.safe "));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.safe(f.getDeclaredField( "this.safe "));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.safe(f.getDeclaredField( "this.safe "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "this.safe   "));    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
1068	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe   "),  c);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe   "),  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe   "),  c);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "this.safe   "));    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
1069	[BUG]  [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1070	[BUG]  [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1071	[BUG]  [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1072	[BUG]  [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "allocateInstance   ",  Class.class);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "allocateInstance   ",  Class.class);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "allocateInstance   ",  Class.class);	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1073	[BUG]  [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isUnsafe())  {  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f);    static    final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1074	[BUG]  [BUGGY]  final  Object  unsafe  =  c.get(f.getId());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  c.get(f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  c.get(f.getId());	  final    Object    unsafe    =    f.get(c.getId());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
1075	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(f),  constructorId);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  getConstructorId(f),  constructorId);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(f),  constructorId);	  Object    unsafe    =    getConstructorId(f);    	non-compiled	[CE]  ';'  expected	101	None	replace
1076	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getDeclaredClass());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.getDeclaredClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getDeclaredClass());	  final    Object    unsafe    =    f.get(f.getDeclaredClass());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
1077	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(newInstance,  f.getId());  [CE]  cannot  find  symbol  newInstance  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(newInstance,  f.getId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(newInstance,  f.getId());	  final    Object    unsafe    =    f.get(null,    f.getId());    	non-compiled	[CE]  cannot  find  symbol  newInstance	89	None	replace
1078	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.methodId());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(null,  f.methodId());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.methodId());	  final    Object    unsafe    =    f.get(null,    f.getId());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
1079	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafe_class ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafe_class ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafe_class ");  f.setAccessible(true);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	26	None	replace
1080	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "nosafeAllocator ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "nosafeAllocator ");  f.setAccessible(false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "nosafeAllocator ");  f.setAccessible(false);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeAllocator   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	26	None	replace
1081	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  [CE]  cannot  find  symbol  unsafe  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    safe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	43	None	replace
1082	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    safe    =    f.get(f.getName());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	43	None	replace
1083	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    safe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	43	None	replace
1084	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }	  final    Object    unsafe    =    f.get(f.getName());    Final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	40	None	replace
1085	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.getName();  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getName());    Final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
1086	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(newInstance.getModule());  [CE]  cannot  find  symbol  newInstance  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(newInstance.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(newInstance.getModule());	  final    Object    unsafe    =    f.find(f.getModule());    	non-compiled	[CE]  cannot  find  symbol  newInstance	97	None	replace
1087	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(c.getModule());  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(c.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(c.getModule());	  final    Object    unsafe    =    f.find(f.getModule());    	non-compiled	[CE]  cannot  find  symbol  c	97	None	replace
1088	[BUG]  [BUGGY]  final  Object  unsafe  =  c.get(f,  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  c.get(f,  f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  c.get(f,  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f,    c.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
1089	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getInitializingClass());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.remove(f.getInitializingClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getInitializingClass());	  final    Object    unsafe    =    f.get(f.getInitializingClass());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
1090	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f.getInitializingClass());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.find(f.getInitializingClass());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f.getInitializingClass());	  final    Object    unsafe    =    f.get(f.getInitializingClass());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
1091	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeClass ",  c);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "safeClass ",  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "safeClass ",  c);	  Object    unsafeClass    =    f.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	28	None	replace
1092	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ".getName());  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ".getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ".getName());	  Object    unsafeClass    =    f.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	28	None	replace
1093	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get( "unsafe ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get( "unsafe ");	  final    Object    unsafe    =    f.get(f);    final    Object    illegal    =    f.get(f);    	compilable	  [FE]  AssertionFailedError  	105	2	replace
1094	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get( "unsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get( "unsafe ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get( "unsafe ");	  final    Object    unsafe    =    f.get(f);    final    Object    illegal    =    f.get(f);    	compilable	  [FE]  AssertionFailedError  	105	2	replace
1095	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  }	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    unsafe    =    f.get(f.getDeclaringClass()).getDeclaringClass();    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
1096	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "class ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "class ");  f.setAccessible(true);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "class ");  f.setAccessible(true);	  Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	119	None	replace
1097	[BUG]  [BUGGY]  final  Object  unsafe  =  fs.get(f,  f.getModule());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  fs.get(f,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  fs.get(f,  f.getModule());	  final    Object    unsafe    =    f.get(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
1098	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  config.getModule());  [CE]  cannot  find  symbol  config  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  config.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  config.getModule());	  final    Object    unsafe    =    f.get(f,    f.getModule());    	non-compiled	[CE]  cannot  find  symbol  config	57	None	replace
1099	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.getModule());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f,  f.getModule());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.getModule());	  final    Object    unsafe    =    f.get(f,    f.getModule());    	non-compiled	[CE]  ';'  expected	57	None	replace
1100	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  UnsafeClass.class));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  UnsafeClass.class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class ",  UnsafeClass.class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe-class   "));    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
1101	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass());  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass());    	non-compiled	[CE]  ';'  expected	20	None	replace
1102	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass());  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass());    	non-compiled	[CE]  ';'  expected	20	None	replace
1103	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass());  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.getClass().getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass());    	non-compiled	[CE]  ';'  expected	20	None	replace
1104	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  UnsafeClass.class));  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  UnsafeClass.class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass ",  UnsafeClass.class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeclass   "));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
1105	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  false);  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  false);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName(),  false);	  final    Object    unsafe    =    f.get(f.getName(),    c);    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	106	None	replace
1106	[BUG]  [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.isInterface())  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.isInterface())  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }	  final    Object    unsafe    =    f.get(f.getClass());    Final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
1107	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.getClass();  final  Object  unsafe  =  f.get(f.getClass());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    Final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	18	None	replace
1108	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f)?  getConstructorId(f):  f.get(f.getAccessible());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f)?  getConstructorId(f):  f.get(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f)?  getConstructorId(f):  f.get(f.getAccessible());	  final    Object    unsafe    =    getConstructorId(f).get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1109	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f)?  getConstructorId(f),  f.get(f.getAccessible());  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f)?  getConstructorId(f),  f.get(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f)?  getConstructorId(f),  f.get(f.getAccessible());	  final    Object    unsafe    =    getConstructorId(f).get(f.getAccessible());    	non-compiled	[CE]  :  expected	114	None	replace
1110	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f)&&  f.get(f.getAccessible());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f)&&  f.get(f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f)&&  f.get(f.getAccessible());	  final    Object    unsafe    =    getConstructorId(f).get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1111	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.get(f.getSimpleName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getSimpleName());	  Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1112	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	39	None	replace
1113	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  }  [CE]  cannot  find  symbol  unsafe  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  unsafe	39	None	replace
1114	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.getName();  final  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getName());    final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	39	None	replace
1115	[BUG]  [BUGGY]  Object  unsafe  =  f.setAccessible(null);  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Object  unsafe  =  f.setAccessible(null);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.setAccessible(null);	  Object    unsafe    =    f.setAccessible(true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	144	None	replace
1116	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getId(),  c);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getId(),  c);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getId(),  c);	  final    Object    unsafe    =    getConstructorId(f.getId());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
1117	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "allocateInstance   ",  Class.class);  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "allocateInstance   ",  Class.class);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "allocateInstance   ",  Class.class);	  final    Object    unsafe    =    f.get(f);    Final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  'catch'  without  'try'	46	None	replace
1118	[BUG]  [BUGGY]  Preconditions.checkState(f.getName()!=  null);  Class  <?>  unsafe  =  f.get(f.getName());  [CE]  cannot  find  symbol  Preconditions  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Preconditions.checkState(f.getName()!=  null);  Class  <?>  unsafe  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Preconditions.checkState(f.getName()!=  null);  Class  <?>  unsafe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    Class    <?>    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  Preconditions	41	None	replace
1119	[BUG]  [BUGGY]  Preconditions.checkState(f.getName()  ==  null);  Class  <?>  unsafe  =  f.get(f.getName());  [CE]  cannot  find  symbol  Preconditions  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Preconditions.checkState(f.getName()  ==  null);  Class  <?>  unsafe  =  f.get(f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Preconditions.checkState(f.getName()  ==  null);  Class  <?>  unsafe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(f.getName());    Class    <?>    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  Preconditions	41	None	replace
1120	[BUG]  [BUGGY]  final  Object  unsafe  =  fs.get(unsafeClass,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  fs.get(unsafeClass,  f.getAccessible());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  fs.get(unsafeClass,  f.getAccessible());	  final    Object    unsafe    =    f.get(unsafeClass,    f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
1121	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.toString());  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.toString());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass,  f.toString());	  final    Object    unsafe    =    f.get(unsafeClass,    f.getAccessible());    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	5	None	replace
1122	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(0);  Final  Object  unsafe  =  f.get(0);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(0);  Final  Object  unsafe  =  f.get(0);  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(0);    Final  Object  unsafe  =  f.get(0);	  	non-compiled	[CE]  ';'  expected	30	None	add
1123	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  Unsafe.class));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  Unsafe.class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class ",  Unsafe.class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe-class   "));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
1124	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  c));  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  c));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ",  c));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeClass   "));    	non-compiled	[CE]  cannot  find  symbol  c	11	None	replace
1125	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ");  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ");  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass ");	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeClass   "));    	non-compiled	[CE]  	11	None	replace
1126	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getName());  [CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getName());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getName());	  final    Object    unsafe    =    f.get(f,    c.getId());    	non-compiled	[CE]  method  get  in  class  Field  cannot  be  applied  to  given  types;	90	None	replace
1127	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	147	None	replace
1128	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  [CE]  cannot  find  symbol  unsafe  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	non-compiled	[CE]  cannot  find  symbol  unsafe	147	None	replace
1129	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	non-compiled	[CE]  cannot  find  symbol  unsafe	147	None	replace
1130	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  unsafe  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	non-compiled	[CE]  cannot  find  symbol  unsafe	147	None	replace
1131	[BUG]  [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  Class  <?>  c  =  f.getDeclaredField( "  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  Class  <?>  c  =  f.getDeclaredField( "  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getClass()!=  null)  {  final  Object  unsafe  =  f.get(f.getClass()).getClass();  }  else  {  Class  <?>  c  =  f.getDeclaredField( "	  final    Object    unsafe    =    f.get(f.getClass());    final    Object    unsafe    =    f.get(f.getClass()).getClass();    	non-compiled	[CE]  unclosed  string  literal	147	None	replace
1132	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  f.class));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  f.class));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  f.class));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeAllocator   "));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
1133	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  f.type));  [CE]  type  has  private  access  in  Field  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  f.type));  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator ",  f.type));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafeAllocator   "));    	non-compiled	[CE]  type  has  private  access  in  Field	14	None	replace
1134	[BUG]  [BUGGY]  Class  <?>  f  =  f.getDeclaringClass();  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  Class  <?>  f  =  f.getDeclaringClass();  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  f  =  f.getDeclaringClass();	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    final    Object    safe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	36	None	replace
1135	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  config.getImplicitPrototype());  [CE]  cannot  find  symbol  config  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  config.getImplicitPrototype());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  config.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f,    f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  config	76	None	replace
1136	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }	  final    Object    unsafe    =    f.get(f.getName());    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	42	None	replace
1137	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  return  new  UnsafeAllocator();  }	  final    Object    unsafe    =    f.get(f.getName());    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	42	None	replace
1138	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	42	None	replace
1139	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    Object    unsafe    =    f.get(f.getName());    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	42	None	replace
1140	[BUG]  [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "un  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "un  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	if(f.getName()!=  null)  {  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "un	  final    Object    unsafe    =    f.get(f.getName());    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  unclosed  string  literal	42	None	replace
1141	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  config.getImmediateParentPointer());  [CE]  cannot  find  symbol  config  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  config.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  config.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f,    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  config	70	None	replace
1142	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  n.getImmediateParentPointer());  [CE]  cannot  find  symbol  n  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f,  n.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  n.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f,    f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  n	70	None	replace
1143	[BUG]  [BUGGY]  final  Object  unsafe  =  c.get(f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  c.get(f.getImmediateParentPointer());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  c.get(f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(c.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1144	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediatePrettyPrinter());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediatePrettyPrinter());  [BUGGY]      final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediatePrettyPrinter());	  final    Object    unsafe    =    f.get(c.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
