bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getAccessible());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getAccessible());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getAccessible());	  final    Object    unsafe    =    f.get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
2	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getAccessible());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getAccessible());	  final    Object    unsafe    =    f.get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
3	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getAccessible());  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getAccessible());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getAccessible());	  final    Object    unsafe    =    f.get(f.getAccessible());    	non-compiled	[CE]  ';'  expected	15	None	replace
4	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getAccessible());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.getAccessible());	  final    Object    unsafe    =    f.get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
5	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getAccessible());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass,  f.getAccessible());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass,  f.getAccessible());	  final    Object    unsafe    =    f.get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
6	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c.getAccessible());  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(c.getAccessible());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c.getAccessible());	  final    Object    unsafe    =    f.get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(unsafeClass);	  final    Object    unsafe    =    f.get(c);    	compilable	  [FE]  AssertionFailedError  	7	2	replace
8	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass);	  final    Object    unsafe    =    f.get(c);    	compilable	  [FE]  AssertionFailedError  	7	2	replace
9	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafe);  [CE]  variable  unsafe  might  not  have  been  initialized  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(unsafe);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafe);	  final    Object    unsafe    =    f.get(c);    	non-compiled	[CE]  variable  unsafe  might  not  have  been  initialized	7	None	replace
10	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(constructorId);  [CE]  cannot  find  symbol  constructorId  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(constructorId);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(constructorId);	  final    Object    unsafe    =    f.get(c);    	non-compiled	[CE]  cannot  find  symbol  constructorId	7	None	replace
11	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass "));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass "));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeClass "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
12	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class "));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class "));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe-class "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
13	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe_ "));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe_ "));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe_ "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
14	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator "));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator "));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeAllocator "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
15	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass "));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass "));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafeclass "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
16	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- "));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- "));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe- "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
17	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getClass());    final  Object  unsafe  =  f.get(f.getClass());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	3	None	add
18	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  Final  Object  unsafe  =  f.get(f.getClass());  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  Final  Object  unsafe  =  f.get(f.getClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getClass());    Final  Object  unsafe  =  f.get(f.getClass());	  	non-compiled	[CE]  ';'  expected	3	None	add
19	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  Class  <?>  unsafe  =  f.get(f.getClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getClass());    Class  <?>  unsafe  =  f.get(f.getClass());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	3	None	add
20	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass());  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getClass());    final  Object  unsafe  =  f.get(f.getClass()).getClass());	  	non-compiled	[CE]  ';'  expected	3	None	add
21	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  Object  unsafe  =  f.get(f.getClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getClass());    Object  unsafe  =  f.get(f.getClass());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	3	None	add
22	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  final  Object  safe  =  f.get(f.getClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getClass());    final  Object  safe  =  f.get(f.getClass());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	3	None	add
23	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getConstructorId();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafeClass  =  f.getConstructorId();  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getConstructorId();	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
24	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafeClass  =  getConstructorId();  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId();	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
25	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
26	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ");  f.setAccessible(true);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ");  f.setAccessible(true);	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
27	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ");	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
28	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ");	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
29	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "sun.misc.Unsafe ");	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(0);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(0);	  final    Object    unsafe    =    f.get(f);    	compilable	  [FE]  AssertionFailedError  	2	2	replace
31	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(0);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(0);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(0);	  final    Object    unsafe    =    f.get(f);    	compilable	  [FE]  AssertionFailedError  	2	2	replace
32	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getDeclaringClass());    final  Object  unsafe  =  f.get(f.getDeclaringClass());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	10	None	add
33	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Final  Object  unsafe  =  f.get(f.getDeclaringClass());  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Final  Object  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getDeclaringClass());    Final  Object  unsafe  =  f.get(f.getDeclaringClass());	  	non-compiled	[CE]  ';'  expected	10	None	add
34	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Class  <?>  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getDeclaringClass());    Class  <?>  unsafe  =  f.get(f.getDeclaringClass());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	10	None	add
35	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  Object  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getDeclaringClass());    Object  unsafe  =  f.get(f.getDeclaringClass());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	10	None	add
36	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  safe  =  f.get(f.getDeclaringClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getDeclaringClass());    final  Object  safe  =  f.get(f.getDeclaringClass());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	10	None	add
37	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  static  final  Object  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getDeclaringClass());    static  final  Object  unsafe  =  f.get(f.getDeclaringClass());	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
38	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  dangerous  =  f.get(f.getDeclaringClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getDeclaringClass());    final  Object  dangerous  =  f.get(f.getDeclaringClass());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	10	None	add
39	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  final  Object  unsafe  =  f.get(f.getName());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName());    final  Object  unsafe  =  f.get(f.getName());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	5	None	add
40	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  Final  Object  unsafe  =  f.get(f.getName());  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  Final  Object  unsafe  =  f.get(f.getName());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName());    Final  Object  unsafe  =  f.get(f.getName());	  	non-compiled	[CE]  ';'  expected	5	None	add
41	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  Class  <?>  unsafe  =  f.get(f.getName());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName());    Class  <?>  unsafe  =  f.get(f.getName());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	5	None	add
42	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  Object  unsafe  =  f.get(f.getName());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName());    Object  unsafe  =  f.get(f.getName());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	5	None	add
43	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  final  Object  safe  =  f.get(f.getName());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName());    final  Object  safe  =  f.get(f.getName());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	5	None	add
44	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  final  Object  dangerous  =  f.get(f.getName());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName());    final  Object  dangerous  =  f.get(f.getName());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	5	None	add
45	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f);    final  Object  unsafe  =  f.get(f);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	1	None	add
46	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  Final  Object  unsafe  =  f.get(f);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f);  Final  Object  unsafe  =  f.get(f);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f);    Final  Object  unsafe  =  f.get(f);	  	non-compiled	[CE]  ';'  expected	1	None	add
47	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f);  Class  <?>  unsafe  =  f.get(f);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f);    Class  <?>  unsafe  =  f.get(f);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	1	None	add
48	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f);  Object  unsafe  =  f.get(f);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f);    Object  unsafe  =  f.get(f);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	1	None	add
49	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f);  static  final  Object  unsafe  =  f.get(f);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f);    static  final  Object  unsafe  =  f.get(f);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
50	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  final  Object  safe  =  f.get(f);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f);  final  Object  safe  =  f.get(f);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f);    final  Object  safe  =  f.get(f);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	1	None	add
51	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  final  Object  dangerous  =  f.get(f);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f);  final  Object  dangerous  =  f.get(f);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f);    final  Object  dangerous  =  f.get(f);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	1	None	add
52	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getReturnType());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getReturnType());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getReturnType());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
53	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getRawClass());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getRawClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getRawClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
54	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getDeclaringClass());  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafe  =  f.get(f.getDeclaringClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getDeclaringClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	11	None	replace
55	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getInitializingClass());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getInitializingClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getInitializingClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
56	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getAssignedClass());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getAssignedClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getAssignedClass());	  final    Object    unsafe    =    f.get(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
57	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getModule());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getModule());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getModule());	  final    Object    unsafe    =    f.get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
58	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getModule());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getModule());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getModule());	  final    Object    unsafe    =    f.get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
59	[BUG]  [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getModule());  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f,  f.get(f.getModule());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f,  f.get(f.getModule());	  final    Object    unsafe    =    f.get(f.getModule());    	non-compiled	[CE]  ';'  expected	14	None	replace
60	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c.getModule());  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(c.getModule());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c.getModule());	  final    Object    unsafe    =    f.get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol  c	14	None	replace
61	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getModule());  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getModule());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  c.getModule());	  final    Object    unsafe    =    f.get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol  c	14	None	replace
62	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getModule(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getModule(),  unsafeClass);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getModule(),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
63	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredClass());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredClass());	  final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
64	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getClass());  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafe  =  f.get(f.getClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(f.getClass());    	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	4	None	replace
65	[BUG]  [BUGGY]  Object  unsafe  =  f.get(c);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafe  =  f.get(c);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(c);	  Object    unsafe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  c	17	None	replace
66	[BUG]  [BUGGY]  Object  unsafe  =  f.get(unsafeClass);  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafe  =  f.get(unsafeClass);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(unsafeClass);	  Object    unsafe    =    f.get(f);    	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	17	None	replace
67	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getName());  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafe  =  f.get(f.getName());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f.getName());	  Object    unsafe    =    f.get(f);    	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	17	None	replace
68	[BUG]  [BUGGY]  Object  unsafe  =  f.get(null);  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafe  =  f.get(null);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(null);	  Object    unsafe    =    f.get(f);    	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	17	None	replace
69	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getImmediateParentPointer());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
70	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getImmediateParentPointer());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
71	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c.getImmediateParentPointer());  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(c.getImmediateParentPointer());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  c	18	None	replace
72	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getImmediateParentPointer());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
73	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getImmediateParentPointer());  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getImmediateParentPointer());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  c.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol  c	18	None	replace
74	[BUG]  [BUGGY]  final  Object  unsafe  =  this.f.get(f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  this.f.get(f.getImmediateParentPointer());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  this.f.get(f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
75	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getImplicitPrototype());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
76	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getImplicitPrototype());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
77	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c.getImplicitPrototype());  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(c.getImplicitPrototype());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
78	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getImplicitPrototype());  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getImplicitPrototype());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  c.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
79	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype()).getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype()).getImplicitPrototype();  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitPrototype()).getImplicitPrototype();	  final    Object    unsafe    =    f.get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
80	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype()));  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype()));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImplicitPrototype()));	  final    Object    unsafe    =    f.get(f.getImplicitPrototype());    	non-compiled	[CE]  ';'  expected	8	None	replace
81	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe "));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe "));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "sun.safe "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
82	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe "));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe "));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "this.safe "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
83	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class "));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class "));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe-class "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
84	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass "));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass "));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safeClass "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
85	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  false));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  false));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  false));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
86	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getId());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass.getId());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(unsafeClass.getId());	  final    Object    unsafe    =    f.get(f.getId());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
87	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c.getId());  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(c.getId());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c.getId());	  final    Object    unsafe    =    f.get(f.getId());    	non-compiled	[CE]  cannot  find  symbol  c	16	None	replace
88	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getId());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f,  f.getId());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  f.getId());	  final    Object    unsafe    =    f.get(f.getId());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
89	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getId());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(null,  f.getId());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(null,  f.getId());	  final    Object    unsafe    =    f.get(f.getId());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
90	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getId());  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f,  c.getId());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f,  c.getId());	  final    Object    unsafe    =    f.get(f.getId());    	non-compiled	[CE]  cannot  find  symbol  c	16	None	replace
91	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(this.f.getId());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(this.f.getId());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(this.f.getId());	  final    Object    unsafe    =    f.get(f.getId());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	16	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  + ": ");  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	add	final  Object  unsafe  =  f.get(f.getName()  + ": ");	  final    Object    unsafe    =    f.get(f.getName());    	compilable	  [FE]  AssertionFailedError  	6	2	replace
93	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  + ": ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getName()  + ": ");  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName()  + ": ");	  final    Object    unsafe    =    f.get(f.getName());    	compilable	  [FE]  AssertionFailedError  	6	2	replace
94	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getQualifiedName());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getQualifiedName());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getQualifiedName());	  final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
95	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c.getName());  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(c.getName());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(c.getName());	  final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  c	6	None	replace
96	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getModule());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getModule());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f.getModule());	  final    Object    unsafe    =    f.get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
97	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f.getModule());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.find(f.getModule());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f.getModule());	  final    Object    unsafe    =    f.get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
98	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getModule());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getModule());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getModule());	  final    Object    unsafe    =    f.get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
99	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer()).getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer()).getImmediateParentPointer();  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer()).getImmediateParentPointer();	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
100	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
101	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId(f);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafe  =  getConstructorId(f);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  getConstructorId(f);	  Object    unsafe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
102	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f).getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafe  =  f.get(f).getImplicitPrototype();  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(f).getImplicitPrototype();	  Object    unsafe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
103	[BUG]  [BUGGY]  Object  safe  =  f.get(f);  [CE]  cannot  find  symbol  unsafe  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  safe  =  f.get(f);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  safe  =  f.get(f);	  Object    unsafe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol  unsafe	17	None	replace
104	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  final  Object  illegal  =  f.get(f.getName());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getName());    final  Object  illegal  =  f.get(f.getName());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	5	None	add
105	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  final  Object  illegal  =  f.get(f);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f);  final  Object  illegal  =  f.get(f);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f);    final  Object  illegal  =  f.get(f);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	1	None	add
106	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  c);  [CE]  cannot  find  symbol  c  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getName(),  c);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getName(),  c);	  final    Object    unsafe    =    f.get(f.getName());    	non-compiled	[CE]  cannot  find  symbol  c	6	None	replace
107	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  illegal  =  f.get(f.getDeclaringClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  illegal  =  f.get(f.getDeclaringClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getDeclaringClass());    final  Object  illegal  =  f.get(f.getDeclaringClass());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	10	None	add
108	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  getConstructorId(f);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f);	  final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
109	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getImplicitPrototype());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
110	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  getConstructorId().get(f.getImplicitPrototype());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId().get(f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
111	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
112	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  final  Object  dangerous  =  f.get(f.getClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getClass());    final  Object  dangerous  =  f.get(f.getClass());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	3	None	add
113	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  final  Object  illegal  =  f.get(f.getClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getClass());    final  Object  illegal  =  f.get(f.getClass());	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	3	None	add
114	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getAccessible());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  getConstructorId(f).get(f.getAccessible());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f).get(f.getAccessible());	  final    Object    unsafe    =    f.get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
115	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getAccessible());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getAccessible());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getAccessible());	  final    Object    unsafe    =    f.get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
116	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(safeClass.getAccessible());  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(safeClass.getAccessible());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(safeClass.getAccessible());	  final    Object    unsafe    =    f.get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  safeClass	15	None	replace
117	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(safeClass);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(safeClass);	  final    Object    unsafe    =    f.get(c);    	non-compiled	[CE]  cannot  find  symbol  safeClass	7	None	replace
118	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafeClass  =  getConstructorId(f);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f);	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
119	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
120	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
121	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
122	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getName());  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafeClass  =  getConstructorId(f.getName());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  getConstructorId(f.getName());	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
123	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getId());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  getConstructorId(f.getId());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  getConstructorId(f.getId());	  final    Object    unsafe    =    f.get(f.getId());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
124	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  null));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  null));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  null));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
125	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe   "),  unsafeClass);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe   "),  unsafeClass);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe   "),  unsafeClass);	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
126	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getAccessible());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.remove(f.getAccessible());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getAccessible());	  final    Object    unsafe    =    f.get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
127	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(this.f.getAccessible());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(this.f.getAccessible());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(this.f.getAccessible());	  final    Object    unsafe    =    f.get(f.getAccessible());    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	15	None	replace
128	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f.getAccessible());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.find(f.getAccessible());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f.getAccessible());	  final    Object    unsafe    =    f.get(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
129	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.setImplicitPrototype(f.getImplicitPrototype());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImplicitPrototype(f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
130	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.remove(f.getImplicitPrototype());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
131	[BUG]  [BUGGY]  final  Object  unsafe  =  f.find(f.getImplicitPrototype());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.find(f.getImplicitPrototype());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.find(f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(f.getImplicitPrototype());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
132	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getDeclaringClass());    final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass());	  	non-compiled	[CE]  ';'  expected	10	None	add
133	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaringClass());  final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getDeclaringClass());    final  Object  unsafe  =  f.get(f.getDeclaringClass()).getDeclaringClass();	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	10	None	add
134	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getId());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.remove(f.getId());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getId());	  final    Object    unsafe    =    f.get(f.getId());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
135	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  c));  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  c));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe ",  c));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   "));    	non-compiled	[CE]  cannot  find  symbol  c	13	None	replace
136	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe_ "));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe_ "));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe_ "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
137	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe- "));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe- "));  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe- "));	  final    Object    unsafe    =    f.get(f.getDeclaredField(   "safe   "));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
138	[BUG]  [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
139	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getModule());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.remove(f.getModule());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getModule());	  final    Object    unsafe    =    f.get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
140	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setModule(f.getModule());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.setModule(f.getModule());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setModule(f.getModule());	  final    Object    unsafe    =    f.get(f.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
141	[BUG]  [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.setImmediateParentPointer(f.getImmediateParentPointer());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.setImmediateParentPointer(f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
142	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  f.getImmediateParentPointer());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.get(f.getImmediateParentPointer(),  f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
143	[BUG]  [BUGGY]  final  Object  unsafe  =  f.remove(f.getImmediateParentPointer());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.remove(f.getImmediateParentPointer());  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.remove(f.getImmediateParentPointer());	  final    Object    unsafe    =    f.get(f.getImmediateParentPointer());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
144	[BUG]  [BUGGY]  Object  unsafe  =  f.setAccessible(true);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafe  =  f.setAccessible(true);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.setAccessible(true);	  Object    unsafe    =    f.get(f);    	non-compiled	[CE]  incompatible  types	17	None	replace
145	[BUG]  [BUGGY]  Object  unsafe  =  f.newInstance();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafe  =  f.newInstance();  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.newInstance();	  Object    unsafe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
146	[BUG]  [BUGGY]  Object  unsafe  =  f.get(unsafe);  [CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  Object  unsafe  =  f.get(unsafe);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	Object  unsafe  =  f.get(unsafe);	  Object    unsafe    =    f.get(f);    	non-compiled	[CE]  local  variable  unsafe  is  accessed  from  within  inner  class;  needs  to  be  declared  final	17	None	replace
147	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  final  Object  unsafe  =  f.get(f.getClass()).getClass();  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f.getClass());    final  Object  unsafe  =  f.get(f.getClass()).getClass();	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	3	None	add
148	[BUG]  [BUGGY]  final  Object  unsafe  =  f.newInstance();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.newInstance();  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final  Object  unsafe  =  f.newInstance();	  final    Object    unsafe    =    f.get(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
149	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);    [BUGGY]  final  Object  unsafe  =  f.get(f);  final  Object  unsafe  =  f.get(f).get(f);  [BUGGY]    final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	42	42	2	replace	final    Object    unsafe    =    f.get(f);    final  Object  unsafe  =  f.get(f).get(f);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	1	None	add
